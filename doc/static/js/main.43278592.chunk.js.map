{"version":3,"sources":["component/draw/lib/drawer.ts","component/draw/DrawDisplay.tsx","component/draw/DrawInput.tsx","component/draw/lib/DrawState.ts","component/draw/Draw.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Drawer","context","points","point","this","push","lineWidth","beginPath","moveTo","x","y","stroke","toP","color","fromP","slice","length","xc","yc","strokeStyle","lineCap","lineJoin","quadraticCurveTo","pressure","Math","log","Drawdisplay","drawState","width","height","canvasEl","useRef","useEffect","current","addEventListener","e","preventDefault","passive","ctx","getContext","clearRect","getValidStrokes","forEach","drawer","clonedPs","firstP","shift","drawBegin","p","drawCurve","drawPoints","console","timeEnd","ref","Drawinput","setDrawState","method","finger","even","clientWidth","clientHeight","minX","minY","maxX","maxY","useState","isDrawing","setIsDrawing","getPosition","clientX","clientY","floor","max","min","ceil","updateClientSize","handleEnd","time","updateInput","imageData","getImageData","prev","requestAnimationFrame","onTouchStart","touch","touches","touchType","force","newP","computeLineWidth","onMouseDown","onTouchMove","onMouseMove","onTouchEnd","onMouseUp","onMouseLeave","defaultRecord","state","strokes","List","uidStack","undoStack","OrderedSet","eraseStack","deleted","Set","position","defaultFactory","Record","DrawState","immutable","getImmutable","get","getDeleted","undo","getUndoStack","getEraseStack","filter","uid","has","erase","getValidEraseStack","getStrokes","some","s","erased","getUidStack","last","set","update","add","pop","butLast","cid","getUid","pushedState","mergeUndo","d","concat","fullWidth","buffer","data","Array","i","Boolean","r","c","ii","updatePosition","getErasedStrokes","drawStateRecord","Draw","onChange","erasing","eraseStrokes","pushStroke","App","createEmpty","setErasing","setEven","setLineWidth","style","top","left","onClick","redo","type","checked","target","value","parseInt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43278592.chunk.js","sourcesContent":["import { Point } from \"./draw\";\n\nexport class Drawer {\n  public points: Point[] = [];\n\n  constructor(private context: CanvasRenderingContext2D) {}\n  drawBegin(point: Point) {\n    this.points.push(point);\n    this.context.lineWidth = point.lineWidth;\n    // content.strokeStyle = point.color;\n    this.context.beginPath();\n    this.context.moveTo(point.x, point.y);\n    this.context.stroke();\n  }\n  drawCurve(toP: Point, color = \"black\") {\n    const fromP = this.points.slice(-1)[0];\n    this.points.push(toP);\n    if (this.points.length < 3) return;\n\n    const xc = (toP.x + fromP.x) / 2;\n    const yc = (toP.y + fromP.y) / 2;\n    this.context.strokeStyle = color;\n    this.context.lineCap = \"round\";\n    this.context.lineJoin = \"round\";\n    this.context.lineWidth = fromP.lineWidth;\n    this.context.quadraticCurveTo(fromP.x, fromP.y, xc, yc);\n    this.context.stroke();\n    this.context.beginPath();\n    this.context.moveTo(xc, yc);\n  }\n  computeLineWidth(pressure: number) {\n    return (\n      Math.log(pressure + 1) * 5 +\n      (this.points.slice(-1)[0]?.lineWidth || 0) * 0.8\n    );\n  }\n}\n\nexport function drawPoints(context: CanvasRenderingContext2D, points: Point[], color = 'black') {\n  const drawer = new Drawer(context);\n  const clonedPs = points.slice();\n  const firstP = clonedPs.shift();\n  if (!firstP) return;\n  drawer.drawBegin(firstP);\n  clonedPs.forEach((p) => void drawer.drawCurve(p, color));\n}\n","import React, { useEffect, useRef } from \"react\";\nimport \"./draw.css\";\nimport { drawPoints } from \"./lib/drawer\";\nimport { DrawState } from \"./lib/DrawState\";\n\nexport default function Drawdisplay({\n  drawState,\n  width,\n  height,\n}: {\n  drawState: DrawState;\n  width: number;\n  height: number;\n}) {\n  const canvasEl = useRef<HTMLCanvasElement>(null);\n  const context = useRef<CanvasRenderingContext2D>();\n\n  useEffect(() => {\n    if (!canvasEl.current) return;\n    canvasEl.current.addEventListener(\n      \"touchstart\",\n      (e) => {\n        e.preventDefault();\n      },\n      { passive: false }\n    );\n\n    const ctx = canvasEl.current.getContext(\"2d\");\n    if (!ctx) return;\n    context.current = ctx;\n  }, []);\n\n  useEffect(() => {\n    context.current?.clearRect(0, 0, width, height);\n\n    drawState.getValidStrokes().forEach((stroke) => {\n      if (!context.current) return;\n      drawPoints(context.current, stroke.points);\n    });\n    console.timeEnd('stroke');\n  });\n\n  return <canvas width={width} height={height} ref={canvasEl} />;\n}\n","import React, {\n  MouseEvent,\n  TouchEvent,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport \"./draw.css\";\nimport { iOSTouch } from \"./lib/draw\";\nimport { Drawer } from \"./lib/drawer\";\nimport { DrawStateMethod, SetDrawState } from \"./lib/DrawState\";\n\nexport default function Drawinput({\n  setDrawState,\n  method,\n  finger,\n  even,\n  lineWidth,\n  width,\n  height,\n}: {\n  setDrawState: SetDrawState;\n  method: DrawStateMethod;\n  finger: boolean;\n  even: boolean;\n  lineWidth: number;\n  width: number;\n  height: number;\n}) {\n  const canvasEl = useRef<HTMLCanvasElement>(null);\n  const context = useRef<CanvasRenderingContext2D>();\n  const clientWidth = useRef(width);\n  const clientHeight = useRef(height);\n  let [minX, minY, maxX, maxY] = [width, height, 0, 0];\n\n  const [isDrawing, setIsDrawing] = useState(false);\n  const drawer = useRef<Drawer>();\n\n  useEffect(() => {\n    if (!canvasEl.current) return;\n    canvasEl.current.addEventListener(\n      \"touchstart\",\n      (e) => {\n        e.preventDefault();\n      },\n      { passive: false }\n    );\n\n    const ctx = canvasEl.current.getContext(\"2d\");\n    if (!ctx) return;\n    context.current = ctx;\n    updateClientSize();\n  }, []);\n\n  useEffect(() => {\n    if (isDrawing === false) {\n      context.current?.clearRect(0, 0, width, height);\n    }\n  }, [isDrawing, width, height]);\n\n  function getPosition(\n    e: iOSTouch | MouseEvent<HTMLCanvasElement>\n  ): [number, number] {\n    const x = (e.clientX / clientWidth.current) * width;\n    const y = (e.clientY / clientHeight.current) * height;\n    [minX, minY, maxX, maxY] = [\n      Math.floor(Math.max(Math.min(minX, x - lineWidth), 0)),\n      Math.floor(Math.max(Math.min(minY, y - lineWidth), 0)),\n      Math.ceil(Math.min(Math.max(maxX, x + lineWidth), width)),\n      Math.ceil(Math.min(Math.max(maxY, y + lineWidth), height)),\n    ];\n    return [x, y];\n  }\n\n  function updateClientSize() {\n    if (!canvasEl.current) return;\n    clientWidth.current = canvasEl.current.clientWidth;\n    clientHeight.current = canvasEl.current.clientHeight;\n  }\n\n  function handleTouchStart(e: TouchEvent<HTMLCanvasElement>) {\n    if (!context.current) return;\n\n    setIsDrawing(true);\n    updateClientSize();\n\n    drawer.current = new Drawer(context.current);\n\n    const touch = e.touches[0] as iOSTouch;\n    if (!finger && touch.touchType === \"direct\") {\n      return;\n    }\n    const pressure = (touch.force || 0) * lineWidth;\n    const [x, y] = getPosition(touch);\n    const lineWidth_ = even\n      ? lineWidth\n      : drawer.current.computeLineWidth(pressure);\n\n    const newP = {\n      x,\n      y,\n      lineWidth: lineWidth_,\n    };\n\n    drawer.current.drawBegin(newP);\n  }\n\n  function handleMouseStart(e: MouseEvent<HTMLCanvasElement>) {\n    if (!context.current) return;\n\n    setIsDrawing(true);\n    updateClientSize();\n\n    const [x, y] = getPosition(e);\n\n    drawer.current = new Drawer(context.current);\n    const newP = { x, y, lineWidth };\n    drawer.current.drawBegin(newP);\n  }\n\n  function handleTouchMove(e: TouchEvent<HTMLCanvasElement>) {\n    if (!isDrawing || !drawer.current) return;\n\n    const touch = e.touches[0] as iOSTouch;\n    if (!finger && touch.touchType === \"direct\") {\n      return;\n    }\n    const pressure = (touch.force || 0) * lineWidth;\n    const [x, y] = getPosition(touch);\n\n    const lineWidth_ = even\n      ? lineWidth\n      : drawer.current.computeLineWidth(pressure);\n\n    const newP = {\n      x,\n      y,\n      lineWidth: lineWidth_,\n    };\n    drawer.current.drawCurve(newP);\n  }\n\n  function handleMouseMove(e: MouseEvent<HTMLCanvasElement>) {\n    if (!isDrawing || !drawer.current) return;\n\n    const [x, y] = getPosition(e);\n    const newP = { x, y, lineWidth };\n    drawer.current.drawCurve(newP);\n  }\n\n  function handleEnd() {\n    const ctx = context.current;\n    if (!isDrawing || !drawer.current || !ctx) return;\n\n    const points = drawer.current.points;\n\n    console.time(\"stroke\");\n\n    const updateInput = () => {\n      const imageData = ctx.getImageData(minX, minY, maxX - minX, maxY - minY);\n      setDrawState((prev) =>\n        method(prev, { imageData, minX, minY, maxX, maxY }, points)\n      );\n      setIsDrawing(false);\n    };\n\n    requestAnimationFrame(() => {\n      requestAnimationFrame(updateInput);\n    });\n  }\n\n  return (\n    <canvas\n      width={width}\n      height={height}\n      ref={canvasEl}\n      onTouchStart={handleTouchStart}\n      onMouseDown={handleMouseStart}\n      onTouchMove={handleTouchMove}\n      onMouseMove={handleMouseMove}\n      onTouchEnd={handleEnd}\n      onMouseUp={handleEnd}\n      onMouseLeave={handleEnd}\n    />\n  );\n}\n","import { List, OrderedSet, Record, Set } from \"immutable\";\nimport { Dispatch, SetStateAction } from \"react\";\nimport { Point } from \"./draw\";\nimport { v4 as getUid } from \"uuid\";\n\ntype DrawStateRecordType = {\n  state: \"drawing\" | \"revoking\";\n  strokes: List<{\n    uid: string;\n    points: Point[];\n  }>;\n  uidStack: List<string>;\n  undoStack: OrderedSet<string>;\n  eraseStack: List<{\n    uid: string;\n    erased: Set<string>;\n  }>;\n  deleted: Set<string>;\n  position: List<Set<string>>;\n};\n\ntype DrawStateRecord = Record<DrawStateRecordType>;\n\nconst defaultRecord: Readonly<DrawStateRecordType> = {\n  state: \"drawing\",\n  strokes: List(),\n  uidStack: List(),\n  undoStack: OrderedSet(),\n  eraseStack: List(),\n  deleted: Set(),\n  position: List<Set<string>>(),\n};\n\nconst defaultFactory = Record(defaultRecord);\n\nexport class DrawState {\n  constructor(\n    private immutable: DrawStateRecord,\n    private width: number,\n    private height: number\n  ) {}\n\n  getImmutable() {\n    return this.immutable;\n  }\n\n  getUidStack() {\n    return this.getImmutable().get(\"uidStack\");\n  }\n\n  getUndoStack() {\n    return this.getImmutable().get(\"undoStack\");\n  }\n\n  getEraseStack() {\n    return this.getImmutable().get(\"eraseStack\");\n  }\n\n  getValidEraseStack() {\n    const deleted = this.getDeleted();\n    const undo = this.getUndoStack();\n    return this.getEraseStack().filter(\n      ({ uid }) => !deleted.has(uid) && !undo.has(uid)\n    );\n  }\n\n  getStrokes() {\n    return this.getImmutable().get(\"strokes\");\n  }\n\n  getValidStrokes() {\n    const deleted = this.getDeleted();\n    const undo = this.getUndoStack();\n    const erase = this.getValidEraseStack();\n    return this.getStrokes().filter(\n      ({ uid }) =>\n        !deleted.has(uid) &&\n        !undo.has(uid) &&\n        !erase.some((s) => s.erased.has(uid))\n    );\n  }\n\n  getDeleted() {\n    return this.getImmutable().get(\"deleted\");\n  }\n\n  getState() {\n    return this.getImmutable().get(\"state\");\n  }\n\n  getPosition() {\n    return this.getImmutable().get(\"position\");\n  }\n\n  static createEmpty(width: number, height: number) {\n    return new DrawState(defaultFactory(), width, height);\n  }\n\n  static undo(drawState: DrawState) {\n    const uid = drawState.getUidStack().last();\n\n    if (!uid) {\n      return drawState;\n    }\n\n    return new DrawState(\n      drawState\n        .getImmutable()\n        .set(\"state\", \"revoking\")\n        .update(\"undoStack\", (s) => s.add(uid))\n        .update(\"uidStack\", (s) => s.pop()),\n      drawState.width,\n      drawState.height\n    );\n  }\n\n  static redo(drawState: DrawState) {\n    const undo = drawState.getUndoStack();\n    const uid = undo.last();\n    if (!uid) return drawState;\n    return new DrawState(\n      drawState\n        .getImmutable()\n        .update(\"undoStack\", (s) => s.butLast())\n        .update(\"uidStack\", (s) => s.push(uid)),\n      drawState.width,\n      drawState.height\n    );\n  }\n\n  static pushStroke(drawState: DrawState, cid: cutImageData, points: Point[]) {\n    const uid = getUid();\n    const undo = drawState.getUndoStack();\n\n    const pushedState = mergeUndo(\n      drawState\n        .getImmutable()\n        .set(\"state\", \"drawing\")\n        .update(\"deleted\", (d) => d.concat(undo))\n        .set(\"undoStack\", OrderedSet())\n        .update(\"strokes\", (s) => s.push({ uid, points }))\n        .update(\"uidStack\", (s) => s.push(uid))\n    );\n\n    let position = drawState.getPosition();\n    position = updatePosition(position, cid, uid, drawState.width);\n\n    return new DrawState(\n      pushedState.set(\"position\", position),\n      drawState.width,\n      drawState.height\n    );\n  }\n\n  static eraseStrokes(drawState: DrawState, cid: cutImageData) {\n    const position = drawState.getPosition();\n    if (!position) {\n      return drawState;\n    }\n\n    const uid = getUid();\n    const erased = getErasedStrokes(position, cid, drawState.width);\n\n    return new DrawState(\n      mergeUndo(\n        drawState\n          .getImmutable()\n          .update(\"eraseStack\", (s) => s.push({ uid, erased }))\n          .update(\"uidStack\", (s) => s.push(uid))\n      ),\n      drawState.width,\n      drawState.height\n    );\n  }\n}\n\nfunction mergeUndo(drawStateRecord: DrawStateRecord) {\n  const undo = drawStateRecord.get(\"undoStack\");\n  return drawStateRecord\n    .update(\"deleted\", (d) => d.concat(undo))\n    .set(\"undoStack\", OrderedSet())\n    .update(\"uidStack\", (s) => s.filter((uid) => !undo.has(uid)));\n}\n\ntype cutImageData = {\n  imageData: ImageData;\n  minX: number;\n  minY: number;\n  maxX: number;\n  maxY: number;\n};\n\nfunction updatePosition(\n  position: List<Set<string>>,\n  cid: cutImageData,\n  uid: string,\n  fullWidth: number\n) {\n  const {\n    imageData: { data: buffer, width, height },\n    minX,\n    minY,\n  } = cid;\n  const data = new Array(width * height);\n\n  for (let i = 0; i < buffer.length; i += 4) {\n    data[i / 4] = Boolean(\n      buffer[i] + buffer[i + 1] + buffer[i + 2] + buffer[i + 3]\n    );\n  }\n\n  for (let r = 0; r < height; r++) {\n    for (let c = 0; c < width; c++) {\n      const i = r * width + c;\n      const ii = (r + minY) * fullWidth + c + minX;\n      if (data[i]) {\n        position = position.update(ii, Set(), (s) => (s || Set()).add(uid));\n      }\n    }\n  }\n\n  return position;\n}\n\nfunction getErasedStrokes(\n  position: List<Set<string>>,\n  cid: cutImageData,\n  fullWidth: number\n) {\n  const {\n    imageData: { data: buffer, width, height },\n    minX,\n    minY,\n  } = cid;\n  let erased = Set<string>();\n  const data = new Array(width * height);\n\n  for (let i = 0; i < buffer.length; i += 4) {\n    data[i / 4] = Boolean(\n      buffer[i] + buffer[i + 1] + buffer[i + 2] + buffer[i + 3]\n    );\n  }\n\n  for (let r = 0; r < height; r++) {\n    for (let c = 0; c < width; c++) {\n      const i = r * width + c;\n      const ii = (r + minY) * fullWidth + c + minX;\n      if (data[i]) {\n        erased = erased.concat(position.get(ii) || Set());\n      }\n    }\n  }\n  return erased;\n}\n\nexport type SetDrawState = Dispatch<SetStateAction<DrawState>>;\n\nexport type DrawStateMethod = (\n  drawState: DrawState,\n  cid: cutImageData,\n  points: Point[]\n) => DrawState;\n","import Drawdisplay from \"./DrawDisplay\";\nimport Drawinput from \"./DrawInput\";\nimport { DrawState, SetDrawState } from \"./lib/DrawState\";\n\nexport default function Draw({\n  drawState,\n  onChange,\n  erasing = false,\n  finger = false,\n  even = true,\n  lineWidth = 10,\n  width = 100,\n  height = 100,\n}: {\n  drawState: DrawState;\n  onChange: SetDrawState;\n  erasing?: boolean;\n  finger?: boolean;\n  even?: boolean;\n  lineWidth?: number;\n  width?: number;\n  height?: number;\n}) {\n  const method = erasing ? DrawState.eraseStrokes : DrawState.pushStroke;\n\n  return (\n    <>\n      <Drawdisplay width={width} height={height} drawState={drawState} />\n      <Drawinput\n        method={method}\n        width={width}\n        height={height}\n        finger={finger}\n        even={even}\n        lineWidth={lineWidth}\n        setDrawState={onChange}\n      />\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Draw from \"./component/draw/Draw\";\nimport { DrawState } from \"./component/draw/lib/DrawState\";\n\nconst width = 2000;\nconst height = 2000;\n\nfunction App() {\n  const [drawState, setDrawState] = useState<DrawState>(() =>\n    DrawState.createEmpty(width, height)\n  );\n  const [erasing, setErasing] = useState(false);\n  const [even, setEven] = useState(true);\n  const [lineWidth, setLineWidth] = useState(20);\n\n  function undo() {\n    setDrawState(DrawState.undo(drawState));\n  }\n\n  function redo() {\n    setDrawState(DrawState.redo(drawState));\n  }\n\n  return (\n    <>\n      <Draw\n        width={width}\n        height={height}\n        drawState={drawState}\n        onChange={setDrawState}\n        erasing={erasing}\n        even={even}\n        lineWidth={lineWidth}\n      />\n      <div\n        style={{\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n        }}\n      >\n        <button onClick={undo}>undo</button>\n        <button onClick={redo}>redo</button>\n        <span>\n          <input\n            type=\"checkbox\"\n            checked={erasing}\n            onChange={(e) => void setErasing(e.target.checked)}\n          />\n          <label>eraser</label>\n        </span>\n        <span>\n          <input\n            type=\"checkbox\"\n            checked={even}\n            onChange={(e) => void setEven(e.target.checked)}\n          />\n          <label>even</label>\n        </span>\n        <input\n          type=\"number\"\n          value={lineWidth}\n          onChange={(e) => void setLineWidth(parseInt(e.target.value, 10) || 0)}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}