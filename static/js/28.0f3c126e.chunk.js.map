{"version":3,"file":"static/js/28.0f3c126e.chunk.js","mappings":"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","sources":["component/IconFont.tsx","component/Draw/cursor/cursor.ts","component/Draw/touch.ts","component/Draw/grid.tsx","component/Draw/Draw.tsx","pages/reader/tools/DrawTools.tsx","component/PageWrapper/PageWrapper.tsx","component/PageWrapper/index.tsx","lib/draw/DrawCtrl.tsx","lib/draw/canvas.ts","pages/reader/tools/PenPanel.tsx"],"sourcesContent":["import { createFromIconfontCN } from \"@ant-design/icons\";\n\nexport default createFromIconfontCN({\n  scriptUrl: \"//at.alicdn.com/t/c/font_3181679_61bmx4utsp.js\",\n});\n","import { createVirtualCanvas } from \"lib/draw/canvas\";\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport rotateImg2x from \"./rotate2x.png\";\nimport rotateImg1x from \"./rotate1x.png\";\n\nexport const getCircleCursor = (drawCtrl: DrawCtrl, ratio: number) => {\n  const { lineWidth, eraserWidth, mode } = drawCtrl;\n  const size = ratio * (mode === \"erase\" ? eraserWidth : lineWidth);\n  if (size < 5) return \"crosshair\";\n  const half = size / 2;\n  const double = size * 2;\n\n  const getSvg = (size: number) =>\n    `data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23DDD7\" width=\"${size}\" height=\"${size}\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"5\"/></svg>`;\n\n  const img1x = getSvg(size);\n  const img2x = getSvg(double);\n\n  return `-webkit-image-set(url('${img1x}')1x, url('${img2x}')2x) ${half} ${half}, crosshair`;\n};\n\nconst rotateCursorFactory = (src: string, size: number) => {\n  const cache = new Map<number, string>();\n  const half = size / 2;\n  const { canvas, context } = createVirtualCanvas(size, size);\n  const image = new Image();\n  image.src = src;\n  return (angle: number) => {\n    angle = Math.round(angle / 10) * 10;\n    const cached = cache.get(angle);\n    if (cached) return cached;\n    context.translate(half, half);\n    context.rotate((angle * Math.PI) / 180);\n    context.drawImage(image, -half, -half);\n    const data = canvas.toDataURL();\n    context.clearRect(-half, -half, size, size);\n    context.resetTransform();\n    cache.set(angle, data);\n    return data;\n  };\n};\n\nconst getRotateCursor1x = rotateCursorFactory(rotateImg1x, 32);\nconst getRotateCursor2x = rotateCursorFactory(rotateImg2x, 64);\n\nexport const getRotateCurcor = (angle: number) => {\n  const data1x = getRotateCursor1x(angle);\n  const data2x = getRotateCursor2x(angle);\n  return `-webkit-image-set(url(${data1x})1x, url(${data2x})2x) 16 16, auto`;\n};\n","import { PointerEvent, TouchEvent, useEffect, useRef } from \"react\";\n\ntype iOSTouch = Touch & {\n  force?: number;\n  touchType?: \"stylus\" | \"direct\";\n};\n\nexport function isApplePencil(e: TouchEvent) {\n  const touch = e.touches[0] as iOSTouch;\n  return touch?.touchType === \"stylus\";\n}\n\nexport function usePreventTouch(\n  allowFinger: boolean\n): React.HTMLAttributes<HTMLDivElement> {\n  const isTouch = useRef(false);\n  const checkPoniter = (e: PointerEvent) =>\n    e.isPrimary && (isTouch.current = e.pointerType === \"touch\");\n\n  const isEventValid = (e: TouchEvent) =>\n    !isTouch.current ||\n    isApplePencil(e) ||\n    (allowFinger && e.touches.length === 1);\n\n  const preventTouch = (e: TouchEvent) =>\n    isEventValid(e) || e.stopPropagation();\n\n  return {\n    onPointerDownCapture: checkPoniter,\n    onPointerMoveCapture: checkPoniter,\n    onTouchStartCapture: preventTouch,\n    onTouchMoveCapture: preventTouch,\n  };\n}\n\nexport function usePreventGesture() {\n  useEffect(() => {\n    const handler = (e: Event) => e.preventDefault();\n    document.addEventListener(\"gesturestart\", handler);\n    document.addEventListener(\"gesturechange\", handler);\n    document.addEventListener(\"gestureend\", handler);\n    return () => {\n      document.removeEventListener(\"gesturestart\", handler);\n      document.removeEventListener(\"gesturechange\", handler);\n      document.removeEventListener(\"gestureend\", handler);\n    };\n  }, []);\n}\n","export const gernerateGrid = (\n  group: paper.Item[],\n  width: number,\n  height: number\n) => {\n  const wnum = Math.ceil(width / 100);\n  const hnum = Math.ceil(height / 100);\n  const grid = Array.from({ length: wnum }, () =>\n    Array.from({ length: hnum }, () => new Set<paper.Item>())\n  );\n  group.forEach((item) => setGridItem(grid, item));\n  return grid;\n};\n\nconst getGridRange = (bounds: paper.Rectangle) => {\n  const { topLeft, bottomRight } = bounds;\n  return [\n    Math.floor(topLeft.x / 100),\n    Math.ceil(bottomRight.x / 100),\n    Math.floor(topLeft.y / 100),\n    Math.ceil(bottomRight.y / 100),\n  ] as [number, number, number, number];\n};\nexport const setGridItem = (\n  grid: Set<paper.Item>[][],\n  item: paper.Item,\n  replaced?: paper.Item\n) => {\n  const bounds = (replaced ?? item).strokeBounds;\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\n  for (let x = xmin; x <= xmax; x += 1) {\n    for (let y = ymin; y <= ymax; y += 1) {\n      replaced && grid[x]?.[y]?.delete(replaced);\n      grid[x]?.[y]?.add(item);\n    }\n  }\n};\nexport const getGridItems = (\n  grid: Set<paper.Item>[][],\n  bounds: paper.Rectangle\n) => {\n  const itemSet = new Set<paper.Item>();\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\n  for (let x = xmin; x <= xmax; x += 1) {\n    for (let y = ymin; y <= ymax; y += 1) {\n      grid[x]?.[y]?.forEach((item) => itemSet.add(item));\n    }\n  }\n  return Array.from(itemSet);\n};\n","import React, {\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useDebugValue,\n  useImperativeHandle,\n  useLayoutEffect,\n} from \"react\";\nimport paper, {\n  Path,\n  Size,\n  Point,\n  Color,\n  Raster,\n  Layer,\n  Rectangle,\n} from \"paper/dist/paper-core\";\nimport { usePinch, useWheel } from \"@use-gesture/react\";\nimport useSize from \"@react-hook/size\";\nimport { useMemoizedFn as useEvent } from \"ahooks\";\nimport { DrawState, Mutation, Splitter, Stroke } from \"lib/draw/DrawState\";\nimport { defaultDrawCtrl, DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { releaseCanvas } from \"lib/draw/canvas\";\nimport { getCircleCursor, getRotateCurcor } from \"./cursor\";\nimport { usePreventTouch, usePreventGesture } from \"./touch\";\nimport { Setter } from \"lib/hooks\";\nimport { setGridItem, getGridItems, gernerateGrid } from \"./grid\";\n\nexport interface DrawRefType {\n  deleteSelected: () => void;\n  duplicateSelected: () => void;\n  rasterizeSelected: () => string;\n  mutateStyle: (updated: Partial<DrawCtrl>) => void;\n  mutatePointText: (cb: (prev: paper.PointText) => void) => void;\n}\ninterface DrawPropType {\n  drawState: DrawState;\n  otherStates?: DrawState[];\n  onChange?: Setter<DrawState>;\n  toggleSelectTool?: (active: boolean, clickPoint?: paper.Point) => void;\n  toggleTextTool?: (pt: paper.PointText | undefined, slow: boolean) => void;\n  drawCtrl?: DrawCtrl;\n  readonly?: boolean;\n  imgSrc?: string;\n}\n\nconst HIT_TOLERANCE = 20;\nexport const P_ZERO = new Point(0, 0);\n\nconst DrawRaw = React.forwardRef<DrawRefType, DrawPropType>(\n  (\n    {\n      drawState,\n      otherStates,\n      onChange = () => {},\n      drawCtrl = defaultDrawCtrl,\n      readonly = false,\n      imgSrc,\n      toggleSelectTool = () => {},\n      toggleTextTool = () => {},\n    },\n    ref\n  ) => {\n    const { width, height } = drawState;\n    const projSize = useMemo(() => new Size(width, height), [width, height]);\n    const { mode, finger, lasso, eraserWidth } = drawCtrl;\n\n    const canvasEl = useRef<HTMLCanvasElement>(null);\n    const scope = useRef(new paper.PaperScope());\n    const [group, setGroup] = useState<paper.Item[]>([]);\n    const [teamGroup, setTeamGroup] = useState<paper.Item[]>([]);\n    const [path, setPath] = usePaperItem<paper.Path>();\n    const [rotateHandle, setRotateHandle] = usePaperItem<paper.Path>();\n\n    toggleSelectTool = useEvent(toggleSelectTool);\n    toggleTextTool = useEvent(toggleTextTool);\n    const showSelectTool = () => {\n      if (!path) return;\n      const bc = path.bounds.bottomCenter;\n      const { view } = scope.current;\n      toggleSelectTool(true, view.projectToView(bc));\n    };\n\n    useLayoutEffect(() => {\n      const cvs = canvasEl.current;\n      const scp = scope.current;\n      if (!cvs) return;\n\n      scp.setup(cvs);\n      scp.settings.handleSize = 10;\n      scp.settings.hitTolerance = HIT_TOLERANCE;\n      [0, 1, 2].forEach(() => (new Layer().visible = false));\n      scp.project.layers[2]?.activate();\n      new scp.Tool();\n\n      return () => {\n        scp.view?.remove();\n        releaseCanvas(cvs);\n      };\n    }, []);\n\n    useEffect(() => {\n      scope.current.activate();\n      const { layers } = scope.current.project;\n      const rects = paintRects(layers, projSize);\n\n      return () => rects.forEach((r) => r.remove());\n    }, [projSize]);\n\n    const [canvasWidth] = useSize(canvasEl);\n    const ratio = canvasWidth / width;\n    useEffect(() => {\n      if (!ratio) return;\n      const scp = scope.current;\n      scp.view.viewSize = projSize.multiply(ratio);\n      scp.view.scale(ratio, P_ZERO);\n      scp.project.layers.forEach((l) => (l.visible = true));\n      scp.view.update();\n\n      return () => scp.view?.scale(1 / ratio, P_ZERO);\n    }, [ratio, projSize]);\n\n    const [imgRaster, setImgRaster] = usePaperItem();\n    useEffect(() => {\n      if (!imgSrc) return;\n      scope.current.activate();\n      const raster = new Raster(imgSrc);\n      raster.project.layers[0]?.addChild(raster);\n      raster.sendToBack();\n      raster.onLoad = () => {\n        raster.view.update();\n        raster.fitBounds(new Rectangle(projSize));\n        raster.bringToFront();\n      };\n      setImgRaster(raster);\n    }, [imgSrc, projSize, setImgRaster]);\n\n    const mergedStrokes = useMemo(\n      () =>\n        otherStates\n          ? DrawState.mergeStates(drawState, ...otherStates)\n          : drawState.getStrokeMap(),\n      [drawState, otherStates]\n    );\n\n    const renderSlow = useRef(false);\n\n    const deferTimerID = useRef(0);\n    const deferRender = useRef(false);\n    const setDefer = () => (deferRender.current = renderSlow.current);\n    if (readonly) setDefer();\n\n    useEffect(() => {\n      const [, l1] = scope.current.project.layers;\n      if (!l1) return;\n      const render = () => {\n        scope.current.activate();\n        const tempGroup: paper.Item[] = [];\n        const tempTeamGroup: paper.Item[] = [];\n\n        // clean-up layer_1 except the clip mask.\n        l1.removeChildren(1);\n\n        mergedStrokes.forEach((stroke) => {\n          const self = drawState.hasStroke(stroke.uid);\n          const item = paintStroke(stroke, l1);\n          if (self && item) tempGroup.push(item);\n          if (item) tempTeamGroup.push(item);\n        });\n        setGroup(tempGroup);\n        setTeamGroup(tempTeamGroup);\n\n        unrasterizeCanvas();\n        deferRender.current = false;\n        pathClones.current.forEach((c) => c.remove());\n        pathClones.current = [];\n\n        const timeBeforeUpdate = performance.now();\n        scope.current.view.requestUpdate();\n        requestAnimationFrame(() => {\n          const timeAfterUpdate = performance.now();\n          const updateDuration = timeAfterUpdate - timeBeforeUpdate;\n          renderSlow.current = updateDuration > 20;\n        });\n      };\n\n      // render immediately\n      if (!deferRender.current) return void render();\n      // defer render for 1000ms\n      deferTimerID.current = window.setTimeout(render, 1000);\n      // clean-up previous render timer.\n      return () => window.clearTimeout(deferTimerID.current);\n    }, [mergedStrokes, drawState]);\n\n    const hitRef = useRef<paper.HitResult>();\n    const [selected, setSelected] = useState(false);\n    const paperMode = mode === \"select\" && selected ? \"selected\" : mode;\n    const [chosenIDs, setChosenIDs] = useState<string[]>([]);\n    const chosenItems = useMemo(() => {\n      const IDSet = new Set(chosenIDs);\n      return group.filter((item) => IDSet.has(item.name));\n    }, [group, chosenIDs]);\n\n    const resetSelect = useEvent(() => {\n      setSelected(false);\n      setPath(undefined);\n      setRotateHandle(undefined);\n      setChosenIDs([]);\n      toggleSelectTool(false);\n    });\n\n    useEffect(() => {\n      if (mode === \"select\") return resetSelect;\n    }, [mode, resetSelect]);\n    useEffect(() => resetSelect, [lasso, resetSelect]);\n\n    // reset selection after redo/undo\n    useEffect(() => {\n      const type = drawState.lastOp?.type ?? \"\";\n      if (/^redo|undo$/.test(type)) resetSelect();\n    }, [drawState, resetSelect]);\n\n    useEffect(() => {\n      toggleSelectTool(false);\n      if (pointText.current) {\n        const ptProxy = new Proxy(pointText.current, {});\n        toggleTextTool(ptProxy, renderSlow.current);\n      }\n    }, [canvasWidth, toggleSelectTool, toggleTextTool]);\n\n    const layerRaster = useRef<paper.Raster>();\n    const rasterizeLayer = (clip: paper.Path, force = false) => {\n      if (!renderSlow.current && !force) return;\n      const [l0, l1] = scope.current.project.layers;\n      if (!l0 || !l1) return;\n      l1.visible = true;\n      clip.clipMask = true;\n      const prevClip = l1.firstChild;\n      prevClip.replaceWith(clip);\n      imgRaster?.insertAbove(clip);\n\n      const dpi = 72 * devicePixelRatio;\n      const resolution = (canvasWidth / clip.bounds.width) * dpi;\n      let raster = layerRaster.current;\n      raster = layerRaster.current = l1.rasterize({ raster, resolution });\n      raster.visible = true;\n\n      l1.visible = false;\n      clip.replaceWith(prevClip);\n      imgRaster?.addTo(l0);\n    };\n    const unrasterizeLayer = () => {\n      scope.current.activate();\n      const [, l1] = scope.current.project.layers;\n      const lr = layerRaster.current;\n      if (!l1 || !lr) return;\n      l1.visible = true;\n      lr.visible = false;\n    };\n\n    const canvasRaster = useRef<paper.Raster>();\n    // raster changes with the size of canvas element\n    useEffect(\n      () => () => {\n        canvasRaster.current?.remove();\n        canvasRaster.current = undefined;\n      },\n      [canvasWidth]\n    );\n    const rasterizeCanvas = () => {\n      if (!renderSlow.current) return;\n      // rasterize the canvas only once\n      if (canvasRaster.current?.visible === true) return;\n      scope.current.activate();\n      const { view } = scope.current;\n      // create a raster of the canvas element's size only once.\n      const raster = (canvasRaster.current ??= new Raster(\n        view.viewSize.multiply(devicePixelRatio)\n      ));\n      raster.drawImage(view.element, P_ZERO);\n      raster.fitBounds(view.bounds);\n      raster.visible = true;\n      raster.opacity = process.env.NODE_ENV === \"production\" ? 1 : 0.5;\n      const [, l1] = scope.current.project.layers;\n      l1 && (l1.visible = false);\n    };\n    const unrasterizeCanvas = () => {\n      scope.current.activate();\n      const [, l1] = scope.current.project.layers;\n      const cr = canvasRaster.current;\n      const lr = layerRaster.current;\n      if (!l1 || !cr) return;\n      cr.visible = false;\n      // keep layer_1 hidden unless all 2 raster is hidden.\n      if (lr?.visible !== true) l1.visible = true;\n    };\n\n    const downPath = (e: paper.MouseEvent) => {\n      rasterizeCanvas();\n      setPath(startStroke(drawCtrl, e.point, renderSlow.current));\n    };\n    const downLasso = (e: paper.MouseEvent) => {\n      setPath(startStroke(drawCtrl, e.point));\n      requestAnimationFrame(rasterizeCanvas);\n    };\n    const downRect = (e: paper.MouseEvent) => {\n      // reset rect path before rasterizing;\n      setPath(startRect(e.point));\n      requestAnimationFrame(rasterizeCanvas);\n    };\n\n    const selectionDragged = useRef(false);\n    const handleDown = {\n      draw(e: paper.MouseEvent) {\n        setDefer();\n        downPath(e);\n      },\n      erase: downPath,\n      select: lasso ? downLasso : downRect,\n      selected(e: paper.MouseEvent) {\n        selectionDragged.current = false;\n        if (!path) return;\n        if (!lasso) {\n          // check if the point hit the segment point.\n          let hitRes =\n            path.hitTest(e.point, { segments: true }) ??\n            rotateHandle?.hitTest(e.point, { segments: true, selected: true });\n          hitRef.current = hitRes;\n          if (hitRes) return;\n        }\n\n        // if click outside, reset the selection.\n        if (!path.contains(e.point)) {\n          resetSelect();\n          setRotateHandle(undefined);\n          lasso ? downLasso(e) : downRect(e);\n        }\n      },\n      text: null,\n    }[paperMode];\n\n    const dragPath = (e: paper.MouseEvent) => {\n      // cancel previous render timer.\n      window.clearTimeout(deferTimerID.current);\n      path?.add(e.point);\n      path?.smooth();\n    };\n    const resizeRect = (e: paper.MouseEvent) => {\n      if (!path) return;\n      const { x, y } = e.point;\n      const [, s1, s2, s3] = path.segments;\n      if (!s1 || !s2 || !s3) return;\n      s1.point.x = x;\n      s2.point = e.point;\n      s3.point.y = y;\n      path.selected = true;\n    };\n    const moveSelected = (delta: paper.Point) => {\n      chosenItems.forEach((item) => item.translate(delta));\n      path?.translate(delta);\n      rotateHandle?.translate(delta);\n    };\n\n    const handleDrag = {\n      draw: dragPath,\n      erase: dragPath,\n      select: lasso ? dragPath : resizeRect,\n      selected(e: paper.MouseEvent) {\n        const hitRes = hitRef.current;\n        if (!path) return;\n        toggleSelectTool(false);\n        selectionDragged.current = true;\n        if (hitRes?.segment) {\n          const segment = hitRes.segment;\n          const rotating = segment.selected;\n          if (rotating) {\n            // rotate select items\n            const { center } = path.bounds;\n            const axis = segment.point.subtract(center);\n            const line = e.point.subtract(center);\n            setCursor(getRotateCurcor(line.angle));\n            const angle = line.angle - axis.angle;\n            path.rotate(angle, center);\n            rotateHandle?.rotate(angle, center);\n            chosenItems.forEach((item) => item?.rotate(angle, center));\n          } else {\n            // resize selected items\n            const moveP = segment.point;\n            const baseP = segment.next.next.point;\n            const diagonal = moveP.subtract(baseP);\n            const projection = e.point.subtract(baseP).project(diagonal);\n            const scale = projection.x / diagonal.x;\n            if (scale < 0) return;\n\n            path.scale(scale, baseP);\n            chosenItems.forEach((item) => {\n              item.scale(scale, baseP);\n              item.strokeWidth *= scale;\n            });\n\n            // reposition the rotate handle.\n            if (!rotateHandle) return;\n            rotateHandle.scale(scale, baseP);\n            const rBaseP = rotateHandle.segments[0]?.point;\n            if (!rBaseP) return;\n            rotateHandle.scale(100 / rotateHandle.length, rBaseP);\n          }\n        } else {\n          moveSelected(e.delta);\n        }\n      },\n      text: null,\n    }[paperMode];\n\n    useEffect(() => {\n      scope.current.tool.maxDistance = eraserWidth;\n    }, [eraserWidth]);\n    const erased = useRef(new Set<string>());\n    const replaced = useRef(new Map<string, paper.Item>());\n\n    const { globalEraser, pixelEraser } = drawCtrl;\n    const itemGrid = useMemo(() => {\n      if (!/^(erase|select)$/.test(mode)) return [];\n      const items =\n        globalEraser && mode === \"erase\" && !pixelEraser ? teamGroup : group;\n      return gernerateGrid(items, width, height);\n    }, [group, width, height, mode, teamGroup, globalEraser, pixelEraser]);\n\n    const handleToolDrag = (e: paper.ToolEvent) => {\n      const layer = scope.current.project.layers[1];\n      if (paperMode !== \"erase\" || !layer) return;\n      const ew = eraserWidth;\n\n      const hitOption = { class: paper.Path, stroke: true, tolerance: ew / 2 };\n      const bounds = new Rectangle(e.point.subtract(ew), new Size(ew, ew));\n\n      getGridItems(itemGrid, bounds).forEach((item) => {\n        if (erased.current.has(item.name)) return;\n        if (!item.parent) return;\n        item.hitTestAll(e.point, hitOption)?.forEach(({ item }) => {\n          if (!(item instanceof paper.Path)) return;\n          let topItem: paper.PathItem = item;\n          while (topItem.parent !== layer) {\n            if (!(topItem.parent instanceof paper.PathItem)) break;\n            topItem = topItem.parent;\n          }\n          const { name } = topItem;\n\n          if (pixelEraser) {\n            const radius = (ew + item.strokeWidth) / 2;\n            const circle = new Path.Circle({\n              center: e.point,\n              radius,\n              insert: false,\n            });\n\n            const sub = item.subtract(circle, { trace: false });\n            item.replaceWith(sub);\n            if (topItem === item) {\n              setGridItem(itemGrid, sub, item);\n              topItem = sub;\n            }\n            replaced.current.set(name, topItem);\n          } else {\n            topItem.opacity = 0.5;\n            topItem.guide = true;\n            erased.current.add(name);\n          }\n        });\n      });\n    };\n\n    const pathClones = useRef<paper.Path[]>([]);\n    const handleUp = {\n      draw() {\n        if (!path || path.segments.length <= 1) {\n          // if canvas is clicked without any path in queue.\n          if (!pathClones.current.length) unrasterizeCanvas();\n          return;\n        }\n        path.simplify();\n        if (renderSlow.current) pathClones.current.push(path.clone());\n        const pathData = path.exportJSON();\n        onChange((prev) => DrawState.addStroke(prev, pathData));\n        setPath(undefined);\n      },\n      erase() {\n        unrasterizeCanvas();\n        setPath(undefined);\n        if (drawCtrl.pixelEraser) {\n          const items = Array.from(replaced.current);\n          replaced.current.clear();\n          const splitters: Splitter[] = items.map(([uid, item]) => {\n            const paths = flattenCP(item);\n            paths.forEach((p) => (p.name = \"\"));\n            return [uid, paths.map((p) => p.exportJSON())];\n          });\n          if (!splitters.length) return;\n          onChange((prev) => DrawState.splitStrokes(prev, splitters));\n        } else {\n          const erasedList = Array.from(erased.current);\n          erased.current.clear();\n          if (!erasedList.length) return;\n          onChange((prev) => DrawState.eraseStrokes(prev, erasedList));\n        }\n      },\n      select() {\n        unrasterizeCanvas();\n        if (!path) return;\n        if (Math.abs(path.area) < 1_000) return setPath(undefined);\n\n        let selection: string[];\n        if (lasso) {\n          path.closePath();\n          path.simplify();\n          if (!renderSlow.current) moveDash(path);\n          const items = getGridItems(itemGrid, path.bounds);\n          selection = checkLasso(items, path);\n        } else {\n          const items = getGridItems(itemGrid, path.bounds);\n          selection = checkLasso(items, path);\n          const link = new Path();\n          const { topCenter } = path.bounds;\n          link.add(topCenter, topCenter.subtract(new Point(0, 100)));\n          link.lastSegment.selected = true;\n          setRotateHandle(link);\n        }\n        setSelected(true);\n        setChosenIDs(selection);\n        showSelectTool();\n      },\n      selected(e: paper.MouseEvent) {\n        handleSelectedCursor(e);\n        if (!path || !selectionDragged.current) return;\n        showSelectTool();\n        updateMutation();\n      },\n      text(e: paper.MouseEvent) {\n        if (pointText.current) {\n          submitText();\n          return handleTextCursor(e);\n        }\n        const [, l1] = scope.current.project.layers;\n        if (!l1) return;\n\n        const item = getClickedText(l1, e.point);\n        const t = item && isSelfItem(item) ? item : startText(e.point);\n        t.justification = \"left\";\n        pointText.current = t;\n        prevTextData.current = t.exportJSON();\n\n        // hide pointText before rasterizing;\n        if (renderSlow.current) t.visible = false;\n        requestAnimationFrame(() => {\n          rasterizeCanvas();\n          t.visible = true;\n        });\n\n        toggleTextTool(t, renderSlow.current);\n      },\n    }[paperMode];\n\n    const [cursor, setCursor] = useState(\"auto\");\n    const [currScale, setCurrScale] = useState(1);\n    useEffect(() => {\n      if (paperMode === \"text\" || paperMode === \"select\") {\n        setCursor(\"crosshair\");\n      } else if (paperMode === \"selected\") {\n        setCursor(lasso ? \"crosshair\" : \"nwse-resize\");\n      } else if (paperMode === \"draw\" || paperMode === \"erase\") {\n        setCursor(getCircleCursor(drawCtrl, ratio * currScale));\n      }\n    }, [paperMode, lasso, drawCtrl, ratio, currScale]);\n\n    const handleSelectedCursor = (e: paper.MouseEvent) => {\n      if (!path) return;\n      const hitRes =\n        path.hitTest(e.point, { segments: true }) ??\n        rotateHandle?.hitTest(e.point, { segments: true, selected: true });\n      if (hitRes?.segment) {\n        if (hitRes.segment.selected) {\n          const center = path.bounds.center;\n          if (!center) return;\n          const line = hitRes.segment.point.subtract(center);\n          return setCursor(getRotateCurcor(line.angle));\n        }\n        const moveP = hitRes.segment.point;\n        const baseP = hitRes.segment.next.next.point;\n        const diagonal = moveP.subtract(baseP);\n        const { x, y } = diagonal;\n        return setCursor(x * y < 0 ? \"nesw-resize\" : \"nwse-resize\");\n      }\n      if (path.contains(e.point)) return setCursor(\"move\");\n      setCursor(\"crosshair\");\n    };\n\n    const isSelfItem = (item: paper.Item) => {\n      return drawState.getStrokeMap().has(item.name);\n    };\n\n    const handleTextCursor = (e: paper.MouseEvent) => {\n      if (pointText.current) return setCursor(\"auto\");\n      const layer = scope.current.project.layers[1];\n      if (!layer) return;\n      const item = getClickedText(layer, e.point);\n      if (item && isSelfItem(item)) setCursor(\"text\");\n      else setCursor(\"crosshair\");\n    };\n\n    const handleMove = {\n      selected: handleSelectedCursor,\n      text: handleTextCursor,\n      ...{ select: null, draw: null, erase: null },\n    }[paperMode];\n\n    const handleKeyDown = (e: paper.KeyEvent) => {\n      if (paperMode !== \"selected\") return;\n      const delta = {\n        up: new Point(0, -10),\n        down: new Point(0, 10),\n        left: new Point(-10, 0),\n        right: new Point(10, 0),\n      }[e.key];\n      if (!delta) return;\n      e.preventDefault();\n      delta && moveSelected(delta);\n      toggleSelectTool(false);\n    };\n\n    const handleKeyUp = {\n      selected(e: paper.KeyEvent) {\n        if (/^(delete|backspace)$/.test(e.key)) deleteSelected();\n        if (/^(up|down|left|right)$/.test(e.key)) updateMutation();\n        if (/escape/.test(e.key)) resetSelect();\n      },\n      text(e: paper.KeyEvent) {\n        if (/escape/.test(e.key)) submitText();\n      },\n      ...{ select: null, draw: null, erase: null },\n    }[paperMode];\n\n    useEffect(() => {\n      if (readonly) return;\n\n      type Handler<E> = ((e: E) => boolean | void) | null;\n      const activate = <E,>(handler: Handler<E>): Handler<E> => {\n        return (e) => {\n          scope.current.activate();\n          if (handler) return handler(e);\n        };\n      };\n      const { view, tool } = scope.current;\n      view.onMouseDown = activate(handleDown);\n      view.onMouseDrag = activate(handleDrag);\n      view.onMouseUp = activate(handleUp);\n      view.onMouseMove = activate(handleMove);\n      tool.onMouseDrag = activate(handleToolDrag);\n      tool.onKeyDown = activate(handleKeyDown);\n      tool.onKeyUp = activate(handleKeyUp);\n    });\n\n    const updateMutation = () => {\n      if (!chosenItems?.length) return;\n      const mutations: Mutation[] = chosenItems.map((p) => {\n        const { name } = p;\n        p.name = \"\";\n        return [name, p.exportJSON()];\n      });\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\n    };\n\n    const deleteSelected = () => {\n      resetSelect();\n      if (!chosenIDs.length) return;\n      onChange((prev) => DrawState.eraseStrokes(prev, chosenIDs));\n    };\n\n    const mutateStyle = (updated: Partial<DrawCtrl>) => {\n      scope.current.activate();\n      updateGroupStyle(chosenItems, updated);\n      updateMutation();\n    };\n\n    const duplicateSelected = () => {\n      scope.current.activate();\n      if (!path || !chosenItems.length) return;\n      const size = path.bounds.size;\n      const { width, height } = size;\n      const transP = new Point(width, height).divide(10);\n      const copies = chosenItems.map((item) => item.clone());\n      copies.forEach((item) => item.translate(transP));\n      path.translate(transP);\n      rotateHandle?.translate(transP);\n\n      copies.forEach((p) => (p.name = \"\"));\n      const pathDataList = copies.map((item) => item.exportJSON());\n      const IDs: string[] = [];\n      onChange((prev) => DrawState.addStrokes(prev, pathDataList, IDs));\n      setChosenIDs(IDs);\n      showSelectTool();\n    };\n\n    const rasterizeSelected = () => {\n      scope.current.activate();\n      const clip = path?.clone();\n      clip && rasterizeLayer(clip, true);\n      unrasterizeLayer();\n      return layerRaster.current?.toDataURL() ?? \"\";\n    };\n\n    const pointText = useRef<paper.PointText>();\n    const prevTextData = useRef(\"\");\n    const cancelText = useEvent(() => {\n      unrasterizeCanvas();\n      if (!pointText.current?.name) {\n        pointText.current?.remove();\n      }\n      pointText.current = undefined;\n      toggleTextTool(undefined, renderSlow.current);\n    });\n\n    const submitText = useEvent(() => {\n      const t = pointText.current;\n      if (!t) return;\n      cancelText();\n      if (t.exportJSON() === prevTextData.current) return;\n      const { content, name } = t;\n      t.name = \"\";\n      // if text content empty\n      if (!content) {\n        // erase existing text item\n        if (name) onChange((prev) => DrawState.eraseStrokes(prev, [name]));\n        return;\n      }\n      const pathData = t.exportJSON();\n      if (!name) {\n        // add new text item\n        onChange((prev) => DrawState.addStroke(prev, pathData));\n      } else {\n        // mutate existing text item\n        onChange((prev) => DrawState.mutateStrokes(prev, [[name, pathData]]));\n      }\n    });\n    const mutatePointText = (cb: (prev: paper.PointText) => void) => {\n      const pt = pointText.current;\n      if (!pt) return;\n      scope.current.activate();\n      cb(pt);\n      toggleTextTool(new Proxy(pt, {}), renderSlow.current);\n    };\n\n    useEffect(() => {\n      if (mode === \"text\") return submitText;\n    }, [mode, submitText]);\n\n    useImperativeHandle(ref, () => ({\n      deleteSelected,\n      duplicateSelected,\n      rasterizeSelected,\n      mutateStyle,\n      mutatePointText,\n    }));\n\n    usePreventGesture();\n    const prevScale = useRef(1);\n\n    const beforeViewDragged = () => {\n      toggleSelectTool(false);\n      cancelText();\n      rasterizeLayer(new Path.Rectangle(P_ZERO, projSize));\n      unrasterizeCanvas();\n    };\n    usePinch(\n      ({ memo, offset: [scale], first, last, origin }) => {\n        scope.current.activate();\n        const { view } = scope.current;\n        const originRawP = new paper.Point(origin);\n\n        let lastOrigin, elPos: paper.Point;\n        if (first || !memo) {\n          const { x, y } = view.element.getBoundingClientRect();\n          elPos = new Point(x, y);\n          lastOrigin = originRawP.subtract(elPos);\n          beforeViewDragged();\n        } else {\n          [lastOrigin, elPos] = memo;\n        }\n\n        const originViewP = originRawP.subtract(elPos);\n        const originPorjP = view.viewToProject(originViewP);\n\n        const deltaP = originViewP.subtract(lastOrigin);\n        const transP = deltaP.divide(view.zoom);\n        view.translate(transP);\n\n        let dScale = scale / prevScale.current;\n        prevScale.current = scale;\n        scope.current.settings.hitTolerance /= dScale;\n        view.scale(dScale, originPorjP);\n\n        if (last) {\n          Promise.all([\n            putCenterBack(view, projSize),\n            scaleView(view, originPorjP, dScale),\n          ]).then(unrasterizeLayer);\n          view.scale(1 / dScale, originPorjP);\n          setCurrScale(scale);\n        } else {\n          return [originViewP, elPos];\n        }\n      },\n      {\n        scaleBounds: { max: 5, min: 1 },\n        rubberband: 0.5,\n        target: canvasEl,\n      }\n    );\n\n    useWheel(\n      ({ event, delta, ctrlKey, first, last }) => {\n        if (prevScale.current === 1 || ctrlKey) return;\n        event.preventDefault();\n\n        if (first) beforeViewDragged();\n\n        const { view } = scope.current;\n        const deltaP = new paper.Point(delta);\n        const transP = P_ZERO.subtract(deltaP).divide(view.zoom);\n        view.translate(transP);\n\n        if (last) {\n          putCenterBack(view, projSize);\n          unrasterizeLayer();\n        }\n      },\n      {\n        target: canvasEl,\n        eventOptions: { passive: false },\n      }\n    );\n\n    const touchHandler = usePreventTouch(finger);\n    return (\n      <div\n        className=\"draw-wrapper\"\n        style={{ cursor }}\n        data-readonly={readonly}\n        {...touchHandler}\n      >\n        <canvas ref={canvasEl} className=\"draw-canvas\" />\n      </div>\n    );\n  }\n);\n\nDrawRaw.displayName = \"Draw\";\nexport const Draw = React.memo(DrawRaw);\n\nfunction usePaperItem<T extends paper.Item>() {\n  const tuple = useState<T>();\n  const [item] = tuple;\n  useDebugValue(item);\n  useEffect(() => () => void item?.remove(), [item]);\n  return tuple;\n}\n\nconst paintStroke = (() => {\n  const cacheMap = new WeakMap<\n    paper.Layer,\n    Map<string, { stroke: Stroke; item: paper.Item }>\n  >();\n\n  return (stroke: Stroke, layer: paper.Layer) => {\n    const { pathData, uid } = stroke;\n    let item: paper.Item;\n\n    const cache = cacheMap.get(layer) ?? new Map();\n    cacheMap.set(layer, cache);\n    const cached = cache.get(uid);\n\n    if (cached?.stroke === stroke) {\n      layer.addChild(cached.item);\n      item = cached.item;\n    } else {\n      try {\n        item = layer.importJSON(pathData);\n      } catch (e) {\n        console.error(e);\n      }\n      item ??= new paper.Item();\n      item.name = uid;\n      cache.set(uid, { item, stroke });\n    }\n    item.opacity = 1;\n    item.guide = false;\n    return item;\n  };\n})();\n\nconst paintRects = (layers: paper.Layer[], projSize: paper.Size) => {\n  const [l0, l1, l2] = layers;\n  if (!l0 || !l1 || !l2) return [];\n  const bgRect = new Path.Rectangle(P_ZERO, projSize);\n  const clip1 = bgRect.clone();\n  const clip2 = bgRect.clone();\n  bgRect.fillColor = new Color(\"#fff\");\n  l0.addChild(bgRect);\n  l1.addChild(clip1);\n  l2.addChild(clip2);\n  l1.clipped = true;\n  l2.clipped = true;\n  return [bgRect, clip1, clip2];\n};\n\nconst startRect = (point: paper.Point) => {\n  const rect = new Path.Rectangle(point, new Size(0, 0));\n  rect.onFrame = () => {}; // the handle size bug\n  return rect;\n};\n\nconst startStroke = (drawCtrl: DrawCtrl, point: paper.Point, slow = false) => {\n  let { mode, lineWidth, eraserWidth, color, highlight } = drawCtrl;\n  const path = new Path();\n  path.add(point);\n  if (mode === \"erase\") {\n    color = \"#ccc\";\n    lineWidth = eraserWidth;\n  }\n  if (mode === \"select\") {\n    color = \"#009dec\";\n    lineWidth = 5;\n  }\n  const strokeColor = new Color(color);\n  if ((mode === \"draw\" && highlight) || (mode === \"erase\" && !slow)) {\n    strokeColor.alpha = 0.5;\n    path.blendMode = \"multiply\";\n  }\n  path.strokeColor = strokeColor;\n  path.strokeWidth = lineWidth;\n  path.strokeJoin = \"round\";\n  path.strokeCap = \"round\";\n  path.guide = true;\n  return path;\n};\n\nconst moveDash = (item: paper.Item) => {\n  item.dashOffset = 0;\n  item.dashArray = [30, 20];\n  item.onFrame = () => (item.dashOffset += 3);\n};\n\nconst scaleView = (\n  view: paper.View,\n  originPorjP: paper.Point,\n  dScale: number\n) =>\n  new Promise<void>((resolve) => {\n    if (Math.abs(dScale - 1) < 0.05) {\n      view.scale(dScale, originPorjP);\n      return resolve();\n    }\n    let aniCount = 10;\n    dScale = Math.pow(dScale, 1 / aniCount);\n    const scale = () => {\n      view.scale(dScale, originPorjP);\n      if (--aniCount > 0) requestAnimationFrame(scale);\n      else requestAnimationFrame(() => resolve());\n    };\n    scale();\n  });\n\nconst getTargetCenter = (view: paper.View, projSize: paper.Size) => {\n  const { x, y } = view.center;\n  const minSize = Size.min(view.size, projSize).divide(2);\n  const { width: minX, height: minY } = minSize;\n  const { width: maxX, height: maxY } = projSize.subtract(minSize);\n\n  const targetX = x < minX ? minX : x > maxX ? maxX : x;\n  const targetY = y < minY ? minY : y > maxY ? maxY : y;\n  return new Point(targetX, targetY);\n};\n\nconst putCenterBack = (view: paper.View, projSize: paper.Size) =>\n  new Promise<void>((resolve) => {\n    const targetCenter = getTargetCenter(view, projSize);\n    if (view.center.equals(targetCenter)) return resolve();\n    let aniCount = 10;\n    const move = () => {\n      const delta = view.center.subtract(targetCenter);\n      view.translate(delta.divide(aniCount));\n      if (--aniCount > 0) requestAnimationFrame(move);\n      else requestAnimationFrame(() => resolve());\n    };\n    requestAnimationFrame(move);\n  });\n\nconst checkLasso = (items: paper.Item[], selection: paper.Path) => {\n  const isInside = (p: paper.Path) => {\n    if (selection.segments.length === 4 && p.isInside(selection.bounds)) {\n      return true;\n    }\n    return !p.subtract(selection, { insert: false, trace: false }).compare(p);\n  };\n  return items\n    .filter((item) => {\n      if (!item.name) return false;\n      if (!item.bounds.intersects(selection.bounds)) return false;\n      if (item instanceof paper.Path) {\n        return isInside(item);\n      } else {\n        const checkedP = new Path.Rectangle(item.bounds);\n        checkedP.remove();\n        return isInside(checkedP) || selection.isInside(item.bounds);\n      }\n    })\n    .map(({ name }) => name);\n};\n\nconst updateGroupStyle = (items: paper.Item[], updated: Partial<DrawCtrl>) => {\n  const { lineWidth, color, highlight } = updated;\n  items.forEach((item) => {\n    if (item instanceof paper.PointText && color) {\n      const newColor = new Color(color);\n      item.fillColor = newColor;\n    }\n\n    if (!(item instanceof paper.Path)) return;\n\n    if (color) {\n      const newColor = new Color(color);\n      if (item.blendMode === \"multiply\") newColor.alpha = 0.5;\n      item.strokeColor = newColor;\n    }\n\n    if (lineWidth) item.strokeWidth = lineWidth;\n\n    if (!item.strokeColor || highlight === undefined) return;\n    item.strokeColor.alpha = highlight ? 0.5 : 1;\n    item.blendMode = highlight ? \"multiply\" : \"normal\";\n  });\n};\n\nconst getClickedText = (layer: paper.Layer, point: paper.Point) => {\n  const hitRes = layer.hitTest(point, { class: paper.PointText, fill: true });\n  if (hitRes?.item instanceof paper.PointText) return hitRes?.item;\n};\n\nconst startText = (point: paper.Point) => {\n  return new paper.PointText({\n    point: point.add(new Point(0, 50)),\n    content: \"\",\n    fontSize: 50,\n    fontFamily: \"Arial, sans-serif\",\n  });\n};\n\nconst flattenCP = (cp: paper.Item): paper.Path[] => {\n  if (cp instanceof paper.Path) {\n    return cp.isEmpty() ? [] : [cp];\n  }\n  if (cp instanceof paper.CompoundPath) {\n    return cp.children.map(flattenCP).flat();\n  }\n  return [];\n};\n","import { CSSProperties, FC, RefObject, useMemo, useState } from \"react\";\nimport {\n  CopyOutlined,\n  BoldOutlined,\n  DeleteOutlined,\n  PictureTwoTone,\n  PictureOutlined,\n  BgColorsOutlined,\n  ItalicOutlined,\n} from \"@ant-design/icons\";\nimport { Button, ButtonProps, Modal, Popover, Select } from \"antd\";\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\nimport { allColors } from \"lib/color\";\nimport { DrawRefType } from \"component/Draw\";\nimport { saveAs } from \"file-saver\";\nimport { Color } from \"paper/dist/paper-core\";\nimport IconFont from \"component/IconFont\";\nimport \"./draw-tools.sass\";\n\nconst btnProps: ButtonProps = {\n  type: \"text\",\n  shape: \"round\",\n  size: \"small\",\n};\n\nconst getPosVars = (x: number, y: number) => {\n  return { \"--pos-x\": x + \"px\", \"--pos-y\": y + \"px\" } as CSSProperties;\n};\nconst getObjVars = (obj: Record<string, string | number>, unit?: string) => {\n  const result: Record<string, string | number> = {};\n  Object.entries(obj).forEach(([key, value]) => {\n    if (unit) value += unit;\n    result[\"--\" + key] = value;\n  });\n  return result as CSSProperties;\n};\n\nexport const SelectTool: FC<{\n  drawRef: RefObject<DrawRefType>;\n  visible: boolean;\n  clickPoint: paper.Point;\n}> = ({ drawRef, visible, clickPoint }) => {\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\n\n  const getRaster = () => {\n    if (!drawRef.current) return;\n    const imageData = drawRef.current.rasterizeSelected();\n    Modal.confirm({\n      title: \"Screenshot\",\n      content: <img className=\"raster\" src={imageData} alt=\"raster\" />,\n      className: \"raster-modal\",\n      icon: <PictureTwoTone />,\n      okText: \"Save\",\n      onOk: () => saveAs(imageData, document.title.split(\" - \")[0] + \".png\"),\n    });\n  };\n\n  const { x, y } = clickPoint;\n  return (\n    <div\n      className=\"select-tool tool-options\"\n      data-visible={visible}\n      style={getPosVars(x, y)}\n    >\n      <Popover\n        trigger=\"click\"\n        placement=\"bottom\"\n        overlayClassName=\"style-pop\"\n        getPopupContainer={(e) => e.parentElement!}\n        destroyTooltipOnHide\n        content={\n          <PenPanel\n            updateDrawCtrl={(updated) => {\n              setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\n              drawRef.current?.mutateStyle(updated);\n            }}\n            drawCtrl={currDrawCtrl}\n          />\n        }\n      >\n        <Button icon={<BgColorsOutlined />} {...btnProps} />\n      </Popover>\n      <Button\n        icon={<CopyOutlined />}\n        onClick={() => drawRef.current?.duplicateSelected()}\n        {...btnProps}\n      />\n      <Button icon={<PictureOutlined />} onClick={getRaster} {...btnProps} />\n      <Button\n        danger\n        icon={<DeleteOutlined />}\n        onClick={() => drawRef.current?.deleteSelected()}\n        {...btnProps}\n      />\n    </div>\n  );\n};\n\nexport const TextTool: FC<{\n  pointText: paper.PointText;\n  drawRef: RefObject<DrawRefType>;\n  renderSlow: boolean;\n}> = ({ pointText, drawRef, renderSlow }) => {\n  const { view, position, leading, content, rotation } = pointText;\n  const { fontFamily, fontWeight, fontSize } = pointText;\n\n  const { x, y } = view.projectToView(position);\n  const { topLeft, bottomLeft } = pointText.bounds;\n  const { x: bx, y: by } = view.projectToView(topLeft);\n  const { x: bbx, y: bby } = view.projectToView(bottomLeft);\n  const optionAtBottom = by < 90;\n\n  const scale = pointText.viewMatrix.scaling.x;\n  const { width, height } = pointText.internalBounds;\n\n  const lineHeight = +leading / +fontSize ?? 1.2;\n\n  const color = pointText.fillColor?.toCSS(true) ?? allColors[0]!;\n  const fontColorBtn = (\n    <Popover\n      content={\n        <ColorSelect\n          color={color}\n          setColor={(c) =>\n            drawRef.current?.mutatePointText((prev) => {\n              prev.fillColor = new Color(c);\n            })\n          }\n        />\n      }\n      trigger=\"click\"\n      overlayStyle={{ width: 200 }}\n      placement=\"bottom\"\n      getPopupContainer={(e) => e.parentElement!}\n    >\n      <Button\n        {...btnProps}\n        icon={\n          <IconFont\n            type=\"icon-circle\"\n            className=\"text-color-icon\"\n            style={{ color }}\n          />\n        }\n      />\n    </Popover>\n  );\n\n  const { isItalic, isBold } = parseFontStyle(fontWeight);\n  const fontStyleCSS = {\n    fontWeight: isBold ? \"bold\" : \"normal\",\n    fontStyle: isItalic ? \"italic\" : \"normal\",\n  };\n\n  const fontFamilySelect = (\n    <Select\n      className=\"font-select\"\n      popupClassName=\"font-drop\"\n      value={fontFamily}\n      onChange={(v) => {\n        drawRef.current?.mutatePointText((prev) => {\n          prev.fontFamily = v;\n        });\n      }}\n      size=\"small\"\n      bordered={false}\n      virtual={false}\n      getPopupContainer={(e) => e.parentElement.parentElement!}\n      dropdownMatchSelectWidth={100}\n      options={[\n        { value: \"Arial, sans-serif\", name: \"Arial\" },\n        { value: \"'Times New Roman', serif\", name: \"Times\" },\n        { value: \"Georgia, serif\", name: \"Georgia\" },\n        { value: \"'Courier New', monospace\", name: \"Courier\" },\n      ].map(({ value, name }) => ({\n        value,\n        label: (\n          <span style={{ fontFamily: value, fontWeight: \"normal\" }}>\n            {name}\n          </span>\n        ),\n      }))}\n    />\n  );\n\n  const offset = useMemo(\n    // paperjs sets all baseline ratio to 0.75.\n    () => 0.75 - getBaselineRatio(fontFamily, lineHeight),\n    [fontFamily, lineHeight]\n  );\n\n  return (\n    <div\n      className=\"text-tool\"\n      style={{\n        ...getObjVars({ scale, color }),\n        ...getObjVars({ rotation }, \"deg\"),\n        ...getObjVars({ width, height }, \"px\"),\n        ...getObjVars({ offset }, \"em\"),\n        ...getPosVars(x, y),\n      }}\n    >\n      <div\n        className=\"textarea-wrapper\"\n        data-empty={!content}\n        style={{ fontSize, fontFamily, lineHeight, ...fontStyleCSS }}\n      >\n        <textarea\n          autoFocus={!content}\n          placeholder=\"Text\"\n          value={content}\n          onChange={(e) => {\n            drawRef.current?.mutatePointText((prev) => {\n              prev.content = e.target.value;\n            });\n          }}\n          data-slow={renderSlow}\n        />\n      </div>\n      <div\n        className=\"tool-options text-options\"\n        data-bottom={optionAtBottom}\n        style={{\n          ...(optionAtBottom ? getPosVars(bbx, bby) : getPosVars(bx, by)),\n        }}\n      >\n        <div className=\"row\">\n          {fontFamilySelect}\n          {fontColorBtn}\n        </div>\n        <div className=\"row\">\n          <Button\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                prev.fontWeight = toggleBold(prev.fontWeight);\n              });\n            }}\n            {...btnProps}\n            type={isBold ? \"link\" : \"text\"}\n            icon={<BoldOutlined />}\n          />\n          <Button\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                prev.fontWeight = toggleItalic(prev.fontWeight);\n              });\n            }}\n            {...btnProps}\n            type={isItalic ? \"link\" : \"text\"}\n            icon={<ItalicOutlined />}\n          />\n          <Button\n            {...btnProps}\n            icon={<IconFont type=\"icon-font_size_down\" />}\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                const { topLeft } = prev.bounds;\n                prev.scale(0.9, topLeft);\n              });\n            }}\n          />\n          <Button\n            {...btnProps}\n            icon={<IconFont type=\"icon-font_size_up\" />}\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                const { topLeft } = prev.bounds;\n                prev.scale(1.1, topLeft);\n              });\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst parseFontStyle = (fontStyle: string | number) => {\n  fontStyle = fontStyle + \"\";\n  const isItalic = /italic/g.test(fontStyle);\n  const isBold = /bold/g.test(fontStyle);\n  return { isItalic, isBold };\n};\n\nconst toggleItalic = (fontStyle: string | number) => {\n  const { isItalic, isBold } = parseFontStyle(fontStyle);\n  const boldText = isBold ? \"bold\" : \"normal\";\n  return (isItalic ? \"\" : \"italic \") + boldText;\n};\n\nconst toggleBold = (fontStyle: string | number) => {\n  const { isItalic, isBold } = parseFontStyle(fontStyle);\n  const italicText = isItalic ? \"italic \" : \"\";\n  return italicText + (isBold ? \"normal\" : \"bold\");\n};\n\nconst getBaselineRatio = (fontFamily: string, lineHeight: number) => {\n  const div = document.createElement(\"div\");\n  div.innerText = \"p\";\n  Object.assign(div.style, { fontSize: \"100px\", fontFamily, lineHeight });\n  document.body.appendChild(div);\n\n  const span = document.createElement(\"span\");\n  span.style.display = \"inline-block\";\n  div.appendChild(span);\n\n  const r0 = div.getBoundingClientRect();\n  const r1 = span.getBoundingClientRect();\n  const ratio = (r1.y - r0.y) / r0.height;\n  document.body.removeChild(div);\n  return Math.max(-1, Math.min(ratio, 1));\n};\n","import React, {\n  FC,\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport { useDrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { useMemoizedFn as useEvent } from \"ahooks\";\nimport { Draw, DrawRefType } from \"component/Draw\";\nimport { SelectTool, TextTool } from \"pages/reader/tools/DrawTools\";\nimport { once, range } from \"lodash\";\nimport { useInView } from \"react-intersection-observer\";\nimport { DrawState } from \"lib/draw/DrawState\";\nimport { Map, Set } from \"immutable\";\nimport { P_ZERO } from \"component/Draw/Draw\";\n\nconst PageWrapperRaw: FC<{\n  drawState: DrawState;\n  teamStateMap?: Map<string, DrawState>;\n  thumbnail?: string;\n  pdfIndex?: number;\n  noteID?: string;\n  updateState?: (ds: DrawState) => void;\n  onViewChange?: (ratio: number) => void;\n  preview?: boolean;\n  preload?: boolean;\n  ignores?: Set<string>;\n  skipInView?: boolean;\n}> = ({\n  thumbnail,\n  drawState,\n  teamStateMap,\n  updateState,\n  pdfIndex,\n  noteID = \"\",\n  preview = false,\n  onViewChange,\n  preload = false,\n  ignores = Set<string>(),\n  skipInView = false,\n}) => {\n  const threshold = onViewChange && range(0, 1.2, 0.2);\n  const [ref, visible, entry] = useInView({ threshold, skip: skipInView });\n  useEffect(() => {\n    if (!onViewChange) return;\n    if (!entry || !visible) return onViewChange(0);\n    onViewChange(entry.intersectionRatio);\n  }, [visible, entry, onViewChange]);\n\n  const [fullImg, setFullImg] = useState<string>();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const loadImage = useCallback(\n    once(async () => {\n      if (!pdfIndex || !noteID) return;\n      const { getNotePageImage } = await import(\"lib/note/pdfImage\");\n      setFullImg(await getNotePageImage(noteID, pdfIndex));\n    }),\n    [pdfIndex, noteID]\n  );\n\n  const show = visible || preload;\n  useEffect(() => {\n    if (!preview && show) loadImage();\n  }, [show, preview, loadImage]);\n\n  const otherStates = useMemo(\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\n    [teamStateMap, ignores]\n  );\n\n  const imageLoaded = Boolean(fullImg || !pdfIndex);\n  const drawShow = show && imageLoaded;\n\n  const { height, width } = drawState;\n  const ratio = height / width;\n\n  return (\n    <div ref={ref} className=\"page-wrapper\">\n      <svg className=\"size-holder\" viewBox={`0 0 100 ${ratio * 100}`} />\n      {drawShow && (\n        <DrawWrapper\n          drawState={drawState}\n          otherStates={otherStates}\n          updateState={updateState}\n          imgSrc={fullImg || thumbnail}\n          preview={preview}\n        />\n      )}\n    </div>\n  );\n};\nPageWrapperRaw.displayName = \"PageWrapper\";\nexport const PageWrapper = React.memo(PageWrapperRaw);\n\nconst DrawWrapper: FC<{\n  drawState: DrawState;\n  otherStates?: DrawState[];\n  updateState?: (ds: DrawState) => void;\n  preview?: boolean;\n  imgSrc?: string;\n}> = ({ drawState, updateState, otherStates, preview = false, imgSrc }) => {\n  const drawCtrl = useDrawCtrl();\n  const drawRef = useRef<DrawRefType>(null);\n  const [selectShow, setSelectShow] = useState(false);\n  const [clickPoint, setClickPoint] = useState<paper.Point>(P_ZERO);\n  const [pointText, setPointText] = useState<paper.PointText>();\n  const [renderSlow, setRenderSlow] = useState(false);\n\n  const handleChange = useEvent(\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\n      if (!updateState) return;\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\n      if (newDS === drawState) return;\n      updateState(newDS);\n    }\n  );\n\n  const toggleSelectTool = (active: boolean, clickPoint?: paper.Point) => {\n    setClickPoint((p) => clickPoint ?? p);\n    setSelectShow(active);\n  };\n\n  const toggleTextTool = (\n    pointText: paper.PointText | undefined,\n    slow: boolean\n  ) => {\n    setPointText(pointText);\n    setRenderSlow(slow);\n  };\n\n  return preview ? (\n    <Draw\n      drawState={drawState}\n      otherStates={otherStates}\n      imgSrc={imgSrc}\n      readonly\n    />\n  ) : (\n    <>\n      <Draw\n        drawState={drawState}\n        otherStates={otherStates}\n        onChange={handleChange}\n        imgSrc={imgSrc}\n        drawCtrl={drawCtrl}\n        ref={drawRef}\n        toggleTextTool={toggleTextTool}\n        toggleSelectTool={toggleSelectTool}\n      />\n      <SelectTool\n        drawRef={drawRef}\n        visible={selectShow}\n        clickPoint={clickPoint}\n      />\n      {pointText && (\n        <TextTool\n          drawRef={drawRef}\n          pointText={pointText}\n          renderSlow={renderSlow}\n        />\n      )}\n    </>\n  );\n};\n","import { PageWrapper } from \"./PageWrapper\";\nimport \"./page-wrapper.sass\";\nexport default PageWrapper;\n","import React, {\n  FC,\n  PropsWithChildren,\n  useContext,\n  useDebugValue,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Button, message } from \"antd\";\nimport { EditOutlined, EyeInvisibleOutlined } from \"@ant-design/icons\";\nimport localforage from \"localforage\";\nimport { once } from \"lodash\";\nimport \"./draw-ctrl.sass\";\n\nexport interface DrawCtrl {\n  mode: \"draw\" | \"erase\" | \"select\" | \"text\";\n  finger: boolean;\n  lineWidth: number;\n  eraserWidth: number;\n  color: string;\n  highlight: boolean;\n  lasso: boolean;\n  pixelEraser: boolean;\n  globalEraser: boolean;\n  widthList: number[];\n}\n\nexport const defaultWidthList = [10, 20, 30, 50];\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\n  mode: \"draw\",\n  finger: true,\n  lineWidth: 10,\n  eraserWidth: 10,\n  color: \"#000000\",\n  highlight: false,\n  lasso: false,\n  pixelEraser: false,\n  globalEraser: false,\n  widthList: defaultWidthList,\n};\n\nasync function getDrawCtrl() {\n  let drawCtrl = await localforage.getItem<DrawCtrl>(\"DRAW_CTRL\");\n  if (!drawCtrl) {\n    drawCtrl = defaultDrawCtrl;\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\n  }\n  return drawCtrl;\n}\n\nasync function saveDrawCtrl(drawCtrl: DrawCtrl) {\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\n}\n\nconst DrawCtrlContext = React.createContext({\n  drawCtrl: defaultDrawCtrl,\n  updateDrawCtrl: (() => {}) as (updated: Partial<DrawCtrl>) => void,\n});\n\nexport function useDrawCtrl() {\n  const { drawCtrl } = useContext(DrawCtrlContext);\n  useDebugValue(drawCtrl);\n  return drawCtrl;\n}\n\nexport function useUpdateDrawCtrl() {\n  const { updateDrawCtrl } = useContext(DrawCtrlContext);\n  return updateDrawCtrl;\n}\n\nexport const DrawCtrlProvider: FC<PropsWithChildren> = ({ children }) => {\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\n  useEffect(() => {\n    getDrawCtrl().then(setDrawCtrl);\n  }, []);\n\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\n    setDrawCtrl((prev) => {\n      const newCtrl = { ...prev, ...updated };\n      saveDrawCtrl(newCtrl);\n      return newCtrl;\n    });\n  };\n\n  const { finger } = drawCtrl;\n  useEffect(() => {\n    const detectPen = (e: PointerEvent) => {\n      const isPen = e.isPrimary && e.pointerType === \"pen\";\n      if (!isPen || !finger) return;\n      showPencilMsg(() => updateDrawCtrl({ finger: false }));\n    };\n    document.addEventListener(\"pointerup\", detectPen);\n    return () => document.removeEventListener(\"pointerup\", detectPen);\n  }, [finger]);\n\n  return (\n    <DrawCtrlContext.Provider value={{ drawCtrl, updateDrawCtrl }}>\n      {children}\n    </DrawCtrlContext.Provider>\n  );\n};\n\nconst showPencilMsg = once(async (cb: () => void) => {\n  const hide = () => {\n    message.destroy(\"DETECT_PENCIL\");\n    localforage.setItem(\"SKIP_PENCIL_MSG\", true);\n  };\n  if (await localforage.getItem(\"SKIP_PENCIL_MSG\")) return;\n  message.info({\n    content: (\n      <>\n        Your device supports\n        <Button\n          shape=\"round\"\n          size=\"small\"\n          icon={<EditOutlined />}\n          onClick={() => {\n            cb();\n            hide();\n          }}\n        >\n          Pencil only\n        </Button>\n        <Button\n          size=\"small\"\n          type=\"text\"\n          shape=\"circle\"\n          icon={<EyeInvisibleOutlined style={{ color: \"#999\" }} />}\n          onClick={hide}\n        />\n      </>\n    ),\n    key: \"DETECT_PENCIL\",\n    className: \"pencil-msg\",\n  });\n});\n","export function createVirtualCanvas(width: number, height: number) {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  if (!context) {\n    throw new Error(\"can't get virtual canvas context\");\n  }\n  canvas.width = width;\n  canvas.height = height;\n  return { canvas, context };\n}\n\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\n  canvas.width = 1;\n  canvas.height = 1;\n  const ctx = canvas.getContext('2d');\n  ctx?.clearRect(0, 0, 1, 1);\n}\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\nimport { defaultWidthList, DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { ColorCirle } from \"component/ColorCircle\";\nimport { WIDTH } from \"lib/draw/DrawState\";\nimport { Popover, Segmented, Slider } from \"antd\";\nimport { allColors } from \"lib/color\";\nimport { Setter } from \"lib/hooks\";\nimport IconFont from \"component/IconFont\";\nimport { List } from \"immutable\";\nimport \"./pen-panel.sass\";\n\nexport const PenPanel: FC<{\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n  drawCtrl: Partial<DrawCtrl>;\n}> = ({ updateDrawCtrl, drawCtrl }) => {\n  const { highlight, color } = drawCtrl;\n  const [panelBlur, setPanelBlur] = useState(false);\n\n  return (\n    <div className=\"pen-panel\" data-blur={panelBlur} data-hi={highlight}>\n      <div className=\"pen-status\">\n        <WidthSelect\n          updateDrawCtrl={updateDrawCtrl}\n          drawCtrl={drawCtrl}\n          setPanelBlur={setPanelBlur}\n        />\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\n      </div>\n      <ColorSelect\n        color={color || \"\"}\n        setColor={(c) => updateDrawCtrl({ color: c })}\n      />\n    </div>\n  );\n};\n\nexport const WidthSelect: FC<{\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n  drawCtrl: Partial<DrawCtrl>;\n  setPanelBlur?: Setter<boolean>;\n  field?: \"lineWidth\" | \"eraserWidth\";\n}> = ({\n  updateDrawCtrl,\n  drawCtrl,\n  setPanelBlur = () => {},\n  field = \"lineWidth\",\n}) => {\n  const currWidth = drawCtrl[field];\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\n\n  const chosen = useMemo(\n    () => widthList.indexOf(currWidth ?? -1),\n    [currWidth, widthList]\n  );\n\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\n  useEffect(() => {\n    if (popShow.includes(true)) setPanelBlur(true);\n    else setPanelBlur(false);\n  }, [popShow, setPanelBlur]);\n\n  const realSizeStyle = (width: number) =>\n    ({\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width})`,\n    } as CSSProperties);\n\n  const options = [\n    { value: -1, label: null },\n    ...widthList.map((width, index) => ({\n      value: index,\n      label: (\n        <Popover\n          open={popShow.get(index)}\n          onOpenChange={(v) => setPopShow((prev) => prev.set(index, v))}\n          trigger={chosen === index ? [\"click\"] : []}\n          placement=\"bottom\"\n          destroyTooltipOnHide\n          content={\n            <Slider\n              min={5}\n              max={100}\n              className=\"ctrl-slider\"\n              defaultValue={width}\n              onAfterChange={(w) => {\n                if (widthList.includes(w)) {\n                  setPopShow((prev) => prev.set(index, false));\n                  return updateDrawCtrl({ [field]: w });\n                }\n                const newWL = widthList.slice();\n                newWL[index] = w;\n                updateDrawCtrl({ widthList: newWL, [field]: w });\n              }}\n            />\n          }\n        >\n          <div className=\"circle-wrapper\" style={realSizeStyle(width)}>\n            <ColorCirle className={\"width-circle \" + field} color={color} />\n          </div>\n        </Popover>\n      ),\n    })),\n  ];\n\n  return (\n    <Segmented\n      className=\"width-seg\"\n      value={chosen}\n      options={options}\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 10 })}\n    />\n  );\n};\n\nconst HighlightSwitch: FC<{\n  checked?: boolean;\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n}> = ({ checked = false, updateDrawCtrl }) => {\n  return (\n    <label className=\"hi-wrapper\">\n      <input\n        type=\"checkbox\"\n        name=\"highlight\"\n        checked={checked}\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\n      />\n      <div className=\"hi-switch\">\n        <IconFont type=\"icon-Highlight\" />\n      </div>\n    </label>\n  );\n};\n\nexport const ColorSelect: FC<{\n  color: string;\n  setColor: (color: string) => void;\n}> = ({ setColor, color }) => (\n  <div className=\"color-select\">\n    {allColors.map((c) => (\n      <label key={c}>\n        <input\n          checked={color === c}\n          type=\"radio\"\n          name=\"color\"\n          onChange={(e) => e.target.checked && setColor(c)}\n        />\n        <div\n          data-color={c}\n          className=\"circle\"\n          style={{ backgroundColor: c, borderColor: c }}\n        />\n      </label>\n    ))}\n  </div>\n);\n"],"names":["createFromIconfontCN","scriptUrl","rotateCursorFactory","src","size","cache","Map","half","createVirtualCanvas","canvas","context","image","Image","angle","Math","round","cached","get","translate","rotate","PI","drawImage","data","toDataURL","clearRect","resetTransform","set","getRotateCursor1x","getRotateCursor2x","getRotateCurcor","data1x","data2x","usePreventTouch","allowFinger","isTouch","useRef","checkPoniter","e","isPrimary","current","pointerType","preventTouch","touch","touches","touchType","isApplePencil","length","isEventValid","stopPropagation","onPointerDownCapture","onPointerMoveCapture","onTouchStartCapture","onTouchMoveCapture","getGridRange","bounds","topLeft","bottomRight","floor","x","ceil","y","setGridItem","grid","item","replaced","strokeBounds","xmin","xmax","ymin","ymax","delete","add","getGridItems","itemSet","Set","forEach","Array","from","P_ZERO","Point","DrawRaw","React","ref","drawState","otherStates","onChange","drawCtrl","defaultDrawCtrl","readonly","imgSrc","toggleSelectTool","toggleTextTool","width","height","projSize","useMemo","Size","mode","finger","lasso","eraserWidth","canvasEl","scope","paper","useState","group","setGroup","teamGroup","setTeamGroup","usePaperItem","path","setPath","rotateHandle","setRotateHandle","useEvent","showSelectTool","bc","bottomCenter","view","projectToView","useLayoutEffect","cvs","scp","setup","settings","handleSize","hitTolerance","Layer","visible","project","layers","activate","Tool","remove","releaseCanvas","useEffect","rects","paintRects","r","useSize","canvasWidth","ratio","viewSize","multiply","scale","l","update","imgRaster","setImgRaster","raster","Raster","addChild","sendToBack","onLoad","fitBounds","Rectangle","bringToFront","mergedStrokes","DrawState","getStrokeMap","renderSlow","deferTimerID","deferRender","setDefer","l1","render","tempGroup","tempTeamGroup","removeChildren","stroke","self","hasStroke","uid","paintStroke","push","unrasterizeCanvas","pathClones","c","timeBeforeUpdate","performance","now","requestUpdate","requestAnimationFrame","updateDuration","window","setTimeout","clearTimeout","hitRef","selected","setSelected","paperMode","chosenIDs","setChosenIDs","chosenItems","IDSet","filter","has","name","resetSelect","undefined","type","lastOp","test","pointText","ptProxy","Proxy","layerRaster","rasterizeLayer","clip","force","l0","clipMask","prevClip","firstChild","replaceWith","insertAbove","dpi","devicePixelRatio","resolution","rasterize","addTo","unrasterizeLayer","lr","canvasRaster","rasterizeCanvas","element","opacity","cr","downPath","startStroke","point","downLasso","downRect","startRect","selectionDragged","handleDown","draw","erase","select","hitRes","hitTest","segments","contains","text","dragPath","smooth","moveSelected","delta","handleDrag","s1","s2","s3","segment","center","axis","subtract","line","setCursor","moveP","baseP","next","diagonal","strokeWidth","rBaseP","tool","maxDistance","erased","globalEraser","pixelEraser","itemGrid","wnum","hnum","gernerateGrid","handleToolDrag","layer","ew","hitOption","class","tolerance","parent","hitTestAll","topItem","radius","circle","Path","insert","sub","trace","guide","handleUp","simplify","clone","pathData","exportJSON","prev","items","clear","splitters","map","paths","flattenCP","p","erasedList","abs","area","selection","closePath","moveDash","checkLasso","link","topCenter","lastSegment","handleSelectedCursor","updateMutation","submitText","handleTextCursor","getClickedText","t","isSelfItem","startText","justification","prevTextData","cursor","currScale","setCurrScale","lineWidth","double","getSvg","img1x","img2x","getCircleCursor","handleMove","handleKeyDown","up","down","left","right","key","preventDefault","handleKeyUp","deleteSelected","handler","onMouseDown","onMouseDrag","onMouseUp","onMouseMove","onKeyDown","onKeyUp","mutations","mutateStyle","updated","updateGroupStyle","duplicateSelected","transP","divide","copies","pathDataList","IDs","rasterizeSelected","cancelText","content","mutatePointText","cb","pt","useImperativeHandle","document","addEventListener","removeEventListener","prevScale","beforeViewDragged","usePinch","memo","offset","first","last","origin","lastOrigin","elPos","originRawP","getBoundingClientRect","originViewP","originPorjP","viewToProject","zoom","dScale","Promise","all","putCenterBack","scaleView","then","scaleBounds","max","min","rubberband","target","useWheel","event","ctrlKey","deltaP","eventOptions","passive","touchHandler","className","style","displayName","Draw","tuple","useDebugValue","cacheMap","WeakMap","importJSON","console","error","l2","bgRect","clip1","clip2","fillColor","Color","clipped","rect","onFrame","slow","color","highlight","strokeColor","alpha","blendMode","strokeJoin","strokeCap","dashOffset","dashArray","resolve","aniCount","pow","targetCenter","minSize","minX","minY","maxX","maxY","targetX","targetY","getTargetCenter","equals","move","isInside","compare","intersects","checkedP","newColor","fill","fontSize","fontFamily","cp","isEmpty","children","flat","btnProps","shape","getPosVars","getObjVars","obj","unit","result","Object","entries","value","SelectTool","drawRef","clickPoint","currDrawCtrl","setCurrDrawCtrl","trigger","placement","overlayClassName","getPopupContainer","parentElement","destroyTooltipOnHide","PenPanel","updateDrawCtrl","icon","BgColorsOutlined","CopyOutlined","onClick","PictureOutlined","imageData","Modal","title","alt","PictureTwoTone","okText","onOk","saveAs","split","danger","DeleteOutlined","TextTool","position","leading","rotation","fontWeight","bottomLeft","bx","by","bbx","bby","optionAtBottom","viewMatrix","scaling","internalBounds","lineHeight","toCSS","allColors","fontColorBtn","setColor","overlayStyle","IconFont","parseFontStyle","isItalic","isBold","fontStyleCSS","fontStyle","fontFamilySelect","popupClassName","v","bordered","virtual","dropdownMatchSelectWidth","options","label","getBaselineRatio","autoFocus","placeholder","toggleBold","BoldOutlined","toggleItalic","ItalicOutlined","div","createElement","innerText","assign","body","appendChild","span","display","r0","removeChild","PageWrapperRaw","thumbnail","teamStateMap","updateState","pdfIndex","noteID","preview","onViewChange","preload","ignores","skipInView","threshold","range","useInView","skip","entry","intersectionRatio","fullImg","setFullImg","loadImage","useCallback","once","getNotePageImage","show","deleteAll","toList","toArray","imageLoaded","Boolean","drawShow","viewBox","DrawWrapper","useDrawCtrl","selectShow","setSelectShow","setClickPoint","setPointText","setRenderSlow","handleChange","arg","newDS","active","defaultWidthList","widthList","getDrawCtrl","localforage","saveDrawCtrl","DrawCtrlContext","useContext","useUpdateDrawCtrl","DrawCtrlProvider","setDrawCtrl","newCtrl","detectPen","showPencilMsg","Provider","hide","message","EditOutlined","EyeInvisibleOutlined","getContext","Error","ctx","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","field","currWidth","chosen","indexOf","List","popShow","setPopShow","includes","realSizeStyle","WIDTH","index","open","onOpenChange","defaultValue","onAfterChange","w","newWL","slice","i","backgroundColor","borderColor"],"sourceRoot":""}