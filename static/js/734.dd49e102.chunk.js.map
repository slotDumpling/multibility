{"version":3,"file":"static/js/734.dd49e102.chunk.js","mappings":"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","sources":["component/IconFont.tsx","component/Draw/cursor/cursor.ts","component/Draw/touch.ts","component/Draw/grid.tsx","component/Draw/Draw.tsx","pages/reader/tools/DrawTools.tsx","lib/ErrorBoundary.tsx","component/PageWrapper/PageWrapper.tsx","component/PageWrapper/index.tsx","lib/draw/DrawCtrl.tsx","lib/draw/canvas.ts","pages/reader/tools/PenPanel.tsx"],"sourcesContent":["import { createFromIconfontCN } from \"@ant-design/icons\";\n\nexport default createFromIconfontCN({\n  scriptUrl: \"//at.alicdn.com/t/c/font_3181679_61bmx4utsp.js\",\n});\n","import { createVirtualCanvas } from \"lib/draw/canvas\";\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport rotateImg2x from \"./rotate2x.png\";\nimport rotateImg1x from \"./rotate1x.png\";\n\nexport const getCircleCursor = (drawCtrl: DrawCtrl, ratio: number) => {\n  const { lineWidth, eraserWidth, mode } = drawCtrl;\n  const size = ratio * (mode === \"erase\" ? eraserWidth : lineWidth);\n  if (size < 5) return \"crosshair\";\n  const half = size / 2;\n  const double = size * 2;\n\n  const getSvg = (size: number) =>\n    `data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23DDD7\" width=\"${size}\" height=\"${size}\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"5\"/></svg>`;\n\n  const img1x = getSvg(size);\n  const img2x = getSvg(double);\n\n  return `-webkit-image-set(url('${img1x}')1x, url('${img2x}')2x) ${half} ${half}, crosshair`;\n};\n\nconst rotateCursorFactory = (src: string, size: number) => {\n  const cache = new Map<number, string>();\n  const half = size / 2;\n  const { canvas, context } = createVirtualCanvas(size, size);\n  const image = new Image();\n  image.src = src;\n  return (angle: number) => {\n    angle = Math.round(angle / 10) * 10;\n    const cached = cache.get(angle);\n    if (cached) return cached;\n    context.translate(half, half);\n    context.rotate((angle * Math.PI) / 180);\n    context.drawImage(image, -half, -half);\n    const data = canvas.toDataURL();\n    context.clearRect(-half, -half, size, size);\n    context.resetTransform();\n    cache.set(angle, data);\n    return data;\n  };\n};\n\nconst getRotateCursor1x = rotateCursorFactory(rotateImg1x, 32);\nconst getRotateCursor2x = rotateCursorFactory(rotateImg2x, 64);\n\nexport const getRotateCurcor = (angle: number) => {\n  const data1x = getRotateCursor1x(angle);\n  const data2x = getRotateCursor2x(angle);\n  return `-webkit-image-set(url(${data1x})1x, url(${data2x})2x) 16 16, auto`;\n};\n","import { PointerEvent, TouchEvent, useEffect, useRef } from \"react\";\n\ntype iOSTouch = Touch & {\n  force?: number;\n  touchType?: \"stylus\" | \"direct\";\n};\n\nexport function isApplePencil(e: TouchEvent) {\n  const touch = e.touches[0] as iOSTouch;\n  return touch?.touchType === \"stylus\";\n}\n\nexport function usePreventTouch(\n  allowFinger: boolean\n): React.HTMLAttributes<HTMLDivElement> {\n  const isTouch = useRef(false);\n  const checkPoniter = (e: PointerEvent) =>\n    e.isPrimary && (isTouch.current = e.pointerType === \"touch\");\n\n  const isEventValid = (e: TouchEvent) =>\n    !isTouch.current ||\n    isApplePencil(e) ||\n    (allowFinger && e.touches.length === 1);\n\n  const preventTouch = (e: TouchEvent) =>\n    isEventValid(e) || e.stopPropagation();\n\n  return {\n    onPointerDownCapture: checkPoniter,\n    onPointerMoveCapture: checkPoniter,\n    onTouchStartCapture: preventTouch,\n    onTouchMoveCapture: preventTouch,\n  };\n}\n\nexport function usePreventGesture() {\n  useEffect(() => {\n    const handler = (e: Event) => e.preventDefault();\n    document.addEventListener(\"gesturestart\", handler);\n    document.addEventListener(\"gesturechange\", handler);\n    document.addEventListener(\"gestureend\", handler);\n    return () => {\n      document.removeEventListener(\"gesturestart\", handler);\n      document.removeEventListener(\"gesturechange\", handler);\n      document.removeEventListener(\"gestureend\", handler);\n    };\n  }, []);\n}\n","export const gernerateGrid = (\n  group: paper.Item[],\n  width: number,\n  height: number\n) => {\n  const wnum = Math.ceil(width / 100);\n  const hnum = Math.ceil(height / 100);\n  const grid = Array.from({ length: wnum }, () =>\n    Array.from({ length: hnum }, () => new Set<paper.Item>())\n  );\n  group.forEach((item) => setGridItem(grid, item));\n  return grid;\n};\n\nconst getGridRange = (bounds: paper.Rectangle) => {\n  const { topLeft, bottomRight } = bounds;\n  return [\n    Math.floor(topLeft.x / 100),\n    Math.ceil(bottomRight.x / 100),\n    Math.floor(topLeft.y / 100),\n    Math.ceil(bottomRight.y / 100),\n  ] as [number, number, number, number];\n};\nexport const setGridItem = (\n  grid: Set<paper.Item>[][],\n  item: paper.Item,\n  replaced?: paper.Item\n) => {\n  const bounds = (replaced ?? item).strokeBounds;\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\n  for (let x = xmin; x <= xmax; x += 1) {\n    for (let y = ymin; y <= ymax; y += 1) {\n      replaced && grid[x]?.[y]?.delete(replaced);\n      grid[x]?.[y]?.add(item);\n    }\n  }\n};\nexport const getGridItems = (\n  grid: Set<paper.Item>[][],\n  bounds: paper.Rectangle\n) => {\n  const itemSet = new Set<paper.Item>();\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\n  for (let x = xmin; x <= xmax; x += 1) {\n    for (let y = ymin; y <= ymax; y += 1) {\n      grid[x]?.[y]?.forEach((item) => itemSet.add(item));\n    }\n  }\n  return Array.from(itemSet);\n};\n","import React, {\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useDebugValue,\n  useImperativeHandle,\n  useLayoutEffect,\n} from \"react\";\nimport paper, {\n  Path,\n  Size,\n  Point,\n  Color,\n  Raster,\n  Layer,\n  Rectangle,\n} from \"paper/dist/paper-core\";\nimport { usePinch, useWheel } from \"@use-gesture/react\";\nimport useSize from \"@react-hook/size\";\nimport { useMemoizedFn as useEvent } from \"ahooks\";\nimport { DrawState, Mutation, Splitter, Stroke } from \"lib/draw/DrawState\";\nimport { defaultDrawCtrl, DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { releaseCanvas } from \"lib/draw/canvas\";\nimport { getCircleCursor, getRotateCurcor } from \"./cursor\";\nimport { usePreventTouch, usePreventGesture } from \"./touch\";\nimport { Setter } from \"lib/hooks\";\nimport { setGridItem, getGridItems, gernerateGrid } from \"./grid\";\n\nexport interface DrawRefType {\n  deleteSelected: () => void;\n  duplicateSelected: () => void;\n  mutateStyle: (updated: Partial<DrawCtrl>) => void;\n  mutatePointText: (cb: (prev: paper.PointText) => void) => void;\n}\ninterface DrawPropType {\n  drawState: DrawState;\n  otherStates?: DrawState[];\n  onChange?: Setter<DrawState>;\n  toggleSelectTool?: (active: boolean, clickPoint?: paper.Point) => void;\n  toggleTextTool?: (pt: paper.PointText | undefined, slow: boolean) => void;\n  drawCtrl?: DrawCtrl;\n  readonly?: boolean;\n  imgSrc?: string;\n}\n\nconst HIT_TOLERANCE = 20;\nexport const P_ZERO = new Point(0, 0);\n\nconst DrawRaw = React.forwardRef<DrawRefType, DrawPropType>(\n  (\n    {\n      drawState,\n      otherStates,\n      onChange = () => {},\n      drawCtrl = defaultDrawCtrl,\n      readonly = false,\n      imgSrc,\n      toggleSelectTool = () => {},\n      toggleTextTool = () => {},\n    },\n    ref\n  ) => {\n    const { width, height } = drawState;\n    const projSize = useMemo(() => new Size(width, height), [width, height]);\n    const { mode, finger, lasso, eraserWidth } = drawCtrl;\n\n    const canvasEl = useRef<HTMLCanvasElement>(null);\n    const scope = useRef(new paper.PaperScope());\n    const [group, setGroup] = useState<paper.Item[]>([]);\n    const [teamGroup, setTeamGroup] = useState<paper.Item[]>([]);\n    const [path, setPath] = usePaperItem<paper.Path>();\n    const [rotateHandle, setRotateHandle] = usePaperItem<paper.Path>();\n\n    toggleSelectTool = useEvent(toggleSelectTool);\n    toggleTextTool = useEvent(toggleTextTool);\n    const showSelectTool = () => {\n      if (!path) return;\n      const bc = path.bounds.bottomCenter;\n      const { view } = scope.current;\n      toggleSelectTool(true, view.projectToView(bc));\n    };\n\n    useLayoutEffect(() => {\n      const cvs = canvasEl.current;\n      const scp = scope.current;\n      if (!cvs) return;\n\n      scp.setup(cvs);\n      scp.settings.handleSize = 10;\n      scp.settings.hitTolerance = HIT_TOLERANCE;\n      [0, 1, 2].forEach(() => (new Layer().visible = false));\n      scp.project.layers[2]?.activate();\n      new scp.Tool();\n\n      return () => {\n        scp.view?.remove();\n        releaseCanvas(cvs);\n        scp.remove();\n        scp.clear();\n      };\n    }, []);\n\n    useEffect(() => {\n      scope.current.activate();\n      const { layers } = scope.current.project;\n      const rects = paintRects(layers, projSize);\n\n      return () => rects.forEach((r) => r.remove());\n    }, [projSize]);\n\n    const [canvasWidth] = useSize(canvasEl);\n    const ratio = canvasWidth / width;\n    const currCenter = useRef(new Point(projSize).divide(2));\n    const [currScale, setCurrScale] = useState(1);\n    const prevScale = useRef(1);\n\n    useEffect(() => {\n      if (!ratio) return;\n      const scp = scope.current;\n      scp.view.viewSize = projSize.multiply(ratio);\n      scp.view.zoom = ratio * prevScale.current;\n      scp.view.center = currCenter.current;\n      scp.project.layers.forEach((l) => (l.visible = true));\n      scp.view.update();\n    }, [ratio, projSize]);\n\n    const [imgRaster, setImgRaster] = usePaperItem();\n    useEffect(() => {\n      if (!imgSrc) return;\n      scope.current.activate();\n      const raster = new Raster(imgSrc);\n      raster.project.layers[0]?.addChild(raster);\n      raster.sendToBack();\n      raster.onLoad = () => {\n        raster.view.update();\n        raster.fitBounds(new Rectangle(projSize));\n        raster.bringToFront();\n      };\n      setImgRaster(raster);\n    }, [imgSrc, projSize, setImgRaster]);\n\n    const mergedStrokes = useMemo(\n      () => DrawState.mergeStates(drawState, ...(otherStates || [])),\n      [drawState, otherStates]\n    );\n\n    const renderSlow = useRef(false);\n\n    const deferTimerID = useRef(0);\n    const deferRender = useRef(false);\n    const setDefer = () => (deferRender.current = renderSlow.current);\n    if (readonly) setDefer();\n\n    useEffect(() => {\n      const [, l1] = scope.current.project.layers;\n      if (!l1) return;\n      const render = () => {\n        scope.current.activate();\n        const tempGroup: paper.Item[] = [];\n        const tempTeamGroup: paper.Item[] = [];\n\n        // clean-up layer_1 except the clip mask.\n        l1.removeChildren(1);\n\n        mergedStrokes.forEach((stroke) => {\n          const self = drawState.hasStroke(stroke.uid);\n          const item = paintStroke(stroke, l1);\n          if (self && item) tempGroup.push(item);\n          if (item) tempTeamGroup.push(item);\n        });\n        setGroup(tempGroup);\n        setTeamGroup(tempTeamGroup);\n\n        unrasterizeCanvas();\n        deferRender.current = false;\n        pathClones.current.forEach((c) => c.remove());\n        pathClones.current = [];\n\n        const timeBeforeUpdate = performance.now();\n        scope.current.view.requestUpdate();\n        requestAnimationFrame(() => {\n          const timeAfterUpdate = performance.now();\n          const updateDuration = timeAfterUpdate - timeBeforeUpdate;\n          renderSlow.current = updateDuration > 16;\n        });\n      };\n\n      // render immediately\n      if (!deferRender.current) return void render();\n      // defer render for 1000ms\n      deferTimerID.current = window.setTimeout(render, 1000);\n      // clean-up previous render timer.\n      return () => window.clearTimeout(deferTimerID.current);\n    }, [mergedStrokes, drawState]);\n\n    const hitRef = useRef<paper.HitResult>();\n    const [selected, setSelected] = useState(false);\n    const paperMode = mode === \"select\" && selected ? \"selected\" : mode;\n    const [chosenIDs, setChosenIDs] = useState<string[]>([]);\n    const chosenItems = useMemo(() => {\n      const IDSet = new Set(chosenIDs);\n      return teamGroup.filter((item) => IDSet.has(item.name));\n    }, [teamGroup, chosenIDs]);\n\n    const resetSelect = useEvent(() => {\n      setSelected(false);\n      setPath(undefined);\n      setRotateHandle(undefined);\n      setChosenIDs([]);\n      toggleSelectTool(false);\n    });\n\n    useEffect(() => {\n      if (mode === \"select\") return resetSelect;\n    }, [mode, resetSelect]);\n    useEffect(() => resetSelect, [lasso, resetSelect]);\n\n    // reset selection after redo/undo\n    useEffect(() => {\n      const type = drawState.lastOp?.type ?? \"\";\n      if (/^redo|undo$/.test(type)) resetSelect();\n    }, [drawState, resetSelect]);\n\n    useEffect(() => {\n      toggleSelectTool(false);\n      if (pointText.current) {\n        const ptProxy = new Proxy(pointText.current, {});\n        toggleTextTool(ptProxy, renderSlow.current);\n      }\n    }, [canvasWidth, toggleSelectTool, toggleTextTool]);\n\n    const layerRaster = useRef<paper.Raster>();\n    const lrReusable = useRef(false);\n    // layer raster is no longer reusable after state changes.\n    useEffect(() => void (lrReusable.current = false), [mergedStrokes]);\n\n    const rasterizeLayer = () => {\n      if (!renderSlow.current) return;\n      const [l0, l1] = scope.current.project.layers;\n      if (!l0 || !l1) return;\n      l1.visible = true;\n      // move pdf image above clip mask before rasterizing.\n      if (imgRaster) l1.insertChild(1, imgRaster);\n\n      const dpi = 72 * devicePixelRatio;\n      const resolution = (canvasWidth / width) * dpi;\n      let raster = layerRaster.current;\n      if (!raster || !lrReusable.current) {\n        raster = layerRaster.current = l1.rasterize({ raster, resolution });\n        lrReusable.current = true;\n      }\n      raster.visible = true;\n\n      l1.visible = false;\n      imgRaster?.addTo(l0);\n    };\n    const unrasterizeLayer = () => {\n      scope.current.activate();\n      const [, l1] = scope.current.project.layers;\n      const lr = layerRaster.current;\n      if (!l1 || !lr) return;\n      l1.visible = true;\n      lr.visible = false;\n    };\n\n    const canvasRaster = useRef<paper.Raster>();\n    // raster changes with the size of canvas element\n    useEffect(\n      () => () => {\n        canvasRaster.current?.remove();\n        canvasRaster.current = undefined;\n      },\n      [canvasWidth]\n    );\n    useLayoutEffect(\n      () => () => {\n        releaseCanvas(layerRaster.current?.canvas);\n        releaseCanvas(canvasRaster.current?.canvas);\n      },\n      []\n    );\n    const rasterizeCanvas = () => {\n      if (!renderSlow.current) return;\n      // rasterize the canvas only once\n      if (canvasRaster.current?.visible === true) return;\n      scope.current.activate();\n      const { view } = scope.current;\n      // create a raster of the canvas element's size only once.\n      const raster = (canvasRaster.current ??= new Raster(\n        view.viewSize.multiply(devicePixelRatio)\n      ));\n      raster.drawImage(view.element, P_ZERO);\n      raster.fitBounds(view.bounds);\n      raster.visible = true;\n      raster.opacity = process.env.NODE_ENV === \"production\" ? 1 : 0.5;\n      const [, l1] = scope.current.project.layers;\n      l1 && (l1.visible = false);\n    };\n    const unrasterizeCanvas = () => {\n      scope.current.activate();\n      // if the paper scope were removed.\n      if (!scope.current?.project) return;\n      const [, l1] = scope.current.project.layers;\n      const cr = canvasRaster.current;\n      const lr = layerRaster.current;\n      if (!l1 || !cr) return;\n      cr.visible = false;\n      // keep layer_1 hidden unless all 2 raster is hidden.\n      if (lr?.visible !== true) l1.visible = true;\n    };\n\n    const downPath = (e: paper.MouseEvent) => {\n      rasterizeCanvas();\n      setPath(startStroke(drawCtrl, e.point, renderSlow.current));\n    };\n    const downLasso = (e: paper.MouseEvent) => {\n      setPath(startStroke(drawCtrl, e.point));\n      requestAnimationFrame(rasterizeCanvas);\n    };\n    const downRect = (e: paper.MouseEvent) => {\n      // reset rect path before rasterizing;\n      setPath(startRect(e.point));\n      requestAnimationFrame(rasterizeCanvas);\n    };\n\n    const selectionDragged = useRef(false);\n    const handleDown = {\n      draw(e: paper.MouseEvent) {\n        setDefer();\n        downPath(e);\n      },\n      erase: downPath,\n      select: lasso ? downLasso : downRect,\n      selected(e: paper.MouseEvent) {\n        selectionDragged.current = false;\n        if (!path) return;\n        if (!lasso) {\n          // check if the point hit the segment point.\n          let hitRes =\n            path.hitTest(e.point, { segments: true }) ??\n            rotateHandle?.hitTest(e.point, { segments: true, selected: true });\n          hitRef.current = hitRes;\n          if (hitRes) return;\n        }\n\n        // if click outside, reset the selection.\n        if (!path.contains(e.point)) {\n          resetSelect();\n          setRotateHandle(undefined);\n          lasso ? downLasso(e) : downRect(e);\n        }\n      },\n      text: null,\n    }[paperMode];\n\n    const dragPath = (e: paper.MouseEvent) => {\n      // cancel previous render timer.\n      window.clearTimeout(deferTimerID.current);\n      path?.add(e.point);\n      path?.smooth();\n    };\n    const resizeRect = (e: paper.MouseEvent) => {\n      if (!path) return;\n      const { x, y } = e.point;\n      const [, s1, s2, s3] = path.segments;\n      if (!s1 || !s2 || !s3) return;\n      s1.point.x = x;\n      s2.point = e.point;\n      s3.point.y = y;\n      path.selected = true;\n    };\n    const moveSelected = (delta: paper.Point) => {\n      chosenItems.forEach((item) => item.translate(delta));\n      path?.translate(delta);\n      rotateHandle?.translate(delta);\n    };\n\n    const handleDrag = {\n      draw: dragPath,\n      erase: dragPath,\n      select: lasso ? dragPath : resizeRect,\n      selected(e: paper.MouseEvent) {\n        const hitRes = hitRef.current;\n        if (!path) return;\n        toggleSelectTool(false);\n        selectionDragged.current = true;\n        if (hitRes?.segment) {\n          const segment = hitRes.segment;\n          const rotating = segment.selected;\n          if (rotating) {\n            // rotate select items\n            const { center } = path.bounds;\n            const axis = segment.point.subtract(center);\n            const line = e.point.subtract(center);\n            setCursor(getRotateCurcor(line.angle));\n            const angle = line.angle - axis.angle;\n            path.rotate(angle, center);\n            rotateHandle?.rotate(angle, center);\n            chosenItems.forEach((item) => item?.rotate(angle, center));\n          } else {\n            // resize selected items\n            const moveP = segment.point;\n            const baseP = segment.next.next.point;\n            const diagonal = moveP.subtract(baseP);\n            const projection = e.point.subtract(baseP).project(diagonal);\n            const scale = projection.x / diagonal.x;\n            if (scale < 0) return;\n\n            path.scale(scale, baseP);\n            chosenItems.forEach((item) => {\n              item.scale(scale, baseP);\n              item.strokeWidth *= scale;\n            });\n\n            // reposition the rotate handle.\n            if (!rotateHandle) return;\n            rotateHandle.scale(scale, baseP);\n            const rBaseP = rotateHandle.segments[0]?.point;\n            if (!rBaseP) return;\n            rotateHandle.scale(100 / rotateHandle.length, rBaseP);\n          }\n        } else {\n          moveSelected(e.delta);\n        }\n      },\n      text: null,\n    }[paperMode];\n\n    useEffect(() => {\n      scope.current.tool.maxDistance = eraserWidth;\n    }, [eraserWidth]);\n    const erased = useRef(new Set<string>());\n    const replaced = useRef(new Map<string, paper.Item>());\n\n    const { globalEraser, pixelEraser } = drawCtrl;\n    const itemGrid = useMemo(() => {\n      if (!/^(erase|select)$/.test(mode)) return [];\n      const items =\n        globalEraser &&\n        ((mode === \"erase\" && !pixelEraser) || mode === \"select\")\n          ? teamGroup\n          : group;\n      return gernerateGrid(items, width, height);\n    }, [group, width, height, mode, teamGroup, globalEraser, pixelEraser]);\n\n    const handleToolDrag = (e: paper.ToolEvent) => {\n      const layer = scope.current.project.layers[1];\n      if (paperMode !== \"erase\" || !layer) return;\n      const ew = eraserWidth;\n\n      const hitOption = { class: paper.Path, stroke: true, tolerance: ew / 2 };\n      const bounds = new Rectangle(e.point.subtract(ew), new Size(ew, ew));\n\n      getGridItems(itemGrid, bounds).forEach((item) => {\n        if (erased.current.has(item.name)) return;\n        if (!item.parent) return;\n        item.hitTestAll(e.point, hitOption)?.forEach(({ item }) => {\n          if (!(item instanceof paper.Path)) return;\n          let topItem: paper.PathItem = item;\n          while (topItem.parent !== layer) {\n            if (!(topItem.parent instanceof paper.PathItem)) break;\n            topItem = topItem.parent;\n          }\n          const { name } = topItem;\n\n          if (pixelEraser) {\n            const radius = (ew + item.strokeWidth) / 2;\n            const circle = new Path.Circle({\n              center: e.point,\n              radius,\n              insert: false,\n            });\n\n            const sub = item.subtract(circle, { trace: false });\n            item.replaceWith(sub);\n            if (topItem === item) {\n              setGridItem(itemGrid, sub, item);\n              topItem = sub;\n            }\n            replaced.current.set(name, topItem);\n          } else {\n            topItem.opacity = 0.5;\n            topItem.guide = true;\n            erased.current.add(name);\n          }\n        });\n      });\n    };\n\n    const pathClones = useRef<paper.Path[]>([]);\n    const handleUp = {\n      draw() {\n        if (!path || path.segments.length <= 1) {\n          // if canvas is clicked without any path in queue.\n          if (!pathClones.current.length) unrasterizeCanvas();\n          return;\n        }\n        path.simplify();\n        if (renderSlow.current) pathClones.current.push(path.clone());\n        const pathData = path.exportJSON();\n        onChange((prev) => DrawState.addStroke(prev, pathData));\n        setPath(undefined);\n      },\n      erase() {\n        unrasterizeCanvas();\n        setPath(undefined);\n        if (drawCtrl.pixelEraser) {\n          const items = Array.from(replaced.current);\n          replaced.current.clear();\n          const splitters: Splitter[] = items.map(([uid, item]) => {\n            const paths = flattenCP(item);\n            paths.forEach((p) => (p.name = \"\"));\n            return [uid, paths.map((p) => p.exportJSON())];\n          });\n          if (!splitters.length) return;\n          onChange((prev) => DrawState.splitStrokes(prev, splitters));\n        } else {\n          const erasedList = Array.from(erased.current);\n          erased.current.clear();\n          if (!erasedList.length) return;\n          onChange((prev) => DrawState.eraseStrokes(prev, erasedList));\n        }\n      },\n      select() {\n        unrasterizeCanvas();\n        if (!path) return;\n        if (Math.abs(path.area) < 1_000) return setPath(undefined);\n\n        let selection: string[];\n        if (lasso) {\n          path.closePath();\n          path.simplify();\n          if (!renderSlow.current) moveDash(path);\n          const items = getGridItems(itemGrid, path.bounds);\n          selection = checkLasso(items, path);\n        } else {\n          const items = getGridItems(itemGrid, path.bounds);\n          selection = checkLasso(items, path);\n          const link = new Path();\n          const { topCenter } = path.bounds;\n          link.add(topCenter, topCenter.subtract(new Point(0, 100)));\n          link.lastSegment.selected = true;\n          setRotateHandle(link);\n        }\n        setSelected(true);\n        setChosenIDs(selection);\n        showSelectTool();\n      },\n      selected(e: paper.MouseEvent) {\n        handleSelectedCursor(e);\n        if (!path || !selectionDragged.current) return;\n        showSelectTool();\n        updateMutation();\n      },\n      text(e: paper.MouseEvent) {\n        if (pointText.current) {\n          submitText();\n          return handleTextCursor(e);\n        }\n        const [, l1] = scope.current.project.layers;\n        if (!l1) return;\n\n        const item = getClickedText(l1, e.point);\n        const t =\n          item && (isSelfItem(item) || globalEraser)\n            ? item\n            : startText(e.point);\n        t.justification = \"left\";\n        pointText.current = t;\n        prevTextData.current = t.exportJSON();\n\n        // hide pointText before rasterizing;\n        if (renderSlow.current) t.visible = false;\n        requestAnimationFrame(() => {\n          rasterizeCanvas();\n          t.visible = true;\n        });\n\n        toggleTextTool(t, renderSlow.current);\n      },\n    }[paperMode];\n\n    const [cursor, setCursor] = useState(\"auto\");\n    useEffect(() => {\n      if (paperMode === \"text\" || paperMode === \"select\") {\n        setCursor(\"crosshair\");\n      } else if (paperMode === \"selected\") {\n        setCursor(lasso ? \"crosshair\" : \"nwse-resize\");\n      } else if (paperMode === \"draw\" || paperMode === \"erase\") {\n        setCursor(getCircleCursor(drawCtrl, ratio * currScale));\n      }\n    }, [paperMode, lasso, drawCtrl, ratio, currScale]);\n\n    const handleSelectedCursor = (e: paper.MouseEvent) => {\n      if (!path) return;\n      const hitRes =\n        path.hitTest(e.point, { segments: true }) ??\n        rotateHandle?.hitTest(e.point, { segments: true, selected: true });\n      if (hitRes?.segment) {\n        if (hitRes.segment.selected) {\n          const center = path.bounds.center;\n          if (!center) return;\n          const line = hitRes.segment.point.subtract(center);\n          return setCursor(getRotateCurcor(line.angle));\n        }\n        const moveP = hitRes.segment.point;\n        const baseP = hitRes.segment.next.next.point;\n        const diagonal = moveP.subtract(baseP);\n        const { x, y } = diagonal;\n        return setCursor(x * y < 0 ? \"nesw-resize\" : \"nwse-resize\");\n      }\n      if (path.contains(e.point)) return setCursor(\"move\");\n      setCursor(\"crosshair\");\n    };\n\n    const isSelfItem = (item: paper.Item) => {\n      return drawState.getStrokeMap().has(item.name);\n    };\n\n    const handleTextCursor = (e: paper.MouseEvent) => {\n      if (pointText.current) return setCursor(\"auto\");\n      const layer = scope.current.project.layers[1];\n      if (!layer) return;\n      const item = getClickedText(layer, e.point);\n      if (item && (isSelfItem(item) || globalEraser)) setCursor(\"text\");\n      else setCursor(\"crosshair\");\n    };\n\n    const handleMove = {\n      selected: handleSelectedCursor,\n      text: handleTextCursor,\n      ...{ select: null, draw: null, erase: null },\n    }[paperMode];\n\n    const handleKeyDown = (e: paper.KeyEvent) => {\n      if (paperMode !== \"selected\") return;\n      const delta = {\n        up: new Point(0, -10),\n        down: new Point(0, 10),\n        left: new Point(-10, 0),\n        right: new Point(10, 0),\n      }[e.key];\n      if (!delta) return;\n      e.preventDefault();\n      delta && moveSelected(delta);\n      toggleSelectTool(false);\n    };\n\n    const handleKeyUp = {\n      selected(e: paper.KeyEvent) {\n        if (/^(delete|backspace)$/.test(e.key)) deleteSelected();\n        if (/^(up|down|left|right)$/.test(e.key)) updateMutation();\n        if (/escape/.test(e.key)) resetSelect();\n      },\n      text(e: paper.KeyEvent) {\n        if (/escape/.test(e.key)) submitText();\n      },\n      ...{ select: null, draw: null, erase: null },\n    }[paperMode];\n\n    useEffect(() => {\n      if (readonly) return;\n\n      type Handler<E> = ((e: E) => boolean | void) | null;\n      const activate = <E,>(handler: Handler<E>): Handler<E> => {\n        return (e) => {\n          scope.current.activate();\n          if (handler) return handler(e);\n        };\n      };\n      const { view, tool } = scope.current;\n      view.onMouseDown = activate(handleDown);\n      view.onMouseDrag = activate(handleDrag);\n      view.onMouseUp = activate(handleUp);\n      view.onMouseMove = activate(handleMove);\n      tool.onMouseDrag = activate(handleToolDrag);\n      tool.onKeyDown = activate(handleKeyDown);\n      tool.onKeyUp = activate(handleKeyUp);\n    });\n\n    const updateMutation = () => {\n      if (!chosenItems?.length) return;\n      const mutations: Mutation[] = chosenItems.map((p) => {\n        const { name } = p;\n        p.name = \"\";\n        return [name, p.exportJSON()];\n      });\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\n    };\n\n    const deleteSelected = () => {\n      resetSelect();\n      if (!chosenIDs.length) return;\n      onChange((prev) => DrawState.eraseStrokes(prev, chosenIDs));\n    };\n\n    const mutateStyle = (updated: Partial<DrawCtrl>) => {\n      scope.current.activate();\n      updateGroupStyle(chosenItems, updated);\n      updateMutation();\n    };\n\n    const duplicateSelected = () => {\n      scope.current.activate();\n      if (!path || !chosenItems.length) return;\n      const size = path.bounds.size;\n      const { width, height } = size;\n      const transP = new Point(width, height).divide(10);\n      const copies = chosenItems.map((item) => item.clone());\n      copies.forEach((item) => item.translate(transP));\n      path.translate(transP);\n      rotateHandle?.translate(transP);\n\n      copies.forEach((p) => (p.name = \"\"));\n      const pathDataList = copies.map((item) => item.exportJSON());\n      onChange((prev) =>\n        DrawState.addStrokeList(prev, pathDataList, setChosenIDs)\n      );\n      showSelectTool();\n    };\n\n    const pointText = useRef<paper.PointText>();\n    const prevTextData = useRef(\"\");\n    const cancelText = useEvent(() => {\n      unrasterizeCanvas();\n      if (!pointText.current?.name) {\n        pointText.current?.remove();\n      }\n      pointText.current = undefined;\n      toggleTextTool(undefined, renderSlow.current);\n    });\n\n    const submitText = useEvent(() => {\n      const t = pointText.current;\n      if (!t) return;\n      cancelText();\n      if (t.exportJSON() === prevTextData.current) return;\n      const { content, name } = t;\n      t.name = \"\";\n      // if text content empty\n      if (!content) {\n        // erase existing text item\n        if (name) onChange((prev) => DrawState.eraseStrokes(prev, [name]));\n        return;\n      }\n      const pathData = t.exportJSON();\n      if (!name) {\n        // add new text item\n        onChange((prev) => DrawState.addStroke(prev, pathData));\n      } else {\n        // mutate existing text item\n        onChange((prev) => DrawState.mutateStrokes(prev, [[name, pathData]]));\n      }\n    });\n    const mutatePointText = (cb: (prev: paper.PointText) => void) => {\n      const pt = pointText.current;\n      if (!pt) return;\n      scope.current.activate();\n      cb(pt);\n      toggleTextTool(new Proxy(pt, {}), renderSlow.current);\n    };\n\n    useEffect(() => {\n      if (mode === \"text\") return submitText;\n    }, [mode, submitText]);\n\n    useImperativeHandle(ref, () => ({\n      deleteSelected,\n      duplicateSelected,\n      mutateStyle,\n      mutatePointText,\n    }));\n\n    usePreventGesture();\n\n    const beforeViewDragged = () => {\n      toggleSelectTool(false);\n      cancelText();\n      rasterizeLayer();\n      unrasterizeCanvas();\n    };\n    usePinch(\n      ({ memo, offset: [scale], first, last, origin }) => {\n        scope.current.activate();\n        const { view } = scope.current;\n        const originRawP = new paper.Point(origin);\n\n        let lastOrigin, elPos: paper.Point;\n        if (first || !memo) {\n          const { x, y } = view.element.getBoundingClientRect();\n          elPos = new Point(x, y);\n          lastOrigin = originRawP.subtract(elPos);\n          beforeViewDragged();\n        } else {\n          [lastOrigin, elPos] = memo;\n        }\n\n        const originViewP = originRawP.subtract(elPos);\n        const originPorjP = view.viewToProject(originViewP);\n\n        const deltaP = originViewP.subtract(lastOrigin);\n        const transP = deltaP.divide(view.zoom);\n        view.translate(transP);\n\n        let dScale = scale / prevScale.current;\n        prevScale.current = scale;\n        scope.current.settings.hitTolerance /= dScale;\n\n        if (last) {\n          scaleView(view, dScale, projSize, originPorjP)\n            .then(() => putCenterBack(view, projSize))\n            .then(() => unrasterizeLayer())\n            .then(() => (currCenter.current = view.center));\n          setCurrScale(scale);\n        } else {\n          view.scale(dScale, originPorjP);\n          return [originViewP, elPos];\n        }\n      },\n      {\n        scaleBounds: { min: 1, max: 5 },\n        rubberband: 0.5,\n        target: canvasEl,\n      }\n    );\n\n    useWheel(\n      ({ event, delta, ctrlKey, first, last }) => {\n        if (prevScale.current === 1 || ctrlKey) return;\n        event.preventDefault();\n\n        if (first) beforeViewDragged();\n\n        const { view } = scope.current;\n        const deltaP = new paper.Point(delta);\n        const transP = P_ZERO.subtract(deltaP).divide(view.zoom);\n        const { x: tx, y: ty } = transP;\n        const targetCenter = getTargetCenter(view, projSize);\n        const { x: dx, y: dy } = view.center.subtract(targetCenter);\n        const divisorP = new paper.Point(\n          tx * dx < 0 ? Math.pow(Math.E, 0.1 * Math.abs(dx)) : 1,\n          ty * dy < 0 ? Math.pow(Math.E, 0.1 * Math.abs(dy)) : 1\n        );\n        view.translate(transP.divide(divisorP));\n\n        if (last) {\n          putCenterBack(view, projSize)\n            .then(unrasterizeLayer)\n            .then(() => (currCenter.current = view.center));\n        }\n      },\n      {\n        target: canvasEl,\n        eventOptions: { passive: false },\n      }\n    );\n\n    const touchHandler = usePreventTouch(finger);\n    return (\n      <div\n        className=\"draw-wrapper\"\n        style={{ cursor }}\n        data-readonly={readonly}\n        {...touchHandler}\n      >\n        <canvas ref={canvasEl} className=\"draw-canvas\" />\n      </div>\n    );\n  }\n);\n\nDrawRaw.displayName = \"Draw\";\nexport const Draw = React.memo(DrawRaw);\n\nfunction usePaperItem<T extends paper.Item>() {\n  const tuple = useState<T>();\n  const [item] = tuple;\n  useDebugValue(item);\n  // the paper view is removed in useLayoutEffect clean-up func\n  // items with onFrame must be removed before view.\n  useLayoutEffect(() => () => void item?.remove(), [item]);\n  return tuple;\n}\n\nconst paintStroke = (() => {\n  const cacheMap = new WeakMap<\n    paper.Layer,\n    Map<string, { stroke: Stroke; item: paper.Item }>\n  >();\n\n  return (stroke: Stroke, layer: paper.Layer) => {\n    const { pathData, uid } = stroke;\n    let item: paper.Item;\n\n    const cache = cacheMap.get(layer) ?? new Map();\n    cacheMap.set(layer, cache);\n    const cached = cache.get(uid);\n\n    if (cached?.stroke === stroke) {\n      layer.addChild(cached.item);\n      item = cached.item;\n    } else {\n      try {\n        item = layer.importJSON(pathData);\n      } catch (e) {\n        console.error(e);\n        return;\n      }\n      item ??= new paper.Item();\n      item.name = uid;\n      cache.set(uid, { item, stroke });\n    }\n    item.opacity = 1;\n    item.guide = false;\n    return item;\n  };\n})();\n\nconst paintRects = (layers: paper.Layer[], projSize: paper.Size) => {\n  const [l0, l1, l2] = layers;\n  if (!l0 || !l1 || !l2) return [];\n  const bgRect = new Path.Rectangle(P_ZERO, projSize);\n  const clip1 = bgRect.clone();\n  const clip2 = bgRect.clone();\n  bgRect.fillColor = new Color(\"#fff\");\n  l0.addChild(bgRect);\n  l1.addChild(clip1);\n  l2.addChild(clip2);\n  l1.clipped = true;\n  l2.clipped = true;\n  return [bgRect, clip1, clip2];\n};\n\nconst startRect = (point: paper.Point) => {\n  const rect = new Path.Rectangle(point, new Size(0, 0));\n  rect.onFrame = () => {}; // the handle size bug\n  return rect;\n};\n\nconst startStroke = (drawCtrl: DrawCtrl, point: paper.Point, slow = false) => {\n  let { mode, lineWidth, eraserWidth, color, highlight } = drawCtrl;\n  const path = new Path();\n  path.add(point);\n  if (mode === \"erase\") {\n    color = \"#ccc\";\n    lineWidth = eraserWidth;\n  }\n  if (mode === \"select\") {\n    color = \"#009dec\";\n    lineWidth = 5;\n  }\n  const strokeColor = new Color(color);\n  if ((mode === \"draw\" && highlight) || (mode === \"erase\" && !slow)) {\n    strokeColor.alpha = 0.5;\n    path.blendMode = \"multiply\";\n  }\n  path.strokeColor = strokeColor;\n  path.strokeWidth = lineWidth;\n  path.strokeJoin = \"round\";\n  path.strokeCap = \"round\";\n  path.guide = true;\n  return path;\n};\n\nconst moveDash = (item: paper.Item) => {\n  item.dashOffset = 0;\n  item.dashArray = [30, 20];\n  item.onFrame = () => (item.dashOffset += 3);\n};\n\nconst scaleView = (\n  view: paper.View,\n  dScale: number,\n  projSize: paper.Size,\n  originP: paper.Point\n) =>\n  new Promise<void>((resolve) => {\n    if (dScale === 1) return resolve();\n    const { x: cx, y: cy } = view.center;\n    const { width, height } = projSize;\n\n    // if view is scaled from small to large, reset origin.\n    if (dScale > 1) {\n      originP = new paper.Point(\n        ((dScale / 2) * width - cx) / (dScale - 1),\n        ((dScale / 2) * height - cy) / (dScale - 1)\n      );\n    }\n\n    let aniCount = 10;\n    dScale = Math.pow(dScale, 1 / aniCount);\n\n    const scaleOneFrame = () => {\n      view.scale(dScale, originP);\n      if (--aniCount > 0) requestAnimationFrame(scaleOneFrame);\n      else requestAnimationFrame(() => resolve());\n    };\n    scaleOneFrame();\n  });\n\nconst getTargetCenter = (view: paper.View, projSize: paper.Size) => {\n  const { x, y } = view.center;\n  const minSize = Size.min(view.size, projSize).divide(2);\n  const { width: minX, height: minY } = minSize;\n  const { width: maxX, height: maxY } = projSize.subtract(minSize);\n\n  const targetX = x < minX ? minX : x > maxX ? maxX : x;\n  const targetY = y < minY ? minY : y > maxY ? maxY : y;\n  return new Point(targetX, targetY);\n};\n\nconst putCenterBack = (view: paper.View, projSize: paper.Size) =>\n  new Promise<void>((resolve) => {\n    const targetCenter = getTargetCenter(view, projSize);\n    if (view.center.equals(targetCenter)) return resolve();\n    let aniCount = 10;\n    const moveOneFrame = () => {\n      const delta = view.center.subtract(targetCenter);\n      view.translate(delta.divide(aniCount));\n      if (--aniCount > 0) requestAnimationFrame(moveOneFrame);\n      else requestAnimationFrame(() => resolve());\n    };\n    moveOneFrame();\n  });\n\nconst checkLasso = (items: paper.Item[], selection: paper.Path) => {\n  const isInside = (p: paper.Path) => {\n    if (selection.segments.length === 4 && p.isInside(selection.bounds)) {\n      return true;\n    }\n    return !p.subtract(selection, { insert: false, trace: false }).compare(p);\n  };\n  return items\n    .filter((item) => {\n      if (!item.name) return false;\n      if (!item.bounds.intersects(selection.bounds)) return false;\n      if (item instanceof paper.Path) {\n        return isInside(item);\n      } else {\n        const checkedP = new Path.Rectangle(item.bounds);\n        checkedP.remove();\n        return isInside(checkedP) || selection.isInside(item.bounds);\n      }\n    })\n    .map(({ name }) => name);\n};\n\nconst updateGroupStyle = (items: paper.Item[], updated: Partial<DrawCtrl>) => {\n  const { lineWidth, color, highlight } = updated;\n  items.forEach((item) => {\n    if (item instanceof paper.PointText && color) {\n      const newColor = new Color(color);\n      item.fillColor = newColor;\n    }\n\n    if (!(item instanceof paper.Path)) return;\n\n    if (color) {\n      const newColor = new Color(color);\n      if (item.blendMode === \"multiply\") newColor.alpha = 0.5;\n      item.strokeColor = newColor;\n    }\n\n    if (lineWidth) item.strokeWidth = lineWidth;\n\n    if (!item.strokeColor || highlight === undefined) return;\n    item.strokeColor.alpha = highlight ? 0.5 : 1;\n    item.blendMode = highlight ? \"multiply\" : \"normal\";\n  });\n};\n\nconst getClickedText = (layer: paper.Layer, point: paper.Point) => {\n  const hitRes = layer.hitTest(point, { class: paper.PointText, fill: true });\n  if (hitRes?.item instanceof paper.PointText) return hitRes?.item;\n};\n\nconst startText = (point: paper.Point) => {\n  return new paper.PointText({\n    point: point.add(new Point(0, 50)),\n    content: \"\",\n    fontSize: 50,\n    fontFamily: \"Arial, sans-serif\",\n  });\n};\n\nconst flattenCP = (cp: paper.Item): paper.Path[] => {\n  if (cp instanceof paper.Path) {\n    return cp.isEmpty() ? [] : [cp];\n  }\n  if (cp instanceof paper.CompoundPath) {\n    return cp.children.map(flattenCP).flat();\n  }\n  return [];\n};\n","import { CSSProperties, FC, RefObject, useMemo, useState } from \"react\";\nimport {\n  CopyOutlined,\n  BoldOutlined,\n  DeleteOutlined,\n  BgColorsOutlined,\n  ItalicOutlined,\n} from \"@ant-design/icons\";\nimport { Button, ButtonProps, Popover, Select } from \"antd\";\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\nimport { allColors } from \"lib/color\";\nimport { DrawRefType } from \"component/Draw\";\nimport { Color } from \"paper/dist/paper-core\";\nimport IconFont from \"component/IconFont\";\nimport \"./draw-tools.sass\";\n\nconst btnProps: ButtonProps = {\n  type: \"text\",\n  shape: \"round\",\n  size: \"small\",\n};\n\nconst getPosVars = (x: number, y: number) => {\n  return { \"--pos-x\": x + \"px\", \"--pos-y\": y + \"px\" } as CSSProperties;\n};\nconst getObjVars = (obj: Record<string, string | number>, unit?: string) => {\n  const result: Record<string, string | number> = {};\n  Object.entries(obj).forEach(([key, value]) => {\n    if (unit) value += unit;\n    result[\"--\" + key] = value;\n  });\n  return result as CSSProperties;\n};\n\nexport const SelectTool: FC<{\n  drawRef: RefObject<DrawRefType>;\n  visible: boolean;\n  clickPoint: paper.Point;\n}> = ({ drawRef, visible, clickPoint }) => {\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\n\n  const { x, y } = clickPoint;\n  return (\n    <div\n      className=\"select-tool tool-options\"\n      data-visible={visible}\n      style={getPosVars(x, y)}\n    >\n      <Popover\n        trigger=\"click\"\n        placement=\"bottom\"\n        overlayClassName=\"style-pop\"\n        getPopupContainer={(e) => e.parentElement!}\n        destroyTooltipOnHide\n        content={\n          <PenPanel\n            updateDrawCtrl={(updated) => {\n              setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\n              drawRef.current?.mutateStyle(updated);\n            }}\n            drawCtrl={currDrawCtrl}\n          />\n        }\n      >\n        <Button icon={<BgColorsOutlined />} {...btnProps} />\n      </Popover>\n      <Button\n        icon={<CopyOutlined />}\n        onClick={() => drawRef.current?.duplicateSelected()}\n        {...btnProps}\n      />\n      <Button\n        danger\n        icon={<DeleteOutlined />}\n        onClick={() => drawRef.current?.deleteSelected()}\n        {...btnProps}\n      />\n    </div>\n  );\n};\n\nexport const TextTool: FC<{\n  pointText: paper.PointText;\n  drawRef: RefObject<DrawRefType>;\n  renderSlow: boolean;\n}> = ({ pointText, drawRef, renderSlow }) => {\n  const { view, position, leading, content, rotation } = pointText;\n  const { fontFamily, fontWeight, fontSize } = pointText;\n\n  const { x, y } = view.projectToView(position);\n  const { topLeft, bottomLeft } = pointText.bounds;\n  const { x: bx, y: by } = view.projectToView(topLeft);\n  const { x: bbx, y: bby } = view.projectToView(bottomLeft);\n  const optionAtBottom = by < 90;\n\n  const scale = pointText.viewMatrix.scaling.x;\n  const { width, height } = pointText.internalBounds;\n\n  const lineHeight = +leading / +fontSize ?? 1.2;\n\n  const color = pointText.fillColor?.toCSS(true) ?? allColors[0]!;\n  const fontColorBtn = (\n    <Popover\n      content={\n        <ColorSelect\n          color={color}\n          setColor={(c) =>\n            drawRef.current?.mutatePointText((prev) => {\n              prev.fillColor = new Color(c);\n            })\n          }\n        />\n      }\n      trigger=\"click\"\n      overlayStyle={{ width: 200 }}\n      placement=\"bottom\"\n      getPopupContainer={(e) => e.parentElement!}\n    >\n      <Button\n        {...btnProps}\n        icon={\n          <IconFont\n            type=\"icon-circle\"\n            className=\"text-color-icon\"\n            style={{ color }}\n          />\n        }\n      />\n    </Popover>\n  );\n\n  const { isItalic, isBold } = parseFontStyle(fontWeight);\n  const fontStyleCSS = {\n    fontWeight: isBold ? \"bold\" : \"normal\",\n    fontStyle: isItalic ? \"italic\" : \"normal\",\n  };\n\n  const fontFamilySelect = (\n    <Select\n      className=\"font-select\"\n      popupClassName=\"font-drop\"\n      value={fontFamily}\n      onChange={(v) => {\n        drawRef.current?.mutatePointText((prev) => {\n          prev.fontFamily = v;\n        });\n      }}\n      size=\"small\"\n      bordered={false}\n      virtual={false}\n      getPopupContainer={(e) => e.parentElement.parentElement!}\n      dropdownMatchSelectWidth={100}\n      options={[\n        { value: \"Arial, sans-serif\", name: \"Arial\" },\n        { value: \"'Times New Roman', serif\", name: \"Times\" },\n        { value: \"Georgia, serif\", name: \"Georgia\" },\n        { value: \"'Courier New', monospace\", name: \"Courier\" },\n      ].map(({ value, name }) => ({\n        value,\n        label: (\n          <span style={{ fontFamily: value, fontWeight: \"normal\" }}>\n            {name}\n          </span>\n        ),\n      }))}\n    />\n  );\n\n  const offset = useMemo(\n    // paperjs sets all baseline ratio to 0.75.\n    () => 0.75 - getBaselineRatio(fontFamily, lineHeight),\n    [fontFamily, lineHeight]\n  );\n\n  return (\n    <div\n      className=\"text-tool\"\n      style={{\n        ...getObjVars({ scale, color }),\n        ...getObjVars({ rotation }, \"deg\"),\n        ...getObjVars({ width, height }, \"px\"),\n        ...getObjVars({ offset }, \"em\"),\n        ...getPosVars(x, y),\n      }}\n    >\n      <div\n        className=\"textarea-wrapper\"\n        data-empty={!content}\n        style={{ fontSize, fontFamily, lineHeight, ...fontStyleCSS }}\n      >\n        <textarea\n          autoFocus={!content}\n          placeholder=\"Text\"\n          value={content}\n          onChange={(e) => {\n            drawRef.current?.mutatePointText((prev) => {\n              prev.content = e.target.value;\n            });\n          }}\n          data-slow={renderSlow}\n        />\n      </div>\n      <div\n        className=\"tool-options text-options\"\n        data-bottom={optionAtBottom}\n        style={{\n          ...(optionAtBottom ? getPosVars(bbx, bby) : getPosVars(bx, by)),\n        }}\n      >\n        <div className=\"row\">\n          {fontFamilySelect}\n          {fontColorBtn}\n        </div>\n        <div className=\"row\">\n          <Button\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                prev.fontWeight = toggleBold(prev.fontWeight);\n              });\n            }}\n            {...btnProps}\n            type={isBold ? \"link\" : \"text\"}\n            icon={<BoldOutlined />}\n          />\n          <Button\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                prev.fontWeight = toggleItalic(prev.fontWeight);\n              });\n            }}\n            {...btnProps}\n            type={isItalic ? \"link\" : \"text\"}\n            icon={<ItalicOutlined />}\n          />\n          <Button\n            {...btnProps}\n            icon={<IconFont type=\"icon-font_size_down\" />}\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                const { topLeft } = prev.bounds;\n                prev.scale(0.9, topLeft);\n              });\n            }}\n          />\n          <Button\n            {...btnProps}\n            icon={<IconFont type=\"icon-font_size_up\" />}\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                const { topLeft } = prev.bounds;\n                prev.scale(1.1, topLeft);\n              });\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst parseFontStyle = (fontStyle: string | number) => {\n  fontStyle = fontStyle + \"\";\n  const isItalic = /italic/g.test(fontStyle);\n  const isBold = /bold/g.test(fontStyle);\n  return { isItalic, isBold };\n};\n\nconst toggleItalic = (fontStyle: string | number) => {\n  const { isItalic, isBold } = parseFontStyle(fontStyle);\n  const boldText = isBold ? \"bold\" : \"normal\";\n  return (isItalic ? \"\" : \"italic \") + boldText;\n};\n\nconst toggleBold = (fontStyle: string | number) => {\n  const { isItalic, isBold } = parseFontStyle(fontStyle);\n  const italicText = isItalic ? \"italic \" : \"\";\n  return italicText + (isBold ? \"normal\" : \"bold\");\n};\n\nconst getBaselineRatio = (fontFamily: string, lineHeight: number) => {\n  const div = document.createElement(\"div\");\n  div.innerText = \"p\";\n  Object.assign(div.style, { fontSize: \"100px\", fontFamily, lineHeight });\n  document.body.appendChild(div);\n\n  const span = document.createElement(\"span\");\n  span.style.display = \"inline-block\";\n  div.appendChild(span);\n\n  const r0 = div.getBoundingClientRect();\n  const r1 = span.getBoundingClientRect();\n  const ratio = (r1.y - r0.y) / r0.height;\n  document.body.removeChild(div);\n  return Math.max(-1, Math.min(ratio, 1));\n};\n","import { Component, ErrorInfo, ReactNode } from \"react\";\n\ninterface Props {\n  children?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"Uncaught error:\", error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return <p>Error</p>;\n    }\n\n    return this.props.children;\n  }\n}\n","import React, {\n  FC,\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport { useDrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { useMemoizedFn as useEvent } from \"ahooks\";\nimport { Draw, DrawRefType } from \"component/Draw\";\nimport { SelectTool, TextTool } from \"pages/reader/tools/DrawTools\";\nimport { once, range } from \"lodash\";\nimport { useInView } from \"react-intersection-observer\";\nimport { DrawState } from \"lib/draw/DrawState\";\nimport { Map, Set } from \"immutable\";\nimport { P_ZERO } from \"component/Draw/Draw\";\nimport { ErrorBoundary } from \"lib/ErrorBoundary\";\n\nconst PageWrapperRaw: FC<{\n  drawState: DrawState;\n  teamStateMap?: Map<string, DrawState>;\n  thumbnail?: string;\n  pdfIndex?: number;\n  noteID?: string;\n  updateState?: (ds: DrawState) => void;\n  onViewChange?: (ratio: number) => void;\n  preview?: boolean;\n  preload?: boolean;\n  ignores?: Set<string>;\n  skipInView?: boolean;\n}> = ({\n  thumbnail,\n  drawState,\n  teamStateMap,\n  updateState,\n  pdfIndex,\n  noteID = \"\",\n  preview = false,\n  onViewChange,\n  preload = false,\n  ignores = Set<string>(),\n  skipInView = false,\n}) => {\n  const threshold = onViewChange && range(0, 1.2, 0.2);\n  const [ref, visible, entry] = useInView({ threshold, skip: skipInView });\n  useEffect(() => {\n    if (!onViewChange) return;\n    if (!entry || !visible) return onViewChange(0);\n    onViewChange(entry.intersectionRatio);\n  }, [visible, entry, onViewChange]);\n\n  const [fullImg, setFullImg] = useState<string>();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const loadImage = useCallback(\n    once(async () => {\n      if (!pdfIndex || !noteID) return;\n      const { getNotePageImage } = await import(\"lib/note/pdfImage\");\n      setFullImg(await getNotePageImage(noteID, pdfIndex));\n    }),\n    [pdfIndex, noteID]\n  );\n\n  const show = visible || preload;\n  useEffect(() => {\n    if (!preview && show) loadImage();\n  }, [show, preview, loadImage]);\n\n  const otherStates = useMemo(\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\n    [teamStateMap, ignores]\n  );\n\n  const imageLoaded = Boolean(fullImg || !pdfIndex);\n  const drawShow = show && imageLoaded;\n\n  const { height, width } = drawState;\n  const ratio = height / width;\n\n  return (\n    <div ref={ref} className=\"page-wrapper\" data-preview={preview}>\n      <svg className=\"size-holder\" viewBox={`0 0 100 ${ratio * 100}`} />\n      {drawShow && (\n        <DrawWrapper\n          drawState={drawState}\n          otherStates={otherStates}\n          updateState={updateState}\n          imgSrc={fullImg || thumbnail}\n          preview={preview}\n        />\n      )}\n    </div>\n  );\n};\nPageWrapperRaw.displayName = \"PageWrapper\";\nexport const PageWrapper = React.memo(PageWrapperRaw);\n\nconst DrawWrapper: FC<{\n  drawState: DrawState;\n  otherStates?: DrawState[];\n  updateState?: (ds: DrawState) => void;\n  preview?: boolean;\n  imgSrc?: string;\n}> = ({ drawState, updateState, otherStates, preview = false, imgSrc }) => {\n  const drawCtrl = useDrawCtrl();\n  const drawRef = useRef<DrawRefType>(null);\n  const [selectShow, setSelectShow] = useState(false);\n  const [clickPoint, setClickPoint] = useState<paper.Point>(P_ZERO);\n  const [pointText, setPointText] = useState<paper.PointText>();\n  const [renderSlow, setRenderSlow] = useState(false);\n\n  const handleChange = useEvent(\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\n      if (!updateState) return;\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\n      if (newDS === drawState) return;\n      updateState(newDS);\n    }\n  );\n\n  const toggleSelectTool = (active: boolean, clickPoint?: paper.Point) => {\n    setClickPoint((p) => clickPoint ?? p);\n    setSelectShow(active);\n  };\n\n  const toggleTextTool = (\n    pointText: paper.PointText | undefined,\n    slow: boolean\n  ) => {\n    setPointText(pointText);\n    setRenderSlow(slow);\n  };\n\n  return preview ? (\n    <Draw\n      drawState={drawState}\n      otherStates={otherStates}\n      imgSrc={imgSrc}\n      readonly\n    />\n  ) : (\n    <ErrorBoundary>\n      <Draw\n        drawState={drawState}\n        otherStates={otherStates}\n        onChange={handleChange}\n        imgSrc={imgSrc}\n        drawCtrl={drawCtrl}\n        ref={drawRef}\n        toggleTextTool={toggleTextTool}\n        toggleSelectTool={toggleSelectTool}\n      />\n      <SelectTool\n        drawRef={drawRef}\n        visible={selectShow}\n        clickPoint={clickPoint}\n      />\n      {pointText && (\n        <TextTool\n          drawRef={drawRef}\n          pointText={pointText}\n          renderSlow={renderSlow}\n        />\n      )}\n    </ErrorBoundary>\n  );\n};\n","import { PageWrapper } from \"./PageWrapper\";\nimport \"./page-wrapper.sass\";\nexport default PageWrapper;\n","import React, {\n  FC,\n  PropsWithChildren,\n  useContext,\n  useDebugValue,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Button, message } from \"antd\";\nimport { EditOutlined, CloseOutlined } from \"@ant-design/icons\";\nimport localforage from \"localforage\";\nimport { once } from \"lodash\";\nimport \"./draw-ctrl.sass\";\n\nexport interface DrawCtrl {\n  mode: \"draw\" | \"erase\" | \"select\" | \"text\";\n  finger: boolean;\n  lineWidth: number;\n  eraserWidth: number;\n  color: string;\n  highlight: boolean;\n  lasso: boolean;\n  pixelEraser: boolean;\n  globalEraser: boolean;\n  widthList: number[];\n}\n\nexport const defaultWidthList = [10, 20, 30, 50];\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\n  mode: \"draw\",\n  finger: true,\n  lineWidth: 10,\n  eraserWidth: 10,\n  color: \"#000000\",\n  highlight: false,\n  lasso: false,\n  pixelEraser: false,\n  globalEraser: false,\n  widthList: defaultWidthList,\n};\n\nasync function getDrawCtrl() {\n  let drawCtrl = await localforage.getItem<DrawCtrl>(\"DRAW_CTRL\");\n  if (!drawCtrl) {\n    drawCtrl = defaultDrawCtrl;\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\n  }\n  return drawCtrl;\n}\n\nasync function saveDrawCtrl(drawCtrl: DrawCtrl) {\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\n}\n\nconst DrawCtrlContext = React.createContext({\n  drawCtrl: defaultDrawCtrl,\n  updateDrawCtrl: (() => {}) as (updated: Partial<DrawCtrl>) => void,\n});\n\nexport function useDrawCtrl() {\n  const { drawCtrl } = useContext(DrawCtrlContext);\n  useDebugValue(drawCtrl);\n  return drawCtrl;\n}\n\nexport function useUpdateDrawCtrl() {\n  const { updateDrawCtrl } = useContext(DrawCtrlContext);\n  return updateDrawCtrl;\n}\n\nexport const DrawCtrlProvider: FC<PropsWithChildren> = ({ children }) => {\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\n  useEffect(() => {\n    getDrawCtrl().then(setDrawCtrl);\n  }, []);\n\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\n    setDrawCtrl((prev) => {\n      const newCtrl = { ...prev, ...updated };\n      saveDrawCtrl(newCtrl);\n      return newCtrl;\n    });\n  };\n\n  const { finger } = drawCtrl;\n  useEffect(() => {\n    const detectPen = (e: PointerEvent) => {\n      const isPen = e.isPrimary && e.pointerType === \"pen\";\n      if (!isPen || !finger) return;\n      showPencilMsg(() => updateDrawCtrl({ finger: false }));\n    };\n    document.addEventListener(\"pointerup\", detectPen);\n    return () => document.removeEventListener(\"pointerup\", detectPen);\n  }, [finger]);\n\n  return (\n    <DrawCtrlContext.Provider value={{ drawCtrl, updateDrawCtrl }}>\n      {children}\n    </DrawCtrlContext.Provider>\n  );\n};\n\nconst showPencilMsg = once(async (cb: () => void) => {\n  const hide = () => {\n    message.destroy(\"DETECT_PENCIL\");\n    localforage.setItem(\"SKIP_PENCIL_MSG\", true);\n  };\n  if (await localforage.getItem(\"SKIP_PENCIL_MSG\")) return;\n  message.info({\n    content: (\n      <>\n        Your device supports\n        <Button\n          shape=\"round\"\n          size=\"small\"\n          icon={<EditOutlined />}\n          onClick={() => {\n            cb();\n            hide();\n          }}\n        >\n          Pencil only\n        </Button>\n        <Button\n          size=\"small\"\n          type=\"text\"\n          shape=\"circle\"\n          icon={<CloseOutlined style={{ color: \"#999\" }} />}\n          onClick={hide}\n        />\n      </>\n    ),\n    key: \"DETECT_PENCIL\",\n    className: \"pencil-msg\",\n    duration: 0,\n  });\n});\n","export function createVirtualCanvas(width: number, height: number) {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  if (!context) {\n    throw new Error(\"can't get virtual canvas context\");\n  }\n  canvas.width = width;\n  canvas.height = height;\n  return { canvas, context };\n}\n\nexport function releaseCanvas(canvas?: HTMLCanvasElement) {\n  if (!canvas) return;\n  canvas.width = 1;\n  canvas.height = 1;\n  const ctx = canvas.getContext(\"2d\");\n  ctx?.clearRect(0, 0, 1, 1);\n}\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\nimport { defaultWidthList, DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { ColorCirle } from \"component/ColorCircle\";\nimport { WIDTH } from \"lib/draw/DrawState\";\nimport { Popover, Segmented, Slider } from \"antd\";\nimport { allColors } from \"lib/color\";\nimport { Setter } from \"lib/hooks\";\nimport IconFont from \"component/IconFont\";\nimport { List } from \"immutable\";\nimport \"./pen-panel.sass\";\n\nexport const PenPanel: FC<{\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n  drawCtrl: Partial<DrawCtrl>;\n}> = ({ updateDrawCtrl, drawCtrl }) => {\n  const { highlight, color } = drawCtrl;\n  const [panelBlur, setPanelBlur] = useState(false);\n\n  return (\n    <div className=\"pen-panel\" data-blur={panelBlur} data-hi={highlight}>\n      <div className=\"pen-status\">\n        <WidthSelect\n          updateDrawCtrl={updateDrawCtrl}\n          drawCtrl={drawCtrl}\n          setPanelBlur={setPanelBlur}\n        />\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\n      </div>\n      <ColorSelect\n        color={color || \"\"}\n        setColor={(c) => updateDrawCtrl({ color: c })}\n      />\n    </div>\n  );\n};\n\nexport const WidthSelect: FC<{\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n  drawCtrl: Partial<DrawCtrl>;\n  setPanelBlur?: Setter<boolean>;\n  field?: \"lineWidth\" | \"eraserWidth\";\n}> = ({\n  updateDrawCtrl,\n  drawCtrl,\n  setPanelBlur = () => {},\n  field = \"lineWidth\",\n}) => {\n  const currWidth = drawCtrl[field];\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\n\n  const chosen = useMemo(\n    () => widthList.indexOf(currWidth ?? -1),\n    [currWidth, widthList]\n  );\n\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\n  useEffect(() => {\n    if (popShow.includes(true)) setPanelBlur(true);\n    else setPanelBlur(false);\n  }, [popShow, setPanelBlur]);\n\n  // temp: ugly Implementation\n  const [widthRatio] = useState(() => {\n    const section = document.querySelector(\"section.note-page\");\n    const sw = section?.getBoundingClientRect().width ?? 0;\n    const bw = document.body.getBoundingClientRect().width;\n    return sw / bw;\n  });\n\n  const realSizeStyle = (width: number) =>\n    ({\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width} * ${widthRatio})`,\n    } as CSSProperties);\n\n  const options = [\n    { value: -1, label: null },\n    ...widthList.map((width, index) => ({\n      value: index,\n      label: (\n        <Popover\n          open={popShow.get(index)}\n          onOpenChange={(v) => setPopShow((prev) => prev.set(index, v))}\n          trigger={chosen === index ? [\"click\"] : []}\n          placement=\"bottom\"\n          destroyTooltipOnHide\n          content={\n            <Slider\n              min={5}\n              max={100}\n              className=\"ctrl-slider\"\n              defaultValue={width}\n              onAfterChange={(w) => {\n                if (widthList.includes(w)) {\n                  setPopShow((prev) => prev.set(index, false));\n                  return updateDrawCtrl({ [field]: w });\n                }\n                const newWL = widthList.slice();\n                newWL[index] = w;\n                updateDrawCtrl({ widthList: newWL, [field]: w });\n              }}\n            />\n          }\n        >\n          <div className=\"circle-wrapper\" style={realSizeStyle(width)}>\n            <ColorCirle className={\"width-circle \" + field} color={color} />\n          </div>\n        </Popover>\n      ),\n    })),\n  ];\n\n  return (\n    <Segmented\n      className=\"width-seg\"\n      value={chosen}\n      options={options}\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 10 })}\n    />\n  );\n};\n\nconst HighlightSwitch: FC<{\n  checked?: boolean;\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n}> = ({ checked = false, updateDrawCtrl }) => {\n  return (\n    <label className=\"hi-wrapper\">\n      <input\n        type=\"checkbox\"\n        name=\"highlight\"\n        checked={checked}\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\n      />\n      <div className=\"hi-switch\">\n        <IconFont type=\"icon-Highlight\" />\n      </div>\n    </label>\n  );\n};\n\nexport const ColorSelect: FC<{\n  color: string;\n  setColor: (color: string) => void;\n}> = ({ setColor, color }) => (\n  <div className=\"color-select\">\n    {allColors.map((c) => (\n      <label key={c}>\n        <input\n          checked={color === c}\n          type=\"radio\"\n          name=\"color\"\n          onChange={(e) => e.target.checked && setColor(c)}\n        />\n        <div\n          data-color={c}\n          className=\"circle\"\n          style={{ backgroundColor: c, borderColor: c }}\n        />\n      </label>\n    ))}\n  </div>\n);\n"],"names":["createFromIconfontCN","scriptUrl","rotateCursorFactory","src","size","cache","Map","half","createVirtualCanvas","canvas","context","image","Image","angle","Math","round","cached","get","translate","rotate","PI","drawImage","data","toDataURL","clearRect","resetTransform","set","getRotateCursor1x","getRotateCursor2x","getRotateCurcor","data1x","data2x","usePreventTouch","allowFinger","isTouch","useRef","checkPoniter","e","isPrimary","current","pointerType","preventTouch","touch","touches","touchType","isApplePencil","length","isEventValid","stopPropagation","onPointerDownCapture","onPointerMoveCapture","onTouchStartCapture","onTouchMoveCapture","getGridRange","bounds","topLeft","bottomRight","floor","x","ceil","y","setGridItem","grid","item","replaced","strokeBounds","xmin","xmax","ymin","ymax","delete","add","getGridItems","itemSet","Set","forEach","Array","from","P_ZERO","Point","DrawRaw","React","ref","drawState","otherStates","onChange","drawCtrl","defaultDrawCtrl","readonly","imgSrc","toggleSelectTool","toggleTextTool","width","height","projSize","useMemo","Size","mode","finger","lasso","eraserWidth","canvasEl","scope","paper","useState","group","setGroup","teamGroup","setTeamGroup","usePaperItem","path","setPath","rotateHandle","setRotateHandle","useEvent","showSelectTool","bc","bottomCenter","view","projectToView","useLayoutEffect","cvs","scp","setup","settings","handleSize","hitTolerance","Layer","visible","project","layers","activate","Tool","remove","releaseCanvas","clear","useEffect","rects","paintRects","r","useSize","canvasWidth","ratio","currCenter","divide","currScale","setCurrScale","prevScale","viewSize","multiply","zoom","center","l","update","imgRaster","setImgRaster","raster","Raster","addChild","sendToBack","onLoad","fitBounds","Rectangle","bringToFront","mergedStrokes","DrawState","renderSlow","deferTimerID","deferRender","setDefer","l1","render","tempGroup","tempTeamGroup","removeChildren","stroke","self","hasStroke","uid","paintStroke","push","unrasterizeCanvas","pathClones","c","timeBeforeUpdate","performance","now","requestUpdate","requestAnimationFrame","updateDuration","window","setTimeout","clearTimeout","hitRef","selected","setSelected","paperMode","chosenIDs","setChosenIDs","chosenItems","IDSet","filter","has","name","resetSelect","undefined","type","lastOp","test","pointText","ptProxy","Proxy","layerRaster","lrReusable","unrasterizeLayer","lr","canvasRaster","rasterizeCanvas","devicePixelRatio","element","opacity","cr","downPath","startStroke","point","downLasso","downRect","startRect","selectionDragged","handleDown","draw","erase","select","hitRes","hitTest","segments","contains","text","dragPath","smooth","moveSelected","delta","handleDrag","s1","s2","s3","segment","axis","subtract","line","setCursor","moveP","baseP","next","diagonal","scale","strokeWidth","rBaseP","tool","maxDistance","erased","globalEraser","pixelEraser","itemGrid","wnum","hnum","gernerateGrid","handleToolDrag","layer","ew","hitOption","class","tolerance","parent","hitTestAll","topItem","radius","circle","Path","insert","sub","trace","replaceWith","guide","handleUp","simplify","clone","pathData","exportJSON","prev","items","splitters","map","paths","flattenCP","p","erasedList","abs","area","selection","closePath","moveDash","checkLasso","link","topCenter","lastSegment","handleSelectedCursor","updateMutation","submitText","handleTextCursor","getClickedText","t","isSelfItem","startText","justification","prevTextData","cursor","lineWidth","double","getSvg","img1x","img2x","getCircleCursor","getStrokeMap","handleMove","handleKeyDown","up","down","left","right","key","preventDefault","handleKeyUp","deleteSelected","handler","onMouseDown","onMouseDrag","onMouseUp","onMouseMove","onKeyDown","onKeyUp","mutations","mutateStyle","updated","updateGroupStyle","duplicateSelected","transP","copies","pathDataList","cancelText","content","mutatePointText","cb","pt","useImperativeHandle","document","addEventListener","removeEventListener","beforeViewDragged","l0","insertChild","dpi","resolution","rasterize","addTo","rasterizeLayer","usePinch","memo","offset","first","last","origin","lastOrigin","elPos","originRawP","getBoundingClientRect","originViewP","originPorjP","viewToProject","dScale","scaleView","then","putCenterBack","scaleBounds","min","max","rubberband","target","useWheel","event","ctrlKey","deltaP","tx","ty","targetCenter","getTargetCenter","dx","dy","divisorP","pow","E","eventOptions","passive","touchHandler","className","style","displayName","Draw","tuple","useDebugValue","cacheMap","WeakMap","importJSON","console","error","l2","bgRect","clip1","clip2","fillColor","Color","clipped","rect","onFrame","slow","color","highlight","strokeColor","alpha","blendMode","strokeJoin","strokeCap","dashOffset","dashArray","originP","Promise","resolve","cx","cy","aniCount","scaleOneFrame","minSize","minX","minY","maxX","maxY","targetX","targetY","equals","moveOneFrame","isInside","compare","intersects","checkedP","newColor","fill","fontSize","fontFamily","cp","isEmpty","children","flat","btnProps","shape","getPosVars","getObjVars","obj","unit","result","Object","entries","value","SelectTool","drawRef","clickPoint","currDrawCtrl","setCurrDrawCtrl","trigger","placement","overlayClassName","getPopupContainer","parentElement","destroyTooltipOnHide","PenPanel","updateDrawCtrl","icon","BgColorsOutlined","CopyOutlined","onClick","danger","DeleteOutlined","TextTool","position","leading","rotation","fontWeight","bottomLeft","bx","by","bbx","bby","optionAtBottom","viewMatrix","scaling","internalBounds","lineHeight","toCSS","allColors","fontColorBtn","setColor","overlayStyle","IconFont","parseFontStyle","isItalic","isBold","fontStyleCSS","fontStyle","fontFamilySelect","popupClassName","v","bordered","virtual","dropdownMatchSelectWidth","options","label","getBaselineRatio","autoFocus","placeholder","toggleBold","BoldOutlined","toggleItalic","ItalicOutlined","div","createElement","innerText","assign","body","appendChild","span","display","r0","removeChild","ErrorBoundary","state","hasError","errorInfo","this","props","_","Component","PageWrapperRaw","thumbnail","teamStateMap","updateState","pdfIndex","noteID","preview","onViewChange","preload","ignores","skipInView","threshold","range","useInView","skip","entry","intersectionRatio","fullImg","setFullImg","loadImage","useCallback","once","getNotePageImage","show","deleteAll","toList","toArray","imageLoaded","Boolean","drawShow","viewBox","DrawWrapper","useDrawCtrl","selectShow","setSelectShow","setClickPoint","setPointText","setRenderSlow","handleChange","arg","newDS","active","defaultWidthList","widthList","getDrawCtrl","localforage","saveDrawCtrl","DrawCtrlContext","useContext","useUpdateDrawCtrl","DrawCtrlProvider","setDrawCtrl","newCtrl","detectPen","showPencilMsg","Provider","hide","message","EditOutlined","CloseOutlined","duration","getContext","Error","ctx","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","field","currWidth","chosen","indexOf","List","popShow","setPopShow","includes","section","querySelector","widthRatio","realSizeStyle","WIDTH","index","open","onOpenChange","defaultValue","onAfterChange","w","newWL","slice","i","backgroundColor","borderColor"],"sourceRoot":""}