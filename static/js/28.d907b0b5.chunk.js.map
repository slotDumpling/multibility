{"version":3,"file":"static/js/28.d907b0b5.chunk.js","mappings":"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","sources":["component/IconFont.tsx","component/Draw/cursor/cursor.ts","component/Draw/touch.ts","component/Draw/grid.tsx","component/Draw/Draw.tsx","pages/reader/tools/DrawTools.tsx","component/PageWrapper/PageWrapper.tsx","component/PageWrapper/index.tsx","lib/draw/DrawCtrl.tsx","lib/draw/canvas.ts","pages/reader/tools/PenPanel.tsx"],"sourcesContent":["import { createFromIconfontCN } from \"@ant-design/icons\";\n\nexport default createFromIconfontCN({\n  scriptUrl: \"//at.alicdn.com/t/c/font_3181679_61bmx4utsp.js\",\n});\n","import { createVirtualCanvas } from \"lib/draw/canvas\";\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport rotateImg2x from \"./rotate2x.png\";\nimport rotateImg1x from \"./rotate1x.png\";\n\nexport const getCircleCursor = (drawCtrl: DrawCtrl, ratio: number) => {\n  const { lineWidth, eraserWidth, mode } = drawCtrl;\n  const size = ratio * (mode === \"erase\" ? eraserWidth : lineWidth);\n  if (size < 5) return \"crosshair\";\n  const half = size / 2;\n  const double = size * 2;\n\n  const getSvg = (size: number) =>\n    `data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23DDD7\" width=\"${size}\" height=\"${size}\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"5\"/></svg>`;\n\n  const img1x = getSvg(size);\n  const img2x = getSvg(double);\n\n  return `-webkit-image-set(url('${img1x}')1x, url('${img2x}')2x) ${half} ${half}, crosshair`;\n};\n\nconst rotateCursorFactory = (src: string, size: number) => {\n  const cache = new Map<number, string>();\n  const half = size / 2;\n  const { canvas, context } = createVirtualCanvas(size, size);\n  const image = new Image();\n  image.src = src;\n  return (angle: number) => {\n    angle = Math.round(angle / 10) * 10;\n    const cached = cache.get(angle);\n    if (cached) return cached;\n    context.translate(half, half);\n    context.rotate((angle * Math.PI) / 180);\n    context.drawImage(image, -half, -half);\n    const data = canvas.toDataURL();\n    context.clearRect(-half, -half, size, size);\n    context.resetTransform();\n    cache.set(angle, data);\n    return data;\n  };\n};\n\nconst getRotateCursor1x = rotateCursorFactory(rotateImg1x, 32);\nconst getRotateCursor2x = rotateCursorFactory(rotateImg2x, 64);\n\nexport const getRotateCurcor = (angle: number) => {\n  const data1x = getRotateCursor1x(angle);\n  const data2x = getRotateCursor2x(angle);\n  return `-webkit-image-set(url(${data1x})1x, url(${data2x})2x) 16 16, auto`;\n};\n","import { PointerEvent, TouchEvent, useEffect, useRef } from \"react\";\n\ntype iOSTouch = Touch & {\n  force?: number;\n  touchType?: \"stylus\" | \"direct\";\n};\n\nexport function isApplePencil(e: TouchEvent) {\n  const touch = e.touches[0] as iOSTouch;\n  return touch?.touchType === \"stylus\";\n}\n\nexport function usePreventTouch(\n  allowFinger: boolean\n): React.HTMLAttributes<HTMLDivElement> {\n  const isTouch = useRef(false);\n  const checkPoniter = (e: PointerEvent) =>\n    e.isPrimary && (isTouch.current = e.pointerType === \"touch\");\n\n  const isEventValid = (e: TouchEvent) =>\n    !isTouch.current ||\n    isApplePencil(e) ||\n    (allowFinger && e.touches.length === 1);\n\n  const preventTouch = (e: TouchEvent) =>\n    isEventValid(e) || e.stopPropagation();\n\n  return {\n    onPointerDownCapture: checkPoniter,\n    onPointerMoveCapture: checkPoniter,\n    onTouchStartCapture: preventTouch,\n    onTouchMoveCapture: preventTouch,\n  };\n}\n\nexport function usePreventGesture() {\n  useEffect(() => {\n    const handler = (e: Event) => e.preventDefault();\n    document.addEventListener(\"gesturestart\", handler);\n    document.addEventListener(\"gesturechange\", handler);\n    document.addEventListener(\"gestureend\", handler);\n    return () => {\n      document.removeEventListener(\"gesturestart\", handler);\n      document.removeEventListener(\"gesturechange\", handler);\n      document.removeEventListener(\"gestureend\", handler);\n    };\n  }, []);\n}\n","export const gernerateGrid = (\n  group: paper.Item[],\n  width: number,\n  height: number\n) => {\n  const wnum = Math.ceil(width / 100);\n  const hnum = Math.ceil(height / 100);\n  const grid = Array.from({ length: wnum }, () =>\n    Array.from({ length: hnum }, () => new Set<paper.Item>())\n  );\n  group.forEach((item) => setGridItem(grid, item));\n  return grid;\n};\n\nconst getGridRange = (bounds: paper.Rectangle) => {\n  const { topLeft, bottomRight } = bounds;\n  return [\n    Math.floor(topLeft.x / 100),\n    Math.ceil(bottomRight.x / 100),\n    Math.floor(topLeft.y / 100),\n    Math.ceil(bottomRight.y / 100),\n  ] as [number, number, number, number];\n};\nexport const setGridItem = (\n  grid: Set<paper.Item>[][],\n  item: paper.Item,\n  replaced?: paper.Item\n) => {\n  const bounds = (replaced ?? item).strokeBounds;\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\n  for (let x = xmin; x <= xmax; x += 1) {\n    for (let y = ymin; y <= ymax; y += 1) {\n      replaced && grid[x]?.[y]?.delete(replaced);\n      grid[x]?.[y]?.add(item);\n    }\n  }\n};\nexport const getGridItems = (\n  grid: Set<paper.Item>[][],\n  bounds: paper.Rectangle\n) => {\n  const itemSet = new Set<paper.Item>();\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\n  for (let x = xmin; x <= xmax; x += 1) {\n    for (let y = ymin; y <= ymax; y += 1) {\n      grid[x]?.[y]?.forEach((item) => itemSet.add(item));\n    }\n  }\n  return Array.from(itemSet);\n};\n","import React, {\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useDebugValue,\n  useImperativeHandle,\n  useLayoutEffect,\n} from \"react\";\nimport paper, {\n  Path,\n  Size,\n  Point,\n  Color,\n  Raster,\n  Layer,\n  Rectangle,\n} from \"paper/dist/paper-core\";\nimport { usePinch, useWheel } from \"@use-gesture/react\";\nimport useSize from \"@react-hook/size\";\nimport { useMemoizedFn as useEvent } from \"ahooks\";\nimport { DrawState, Mutation, Splitter, Stroke } from \"lib/draw/DrawState\";\nimport { defaultDrawCtrl, DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { releaseCanvas } from \"lib/draw/canvas\";\nimport { getCircleCursor, getRotateCurcor } from \"./cursor\";\nimport { usePreventTouch, usePreventGesture } from \"./touch\";\nimport { Setter } from \"lib/hooks\";\nimport { setGridItem, getGridItems, gernerateGrid } from \"./grid\";\n\nexport interface DrawRefType {\n  deleteSelected: () => void;\n  duplicateSelected: () => void;\n  mutateStyle: (updated: Partial<DrawCtrl>) => void;\n  mutatePointText: (cb: (prev: paper.PointText) => void) => void;\n}\ninterface DrawPropType {\n  drawState: DrawState;\n  otherStates?: DrawState[];\n  onChange?: Setter<DrawState>;\n  toggleSelectTool?: (active: boolean, clickPoint?: paper.Point) => void;\n  toggleTextTool?: (pt: paper.PointText | undefined, slow: boolean) => void;\n  drawCtrl?: DrawCtrl;\n  readonly?: boolean;\n  imgSrc?: string;\n}\n\nconst HIT_TOLERANCE = 20;\nexport const P_ZERO = new Point(0, 0);\n\nconst DrawRaw = React.forwardRef<DrawRefType, DrawPropType>(\n  (\n    {\n      drawState,\n      otherStates,\n      onChange = () => {},\n      drawCtrl = defaultDrawCtrl,\n      readonly = false,\n      imgSrc,\n      toggleSelectTool = () => {},\n      toggleTextTool = () => {},\n    },\n    ref\n  ) => {\n    const { width, height } = drawState;\n    const projSize = useMemo(() => new Size(width, height), [width, height]);\n    const { mode, finger, lasso, eraserWidth } = drawCtrl;\n\n    const canvasEl = useRef<HTMLCanvasElement>(null);\n    const scope = useRef(new paper.PaperScope());\n    const [group, setGroup] = useState<paper.Item[]>([]);\n    const [teamGroup, setTeamGroup] = useState<paper.Item[]>([]);\n    const [path, setPath] = usePaperItem<paper.Path>();\n    const [rotateHandle, setRotateHandle] = usePaperItem<paper.Path>();\n\n    toggleSelectTool = useEvent(toggleSelectTool);\n    toggleTextTool = useEvent(toggleTextTool);\n    const showSelectTool = () => {\n      if (!path) return;\n      const bc = path.bounds.bottomCenter;\n      const { view } = scope.current;\n      toggleSelectTool(true, view.projectToView(bc));\n    };\n\n    useLayoutEffect(() => {\n      const cvs = canvasEl.current;\n      const scp = scope.current;\n      if (!cvs) return;\n\n      scp.setup(cvs);\n      scp.settings.handleSize = 10;\n      scp.settings.hitTolerance = HIT_TOLERANCE;\n      [0, 1, 2].forEach(() => (new Layer().visible = false));\n      scp.project.layers[2]?.activate();\n      new scp.Tool();\n\n      return () => {\n        scp.view?.remove();\n        releaseCanvas(cvs);\n      };\n    }, []);\n\n    useEffect(() => {\n      scope.current.activate();\n      const { layers } = scope.current.project;\n      const rects = paintRects(layers, projSize);\n\n      return () => rects.forEach((r) => r.remove());\n    }, [projSize]);\n\n    const [canvasWidth] = useSize(canvasEl);\n    const ratio = canvasWidth / width;\n    useEffect(() => {\n      if (!ratio) return;\n      const scp = scope.current;\n      scp.view.viewSize = projSize.multiply(ratio);\n      scp.view.scale(ratio, P_ZERO);\n      scp.project.layers.forEach((l) => (l.visible = true));\n      scp.view.update();\n\n      return () => scp.view?.scale(1 / ratio, P_ZERO);\n    }, [ratio, projSize]);\n\n    const [imgRaster, setImgRaster] = usePaperItem();\n    useEffect(() => {\n      if (!imgSrc) return;\n      scope.current.activate();\n      const raster = new Raster(imgSrc);\n      raster.project.layers[0]?.addChild(raster);\n      raster.sendToBack();\n      raster.onLoad = () => {\n        raster.view.update();\n        raster.fitBounds(new Rectangle(projSize));\n        raster.bringToFront();\n      };\n      setImgRaster(raster);\n    }, [imgSrc, projSize, setImgRaster]);\n\n    const mergedStrokes = useMemo(\n      () =>\n        otherStates\n          ? DrawState.mergeStates(drawState, ...otherStates)\n          : drawState.getStrokeMap(),\n      [drawState, otherStates]\n    );\n\n    const renderSlow = useRef(false);\n\n    const deferTimerID = useRef(0);\n    const deferRender = useRef(false);\n    const setDefer = () => (deferRender.current = renderSlow.current);\n    if (readonly) setDefer();\n\n    useEffect(() => {\n      const [, l1] = scope.current.project.layers;\n      if (!l1) return;\n      const render = () => {\n        scope.current.activate();\n        const tempGroup: paper.Item[] = [];\n        const tempTeamGroup: paper.Item[] = [];\n\n        // clean-up layer_1 except the clip mask.\n        l1.removeChildren(1);\n\n        mergedStrokes.forEach((stroke) => {\n          const self = drawState.hasStroke(stroke.uid);\n          const item = paintStroke(stroke, l1);\n          if (self && item) tempGroup.push(item);\n          if (item) tempTeamGroup.push(item);\n        });\n        setGroup(tempGroup);\n        setTeamGroup(tempTeamGroup);\n\n        unrasterizeCanvas();\n        deferRender.current = false;\n        pathClones.current.forEach((c) => c.remove());\n        pathClones.current = [];\n\n        const timeBeforeUpdate = performance.now();\n        scope.current.view.requestUpdate();\n        requestAnimationFrame(() => {\n          const timeAfterUpdate = performance.now();\n          const updateDuration = timeAfterUpdate - timeBeforeUpdate;\n          renderSlow.current = updateDuration > 20;\n        });\n      };\n\n      // render immediately\n      if (!deferRender.current) return void render();\n      // defer render for 1000ms\n      deferTimerID.current = window.setTimeout(render, 1000);\n      // clean-up previous render timer.\n      return () => window.clearTimeout(deferTimerID.current);\n    }, [mergedStrokes, drawState]);\n\n    const hitRef = useRef<paper.HitResult>();\n    const [selected, setSelected] = useState(false);\n    const paperMode = mode === \"select\" && selected ? \"selected\" : mode;\n    const [chosenIDs, setChosenIDs] = useState<string[]>([]);\n    const chosenItems = useMemo(() => {\n      const IDSet = new Set(chosenIDs);\n      return group.filter((item) => IDSet.has(item.name));\n    }, [group, chosenIDs]);\n\n    const resetSelect = useEvent(() => {\n      setSelected(false);\n      setPath(undefined);\n      setRotateHandle(undefined);\n      setChosenIDs([]);\n      toggleSelectTool(false);\n    });\n\n    useEffect(() => {\n      if (mode === \"select\") return resetSelect;\n    }, [mode, resetSelect]);\n    useEffect(() => resetSelect, [lasso, resetSelect]);\n\n    // reset selection after redo/undo\n    useEffect(() => {\n      const type = drawState.lastOp?.type ?? \"\";\n      if (/^redo|undo$/.test(type)) resetSelect();\n    }, [drawState, resetSelect]);\n\n    useEffect(() => {\n      toggleSelectTool(false);\n      if (pointText.current) {\n        const ptProxy = new Proxy(pointText.current, {});\n        toggleTextTool(ptProxy, renderSlow.current);\n      }\n    }, [canvasWidth, toggleSelectTool, toggleTextTool]);\n\n    const layerRaster = useRef<paper.Raster>();\n    const lrReusable = useRef(false);\n    // layer raster is no longer reusable after state changes.\n    useEffect(() => void (lrReusable.current = false), [mergedStrokes]);\n\n    const rasterizeLayer = () => {\n      if (!renderSlow.current) return;\n      const [l0, l1] = scope.current.project.layers;\n      if (!l0 || !l1) return;\n      l1.visible = true;\n      // move pdf image above clip mask before rasterizing.\n      if (imgRaster) l1.insertChild(1, imgRaster);\n\n      const dpi = 72 * devicePixelRatio;\n      const resolution = (canvasWidth / width) * dpi;\n      let raster = layerRaster.current;\n      if (!raster || !lrReusable.current) {\n        raster = layerRaster.current = l1.rasterize({ raster, resolution });\n        lrReusable.current = true;\n      }\n      raster.visible = true;\n\n      l1.visible = false;\n      imgRaster?.addTo(l0);\n    };\n    const unrasterizeLayer = () => {\n      scope.current.activate();\n      const [, l1] = scope.current.project.layers;\n      const lr = layerRaster.current;\n      if (!l1 || !lr) return;\n      l1.visible = true;\n      lr.visible = false;\n    };\n\n    const canvasRaster = useRef<paper.Raster>();\n    // raster changes with the size of canvas element\n    useEffect(\n      () => () => {\n        canvasRaster.current?.remove();\n        canvasRaster.current = undefined;\n      },\n      [canvasWidth]\n    );\n    useLayoutEffect(\n      () => () => {\n        releaseCanvas(layerRaster.current?.canvas);\n        releaseCanvas(canvasRaster.current?.canvas);\n      },\n      []\n    );\n    const rasterizeCanvas = () => {\n      if (!renderSlow.current) return;\n      // rasterize the canvas only once\n      if (canvasRaster.current?.visible === true) return;\n      scope.current.activate();\n      const { view } = scope.current;\n      // create a raster of the canvas element's size only once.\n      const raster = (canvasRaster.current ??= new Raster(\n        view.viewSize.multiply(devicePixelRatio)\n      ));\n      raster.drawImage(view.element, P_ZERO);\n      raster.fitBounds(view.bounds);\n      raster.visible = true;\n      raster.opacity = process.env.NODE_ENV === \"production\" ? 1 : 0.5;\n      const [, l1] = scope.current.project.layers;\n      l1 && (l1.visible = false);\n    };\n    const unrasterizeCanvas = () => {\n      scope.current.activate();\n      const [, l1] = scope.current.project.layers;\n      const cr = canvasRaster.current;\n      const lr = layerRaster.current;\n      if (!l1 || !cr) return;\n      cr.visible = false;\n      // keep layer_1 hidden unless all 2 raster is hidden.\n      if (lr?.visible !== true) l1.visible = true;\n    };\n\n    const downPath = (e: paper.MouseEvent) => {\n      rasterizeCanvas();\n      setPath(startStroke(drawCtrl, e.point, renderSlow.current));\n    };\n    const downLasso = (e: paper.MouseEvent) => {\n      setPath(startStroke(drawCtrl, e.point));\n      requestAnimationFrame(rasterizeCanvas);\n    };\n    const downRect = (e: paper.MouseEvent) => {\n      // reset rect path before rasterizing;\n      setPath(startRect(e.point));\n      requestAnimationFrame(rasterizeCanvas);\n    };\n\n    const selectionDragged = useRef(false);\n    const handleDown = {\n      draw(e: paper.MouseEvent) {\n        setDefer();\n        downPath(e);\n      },\n      erase: downPath,\n      select: lasso ? downLasso : downRect,\n      selected(e: paper.MouseEvent) {\n        selectionDragged.current = false;\n        if (!path) return;\n        if (!lasso) {\n          // check if the point hit the segment point.\n          let hitRes =\n            path.hitTest(e.point, { segments: true }) ??\n            rotateHandle?.hitTest(e.point, { segments: true, selected: true });\n          hitRef.current = hitRes;\n          if (hitRes) return;\n        }\n\n        // if click outside, reset the selection.\n        if (!path.contains(e.point)) {\n          resetSelect();\n          setRotateHandle(undefined);\n          lasso ? downLasso(e) : downRect(e);\n        }\n      },\n      text: null,\n    }[paperMode];\n\n    const dragPath = (e: paper.MouseEvent) => {\n      // cancel previous render timer.\n      window.clearTimeout(deferTimerID.current);\n      path?.add(e.point);\n      path?.smooth();\n    };\n    const resizeRect = (e: paper.MouseEvent) => {\n      if (!path) return;\n      const { x, y } = e.point;\n      const [, s1, s2, s3] = path.segments;\n      if (!s1 || !s2 || !s3) return;\n      s1.point.x = x;\n      s2.point = e.point;\n      s3.point.y = y;\n      path.selected = true;\n    };\n    const moveSelected = (delta: paper.Point) => {\n      chosenItems.forEach((item) => item.translate(delta));\n      path?.translate(delta);\n      rotateHandle?.translate(delta);\n    };\n\n    const handleDrag = {\n      draw: dragPath,\n      erase: dragPath,\n      select: lasso ? dragPath : resizeRect,\n      selected(e: paper.MouseEvent) {\n        const hitRes = hitRef.current;\n        if (!path) return;\n        toggleSelectTool(false);\n        selectionDragged.current = true;\n        if (hitRes?.segment) {\n          const segment = hitRes.segment;\n          const rotating = segment.selected;\n          if (rotating) {\n            // rotate select items\n            const { center } = path.bounds;\n            const axis = segment.point.subtract(center);\n            const line = e.point.subtract(center);\n            setCursor(getRotateCurcor(line.angle));\n            const angle = line.angle - axis.angle;\n            path.rotate(angle, center);\n            rotateHandle?.rotate(angle, center);\n            chosenItems.forEach((item) => item?.rotate(angle, center));\n          } else {\n            // resize selected items\n            const moveP = segment.point;\n            const baseP = segment.next.next.point;\n            const diagonal = moveP.subtract(baseP);\n            const projection = e.point.subtract(baseP).project(diagonal);\n            const scale = projection.x / diagonal.x;\n            if (scale < 0) return;\n\n            path.scale(scale, baseP);\n            chosenItems.forEach((item) => {\n              item.scale(scale, baseP);\n              item.strokeWidth *= scale;\n            });\n\n            // reposition the rotate handle.\n            if (!rotateHandle) return;\n            rotateHandle.scale(scale, baseP);\n            const rBaseP = rotateHandle.segments[0]?.point;\n            if (!rBaseP) return;\n            rotateHandle.scale(100 / rotateHandle.length, rBaseP);\n          }\n        } else {\n          moveSelected(e.delta);\n        }\n      },\n      text: null,\n    }[paperMode];\n\n    useEffect(() => {\n      scope.current.tool.maxDistance = eraserWidth;\n    }, [eraserWidth]);\n    const erased = useRef(new Set<string>());\n    const replaced = useRef(new Map<string, paper.Item>());\n\n    const { globalEraser, pixelEraser } = drawCtrl;\n    const itemGrid = useMemo(() => {\n      if (!/^(erase|select)$/.test(mode)) return [];\n      const items =\n        globalEraser && mode === \"erase\" && !pixelEraser ? teamGroup : group;\n      return gernerateGrid(items, width, height);\n    }, [group, width, height, mode, teamGroup, globalEraser, pixelEraser]);\n\n    const handleToolDrag = (e: paper.ToolEvent) => {\n      const layer = scope.current.project.layers[1];\n      if (paperMode !== \"erase\" || !layer) return;\n      const ew = eraserWidth;\n\n      const hitOption = { class: paper.Path, stroke: true, tolerance: ew / 2 };\n      const bounds = new Rectangle(e.point.subtract(ew), new Size(ew, ew));\n\n      getGridItems(itemGrid, bounds).forEach((item) => {\n        if (erased.current.has(item.name)) return;\n        if (!item.parent) return;\n        item.hitTestAll(e.point, hitOption)?.forEach(({ item }) => {\n          if (!(item instanceof paper.Path)) return;\n          let topItem: paper.PathItem = item;\n          while (topItem.parent !== layer) {\n            if (!(topItem.parent instanceof paper.PathItem)) break;\n            topItem = topItem.parent;\n          }\n          const { name } = topItem;\n\n          if (pixelEraser) {\n            const radius = (ew + item.strokeWidth) / 2;\n            const circle = new Path.Circle({\n              center: e.point,\n              radius,\n              insert: false,\n            });\n\n            const sub = item.subtract(circle, { trace: false });\n            item.replaceWith(sub);\n            if (topItem === item) {\n              setGridItem(itemGrid, sub, item);\n              topItem = sub;\n            }\n            replaced.current.set(name, topItem);\n          } else {\n            topItem.opacity = 0.5;\n            topItem.guide = true;\n            erased.current.add(name);\n          }\n        });\n      });\n    };\n\n    const pathClones = useRef<paper.Path[]>([]);\n    const handleUp = {\n      draw() {\n        if (!path || path.segments.length <= 1) {\n          // if canvas is clicked without any path in queue.\n          if (!pathClones.current.length) unrasterizeCanvas();\n          return;\n        }\n        path.simplify();\n        if (renderSlow.current) pathClones.current.push(path.clone());\n        const pathData = path.exportJSON();\n        onChange((prev) => DrawState.addStroke(prev, pathData));\n        setPath(undefined);\n      },\n      erase() {\n        unrasterizeCanvas();\n        setPath(undefined);\n        if (drawCtrl.pixelEraser) {\n          const items = Array.from(replaced.current);\n          replaced.current.clear();\n          const splitters: Splitter[] = items.map(([uid, item]) => {\n            const paths = flattenCP(item);\n            paths.forEach((p) => (p.name = \"\"));\n            return [uid, paths.map((p) => p.exportJSON())];\n          });\n          if (!splitters.length) return;\n          onChange((prev) => DrawState.splitStrokes(prev, splitters));\n        } else {\n          const erasedList = Array.from(erased.current);\n          erased.current.clear();\n          if (!erasedList.length) return;\n          onChange((prev) => DrawState.eraseStrokes(prev, erasedList));\n        }\n      },\n      select() {\n        unrasterizeCanvas();\n        if (!path) return;\n        if (Math.abs(path.area) < 1_000) return setPath(undefined);\n\n        let selection: string[];\n        if (lasso) {\n          path.closePath();\n          path.simplify();\n          if (!renderSlow.current) moveDash(path);\n          const items = getGridItems(itemGrid, path.bounds);\n          selection = checkLasso(items, path);\n        } else {\n          const items = getGridItems(itemGrid, path.bounds);\n          selection = checkLasso(items, path);\n          const link = new Path();\n          const { topCenter } = path.bounds;\n          link.add(topCenter, topCenter.subtract(new Point(0, 100)));\n          link.lastSegment.selected = true;\n          setRotateHandle(link);\n        }\n        setSelected(true);\n        setChosenIDs(selection);\n        showSelectTool();\n      },\n      selected(e: paper.MouseEvent) {\n        handleSelectedCursor(e);\n        if (!path || !selectionDragged.current) return;\n        showSelectTool();\n        updateMutation();\n      },\n      text(e: paper.MouseEvent) {\n        if (pointText.current) {\n          submitText();\n          return handleTextCursor(e);\n        }\n        const [, l1] = scope.current.project.layers;\n        if (!l1) return;\n\n        const item = getClickedText(l1, e.point);\n        const t = item && isSelfItem(item) ? item : startText(e.point);\n        t.justification = \"left\";\n        pointText.current = t;\n        prevTextData.current = t.exportJSON();\n\n        // hide pointText before rasterizing;\n        if (renderSlow.current) t.visible = false;\n        requestAnimationFrame(() => {\n          rasterizeCanvas();\n          t.visible = true;\n        });\n\n        toggleTextTool(t, renderSlow.current);\n      },\n    }[paperMode];\n\n    const [cursor, setCursor] = useState(\"auto\");\n    const [currScale, setCurrScale] = useState(1);\n    useEffect(() => {\n      if (paperMode === \"text\" || paperMode === \"select\") {\n        setCursor(\"crosshair\");\n      } else if (paperMode === \"selected\") {\n        setCursor(lasso ? \"crosshair\" : \"nwse-resize\");\n      } else if (paperMode === \"draw\" || paperMode === \"erase\") {\n        setCursor(getCircleCursor(drawCtrl, ratio * currScale));\n      }\n    }, [paperMode, lasso, drawCtrl, ratio, currScale]);\n\n    const handleSelectedCursor = (e: paper.MouseEvent) => {\n      if (!path) return;\n      const hitRes =\n        path.hitTest(e.point, { segments: true }) ??\n        rotateHandle?.hitTest(e.point, { segments: true, selected: true });\n      if (hitRes?.segment) {\n        if (hitRes.segment.selected) {\n          const center = path.bounds.center;\n          if (!center) return;\n          const line = hitRes.segment.point.subtract(center);\n          return setCursor(getRotateCurcor(line.angle));\n        }\n        const moveP = hitRes.segment.point;\n        const baseP = hitRes.segment.next.next.point;\n        const diagonal = moveP.subtract(baseP);\n        const { x, y } = diagonal;\n        return setCursor(x * y < 0 ? \"nesw-resize\" : \"nwse-resize\");\n      }\n      if (path.contains(e.point)) return setCursor(\"move\");\n      setCursor(\"crosshair\");\n    };\n\n    const isSelfItem = (item: paper.Item) => {\n      return drawState.getStrokeMap().has(item.name);\n    };\n\n    const handleTextCursor = (e: paper.MouseEvent) => {\n      if (pointText.current) return setCursor(\"auto\");\n      const layer = scope.current.project.layers[1];\n      if (!layer) return;\n      const item = getClickedText(layer, e.point);\n      if (item && isSelfItem(item)) setCursor(\"text\");\n      else setCursor(\"crosshair\");\n    };\n\n    const handleMove = {\n      selected: handleSelectedCursor,\n      text: handleTextCursor,\n      ...{ select: null, draw: null, erase: null },\n    }[paperMode];\n\n    const handleKeyDown = (e: paper.KeyEvent) => {\n      if (paperMode !== \"selected\") return;\n      const delta = {\n        up: new Point(0, -10),\n        down: new Point(0, 10),\n        left: new Point(-10, 0),\n        right: new Point(10, 0),\n      }[e.key];\n      if (!delta) return;\n      e.preventDefault();\n      delta && moveSelected(delta);\n      toggleSelectTool(false);\n    };\n\n    const handleKeyUp = {\n      selected(e: paper.KeyEvent) {\n        if (/^(delete|backspace)$/.test(e.key)) deleteSelected();\n        if (/^(up|down|left|right)$/.test(e.key)) updateMutation();\n        if (/escape/.test(e.key)) resetSelect();\n      },\n      text(e: paper.KeyEvent) {\n        if (/escape/.test(e.key)) submitText();\n      },\n      ...{ select: null, draw: null, erase: null },\n    }[paperMode];\n\n    useEffect(() => {\n      if (readonly) return;\n\n      type Handler<E> = ((e: E) => boolean | void) | null;\n      const activate = <E,>(handler: Handler<E>): Handler<E> => {\n        return (e) => {\n          scope.current.activate();\n          if (handler) return handler(e);\n        };\n      };\n      const { view, tool } = scope.current;\n      view.onMouseDown = activate(handleDown);\n      view.onMouseDrag = activate(handleDrag);\n      view.onMouseUp = activate(handleUp);\n      view.onMouseMove = activate(handleMove);\n      tool.onMouseDrag = activate(handleToolDrag);\n      tool.onKeyDown = activate(handleKeyDown);\n      tool.onKeyUp = activate(handleKeyUp);\n    });\n\n    const updateMutation = () => {\n      if (!chosenItems?.length) return;\n      const mutations: Mutation[] = chosenItems.map((p) => {\n        const { name } = p;\n        p.name = \"\";\n        return [name, p.exportJSON()];\n      });\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\n    };\n\n    const deleteSelected = () => {\n      resetSelect();\n      if (!chosenIDs.length) return;\n      onChange((prev) => DrawState.eraseStrokes(prev, chosenIDs));\n    };\n\n    const mutateStyle = (updated: Partial<DrawCtrl>) => {\n      scope.current.activate();\n      updateGroupStyle(chosenItems, updated);\n      updateMutation();\n    };\n\n    const duplicateSelected = () => {\n      scope.current.activate();\n      if (!path || !chosenItems.length) return;\n      const size = path.bounds.size;\n      const { width, height } = size;\n      const transP = new Point(width, height).divide(10);\n      const copies = chosenItems.map((item) => item.clone());\n      copies.forEach((item) => item.translate(transP));\n      path.translate(transP);\n      rotateHandle?.translate(transP);\n\n      copies.forEach((p) => (p.name = \"\"));\n      const pathDataList = copies.map((item) => item.exportJSON());\n      const IDs: string[] = [];\n      onChange((prev) => DrawState.addStrokes(prev, pathDataList, IDs));\n      setChosenIDs(IDs);\n      showSelectTool();\n    };\n\n    const pointText = useRef<paper.PointText>();\n    const prevTextData = useRef(\"\");\n    const cancelText = useEvent(() => {\n      unrasterizeCanvas();\n      if (!pointText.current?.name) {\n        pointText.current?.remove();\n      }\n      pointText.current = undefined;\n      toggleTextTool(undefined, renderSlow.current);\n    });\n\n    const submitText = useEvent(() => {\n      const t = pointText.current;\n      if (!t) return;\n      cancelText();\n      if (t.exportJSON() === prevTextData.current) return;\n      const { content, name } = t;\n      t.name = \"\";\n      // if text content empty\n      if (!content) {\n        // erase existing text item\n        if (name) onChange((prev) => DrawState.eraseStrokes(prev, [name]));\n        return;\n      }\n      const pathData = t.exportJSON();\n      if (!name) {\n        // add new text item\n        onChange((prev) => DrawState.addStroke(prev, pathData));\n      } else {\n        // mutate existing text item\n        onChange((prev) => DrawState.mutateStrokes(prev, [[name, pathData]]));\n      }\n    });\n    const mutatePointText = (cb: (prev: paper.PointText) => void) => {\n      const pt = pointText.current;\n      if (!pt) return;\n      scope.current.activate();\n      cb(pt);\n      toggleTextTool(new Proxy(pt, {}), renderSlow.current);\n    };\n\n    useEffect(() => {\n      if (mode === \"text\") return submitText;\n    }, [mode, submitText]);\n\n    useImperativeHandle(ref, () => ({\n      deleteSelected,\n      duplicateSelected,\n      mutateStyle,\n      mutatePointText,\n    }));\n\n    usePreventGesture();\n    const prevScale = useRef(1);\n\n    const beforeViewDragged = () => {\n      toggleSelectTool(false);\n      cancelText();\n      rasterizeLayer();\n      unrasterizeCanvas();\n    };\n    usePinch(\n      ({ memo, offset: [scale], first, last, origin }) => {\n        scope.current.activate();\n        const { view } = scope.current;\n        const originRawP = new paper.Point(origin);\n\n        let lastOrigin, elPos: paper.Point;\n        if (first || !memo) {\n          const { x, y } = view.element.getBoundingClientRect();\n          elPos = new Point(x, y);\n          lastOrigin = originRawP.subtract(elPos);\n          beforeViewDragged();\n        } else {\n          [lastOrigin, elPos] = memo;\n        }\n\n        const originViewP = originRawP.subtract(elPos);\n        const originPorjP = view.viewToProject(originViewP);\n\n        const deltaP = originViewP.subtract(lastOrigin);\n        const transP = deltaP.divide(view.zoom);\n        view.translate(transP);\n\n        let dScale = scale / prevScale.current;\n        prevScale.current = scale;\n        scope.current.settings.hitTolerance /= dScale;\n        view.scale(dScale, originPorjP);\n\n        if (last) {\n          Promise.all([\n            putCenterBack(view, projSize),\n            scaleView(view, originPorjP, dScale),\n          ]).then(unrasterizeLayer);\n          view.scale(1 / dScale, originPorjP);\n          setCurrScale(scale);\n        } else {\n          return [originViewP, elPos];\n        }\n      },\n      {\n        scaleBounds: { max: 5, min: 1 },\n        rubberband: 0.5,\n        target: canvasEl,\n      }\n    );\n\n    useWheel(\n      ({ event, delta, ctrlKey, first, last }) => {\n        if (prevScale.current === 1 || ctrlKey) return;\n        event.preventDefault();\n\n        if (first) beforeViewDragged();\n\n        const { view } = scope.current;\n        const deltaP = new paper.Point(delta);\n        const transP = P_ZERO.subtract(deltaP).divide(view.zoom);\n        const { x: tx, y: ty } = transP;\n        const targetCenter = getTargetCenter(view, projSize);\n        const { x: dx, y: dy } = view.center.subtract(targetCenter);\n        const divisorP = new paper.Point(\n          tx * dx < 0 ? Math.pow(Math.E, 0.02 * Math.abs(dx)) : 1,\n          ty * dy < 0 ? Math.pow(Math.E, 0.02 * Math.abs(dy)) : 1\n        );\n        view.translate(transP.divide(divisorP));\n\n        if (last) {\n          putCenterBack(view, projSize).then(unrasterizeLayer);\n        }\n      },\n      {\n        target: canvasEl,\n        eventOptions: { passive: false },\n      }\n    );\n\n    const touchHandler = usePreventTouch(finger);\n    return (\n      <div\n        className=\"draw-wrapper\"\n        style={{ cursor }}\n        data-readonly={readonly}\n        {...touchHandler}\n      >\n        <canvas ref={canvasEl} className=\"draw-canvas\" />\n      </div>\n    );\n  }\n);\n\nDrawRaw.displayName = \"Draw\";\nexport const Draw = React.memo(DrawRaw);\n\nfunction usePaperItem<T extends paper.Item>() {\n  const tuple = useState<T>();\n  const [item] = tuple;\n  useDebugValue(item);\n  useEffect(() => () => void item?.remove(), [item]);\n  return tuple;\n}\n\nconst paintStroke = (() => {\n  const cacheMap = new WeakMap<\n    paper.Layer,\n    Map<string, { stroke: Stroke; item: paper.Item }>\n  >();\n\n  return (stroke: Stroke, layer: paper.Layer) => {\n    const { pathData, uid } = stroke;\n    let item: paper.Item;\n\n    const cache = cacheMap.get(layer) ?? new Map();\n    cacheMap.set(layer, cache);\n    const cached = cache.get(uid);\n\n    if (cached?.stroke === stroke) {\n      layer.addChild(cached.item);\n      item = cached.item;\n    } else {\n      try {\n        item = layer.importJSON(pathData);\n      } catch (e) {\n        console.error(e);\n      }\n      item ??= new paper.Item();\n      item.name = uid;\n      cache.set(uid, { item, stroke });\n    }\n    item.opacity = 1;\n    item.guide = false;\n    return item;\n  };\n})();\n\nconst paintRects = (layers: paper.Layer[], projSize: paper.Size) => {\n  const [l0, l1, l2] = layers;\n  if (!l0 || !l1 || !l2) return [];\n  const bgRect = new Path.Rectangle(P_ZERO, projSize);\n  const clip1 = bgRect.clone();\n  const clip2 = bgRect.clone();\n  bgRect.fillColor = new Color(\"#fff\");\n  l0.addChild(bgRect);\n  l1.addChild(clip1);\n  l2.addChild(clip2);\n  l1.clipped = true;\n  l2.clipped = true;\n  return [bgRect, clip1, clip2];\n};\n\nconst startRect = (point: paper.Point) => {\n  const rect = new Path.Rectangle(point, new Size(0, 0));\n  rect.onFrame = () => {}; // the handle size bug\n  return rect;\n};\n\nconst startStroke = (drawCtrl: DrawCtrl, point: paper.Point, slow = false) => {\n  let { mode, lineWidth, eraserWidth, color, highlight } = drawCtrl;\n  const path = new Path();\n  path.add(point);\n  if (mode === \"erase\") {\n    color = \"#ccc\";\n    lineWidth = eraserWidth;\n  }\n  if (mode === \"select\") {\n    color = \"#009dec\";\n    lineWidth = 5;\n  }\n  const strokeColor = new Color(color);\n  if ((mode === \"draw\" && highlight) || (mode === \"erase\" && !slow)) {\n    strokeColor.alpha = 0.5;\n    path.blendMode = \"multiply\";\n  }\n  path.strokeColor = strokeColor;\n  path.strokeWidth = lineWidth;\n  path.strokeJoin = \"round\";\n  path.strokeCap = \"round\";\n  path.guide = true;\n  return path;\n};\n\nconst moveDash = (item: paper.Item) => {\n  item.dashOffset = 0;\n  item.dashArray = [30, 20];\n  item.onFrame = () => (item.dashOffset += 3);\n};\n\nconst scaleView = (\n  view: paper.View,\n  originPorjP: paper.Point,\n  dScale: number\n) =>\n  new Promise<void>((resolve) => {\n    if (Math.abs(dScale - 1) < 0.05) {\n      view.scale(dScale, originPorjP);\n      return resolve();\n    }\n    let aniCount = 10;\n    dScale = Math.pow(dScale, 1 / aniCount);\n    const scale = () => {\n      view.scale(dScale, originPorjP);\n      if (--aniCount > 0) requestAnimationFrame(scale);\n      else requestAnimationFrame(() => resolve());\n    };\n    scale();\n  });\n\nconst getTargetCenter = (view: paper.View, projSize: paper.Size) => {\n  const { x, y } = view.center;\n  const minSize = Size.min(view.size, projSize).divide(2);\n  const { width: minX, height: minY } = minSize;\n  const { width: maxX, height: maxY } = projSize.subtract(minSize);\n\n  const targetX = x < minX ? minX : x > maxX ? maxX : x;\n  const targetY = y < minY ? minY : y > maxY ? maxY : y;\n  return new Point(targetX, targetY);\n};\n\nconst putCenterBack = (view: paper.View, projSize: paper.Size) =>\n  new Promise<void>((resolve) => {\n    const targetCenter = getTargetCenter(view, projSize);\n    if (view.center.equals(targetCenter)) return resolve();\n    let aniCount = 10;\n    const move = () => {\n      const delta = view.center.subtract(targetCenter);\n      view.translate(delta.divide(aniCount));\n      if (--aniCount > 0) requestAnimationFrame(move);\n      else requestAnimationFrame(() => resolve());\n    };\n    requestAnimationFrame(move);\n  });\n\nconst checkLasso = (items: paper.Item[], selection: paper.Path) => {\n  const isInside = (p: paper.Path) => {\n    if (selection.segments.length === 4 && p.isInside(selection.bounds)) {\n      return true;\n    }\n    return !p.subtract(selection, { insert: false, trace: false }).compare(p);\n  };\n  return items\n    .filter((item) => {\n      if (!item.name) return false;\n      if (!item.bounds.intersects(selection.bounds)) return false;\n      if (item instanceof paper.Path) {\n        return isInside(item);\n      } else {\n        const checkedP = new Path.Rectangle(item.bounds);\n        checkedP.remove();\n        return isInside(checkedP) || selection.isInside(item.bounds);\n      }\n    })\n    .map(({ name }) => name);\n};\n\nconst updateGroupStyle = (items: paper.Item[], updated: Partial<DrawCtrl>) => {\n  const { lineWidth, color, highlight } = updated;\n  items.forEach((item) => {\n    if (item instanceof paper.PointText && color) {\n      const newColor = new Color(color);\n      item.fillColor = newColor;\n    }\n\n    if (!(item instanceof paper.Path)) return;\n\n    if (color) {\n      const newColor = new Color(color);\n      if (item.blendMode === \"multiply\") newColor.alpha = 0.5;\n      item.strokeColor = newColor;\n    }\n\n    if (lineWidth) item.strokeWidth = lineWidth;\n\n    if (!item.strokeColor || highlight === undefined) return;\n    item.strokeColor.alpha = highlight ? 0.5 : 1;\n    item.blendMode = highlight ? \"multiply\" : \"normal\";\n  });\n};\n\nconst getClickedText = (layer: paper.Layer, point: paper.Point) => {\n  const hitRes = layer.hitTest(point, { class: paper.PointText, fill: true });\n  if (hitRes?.item instanceof paper.PointText) return hitRes?.item;\n};\n\nconst startText = (point: paper.Point) => {\n  return new paper.PointText({\n    point: point.add(new Point(0, 50)),\n    content: \"\",\n    fontSize: 50,\n    fontFamily: \"Arial, sans-serif\",\n  });\n};\n\nconst flattenCP = (cp: paper.Item): paper.Path[] => {\n  if (cp instanceof paper.Path) {\n    return cp.isEmpty() ? [] : [cp];\n  }\n  if (cp instanceof paper.CompoundPath) {\n    return cp.children.map(flattenCP).flat();\n  }\n  return [];\n};\n","import { CSSProperties, FC, RefObject, useMemo, useState } from \"react\";\nimport {\n  CopyOutlined,\n  BoldOutlined,\n  DeleteOutlined,\n  BgColorsOutlined,\n  ItalicOutlined,\n} from \"@ant-design/icons\";\nimport { Button, ButtonProps, Popover, Select } from \"antd\";\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\nimport { allColors } from \"lib/color\";\nimport { DrawRefType } from \"component/Draw\";\nimport { Color } from \"paper/dist/paper-core\";\nimport IconFont from \"component/IconFont\";\nimport \"./draw-tools.sass\";\n\nconst btnProps: ButtonProps = {\n  type: \"text\",\n  shape: \"round\",\n  size: \"small\",\n};\n\nconst getPosVars = (x: number, y: number) => {\n  return { \"--pos-x\": x + \"px\", \"--pos-y\": y + \"px\" } as CSSProperties;\n};\nconst getObjVars = (obj: Record<string, string | number>, unit?: string) => {\n  const result: Record<string, string | number> = {};\n  Object.entries(obj).forEach(([key, value]) => {\n    if (unit) value += unit;\n    result[\"--\" + key] = value;\n  });\n  return result as CSSProperties;\n};\n\nexport const SelectTool: FC<{\n  drawRef: RefObject<DrawRefType>;\n  visible: boolean;\n  clickPoint: paper.Point;\n}> = ({ drawRef, visible, clickPoint }) => {\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\n\n  const { x, y } = clickPoint;\n  return (\n    <div\n      className=\"select-tool tool-options\"\n      data-visible={visible}\n      style={getPosVars(x, y)}\n    >\n      <Popover\n        trigger=\"click\"\n        placement=\"bottom\"\n        overlayClassName=\"style-pop\"\n        getPopupContainer={(e) => e.parentElement!}\n        destroyTooltipOnHide\n        content={\n          <PenPanel\n            updateDrawCtrl={(updated) => {\n              setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\n              drawRef.current?.mutateStyle(updated);\n            }}\n            drawCtrl={currDrawCtrl}\n          />\n        }\n      >\n        <Button icon={<BgColorsOutlined />} {...btnProps} />\n      </Popover>\n      <Button\n        icon={<CopyOutlined />}\n        onClick={() => drawRef.current?.duplicateSelected()}\n        {...btnProps}\n      />\n      <Button\n        danger\n        icon={<DeleteOutlined />}\n        onClick={() => drawRef.current?.deleteSelected()}\n        {...btnProps}\n      />\n    </div>\n  );\n};\n\nexport const TextTool: FC<{\n  pointText: paper.PointText;\n  drawRef: RefObject<DrawRefType>;\n  renderSlow: boolean;\n}> = ({ pointText, drawRef, renderSlow }) => {\n  const { view, position, leading, content, rotation } = pointText;\n  const { fontFamily, fontWeight, fontSize } = pointText;\n\n  const { x, y } = view.projectToView(position);\n  const { topLeft, bottomLeft } = pointText.bounds;\n  const { x: bx, y: by } = view.projectToView(topLeft);\n  const { x: bbx, y: bby } = view.projectToView(bottomLeft);\n  const optionAtBottom = by < 90;\n\n  const scale = pointText.viewMatrix.scaling.x;\n  const { width, height } = pointText.internalBounds;\n\n  const lineHeight = +leading / +fontSize ?? 1.2;\n\n  const color = pointText.fillColor?.toCSS(true) ?? allColors[0]!;\n  const fontColorBtn = (\n    <Popover\n      content={\n        <ColorSelect\n          color={color}\n          setColor={(c) =>\n            drawRef.current?.mutatePointText((prev) => {\n              prev.fillColor = new Color(c);\n            })\n          }\n        />\n      }\n      trigger=\"click\"\n      overlayStyle={{ width: 200 }}\n      placement=\"bottom\"\n      getPopupContainer={(e) => e.parentElement!}\n    >\n      <Button\n        {...btnProps}\n        icon={\n          <IconFont\n            type=\"icon-circle\"\n            className=\"text-color-icon\"\n            style={{ color }}\n          />\n        }\n      />\n    </Popover>\n  );\n\n  const { isItalic, isBold } = parseFontStyle(fontWeight);\n  const fontStyleCSS = {\n    fontWeight: isBold ? \"bold\" : \"normal\",\n    fontStyle: isItalic ? \"italic\" : \"normal\",\n  };\n\n  const fontFamilySelect = (\n    <Select\n      className=\"font-select\"\n      popupClassName=\"font-drop\"\n      value={fontFamily}\n      onChange={(v) => {\n        drawRef.current?.mutatePointText((prev) => {\n          prev.fontFamily = v;\n        });\n      }}\n      size=\"small\"\n      bordered={false}\n      virtual={false}\n      getPopupContainer={(e) => e.parentElement.parentElement!}\n      dropdownMatchSelectWidth={100}\n      options={[\n        { value: \"Arial, sans-serif\", name: \"Arial\" },\n        { value: \"'Times New Roman', serif\", name: \"Times\" },\n        { value: \"Georgia, serif\", name: \"Georgia\" },\n        { value: \"'Courier New', monospace\", name: \"Courier\" },\n      ].map(({ value, name }) => ({\n        value,\n        label: (\n          <span style={{ fontFamily: value, fontWeight: \"normal\" }}>\n            {name}\n          </span>\n        ),\n      }))}\n    />\n  );\n\n  const offset = useMemo(\n    // paperjs sets all baseline ratio to 0.75.\n    () => 0.75 - getBaselineRatio(fontFamily, lineHeight),\n    [fontFamily, lineHeight]\n  );\n\n  return (\n    <div\n      className=\"text-tool\"\n      style={{\n        ...getObjVars({ scale, color }),\n        ...getObjVars({ rotation }, \"deg\"),\n        ...getObjVars({ width, height }, \"px\"),\n        ...getObjVars({ offset }, \"em\"),\n        ...getPosVars(x, y),\n      }}\n    >\n      <div\n        className=\"textarea-wrapper\"\n        data-empty={!content}\n        style={{ fontSize, fontFamily, lineHeight, ...fontStyleCSS }}\n      >\n        <textarea\n          autoFocus={!content}\n          placeholder=\"Text\"\n          value={content}\n          onChange={(e) => {\n            drawRef.current?.mutatePointText((prev) => {\n              prev.content = e.target.value;\n            });\n          }}\n          data-slow={renderSlow}\n        />\n      </div>\n      <div\n        className=\"tool-options text-options\"\n        data-bottom={optionAtBottom}\n        style={{\n          ...(optionAtBottom ? getPosVars(bbx, bby) : getPosVars(bx, by)),\n        }}\n      >\n        <div className=\"row\">\n          {fontFamilySelect}\n          {fontColorBtn}\n        </div>\n        <div className=\"row\">\n          <Button\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                prev.fontWeight = toggleBold(prev.fontWeight);\n              });\n            }}\n            {...btnProps}\n            type={isBold ? \"link\" : \"text\"}\n            icon={<BoldOutlined />}\n          />\n          <Button\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                prev.fontWeight = toggleItalic(prev.fontWeight);\n              });\n            }}\n            {...btnProps}\n            type={isItalic ? \"link\" : \"text\"}\n            icon={<ItalicOutlined />}\n          />\n          <Button\n            {...btnProps}\n            icon={<IconFont type=\"icon-font_size_down\" />}\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                const { topLeft } = prev.bounds;\n                prev.scale(0.9, topLeft);\n              });\n            }}\n          />\n          <Button\n            {...btnProps}\n            icon={<IconFont type=\"icon-font_size_up\" />}\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                const { topLeft } = prev.bounds;\n                prev.scale(1.1, topLeft);\n              });\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst parseFontStyle = (fontStyle: string | number) => {\n  fontStyle = fontStyle + \"\";\n  const isItalic = /italic/g.test(fontStyle);\n  const isBold = /bold/g.test(fontStyle);\n  return { isItalic, isBold };\n};\n\nconst toggleItalic = (fontStyle: string | number) => {\n  const { isItalic, isBold } = parseFontStyle(fontStyle);\n  const boldText = isBold ? \"bold\" : \"normal\";\n  return (isItalic ? \"\" : \"italic \") + boldText;\n};\n\nconst toggleBold = (fontStyle: string | number) => {\n  const { isItalic, isBold } = parseFontStyle(fontStyle);\n  const italicText = isItalic ? \"italic \" : \"\";\n  return italicText + (isBold ? \"normal\" : \"bold\");\n};\n\nconst getBaselineRatio = (fontFamily: string, lineHeight: number) => {\n  const div = document.createElement(\"div\");\n  div.innerText = \"p\";\n  Object.assign(div.style, { fontSize: \"100px\", fontFamily, lineHeight });\n  document.body.appendChild(div);\n\n  const span = document.createElement(\"span\");\n  span.style.display = \"inline-block\";\n  div.appendChild(span);\n\n  const r0 = div.getBoundingClientRect();\n  const r1 = span.getBoundingClientRect();\n  const ratio = (r1.y - r0.y) / r0.height;\n  document.body.removeChild(div);\n  return Math.max(-1, Math.min(ratio, 1));\n};\n","import React, {\n  FC,\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport { useDrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { useMemoizedFn as useEvent } from \"ahooks\";\nimport { Draw, DrawRefType } from \"component/Draw\";\nimport { SelectTool, TextTool } from \"pages/reader/tools/DrawTools\";\nimport { once, range } from \"lodash\";\nimport { useInView } from \"react-intersection-observer\";\nimport { DrawState } from \"lib/draw/DrawState\";\nimport { Map, Set } from \"immutable\";\nimport { P_ZERO } from \"component/Draw/Draw\";\n\nconst PageWrapperRaw: FC<{\n  drawState: DrawState;\n  teamStateMap?: Map<string, DrawState>;\n  thumbnail?: string;\n  pdfIndex?: number;\n  noteID?: string;\n  updateState?: (ds: DrawState) => void;\n  onViewChange?: (ratio: number) => void;\n  preview?: boolean;\n  preload?: boolean;\n  ignores?: Set<string>;\n  skipInView?: boolean;\n}> = ({\n  thumbnail,\n  drawState,\n  teamStateMap,\n  updateState,\n  pdfIndex,\n  noteID = \"\",\n  preview = false,\n  onViewChange,\n  preload = false,\n  ignores = Set<string>(),\n  skipInView = false,\n}) => {\n  const threshold = onViewChange && range(0, 1.2, 0.2);\n  const [ref, visible, entry] = useInView({ threshold, skip: skipInView });\n  useEffect(() => {\n    if (!onViewChange) return;\n    if (!entry || !visible) return onViewChange(0);\n    onViewChange(entry.intersectionRatio);\n  }, [visible, entry, onViewChange]);\n\n  const [fullImg, setFullImg] = useState<string>();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const loadImage = useCallback(\n    once(async () => {\n      if (!pdfIndex || !noteID) return;\n      const { getNotePageImage } = await import(\"lib/note/pdfImage\");\n      setFullImg(await getNotePageImage(noteID, pdfIndex));\n    }),\n    [pdfIndex, noteID]\n  );\n\n  const show = visible || preload;\n  useEffect(() => {\n    if (!preview && show) loadImage();\n  }, [show, preview, loadImage]);\n\n  const otherStates = useMemo(\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\n    [teamStateMap, ignores]\n  );\n\n  const imageLoaded = Boolean(fullImg || !pdfIndex);\n  const drawShow = show && imageLoaded;\n\n  const { height, width } = drawState;\n  const ratio = height / width;\n\n  return (\n    <div ref={ref} className=\"page-wrapper\">\n      <svg className=\"size-holder\" viewBox={`0 0 100 ${ratio * 100}`} />\n      {drawShow && (\n        <DrawWrapper\n          drawState={drawState}\n          otherStates={otherStates}\n          updateState={updateState}\n          imgSrc={fullImg || thumbnail}\n          preview={preview}\n        />\n      )}\n    </div>\n  );\n};\nPageWrapperRaw.displayName = \"PageWrapper\";\nexport const PageWrapper = React.memo(PageWrapperRaw);\n\nconst DrawWrapper: FC<{\n  drawState: DrawState;\n  otherStates?: DrawState[];\n  updateState?: (ds: DrawState) => void;\n  preview?: boolean;\n  imgSrc?: string;\n}> = ({ drawState, updateState, otherStates, preview = false, imgSrc }) => {\n  const drawCtrl = useDrawCtrl();\n  const drawRef = useRef<DrawRefType>(null);\n  const [selectShow, setSelectShow] = useState(false);\n  const [clickPoint, setClickPoint] = useState<paper.Point>(P_ZERO);\n  const [pointText, setPointText] = useState<paper.PointText>();\n  const [renderSlow, setRenderSlow] = useState(false);\n\n  const handleChange = useEvent(\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\n      if (!updateState) return;\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\n      if (newDS === drawState) return;\n      updateState(newDS);\n    }\n  );\n\n  const toggleSelectTool = (active: boolean, clickPoint?: paper.Point) => {\n    setClickPoint((p) => clickPoint ?? p);\n    setSelectShow(active);\n  };\n\n  const toggleTextTool = (\n    pointText: paper.PointText | undefined,\n    slow: boolean\n  ) => {\n    setPointText(pointText);\n    setRenderSlow(slow);\n  };\n\n  return preview ? (\n    <Draw\n      drawState={drawState}\n      otherStates={otherStates}\n      imgSrc={imgSrc}\n      readonly\n    />\n  ) : (\n    <>\n      <Draw\n        drawState={drawState}\n        otherStates={otherStates}\n        onChange={handleChange}\n        imgSrc={imgSrc}\n        drawCtrl={drawCtrl}\n        ref={drawRef}\n        toggleTextTool={toggleTextTool}\n        toggleSelectTool={toggleSelectTool}\n      />\n      <SelectTool\n        drawRef={drawRef}\n        visible={selectShow}\n        clickPoint={clickPoint}\n      />\n      {pointText && (\n        <TextTool\n          drawRef={drawRef}\n          pointText={pointText}\n          renderSlow={renderSlow}\n        />\n      )}\n    </>\n  );\n};\n","import { PageWrapper } from \"./PageWrapper\";\nimport \"./page-wrapper.sass\";\nexport default PageWrapper;\n","import React, {\n  FC,\n  PropsWithChildren,\n  useContext,\n  useDebugValue,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Button, message } from \"antd\";\nimport { EditOutlined, EyeInvisibleOutlined } from \"@ant-design/icons\";\nimport localforage from \"localforage\";\nimport { once } from \"lodash\";\nimport \"./draw-ctrl.sass\";\n\nexport interface DrawCtrl {\n  mode: \"draw\" | \"erase\" | \"select\" | \"text\";\n  finger: boolean;\n  lineWidth: number;\n  eraserWidth: number;\n  color: string;\n  highlight: boolean;\n  lasso: boolean;\n  pixelEraser: boolean;\n  globalEraser: boolean;\n  widthList: number[];\n}\n\nexport const defaultWidthList = [10, 20, 30, 50];\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\n  mode: \"draw\",\n  finger: true,\n  lineWidth: 10,\n  eraserWidth: 10,\n  color: \"#000000\",\n  highlight: false,\n  lasso: false,\n  pixelEraser: false,\n  globalEraser: false,\n  widthList: defaultWidthList,\n};\n\nasync function getDrawCtrl() {\n  let drawCtrl = await localforage.getItem<DrawCtrl>(\"DRAW_CTRL\");\n  if (!drawCtrl) {\n    drawCtrl = defaultDrawCtrl;\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\n  }\n  return drawCtrl;\n}\n\nasync function saveDrawCtrl(drawCtrl: DrawCtrl) {\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\n}\n\nconst DrawCtrlContext = React.createContext({\n  drawCtrl: defaultDrawCtrl,\n  updateDrawCtrl: (() => {}) as (updated: Partial<DrawCtrl>) => void,\n});\n\nexport function useDrawCtrl() {\n  const { drawCtrl } = useContext(DrawCtrlContext);\n  useDebugValue(drawCtrl);\n  return drawCtrl;\n}\n\nexport function useUpdateDrawCtrl() {\n  const { updateDrawCtrl } = useContext(DrawCtrlContext);\n  return updateDrawCtrl;\n}\n\nexport const DrawCtrlProvider: FC<PropsWithChildren> = ({ children }) => {\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\n  useEffect(() => {\n    getDrawCtrl().then(setDrawCtrl);\n  }, []);\n\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\n    setDrawCtrl((prev) => {\n      const newCtrl = { ...prev, ...updated };\n      saveDrawCtrl(newCtrl);\n      return newCtrl;\n    });\n  };\n\n  const { finger } = drawCtrl;\n  useEffect(() => {\n    const detectPen = (e: PointerEvent) => {\n      const isPen = e.isPrimary && e.pointerType === \"pen\";\n      if (!isPen || !finger) return;\n      showPencilMsg(() => updateDrawCtrl({ finger: false }));\n    };\n    document.addEventListener(\"pointerup\", detectPen);\n    return () => document.removeEventListener(\"pointerup\", detectPen);\n  }, [finger]);\n\n  return (\n    <DrawCtrlContext.Provider value={{ drawCtrl, updateDrawCtrl }}>\n      {children}\n    </DrawCtrlContext.Provider>\n  );\n};\n\nconst showPencilMsg = once(async (cb: () => void) => {\n  const hide = () => {\n    message.destroy(\"DETECT_PENCIL\");\n    localforage.setItem(\"SKIP_PENCIL_MSG\", true);\n  };\n  if (await localforage.getItem(\"SKIP_PENCIL_MSG\")) return;\n  message.info({\n    content: (\n      <>\n        Your device supports\n        <Button\n          shape=\"round\"\n          size=\"small\"\n          icon={<EditOutlined />}\n          onClick={() => {\n            cb();\n            hide();\n          }}\n        >\n          Pencil only\n        </Button>\n        <Button\n          size=\"small\"\n          type=\"text\"\n          shape=\"circle\"\n          icon={<EyeInvisibleOutlined style={{ color: \"#999\" }} />}\n          onClick={hide}\n        />\n      </>\n    ),\n    key: \"DETECT_PENCIL\",\n    className: \"pencil-msg\",\n  });\n});\n","export function createVirtualCanvas(width: number, height: number) {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  if (!context) {\n    throw new Error(\"can't get virtual canvas context\");\n  }\n  canvas.width = width;\n  canvas.height = height;\n  return { canvas, context };\n}\n\nexport function releaseCanvas(canvas?: HTMLCanvasElement) {\n  if (!canvas) return;\n  canvas.width = 1;\n  canvas.height = 1;\n  const ctx = canvas.getContext(\"2d\");\n  ctx?.clearRect(0, 0, 1, 1);\n}\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\nimport { defaultWidthList, DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { ColorCirle } from \"component/ColorCircle\";\nimport { WIDTH } from \"lib/draw/DrawState\";\nimport { Popover, Segmented, Slider } from \"antd\";\nimport { allColors } from \"lib/color\";\nimport { Setter } from \"lib/hooks\";\nimport IconFont from \"component/IconFont\";\nimport { List } from \"immutable\";\nimport \"./pen-panel.sass\";\n\nexport const PenPanel: FC<{\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n  drawCtrl: Partial<DrawCtrl>;\n}> = ({ updateDrawCtrl, drawCtrl }) => {\n  const { highlight, color } = drawCtrl;\n  const [panelBlur, setPanelBlur] = useState(false);\n\n  return (\n    <div className=\"pen-panel\" data-blur={panelBlur} data-hi={highlight}>\n      <div className=\"pen-status\">\n        <WidthSelect\n          updateDrawCtrl={updateDrawCtrl}\n          drawCtrl={drawCtrl}\n          setPanelBlur={setPanelBlur}\n        />\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\n      </div>\n      <ColorSelect\n        color={color || \"\"}\n        setColor={(c) => updateDrawCtrl({ color: c })}\n      />\n    </div>\n  );\n};\n\nexport const WidthSelect: FC<{\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n  drawCtrl: Partial<DrawCtrl>;\n  setPanelBlur?: Setter<boolean>;\n  field?: \"lineWidth\" | \"eraserWidth\";\n}> = ({\n  updateDrawCtrl,\n  drawCtrl,\n  setPanelBlur = () => {},\n  field = \"lineWidth\",\n}) => {\n  const currWidth = drawCtrl[field];\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\n\n  const chosen = useMemo(\n    () => widthList.indexOf(currWidth ?? -1),\n    [currWidth, widthList]\n  );\n\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\n  useEffect(() => {\n    if (popShow.includes(true)) setPanelBlur(true);\n    else setPanelBlur(false);\n  }, [popShow, setPanelBlur]);\n\n  const realSizeStyle = (width: number) =>\n    ({\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width})`,\n    } as CSSProperties);\n\n  const options = [\n    { value: -1, label: null },\n    ...widthList.map((width, index) => ({\n      value: index,\n      label: (\n        <Popover\n          open={popShow.get(index)}\n          onOpenChange={(v) => setPopShow((prev) => prev.set(index, v))}\n          trigger={chosen === index ? [\"click\"] : []}\n          placement=\"bottom\"\n          destroyTooltipOnHide\n          content={\n            <Slider\n              min={5}\n              max={100}\n              className=\"ctrl-slider\"\n              defaultValue={width}\n              onAfterChange={(w) => {\n                if (widthList.includes(w)) {\n                  setPopShow((prev) => prev.set(index, false));\n                  return updateDrawCtrl({ [field]: w });\n                }\n                const newWL = widthList.slice();\n                newWL[index] = w;\n                updateDrawCtrl({ widthList: newWL, [field]: w });\n              }}\n            />\n          }\n        >\n          <div className=\"circle-wrapper\" style={realSizeStyle(width)}>\n            <ColorCirle className={\"width-circle \" + field} color={color} />\n          </div>\n        </Popover>\n      ),\n    })),\n  ];\n\n  return (\n    <Segmented\n      className=\"width-seg\"\n      value={chosen}\n      options={options}\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 10 })}\n    />\n  );\n};\n\nconst HighlightSwitch: FC<{\n  checked?: boolean;\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n}> = ({ checked = false, updateDrawCtrl }) => {\n  return (\n    <label className=\"hi-wrapper\">\n      <input\n        type=\"checkbox\"\n        name=\"highlight\"\n        checked={checked}\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\n      />\n      <div className=\"hi-switch\">\n        <IconFont type=\"icon-Highlight\" />\n      </div>\n    </label>\n  );\n};\n\nexport const ColorSelect: FC<{\n  color: string;\n  setColor: (color: string) => void;\n}> = ({ setColor, color }) => (\n  <div className=\"color-select\">\n    {allColors.map((c) => (\n      <label key={c}>\n        <input\n          checked={color === c}\n          type=\"radio\"\n          name=\"color\"\n          onChange={(e) => e.target.checked && setColor(c)}\n        />\n        <div\n          data-color={c}\n          className=\"circle\"\n          style={{ backgroundColor: c, borderColor: c }}\n        />\n      </label>\n    ))}\n  </div>\n);\n"],"names":["createFromIconfontCN","scriptUrl","rotateCursorFactory","src","size","cache","Map","half","createVirtualCanvas","canvas","context","image","Image","angle","Math","round","cached","get","translate","rotate","PI","drawImage","data","toDataURL","clearRect","resetTransform","set","getRotateCursor1x","getRotateCursor2x","getRotateCurcor","data1x","data2x","usePreventTouch","allowFinger","isTouch","useRef","checkPoniter","e","isPrimary","current","pointerType","preventTouch","touch","touches","touchType","isApplePencil","length","isEventValid","stopPropagation","onPointerDownCapture","onPointerMoveCapture","onTouchStartCapture","onTouchMoveCapture","getGridRange","bounds","topLeft","bottomRight","floor","x","ceil","y","setGridItem","grid","item","replaced","strokeBounds","xmin","xmax","ymin","ymax","delete","add","getGridItems","itemSet","Set","forEach","Array","from","P_ZERO","Point","DrawRaw","React","ref","drawState","otherStates","onChange","drawCtrl","defaultDrawCtrl","readonly","imgSrc","toggleSelectTool","toggleTextTool","width","height","projSize","useMemo","Size","mode","finger","lasso","eraserWidth","canvasEl","scope","paper","useState","group","setGroup","teamGroup","setTeamGroup","usePaperItem","path","setPath","rotateHandle","setRotateHandle","useEvent","showSelectTool","bc","bottomCenter","view","projectToView","useLayoutEffect","cvs","scp","setup","settings","handleSize","hitTolerance","Layer","visible","project","layers","activate","Tool","remove","releaseCanvas","useEffect","rects","paintRects","r","useSize","canvasWidth","ratio","viewSize","multiply","scale","l","update","imgRaster","setImgRaster","raster","Raster","addChild","sendToBack","onLoad","fitBounds","Rectangle","bringToFront","mergedStrokes","DrawState","getStrokeMap","renderSlow","deferTimerID","deferRender","setDefer","l1","render","tempGroup","tempTeamGroup","removeChildren","stroke","self","hasStroke","uid","paintStroke","push","unrasterizeCanvas","pathClones","c","timeBeforeUpdate","performance","now","requestUpdate","requestAnimationFrame","updateDuration","window","setTimeout","clearTimeout","hitRef","selected","setSelected","paperMode","chosenIDs","setChosenIDs","chosenItems","IDSet","filter","has","name","resetSelect","undefined","type","lastOp","test","pointText","ptProxy","Proxy","layerRaster","lrReusable","unrasterizeLayer","lr","canvasRaster","rasterizeCanvas","devicePixelRatio","element","opacity","cr","downPath","startStroke","point","downLasso","downRect","startRect","selectionDragged","handleDown","draw","erase","select","hitRes","hitTest","segments","contains","text","dragPath","smooth","moveSelected","delta","handleDrag","s1","s2","s3","segment","center","axis","subtract","line","setCursor","moveP","baseP","next","diagonal","strokeWidth","rBaseP","tool","maxDistance","erased","globalEraser","pixelEraser","itemGrid","wnum","hnum","gernerateGrid","handleToolDrag","layer","ew","hitOption","class","tolerance","parent","hitTestAll","topItem","radius","circle","Path","insert","sub","trace","replaceWith","guide","handleUp","simplify","clone","pathData","exportJSON","prev","items","clear","splitters","map","paths","flattenCP","p","erasedList","abs","area","selection","closePath","moveDash","checkLasso","link","topCenter","lastSegment","handleSelectedCursor","updateMutation","submitText","handleTextCursor","getClickedText","t","isSelfItem","startText","justification","prevTextData","cursor","currScale","setCurrScale","lineWidth","double","getSvg","img1x","img2x","getCircleCursor","handleMove","handleKeyDown","up","down","left","right","key","preventDefault","handleKeyUp","deleteSelected","handler","onMouseDown","onMouseDrag","onMouseUp","onMouseMove","onKeyDown","onKeyUp","mutations","mutateStyle","updated","updateGroupStyle","duplicateSelected","transP","divide","copies","pathDataList","IDs","cancelText","content","mutatePointText","cb","pt","useImperativeHandle","document","addEventListener","removeEventListener","prevScale","beforeViewDragged","l0","insertChild","dpi","resolution","rasterize","addTo","rasterizeLayer","usePinch","memo","offset","first","last","origin","lastOrigin","elPos","originRawP","getBoundingClientRect","originViewP","originPorjP","viewToProject","zoom","dScale","Promise","all","putCenterBack","scaleView","then","scaleBounds","max","min","rubberband","target","useWheel","event","ctrlKey","deltaP","tx","ty","targetCenter","getTargetCenter","dx","dy","divisorP","pow","E","eventOptions","passive","touchHandler","className","style","displayName","Draw","tuple","useDebugValue","cacheMap","WeakMap","importJSON","console","error","l2","bgRect","clip1","clip2","fillColor","Color","clipped","rect","onFrame","slow","color","highlight","strokeColor","alpha","blendMode","strokeJoin","strokeCap","dashOffset","dashArray","resolve","aniCount","minSize","minX","minY","maxX","maxY","targetX","targetY","equals","move","isInside","compare","intersects","checkedP","newColor","fill","fontSize","fontFamily","cp","isEmpty","children","flat","btnProps","shape","getPosVars","getObjVars","obj","unit","result","Object","entries","value","SelectTool","drawRef","clickPoint","currDrawCtrl","setCurrDrawCtrl","trigger","placement","overlayClassName","getPopupContainer","parentElement","destroyTooltipOnHide","PenPanel","updateDrawCtrl","icon","BgColorsOutlined","CopyOutlined","onClick","danger","DeleteOutlined","TextTool","position","leading","rotation","fontWeight","bottomLeft","bx","by","bbx","bby","optionAtBottom","viewMatrix","scaling","internalBounds","lineHeight","toCSS","allColors","fontColorBtn","setColor","overlayStyle","IconFont","parseFontStyle","isItalic","isBold","fontStyleCSS","fontStyle","fontFamilySelect","popupClassName","v","bordered","virtual","dropdownMatchSelectWidth","options","label","getBaselineRatio","autoFocus","placeholder","toggleBold","BoldOutlined","toggleItalic","ItalicOutlined","div","createElement","innerText","assign","body","appendChild","span","display","r0","removeChild","PageWrapperRaw","thumbnail","teamStateMap","updateState","pdfIndex","noteID","preview","onViewChange","preload","ignores","skipInView","threshold","range","useInView","skip","entry","intersectionRatio","fullImg","setFullImg","loadImage","useCallback","once","getNotePageImage","show","deleteAll","toList","toArray","imageLoaded","Boolean","drawShow","viewBox","DrawWrapper","useDrawCtrl","selectShow","setSelectShow","setClickPoint","setPointText","setRenderSlow","handleChange","arg","newDS","active","defaultWidthList","widthList","getDrawCtrl","localforage","saveDrawCtrl","DrawCtrlContext","useContext","useUpdateDrawCtrl","DrawCtrlProvider","setDrawCtrl","newCtrl","detectPen","showPencilMsg","Provider","hide","message","EditOutlined","EyeInvisibleOutlined","getContext","Error","ctx","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","field","currWidth","chosen","indexOf","List","popShow","setPopShow","includes","realSizeStyle","WIDTH","index","open","onOpenChange","defaultValue","onAfterChange","w","newWL","slice","i","backgroundColor","borderColor"],"sourceRoot":""}