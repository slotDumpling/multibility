{"version":3,"file":"static/js/734.43e58167.chunk.js","mappings":"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","sources":["component/IconFont.tsx","component/Draw/cursor/cursor.ts","component/Draw/touch.ts","component/Draw/grid.tsx","component/Draw/Draw.tsx","pages/reader/tools/DrawTools.tsx","lib/ErrorBoundary.tsx","component/PageWrapper/PageWrapper.tsx","component/PageWrapper/index.tsx","lib/draw/DrawCtrl.tsx","lib/draw/canvas.ts","pages/reader/tools/PenPanel.tsx"],"sourcesContent":["import { createFromIconfontCN } from \"@ant-design/icons\";\n\nexport default createFromIconfontCN({\n  scriptUrl: \"//at.alicdn.com/t/c/font_3181679_61bmx4utsp.js\",\n});\n","import { createVirtualCanvas } from \"lib/draw/canvas\";\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport rotateImg2x from \"./rotate2x.png\";\nimport rotateImg1x from \"./rotate1x.png\";\n\nexport const getCircleCursor = (drawCtrl: DrawCtrl, ratio: number) => {\n  const { lineWidth, eraserWidth, mode } = drawCtrl;\n  const size = ratio * (mode === \"erase\" ? eraserWidth : lineWidth);\n  if (size < 5) return \"crosshair\";\n  const half = size / 2;\n  const double = size * 2;\n\n  const getSvg = (size: number) =>\n    `data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23DDD7\" width=\"${size}\" height=\"${size}\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"5\"/></svg>`;\n\n  const img1x = getSvg(size);\n  const img2x = getSvg(double);\n\n  return `-webkit-image-set(url('${img1x}')1x, url('${img2x}')2x) ${half} ${half}, crosshair`;\n};\n\nconst rotateCursorFactory = (src: string, size: number) => {\n  const cache = new Map<number, string>();\n  const half = size / 2;\n  const { canvas, context } = createVirtualCanvas(size, size);\n  const image = new Image();\n  image.src = src;\n  return (angle: number) => {\n    angle = Math.round(angle / 10) * 10;\n    const cached = cache.get(angle);\n    if (cached) return cached;\n    context.translate(half, half);\n    context.rotate((angle * Math.PI) / 180);\n    context.drawImage(image, -half, -half);\n    const data = canvas.toDataURL();\n    context.clearRect(-half, -half, size, size);\n    context.resetTransform();\n    cache.set(angle, data);\n    return data;\n  };\n};\n\nconst getRotateCursor1x = rotateCursorFactory(rotateImg1x, 32);\nconst getRotateCursor2x = rotateCursorFactory(rotateImg2x, 64);\n\nexport const getRotateCurcor = (angle: number) => {\n  const data1x = getRotateCursor1x(angle);\n  const data2x = getRotateCursor2x(angle);\n  return `-webkit-image-set(url(${data1x})1x, url(${data2x})2x) 16 16, auto`;\n};\n","import { PointerEvent, TouchEvent, useEffect, useRef } from \"react\";\n\ntype iOSTouch = Touch & {\n  force?: number;\n  touchType?: \"stylus\" | \"direct\";\n};\n\nexport function isApplePencil(e: TouchEvent) {\n  const touch = e.touches[0] as iOSTouch;\n  return touch?.touchType === \"stylus\";\n}\n\nexport function usePreventTouch(\n  allowFinger: boolean\n): React.HTMLAttributes<HTMLDivElement> {\n  const isTouch = useRef(false);\n  const checkPoniter = (e: PointerEvent) =>\n    e.isPrimary && (isTouch.current = e.pointerType === \"touch\");\n\n  const isEventValid = (e: TouchEvent) =>\n    !isTouch.current ||\n    isApplePencil(e) ||\n    (allowFinger && e.touches.length === 1);\n\n  const preventTouch = (e: TouchEvent) =>\n    isEventValid(e) || e.stopPropagation();\n\n  return {\n    onPointerDownCapture: checkPoniter,\n    onPointerMoveCapture: checkPoniter,\n    onTouchStartCapture: preventTouch,\n    onTouchMoveCapture: preventTouch,\n  };\n}\n\nexport const rightClickHandler: React.HTMLAttributes<HTMLDivElement> = {\n  onMouseDownCapture: (e) => {\n    if (e.button !== 0) e.stopPropagation();\n  },\n  onContextMenu: (e) => e.preventDefault(),\n};\n\nexport function usePreventGesture() {\n  useEffect(() => {\n    const handler = (e: Event) => e.preventDefault();\n    document.addEventListener(\"gesturestart\", handler);\n    document.addEventListener(\"gesturechange\", handler);\n    document.addEventListener(\"gestureend\", handler);\n    return () => {\n      document.removeEventListener(\"gesturestart\", handler);\n      document.removeEventListener(\"gesturechange\", handler);\n      document.removeEventListener(\"gestureend\", handler);\n    };\n  }, []);\n}\n","export const gernerateGrid = (\n  group: paper.Item[],\n  width: number,\n  height: number\n) => {\n  const wnum = Math.ceil(width / 100);\n  const hnum = Math.ceil(height / 100);\n  const grid = Array.from({ length: wnum }, () =>\n    Array.from({ length: hnum }, () => new Set<paper.Item>())\n  );\n  group.forEach((item) => setGridItem(grid, item));\n  return grid;\n};\n\nconst getGridRange = (bounds: paper.Rectangle) => {\n  const { topLeft, bottomRight } = bounds;\n  return [\n    Math.floor(topLeft.x / 100),\n    Math.ceil(bottomRight.x / 100),\n    Math.floor(topLeft.y / 100),\n    Math.ceil(bottomRight.y / 100),\n  ] as [number, number, number, number];\n};\nexport const setGridItem = (\n  grid: Set<paper.Item>[][],\n  item: paper.Item,\n  replaced?: paper.Item\n) => {\n  const bounds = (replaced ?? item).strokeBounds;\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\n  for (let x = xmin; x <= xmax; x += 1) {\n    for (let y = ymin; y <= ymax; y += 1) {\n      replaced && grid[x]?.[y]?.delete(replaced);\n      grid[x]?.[y]?.add(item);\n    }\n  }\n};\nexport const getGridItems = (\n  grid: Set<paper.Item>[][],\n  bounds: paper.Rectangle\n) => {\n  const itemSet = new Set<paper.Item>();\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\n  for (let x = xmin; x <= xmax; x += 1) {\n    for (let y = ymin; y <= ymax; y += 1) {\n      grid[x]?.[y]?.forEach((item) => itemSet.add(item));\n    }\n  }\n  return Array.from(itemSet);\n};\n","import React, {\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useDebugValue,\n  useImperativeHandle,\n  useLayoutEffect,\n} from \"react\";\nimport paper, {\n  Path,\n  Size,\n  Point,\n  Color,\n  Raster,\n  Layer,\n  Rectangle,\n} from \"paper/dist/paper-core\";\nimport { usePinch, useWheel } from \"@use-gesture/react\";\nimport useSize from \"@react-hook/size\";\nimport { useMemoizedFn as useEvent } from \"ahooks\";\nimport { DrawState, Mutation, Splitter, Stroke } from \"lib/draw/DrawState\";\nimport { defaultDrawCtrl, DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { releaseCanvas } from \"lib/draw/canvas\";\nimport { getCircleCursor, getRotateCurcor } from \"./cursor\";\nimport { usePreventTouch, usePreventGesture, rightClickHandler } from \"./touch\";\nimport { Setter } from \"lib/hooks\";\nimport { setGridItem, getGridItems, gernerateGrid } from \"./grid\";\n\nexport interface DrawRefType {\n  deleteSelected: () => void;\n  duplicateSelected: () => void;\n  mutateStyle: (updated: Partial<DrawCtrl>) => void;\n  mutatePointText: (cb: (prev: paper.PointText) => void) => void;\n}\ninterface DrawPropType {\n  drawState: DrawState;\n  otherStates?: DrawState[];\n  onChange?: Setter<DrawState>;\n  toggleSelectTool?: (active: boolean, clickPoint?: paper.Point) => void;\n  toggleTextTool?: (pt: paper.PointText | undefined, slow: boolean) => void;\n  drawCtrl?: DrawCtrl;\n  readonly?: boolean;\n  imgSrc?: string;\n}\n\nconst HIT_TOLERANCE = 20;\nexport const P_ZERO = new Point(0, 0);\n\nconst DrawRaw = React.forwardRef<DrawRefType, DrawPropType>(\n  (\n    {\n      drawState,\n      otherStates,\n      onChange = () => {},\n      drawCtrl = defaultDrawCtrl,\n      readonly = false,\n      imgSrc,\n      toggleSelectTool = () => {},\n      toggleTextTool = () => {},\n    },\n    ref\n  ) => {\n    const { width, height } = drawState;\n    const projSize = useMemo(() => new Size(width, height), [width, height]);\n    const { mode, finger, lasso, eraserWidth } = drawCtrl;\n\n    const canvasEl = useRef<HTMLCanvasElement>(null);\n    const scope = useRef(new paper.PaperScope());\n    const [group, setGroup] = useState<paper.Item[]>([]);\n    const [teamGroup, setTeamGroup] = useState<paper.Item[]>([]);\n    const [path, setPath] = usePaperItem<paper.Path>();\n    const [rotateHandle, setRotateHandle] = usePaperItem<paper.Path>();\n\n    toggleSelectTool = useEvent(toggleSelectTool);\n    toggleTextTool = useEvent(toggleTextTool);\n    const showSelectTool = () => {\n      if (!path) return;\n      const bc = path.bounds.bottomCenter;\n      const { view } = scope.current;\n      toggleSelectTool(true, view.projectToView(bc));\n    };\n\n    useLayoutEffect(() => {\n      const cvs = canvasEl.current;\n      const scp = scope.current;\n      if (!cvs) return;\n\n      scp.setup(cvs);\n      scp.settings.handleSize = 10;\n      scp.settings.hitTolerance = HIT_TOLERANCE;\n      [0, 1, 2].forEach(() => (new Layer().visible = false));\n      scp.project.layers[2]?.activate();\n      new scp.Tool();\n\n      return () => {\n        scp.view?.remove();\n        releaseCanvas(cvs);\n        scp.remove();\n        scp.clear();\n      };\n    }, []);\n\n    useEffect(() => {\n      scope.current.activate();\n      const { layers } = scope.current.project;\n      const rects = paintRects(layers, projSize);\n\n      return () => rects.forEach((r) => r.remove());\n    }, [projSize]);\n\n    const [canvasWidth] = useSize(canvasEl);\n    const ratio = canvasWidth / width;\n    const currCenter = useRef(new Point(projSize).divide(2));\n    const [currScale, setCurrScale] = useState(1);\n    const prevScale = useRef(1);\n\n    useEffect(() => {\n      if (!ratio) return;\n      const scp = scope.current;\n      scp.view.viewSize = projSize.multiply(ratio);\n      scp.view.zoom = ratio * prevScale.current;\n      scp.view.center = currCenter.current;\n      scp.project.layers.forEach((l) => (l.visible = true));\n      scp.view.update();\n    }, [ratio, projSize]);\n\n    const [imgRaster, setImgRaster] = usePaperItem();\n    useEffect(() => {\n      if (!imgSrc) return;\n      scope.current.activate();\n      const raster = new Raster(imgSrc);\n      raster.project.layers[0]?.addChild(raster);\n      raster.sendToBack();\n      raster.onLoad = () => {\n        raster.view.update();\n        raster.fitBounds(new Rectangle(projSize));\n        raster.bringToFront();\n      };\n      setImgRaster(raster);\n    }, [imgSrc, projSize, setImgRaster]);\n\n    const mergedStrokes = useMemo(\n      () => DrawState.mergeStates(drawState, ...(otherStates || [])),\n      [drawState, otherStates]\n    );\n\n    const renderSlow = useRef(false);\n\n    const deferTimerID = useRef(0);\n    const deferRender = useRef(false);\n    const setDefer = () => (deferRender.current = renderSlow.current);\n    if (readonly) setDefer();\n\n    useEffect(() => {\n      const [, l1] = scope.current.project.layers;\n      if (!l1) return;\n      const render = () => {\n        scope.current.activate();\n        const tempGroup: paper.Item[] = [];\n        const tempTeamGroup: paper.Item[] = [];\n\n        // clean-up layer_1 except the clip mask.\n        l1.removeChildren(1);\n\n        mergedStrokes.forEach((stroke) => {\n          const self = drawState.hasStroke(stroke.uid);\n          const item = paintStroke(stroke, l1);\n          if (self && item) tempGroup.push(item);\n          if (item) tempTeamGroup.push(item);\n        });\n        setGroup(tempGroup);\n        setTeamGroup(tempTeamGroup);\n\n        unrasterizeCanvas();\n        deferRender.current = false;\n        pathClones.current.forEach((c) => c.remove());\n        pathClones.current = [];\n\n        const timeBeforeUpdate = performance.now();\n        scope.current.view.update();\n        requestAnimationFrame(() => {\n          const timeAfterUpdate = performance.now();\n          const updateDuration = timeAfterUpdate - timeBeforeUpdate;\n          renderSlow.current = updateDuration > 16;\n        });\n      };\n\n      // render immediately\n      if (!deferRender.current) return void render();\n      // defer render for 1000ms\n      deferTimerID.current = window.setTimeout(render, 1000);\n      // clean-up previous render timer.\n      return () => window.clearTimeout(deferTimerID.current);\n    }, [mergedStrokes, drawState]);\n\n    const hitRef = useRef<paper.HitResult>();\n    const [selected, setSelected] = useState(false);\n    const paperMode = mode === \"select\" && selected ? \"selected\" : mode;\n    const [chosenIDs, setChosenIDs] = useState<string[]>([]);\n    const chosenItems = useMemo(() => {\n      const IDSet = new Set(chosenIDs);\n      return teamGroup.filter((item) => IDSet.has(item.name));\n    }, [teamGroup, chosenIDs]);\n\n    const resetSelect = useEvent(() => {\n      setSelected(false);\n      setPath(undefined);\n      setRotateHandle(undefined);\n      setChosenIDs([]);\n      toggleSelectTool(false);\n    });\n\n    useEffect(() => {\n      if (mode === \"select\") return resetSelect;\n    }, [mode, resetSelect]);\n    useEffect(() => resetSelect, [lasso, resetSelect]);\n\n    // reset selection after redo/undo\n    useEffect(() => {\n      const type = drawState.lastOp?.type ?? \"\";\n      if (/^redo|undo$/.test(type)) resetSelect();\n    }, [drawState, resetSelect]);\n\n    useEffect(() => {\n      toggleSelectTool(false);\n      if (pointText.current) {\n        const ptProxy = new Proxy(pointText.current, {});\n        toggleTextTool(ptProxy, renderSlow.current);\n      }\n    }, [canvasWidth, toggleSelectTool, toggleTextTool]);\n\n    const layerRaster = useRef<paper.Raster>();\n    const lrReusable = useRef(false);\n    // layer raster is no longer reusable after state changes.\n    useEffect(() => void (lrReusable.current = false), [mergedStrokes]);\n\n    const rasterizeLayer = () => {\n      if (!renderSlow.current) return;\n      const [l0, l1] = scope.current.project.layers;\n      if (!l0 || !l1) return;\n      l1.visible = true;\n      // move pdf image above clip mask before rasterizing.\n      if (imgRaster) l1.insertChild(1, imgRaster);\n\n      const dpi = 72 * devicePixelRatio;\n      const resolution = (canvasWidth / width) * dpi;\n      let raster = layerRaster.current;\n      if (!raster || !lrReusable.current) {\n        raster = layerRaster.current = l1.rasterize({ raster, resolution });\n        lrReusable.current = true;\n      }\n      raster.visible = true;\n\n      l1.visible = false;\n      imgRaster?.addTo(l0);\n    };\n    const unrasterizeLayer = () => {\n      scope.current.activate();\n      const [, l1] = scope.current.project.layers;\n      const lr = layerRaster.current;\n      if (!l1 || !lr) return;\n      l1.visible = true;\n      lr.visible = false;\n    };\n\n    const canvasRaster = useRef<paper.Raster>();\n    // raster changes with the size of canvas element\n    useEffect(\n      () => () => {\n        canvasRaster.current?.remove();\n        canvasRaster.current = undefined;\n      },\n      [canvasWidth]\n    );\n    useLayoutEffect(\n      () => () => {\n        releaseCanvas(layerRaster.current?.canvas);\n        releaseCanvas(canvasRaster.current?.canvas);\n      },\n      []\n    );\n    const rasterizeCanvas = () => {\n      if (!renderSlow.current) return;\n      // rasterize the canvas only once\n      if (canvasRaster.current?.visible === true) return;\n      scope.current.activate();\n      const { view } = scope.current;\n      // create a raster of the canvas element's size only once.\n      const raster = (canvasRaster.current ??= new Raster(\n        view.viewSize.multiply(devicePixelRatio)\n      ));\n      raster.drawImage(view.element, P_ZERO);\n      raster.fitBounds(view.bounds);\n      raster.visible = true;\n      raster.opacity = process.env.NODE_ENV === \"production\" ? 1 : 0.5;\n      const [, l1] = scope.current.project.layers;\n      l1 && (l1.visible = false);\n    };\n    const unrasterizeCanvas = () => {\n      scope.current.activate();\n      // if the paper scope were removed.\n      if (!scope.current?.project) return;\n      const [, l1] = scope.current.project.layers;\n      const cr = canvasRaster.current;\n      const lr = layerRaster.current;\n      if (!l1 || !cr) return;\n      cr.visible = false;\n      // keep layer_1 hidden unless all 2 raster is hidden.\n      if (lr?.visible !== true) l1.visible = true;\n    };\n\n    const downPath = (e: paper.MouseEvent) => {\n      rasterizeCanvas();\n      setPath(startStroke(drawCtrl, e.point, renderSlow.current));\n    };\n    const downLasso = (e: paper.MouseEvent) => {\n      setPath(startStroke(drawCtrl, e.point));\n      requestAnimationFrame(rasterizeCanvas);\n    };\n    const downSelectRect = (e: paper.MouseEvent) => {\n      // reset rect path before rasterizing;\n      setPath(startRect(e.point));\n      requestAnimationFrame(rasterizeCanvas);\n    };\n\n    const selectionDragged = useRef(false);\n    const handleDown = {\n      draw(e: paper.MouseEvent) {\n        setDefer();\n        downPath(e);\n      },\n      erase: downPath,\n      select: lasso ? downLasso : downSelectRect,\n      selected(e: paper.MouseEvent) {\n        selectionDragged.current = false;\n        if (!path) return;\n        if (!lasso) {\n          // check if the point hit the segment point.\n          let hitRes =\n            path.hitTest(e.point, { segments: true }) ??\n            rotateHandle?.hitTest(e.point, { segments: true, selected: true });\n          hitRef.current = hitRes;\n          if (hitRes) return;\n        }\n\n        // if click outside, reset the selection.\n        if (!path.contains(e.point)) {\n          resetSelect();\n          setRotateHandle(undefined);\n          lasso ? downLasso(e) : downSelectRect(e);\n        }\n      },\n      text: null,\n      rect(e: paper.MouseEvent) {\n        setDefer();\n        rasterizeCanvas();\n        setPath(startRect(e.point, drawCtrl));\n      },\n      picture: null,\n    }[paperMode];\n\n    const dragPath = (e: paper.MouseEvent) => {\n      // cancel previous render timer.\n      window.clearTimeout(deferTimerID.current);\n      path?.add(e.point);\n      path?.smooth();\n    };\n    const resizeRect = (e: paper.MouseEvent, selected = true) => {\n      if (!path) return;\n      const { x, y } = e.point;\n      const [, s1, s2, s3] = path.segments;\n      if (!s1 || !s2 || !s3) return;\n      s1.point.x = x;\n      s2.point = e.point;\n      s3.point.y = y;\n      if (selected) path.selected = true;\n    };\n    const moveSelected = (delta: paper.Point) => {\n      chosenItems.forEach((item) => item.translate(delta));\n      path?.translate(delta);\n      rotateHandle?.translate(delta);\n    };\n\n    const handleDrag = {\n      draw: dragPath,\n      erase: dragPath,\n      select: lasso ? dragPath : resizeRect,\n      selected(e: paper.MouseEvent) {\n        const hitRes = hitRef.current;\n        if (!path) return;\n        toggleSelectTool(false);\n        selectionDragged.current = true;\n        if (hitRes?.segment) {\n          const segment = hitRes.segment;\n          const rotating = segment.selected;\n          if (rotating) {\n            // rotate select items\n            const { center } = path.bounds;\n            const axis = segment.point.subtract(center);\n            const line = e.point.subtract(center);\n            setCursor(getRotateCurcor(line.angle));\n            const angle = line.angle - axis.angle;\n            path.rotate(angle, center);\n            rotateHandle?.rotate(angle, center);\n            chosenItems.forEach((item) => item?.rotate(angle, center));\n          } else {\n            // resize selected items\n            const moveP = segment.point;\n            const baseP = segment.next.next.point;\n            const diagonal = moveP.subtract(baseP);\n            const projection = e.point.subtract(baseP).project(diagonal);\n            const scale = projection.x / diagonal.x;\n            if (scale < 0) return;\n\n            path.scale(scale, baseP);\n            chosenItems.forEach((item) => {\n              item.scale(scale, baseP);\n              item.strokeWidth *= scale;\n            });\n\n            // reposition the rotate handle.\n            if (!rotateHandle) return;\n            rotateHandle.scale(scale, baseP);\n            const rBaseP = rotateHandle.segments[0]?.point;\n            if (!rBaseP) return;\n            rotateHandle.scale(100 / rotateHandle.length, rBaseP);\n          }\n        } else {\n          moveSelected(e.delta);\n        }\n      },\n      text: null,\n      rect(e: paper.MouseEvent) {\n        // cancel previous render timer.\n        window.clearTimeout(deferTimerID.current);\n        resizeRect(e, false);\n      },\n      picture: null,\n    }[paperMode];\n\n    useEffect(() => {\n      scope.current.tool.maxDistance = eraserWidth;\n    }, [eraserWidth]);\n    const erased = useRef(new Set<string>());\n    const replaced = useRef(new Map<string, paper.Item>());\n\n    const { globalEraser, pixelEraser } = drawCtrl;\n    const itemGrid = useMemo(() => {\n      if (!/^(erase|select)$/.test(mode)) return [];\n      const items =\n        globalEraser &&\n        ((mode === \"erase\" && !pixelEraser) || mode === \"select\")\n          ? teamGroup\n          : group;\n      return gernerateGrid(items, width, height);\n    }, [group, width, height, mode, teamGroup, globalEraser, pixelEraser]);\n\n    const handleToolDrag = (e: paper.ToolEvent) => {\n      const layer = scope.current.project.layers[1];\n      if (paperMode !== \"erase\" || !layer) return;\n      const ew = eraserWidth;\n\n      const hitOption = { class: paper.Path, stroke: true, tolerance: ew / 2 };\n      const bounds = new Rectangle(e.point.subtract(ew), new Size(ew, ew));\n\n      getGridItems(itemGrid, bounds).forEach((item) => {\n        if (erased.current.has(item.name)) return;\n        if (!item.parent) return;\n        item.hitTestAll(e.point, hitOption)?.forEach(({ item }) => {\n          if (!(item instanceof paper.Path)) return;\n          let topItem: paper.PathItem = item;\n          while (topItem.parent !== layer) {\n            if (!(topItem.parent instanceof paper.PathItem)) break;\n            topItem = topItem.parent;\n          }\n          const { name } = topItem;\n\n          if (pixelEraser) {\n            const radius = (ew + item.strokeWidth) / 2;\n            const circle = new Path.Circle({\n              center: e.point,\n              radius,\n              insert: false,\n            });\n\n            const sub = item.subtract(circle, { trace: false });\n            item.replaceWith(sub);\n            if (topItem === item) {\n              setGridItem(itemGrid, sub, item);\n              topItem = sub;\n            }\n            replaced.current.set(name, topItem);\n          } else {\n            topItem.opacity = 0.5;\n            topItem.guide = true;\n            erased.current.add(name);\n          }\n        });\n      });\n    };\n\n    const pathClones = useRef<paper.Path[]>([]);\n    const handleUp = {\n      draw() {\n        if (!path || path.segments.length <= 1) {\n          // if canvas is clicked without any path in queue.\n          if (!pathClones.current.length) unrasterizeCanvas();\n          return;\n        }\n        path.simplify();\n        if (renderSlow.current) pathClones.current.push(path.clone());\n        const pathData = path.exportJSON();\n        onChange((prev) => DrawState.addStroke(prev, pathData));\n        setPath(undefined);\n      },\n      erase() {\n        unrasterizeCanvas();\n        setPath(undefined);\n        if (drawCtrl.pixelEraser) {\n          const items = Array.from(replaced.current);\n          replaced.current.clear();\n          const splitters: Splitter[] = items.map(([uid, item]) => {\n            const paths = flattenCP(item);\n            paths.forEach((p) => (p.name = \"\"));\n            return [uid, paths.map((p) => p.exportJSON())];\n          });\n          if (!splitters.length) return;\n          onChange((prev) => DrawState.splitStrokes(prev, splitters));\n        } else {\n          const erasedList = Array.from(erased.current);\n          erased.current.clear();\n          if (!erasedList.length) return;\n          onChange((prev) => DrawState.eraseStrokes(prev, erasedList));\n        }\n      },\n      select() {\n        unrasterizeCanvas();\n        if (!path) return;\n        if (Math.abs(path.area) < 1_000) return setPath(undefined);\n\n        let selection: string[];\n        if (lasso) {\n          path.closePath();\n          path.simplify();\n          if (!renderSlow.current) moveDash(path);\n          const items = getGridItems(itemGrid, path.bounds);\n          selection = checkLasso(items, path);\n        } else {\n          const items = getGridItems(itemGrid, path.bounds);\n          selection = checkLasso(items, path);\n          const link = new Path();\n          const { topCenter } = path.bounds;\n          link.add(topCenter, topCenter.subtract(new Point(0, 100)));\n          link.lastSegment.selected = true;\n          setRotateHandle(link);\n        }\n        setSelected(true);\n        setChosenIDs(selection);\n        showSelectTool();\n      },\n      selected(e: paper.MouseEvent) {\n        handleSelectedCursor(e);\n        if (!path || !selectionDragged.current) return;\n        showSelectTool();\n        updateMutation();\n      },\n      text(e: paper.MouseEvent) {\n        if (pointText.current) {\n          submitText();\n          return handleTextCursor(e);\n        }\n        const [, l1] = scope.current.project.layers;\n        if (!l1) return;\n\n        const item = getClickedText(l1, e.point);\n        const t =\n          item && (isSelfItem(item) || globalEraser)\n            ? item\n            : startText(e.point);\n        t.justification = \"left\";\n        pointText.current = t;\n        prevTextData.current = t.exportJSON();\n\n        // hide pointText before rasterizing;\n        if (renderSlow.current) t.visible = false;\n        requestAnimationFrame(() => {\n          rasterizeCanvas();\n          t.visible = true;\n        });\n\n        toggleTextTool(t, renderSlow.current);\n      },\n      rect() {\n        if (!path || Math.abs(path.area) < 1) {\n          // if canvas is clicked without any path in queue.\n          if (!pathClones.current.length) unrasterizeCanvas();\n          return setPath(undefined);\n        }\n        if (renderSlow.current) pathClones.current.push(path.clone());\n\n        const pathData = path.exportJSON();\n        onChange((prev) => DrawState.addStroke(prev, pathData));\n        setPath(undefined);\n      },\n      picture(e: paper.MouseEvent) {\n        const { imageSrc } = drawCtrl;\n        if (!imageSrc) return;\n        const raster = new Raster(imageSrc);\n        raster.position = e.point;\n        raster.onLoad = () => {\n          const itemData = raster.exportJSON();\n          onChange((prev) => DrawState.addStroke(prev, itemData));\n          raster.remove();\n        };\n      },\n    }[paperMode];\n\n    const [cursor, setCursor] = useState(\"auto\");\n    useEffect(() => {\n      if (/^(text|select|rect)$/.test(paperMode)) {\n        setCursor(\"crosshair\");\n      } else if (paperMode === \"selected\") {\n        // set resize cursor for the bottom-right rect selection\n        setCursor(lasso ? \"crosshair\" : \"nwse-resize\");\n      } else if (/^(draw|erase)$/.test(paperMode)) {\n        setCursor(getCircleCursor(drawCtrl, ratio * currScale));\n      } else if (paperMode === \"picture\") {\n        setCursor(drawCtrl.imageSrc ? \"crosshair\" : \"not-allowed\");\n      }\n    }, [paperMode, lasso, drawCtrl, ratio, currScale]);\n\n    const handleSelectedCursor = (e: paper.MouseEvent) => {\n      if (!path) return;\n      const hitRes =\n        path.hitTest(e.point, { segments: true }) ??\n        rotateHandle?.hitTest(e.point, { segments: true, selected: true });\n      if (hitRes?.segment) {\n        if (hitRes.segment.selected) {\n          const center = path.bounds.center;\n          if (!center) return;\n          const line = hitRes.segment.point.subtract(center);\n          return setCursor(getRotateCurcor(line.angle));\n        }\n        const moveP = hitRes.segment.point;\n        const baseP = hitRes.segment.next.next.point;\n        const diagonal = moveP.subtract(baseP);\n        const { x, y } = diagonal;\n        return setCursor(x * y < 0 ? \"nesw-resize\" : \"nwse-resize\");\n      }\n      if (path.contains(e.point)) return setCursor(\"move\");\n      setCursor(\"crosshair\");\n    };\n\n    const isSelfItem = (item: paper.Item) => {\n      return drawState.getStrokeMap().has(item.name);\n    };\n\n    const handleTextCursor = (e: paper.MouseEvent) => {\n      if (pointText.current) return setCursor(\"auto\");\n      const layer = scope.current.project.layers[1];\n      if (!layer) return;\n      const item = getClickedText(layer, e.point);\n      if (item && (isSelfItem(item) || globalEraser)) setCursor(\"text\");\n      else setCursor(\"crosshair\");\n    };\n\n    const handleMove = {\n      selected: handleSelectedCursor,\n      text: handleTextCursor,\n      ...{ select: null, draw: null, erase: null, rect: null, picture: null },\n    }[paperMode];\n\n    const handleKeyDown = (e: paper.KeyEvent) => {\n      if (paperMode !== \"selected\") return;\n      const delta = {\n        up: new Point(0, -10),\n        down: new Point(0, 10),\n        left: new Point(-10, 0),\n        right: new Point(10, 0),\n      }[e.key];\n      if (!delta) return;\n      e.preventDefault();\n      delta && moveSelected(delta);\n      toggleSelectTool(false);\n    };\n\n    const handleKeyUp = {\n      selected(e: paper.KeyEvent) {\n        if (/^(delete|backspace)$/.test(e.key)) deleteSelected();\n        if (/^(up|down|left|right)$/.test(e.key)) updateMutation();\n        if (/escape/.test(e.key)) resetSelect();\n      },\n      text(e: paper.KeyEvent) {\n        if (/escape/.test(e.key)) submitText();\n      },\n      ...{ select: null, draw: null, erase: null, rect: null, picture: null },\n    }[paperMode];\n\n    useEffect(() => {\n      if (readonly) return;\n\n      type Handler<E> = ((e: E) => boolean | void) | null;\n      const activate = <E,>(handler: Handler<E>): Handler<E> => {\n        return (e) => {\n          scope.current.activate();\n          if (handler) return handler(e);\n        };\n      };\n      const { view, tool } = scope.current;\n      view.onMouseDown = activate(handleDown);\n      view.onMouseDrag = activate(handleDrag);\n      view.onMouseUp = activate(handleUp);\n      view.onMouseMove = activate(handleMove);\n      tool.onMouseDrag = activate(handleToolDrag);\n      tool.onKeyDown = activate(handleKeyDown);\n      tool.onKeyUp = activate(handleKeyUp);\n    });\n\n    const updateMutation = () => {\n      if (!chosenItems?.length) return;\n      const mutations: Mutation[] = chosenItems.map((p) => {\n        const { name } = p;\n        p.name = \"\";\n        return [name, p.exportJSON()];\n      });\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\n    };\n\n    const deleteSelected = () => {\n      resetSelect();\n      if (!chosenIDs.length) return;\n      onChange((prev) => DrawState.eraseStrokes(prev, chosenIDs));\n    };\n\n    const mutateStyle = (updated: Partial<DrawCtrl>) => {\n      scope.current.activate();\n      updateGroupStyle(chosenItems, updated);\n      updateMutation();\n    };\n\n    const duplicateSelected = () => {\n      scope.current.activate();\n      if (!path || !chosenItems.length) return;\n      const size = path.bounds.size;\n      const { width, height } = size;\n      const transP = new Point(width, height).divide(10);\n      const copies = chosenItems.map((item) => item.clone());\n      copies.forEach((item) => item.translate(transP));\n      path.translate(transP);\n      rotateHandle?.translate(transP);\n\n      copies.forEach((p) => (p.name = \"\"));\n      const pathDataList = copies.map((item) => item.exportJSON());\n      onChange((prev) =>\n        DrawState.addStrokeList(prev, pathDataList, setChosenIDs)\n      );\n      showSelectTool();\n    };\n\n    const pointText = useRef<paper.PointText>();\n    const prevTextData = useRef(\"\");\n    const cancelText = useEvent(() => {\n      unrasterizeCanvas();\n      if (!pointText.current?.name) {\n        pointText.current?.remove();\n      }\n      pointText.current = undefined;\n      toggleTextTool(undefined, renderSlow.current);\n    });\n\n    const submitText = useEvent(() => {\n      const t = pointText.current;\n      if (!t) return;\n      cancelText();\n      if (t.exportJSON() === prevTextData.current) return;\n      const { content, name } = t;\n      t.name = \"\";\n      // if text content empty\n      if (!content) {\n        // erase existing text item\n        if (name) onChange((prev) => DrawState.eraseStrokes(prev, [name]));\n        return;\n      }\n      const pathData = t.exportJSON();\n      if (!name) {\n        // add new text item\n        onChange((prev) => DrawState.addStroke(prev, pathData));\n      } else {\n        // mutate existing text item\n        onChange((prev) => DrawState.mutateStrokes(prev, [[name, pathData]]));\n      }\n    });\n    const mutatePointText = (cb: (prev: paper.PointText) => void) => {\n      const pt = pointText.current;\n      if (!pt) return;\n      scope.current.activate();\n      cb(pt);\n      toggleTextTool(new Proxy(pt, {}), renderSlow.current);\n    };\n\n    useEffect(() => {\n      if (mode === \"text\") return submitText;\n    }, [mode, submitText]);\n\n    useImperativeHandle(ref, () => ({\n      deleteSelected,\n      duplicateSelected,\n      mutateStyle,\n      mutatePointText,\n    }));\n\n    usePreventGesture();\n\n    const beforeViewDragged = () => {\n      toggleSelectTool(false);\n      cancelText();\n      rasterizeLayer();\n      unrasterizeCanvas();\n    };\n    usePinch(\n      ({ memo, offset: [scale], first, last, origin }) => {\n        scope.current.activate();\n        const { view } = scope.current;\n        const originRawP = new paper.Point(origin);\n\n        let lastOrigin, elPos: paper.Point;\n        if (first || !memo) {\n          const { x, y } = view.element.getBoundingClientRect();\n          elPos = new Point(x, y);\n          lastOrigin = originRawP.subtract(elPos);\n          beforeViewDragged();\n        } else {\n          [lastOrigin, elPos] = memo;\n        }\n\n        const originViewP = originRawP.subtract(elPos);\n        const originPorjP = view.viewToProject(originViewP);\n\n        const deltaP = originViewP.subtract(lastOrigin);\n        const transP = deltaP.divide(view.zoom);\n        view.translate(transP);\n\n        let dScale = scale / prevScale.current;\n        prevScale.current = scale;\n        scope.current.settings.hitTolerance /= dScale;\n\n        if (last) {\n          scaleView(view, dScale, projSize, originPorjP)\n            .then(() => putCenterBack(view, projSize))\n            .then(() => unrasterizeLayer())\n            .then(() => (currCenter.current = view.center));\n          setCurrScale(scale);\n        } else {\n          view.scale(dScale, originPorjP);\n          return [originViewP, elPos];\n        }\n      },\n      {\n        scaleBounds: { min: 1, max: 5 },\n        rubberband: 0.5,\n        target: canvasEl,\n      }\n    );\n\n    useWheel(\n      ({ event, delta, ctrlKey, first, last }) => {\n        if (prevScale.current === 1 || ctrlKey) return;\n        event.preventDefault();\n\n        if (first) beforeViewDragged();\n\n        const { view } = scope.current;\n        const deltaP = new paper.Point(delta);\n        const transP = P_ZERO.subtract(deltaP).divide(view.zoom);\n        const { x: tx, y: ty } = transP;\n        const targetCenter = getTargetCenter(view, projSize);\n        const { x: dx, y: dy } = view.center.subtract(targetCenter);\n        const divisorP = new paper.Point(\n          tx * dx < 0 ? Math.pow(Math.E, 0.1 * Math.abs(dx)) : 1,\n          ty * dy < 0 ? Math.pow(Math.E, 0.1 * Math.abs(dy)) : 1\n        );\n        view.translate(transP.divide(divisorP));\n\n        if (last) {\n          putCenterBack(view, projSize)\n            .then(unrasterizeLayer)\n            .then(() => (currCenter.current = view.center));\n        }\n      },\n      {\n        target: canvasEl,\n        eventOptions: { passive: false },\n      }\n    );\n\n    const touchHandler = usePreventTouch(finger);\n    return (\n      <div\n        className=\"draw-wrapper\"\n        style={{ cursor }}\n        data-readonly={readonly}\n        {...touchHandler}\n        {...rightClickHandler}\n      >\n        <canvas ref={canvasEl} className=\"draw-canvas\" />\n      </div>\n    );\n  }\n);\n\nDrawRaw.displayName = \"Draw\";\nexport const Draw = React.memo(DrawRaw);\n\nfunction usePaperItem<T extends paper.Item>() {\n  const tuple = useState<T>();\n  const [item] = tuple;\n  useDebugValue(item);\n  // the paper view is removed in useLayoutEffect clean-up func\n  // items with onFrame must be removed before view.\n  useLayoutEffect(() => () => void item?.remove(), [item]);\n  return tuple;\n}\n\nconst paintStroke = (() => {\n  const cacheMap = new WeakMap<\n    paper.Layer,\n    Map<string, { stroke: Stroke; item: paper.Item }>\n  >();\n\n  return (stroke: Stroke, layer: paper.Layer) => {\n    const { pathData, uid } = stroke;\n    let item: paper.Item;\n\n    const cache = cacheMap.get(layer) ?? new Map();\n    cacheMap.set(layer, cache);\n    const cached = cache.get(uid);\n\n    if (cached?.stroke === stroke) {\n      layer.addChild(cached.item);\n      item = cached.item;\n    } else {\n      try {\n        item = layer.importJSON(pathData);\n      } catch (e) {\n        console.error(e);\n        return;\n      }\n      item ??= new paper.Item();\n      item.name = uid;\n      cache.set(uid, { item, stroke });\n    }\n    item.opacity = 1;\n    item.guide = false;\n    return item;\n  };\n})();\n\nconst paintRects = (layers: paper.Layer[], projSize: paper.Size) => {\n  const [l0, l1, l2] = layers;\n  if (!l0 || !l1 || !l2) return [];\n  const bgRect = new Path.Rectangle(P_ZERO, projSize);\n  const clip1 = bgRect.clone();\n  const clip2 = bgRect.clone();\n  bgRect.fillColor = new Color(\"#fff\");\n  l0.addChild(bgRect);\n  l1.addChild(clip1);\n  l2.addChild(clip2);\n  l1.clipped = true;\n  l2.clipped = true;\n  return [bgRect, clip1, clip2];\n};\n\nconst startRect = (point: paper.Point, drawCtrl?: DrawCtrl) => {\n  const rect = new Path.Rectangle(point, new Size(0, 0));\n  if (drawCtrl) {\n    rect.strokeWidth = drawCtrl.lineWidth;\n    rect.strokeColor = new Color(drawCtrl.color);\n  }\n  return rect;\n};\n\nconst startStroke = (drawCtrl: DrawCtrl, point: paper.Point, slow = false) => {\n  let { mode, lineWidth, eraserWidth, color, highlight } = drawCtrl;\n  const path = new Path();\n  path.add(point);\n  if (mode === \"erase\") {\n    color = \"#ccc\";\n    lineWidth = eraserWidth;\n  }\n  if (mode === \"select\") {\n    color = \"#009dec\";\n    lineWidth = 5;\n  }\n  const strokeColor = new Color(color);\n  if ((mode === \"draw\" && highlight) || (mode === \"erase\" && !slow)) {\n    strokeColor.alpha = 0.5;\n    path.blendMode = \"multiply\";\n  }\n  path.strokeColor = strokeColor;\n  path.strokeWidth = lineWidth;\n  path.strokeJoin = \"round\";\n  path.strokeCap = \"round\";\n  path.guide = true;\n  return path;\n};\n\nconst moveDash = (item: paper.Item) => {\n  item.dashOffset = 0;\n  item.dashArray = [30, 20];\n  item.onFrame = () => (item.dashOffset += 3);\n};\n\nconst scaleView = (\n  view: paper.View,\n  dScale: number,\n  projSize: paper.Size,\n  originP: paper.Point\n) =>\n  new Promise<void>((resolve) => {\n    if (dScale === 1) return resolve();\n    const { x: cx, y: cy } = view.center;\n    const { width, height } = projSize;\n\n    // if view is scaled from small to large, reset origin.\n    if (dScale > 1) {\n      originP = new paper.Point(\n        ((dScale / 2) * width - cx) / (dScale - 1),\n        ((dScale / 2) * height - cy) / (dScale - 1)\n      );\n    }\n\n    let aniCount = 10;\n    dScale = Math.pow(dScale, 1 / aniCount);\n\n    const scaleOneFrame = () => {\n      view.scale(dScale, originP);\n      if (--aniCount > 0) requestAnimationFrame(scaleOneFrame);\n      else requestAnimationFrame(() => resolve());\n    };\n    scaleOneFrame();\n  });\n\nconst getTargetCenter = (view: paper.View, projSize: paper.Size) => {\n  const { x, y } = view.center;\n  const minSize = Size.min(view.size, projSize).divide(2);\n  const { width: minX, height: minY } = minSize;\n  const { width: maxX, height: maxY } = projSize.subtract(minSize);\n\n  const targetX = x < minX ? minX : x > maxX ? maxX : x;\n  const targetY = y < minY ? minY : y > maxY ? maxY : y;\n  return new Point(targetX, targetY);\n};\n\nconst putCenterBack = (view: paper.View, projSize: paper.Size) =>\n  new Promise<void>((resolve) => {\n    const targetCenter = getTargetCenter(view, projSize);\n    if (view.center.equals(targetCenter)) return resolve();\n    let aniCount = 10;\n    const moveOneFrame = () => {\n      const delta = view.center.subtract(targetCenter);\n      view.translate(delta.divide(aniCount));\n      if (--aniCount > 0) requestAnimationFrame(moveOneFrame);\n      else requestAnimationFrame(() => resolve());\n    };\n    moveOneFrame();\n  });\n\nconst checkLasso = (items: paper.Item[], selection: paper.Path) => {\n  const isInside = (p: paper.Path) => {\n    if (selection.segments.length === 4 && p.isInside(selection.bounds)) {\n      return true;\n    }\n    return !p.subtract(selection, { insert: false, trace: false }).compare(p);\n  };\n  return items\n    .filter((item) => {\n      if (!item.name) return false;\n      if (!item.bounds.intersects(selection.bounds)) return false;\n      if (item instanceof paper.Path) {\n        return isInside(item);\n      } else {\n        const { rotation } = item;\n        item.rotation = 0;\n        const checkedP = new Path.Rectangle(item.bounds);\n        checkedP.selected = true;\n        checkedP.rotation = rotation;\n        item.rotation = rotation;\n        checkedP.remove();\n        return isInside(checkedP) || selection.isInside(item.bounds);\n      }\n    })\n    .map(({ name }) => name);\n};\n\nconst updateGroupStyle = (items: paper.Item[], updated: Partial<DrawCtrl>) => {\n  const { lineWidth, color, highlight } = updated;\n  items.forEach((item) => {\n    if (item instanceof paper.PointText && color) {\n      const newColor = new Color(color);\n      item.fillColor = newColor;\n    }\n\n    if (!(item instanceof paper.Path)) return;\n\n    if (color) {\n      const newColor = new Color(color);\n      if (item.blendMode === \"multiply\") newColor.alpha = 0.5;\n      item.strokeColor = newColor;\n    }\n\n    if (lineWidth) item.strokeWidth = lineWidth;\n\n    if (!item.strokeColor || highlight === undefined) return;\n    item.strokeColor.alpha = highlight ? 0.5 : 1;\n    item.blendMode = highlight ? \"multiply\" : \"normal\";\n  });\n};\n\nconst getClickedText = (layer: paper.Layer, point: paper.Point) => {\n  const hitRes = layer.hitTest(point, { class: paper.PointText, fill: true });\n  if (hitRes?.item instanceof paper.PointText) return hitRes?.item;\n};\n\nconst startText = (point: paper.Point) => {\n  return new paper.PointText({\n    point: point.add(new Point(0, 50)),\n    content: \"\",\n    fontSize: 50,\n    fontFamily: \"Arial, sans-serif\",\n  });\n};\n\nconst flattenCP = (cp: paper.Item): paper.Path[] => {\n  if (cp instanceof paper.Path) {\n    return cp.isEmpty() ? [] : [cp];\n  }\n  if (cp instanceof paper.CompoundPath) {\n    return cp.children.map(flattenCP).flat();\n  }\n  return [];\n};\n","import { CSSProperties, FC, RefObject, useMemo, useState } from \"react\";\nimport {\n  CopyOutlined,\n  BoldOutlined,\n  DeleteOutlined,\n  BgColorsOutlined,\n  ItalicOutlined,\n} from \"@ant-design/icons\";\nimport { Button, ButtonProps, Popover, Select } from \"antd\";\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\nimport { allColors } from \"lib/color\";\nimport { DrawRefType } from \"component/Draw\";\nimport { Color } from \"paper/dist/paper-core\";\nimport IconFont from \"component/IconFont\";\nimport \"./draw-tools.sass\";\n\nconst btnProps: ButtonProps = {\n  type: \"text\",\n  shape: \"round\",\n  size: \"small\",\n};\n\nconst getPosVars = (x: number, y: number) => {\n  return { \"--pos-x\": x + \"px\", \"--pos-y\": y + \"px\" } as CSSProperties;\n};\nconst getObjVars = (obj: Record<string, string | number>, unit?: string) => {\n  const result: Record<string, string | number> = {};\n  Object.entries(obj).forEach(([key, value]) => {\n    if (unit) value += unit;\n    result[\"--\" + key] = value;\n  });\n  return result as CSSProperties;\n};\n\nexport const SelectTool: FC<{\n  drawRef: RefObject<DrawRefType>;\n  visible: boolean;\n  clickPoint: paper.Point;\n}> = ({ drawRef, visible, clickPoint }) => {\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\n\n  const { x, y } = clickPoint;\n  return (\n    <div\n      className=\"select-tool tool-options\"\n      data-visible={visible}\n      style={getPosVars(x, y)}\n    >\n      <Popover\n        trigger=\"click\"\n        placement=\"bottom\"\n        overlayClassName=\"style-pop\"\n        getPopupContainer={(e) => e.parentElement!}\n        destroyTooltipOnHide\n        content={\n          <PenPanel\n            updateDrawCtrl={(updated) => {\n              setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\n              drawRef.current?.mutateStyle(updated);\n            }}\n            drawCtrl={currDrawCtrl}\n          />\n        }\n      >\n        <Button icon={<BgColorsOutlined />} {...btnProps} />\n      </Popover>\n      <Button\n        icon={<CopyOutlined />}\n        onClick={() => drawRef.current?.duplicateSelected()}\n        {...btnProps}\n      />\n      <Button\n        danger\n        icon={<DeleteOutlined />}\n        onClick={() => drawRef.current?.deleteSelected()}\n        {...btnProps}\n      />\n    </div>\n  );\n};\n\nexport const TextTool: FC<{\n  pointText: paper.PointText;\n  drawRef: RefObject<DrawRefType>;\n  renderSlow: boolean;\n}> = ({ pointText, drawRef, renderSlow }) => {\n  const { view, position, leading, content, rotation } = pointText;\n  const { fontFamily, fontWeight, fontSize } = pointText;\n\n  const { x, y } = view.projectToView(position);\n  const { topLeft, bottomLeft } = pointText.bounds;\n  const { x: bx, y: by } = view.projectToView(topLeft);\n  const { x: bbx, y: bby } = view.projectToView(bottomLeft);\n  const optionAtBottom = by < 90;\n\n  const scale = pointText.viewMatrix.scaling.x;\n  const { width, height } = pointText.internalBounds;\n\n  const lineHeight = +leading / +fontSize ?? 1.2;\n\n  const color = pointText.fillColor?.toCSS(true) ?? allColors[0]!;\n  const fontColorBtn = (\n    <Popover\n      content={\n        <ColorSelect\n          color={color}\n          setColor={(c) =>\n            drawRef.current?.mutatePointText((prev) => {\n              prev.fillColor = new Color(c);\n            })\n          }\n        />\n      }\n      trigger=\"click\"\n      overlayStyle={{ width: 200 }}\n      placement=\"bottom\"\n      getPopupContainer={(e) => e.parentElement!}\n    >\n      <Button\n        {...btnProps}\n        icon={\n          <IconFont\n            type=\"icon-circle\"\n            className=\"text-color-icon\"\n            style={{ color }}\n          />\n        }\n      />\n    </Popover>\n  );\n\n  const { isItalic, isBold } = parseFontStyle(fontWeight);\n  const fontStyleCSS = {\n    fontWeight: isBold ? \"bold\" : \"normal\",\n    fontStyle: isItalic ? \"italic\" : \"normal\",\n  };\n\n  const fontFamilySelect = (\n    <Select\n      className=\"font-select\"\n      popupClassName=\"font-drop\"\n      value={fontFamily}\n      onChange={(v) => {\n        drawRef.current?.mutatePointText((prev) => {\n          prev.fontFamily = v;\n        });\n      }}\n      size=\"small\"\n      bordered={false}\n      virtual={false}\n      getPopupContainer={(e) => e.parentElement.parentElement!}\n      dropdownMatchSelectWidth={100}\n      options={[\n        { value: \"Arial, sans-serif\", name: \"Arial\" },\n        { value: \"'Times New Roman', serif\", name: \"Times\" },\n        { value: \"Georgia, serif\", name: \"Georgia\" },\n        { value: \"'Courier New', monospace\", name: \"Courier\" },\n      ].map(({ value, name }) => ({\n        value,\n        label: (\n          <span style={{ fontFamily: value, fontWeight: \"normal\" }}>\n            {name}\n          </span>\n        ),\n      }))}\n    />\n  );\n\n  const offset = useMemo(\n    // paperjs sets all baseline ratio to 0.75.\n    () => 0.75 - getBaselineRatio(fontFamily, lineHeight),\n    [fontFamily, lineHeight]\n  );\n\n  return (\n    <div\n      className=\"text-tool\"\n      style={{\n        ...getObjVars({ scale, color }),\n        ...getObjVars({ rotation }, \"deg\"),\n        ...getObjVars({ width, height }, \"px\"),\n        ...getObjVars({ offset }, \"em\"),\n        ...getPosVars(x, y),\n      }}\n    >\n      <div\n        className=\"textarea-wrapper\"\n        data-empty={!content}\n        style={{ fontSize, fontFamily, lineHeight, ...fontStyleCSS }}\n      >\n        <textarea\n          autoFocus={!content}\n          placeholder=\"Text\"\n          value={content}\n          onChange={(e) => {\n            drawRef.current?.mutatePointText((prev) => {\n              prev.content = e.target.value;\n            });\n          }}\n          data-slow={renderSlow}\n        />\n      </div>\n      <div\n        className=\"tool-options text-options\"\n        data-bottom={optionAtBottom}\n        style={{\n          ...(optionAtBottom ? getPosVars(bbx, bby) : getPosVars(bx, by)),\n        }}\n      >\n        <div className=\"row\">\n          {fontFamilySelect}\n          {fontColorBtn}\n        </div>\n        <div className=\"row\">\n          <Button\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                prev.fontWeight = toggleBold(prev.fontWeight);\n              });\n            }}\n            {...btnProps}\n            type={isBold ? \"link\" : \"text\"}\n            icon={<BoldOutlined />}\n          />\n          <Button\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                prev.fontWeight = toggleItalic(prev.fontWeight);\n              });\n            }}\n            {...btnProps}\n            type={isItalic ? \"link\" : \"text\"}\n            icon={<ItalicOutlined />}\n          />\n          <Button\n            {...btnProps}\n            icon={<IconFont type=\"icon-font_size_down\" />}\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                const { topLeft } = prev.bounds;\n                prev.scale(0.9, topLeft);\n              });\n            }}\n          />\n          <Button\n            {...btnProps}\n            icon={<IconFont type=\"icon-font_size_up\" />}\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                const { topLeft } = prev.bounds;\n                prev.scale(1.1, topLeft);\n              });\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst parseFontStyle = (fontStyle: string | number) => {\n  fontStyle = fontStyle + \"\";\n  const isItalic = /italic/g.test(fontStyle);\n  const isBold = /bold/g.test(fontStyle);\n  return { isItalic, isBold };\n};\n\nconst toggleItalic = (fontStyle: string | number) => {\n  const { isItalic, isBold } = parseFontStyle(fontStyle);\n  const boldText = isBold ? \"bold\" : \"normal\";\n  return (isItalic ? \"\" : \"italic \") + boldText;\n};\n\nconst toggleBold = (fontStyle: string | number) => {\n  const { isItalic, isBold } = parseFontStyle(fontStyle);\n  const italicText = isItalic ? \"italic \" : \"\";\n  return italicText + (isBold ? \"normal\" : \"bold\");\n};\n\nconst getBaselineRatio = (fontFamily: string, lineHeight: number) => {\n  const div = document.createElement(\"div\");\n  div.innerText = \"p\";\n  Object.assign(div.style, { fontSize: \"100px\", fontFamily, lineHeight });\n  document.body.appendChild(div);\n\n  const span = document.createElement(\"span\");\n  span.style.display = \"inline-block\";\n  div.appendChild(span);\n\n  const r0 = div.getBoundingClientRect();\n  const r1 = span.getBoundingClientRect();\n  const ratio = (r1.y - r0.y) / r0.height;\n  document.body.removeChild(div);\n  return Math.max(-1, Math.min(ratio, 1));\n};\n","import { Component, ErrorInfo, ReactNode } from \"react\";\n\ninterface Props {\n  children?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"Uncaught error:\", error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return <p>Error</p>;\n    }\n\n    return this.props.children;\n  }\n}\n","import React, {\n  FC,\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport { useDrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { useMemoizedFn as useEvent } from \"ahooks\";\nimport { Draw, DrawRefType } from \"component/Draw\";\nimport { SelectTool, TextTool } from \"pages/reader/tools/DrawTools\";\nimport { once, range } from \"lodash\";\nimport { useInView } from \"react-intersection-observer\";\nimport { DrawState } from \"lib/draw/DrawState\";\nimport { Map, Set } from \"immutable\";\nimport { P_ZERO } from \"component/Draw/Draw\";\nimport { ErrorBoundary } from \"lib/ErrorBoundary\";\n\nconst PageWrapperRaw: FC<{\n  drawState: DrawState;\n  teamStateMap?: Map<string, DrawState>;\n  thumbnail?: string;\n  pdfIndex?: number;\n  noteID?: string;\n  updateState?: (ds: DrawState) => void;\n  onViewChange?: (ratio: number) => void;\n  preview?: boolean;\n  preload?: boolean;\n  ignores?: Set<string>;\n  skipInView?: boolean;\n}> = ({\n  thumbnail,\n  drawState,\n  teamStateMap,\n  updateState,\n  pdfIndex,\n  noteID = \"\",\n  preview = false,\n  onViewChange,\n  preload = false,\n  ignores = Set<string>(),\n  skipInView = false,\n}) => {\n  const threshold = onViewChange && range(0, 1.2, 0.2);\n  const [ref, visible, entry] = useInView({ threshold, skip: skipInView });\n  useEffect(() => {\n    if (!onViewChange) return;\n    if (!entry || !visible) return onViewChange(0);\n    onViewChange(entry.intersectionRatio);\n  }, [visible, entry, onViewChange]);\n\n  const [fullImg, setFullImg] = useState<string>();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const loadImage = useCallback(\n    once(async () => {\n      if (!pdfIndex || !noteID) return;\n      const { getNotePageImage } = await import(\"lib/note/pdfImage\");\n      setFullImg(await getNotePageImage(noteID, pdfIndex));\n    }),\n    [pdfIndex, noteID]\n  );\n\n  const show = visible || preload;\n  useEffect(() => {\n    if (!preview && show) loadImage();\n  }, [show, preview, loadImage]);\n\n  const otherStates = useMemo(\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\n    [teamStateMap, ignores]\n  );\n\n  const imageLoaded = Boolean(fullImg || !pdfIndex);\n  const drawShow = show && imageLoaded;\n\n  const { height, width } = drawState;\n  const ratio = height / width;\n\n  return (\n    <div ref={ref} className=\"page-wrapper\" data-preview={preview}>\n      <svg className=\"size-holder\" viewBox={`0 0 100 ${ratio * 100}`} />\n      {drawShow && (\n        <DrawWrapper\n          drawState={drawState}\n          otherStates={otherStates}\n          updateState={updateState}\n          imgSrc={fullImg || thumbnail}\n          preview={preview}\n        />\n      )}\n    </div>\n  );\n};\nPageWrapperRaw.displayName = \"PageWrapper\";\nexport const PageWrapper = React.memo(PageWrapperRaw);\n\nconst DrawWrapper: FC<{\n  drawState: DrawState;\n  otherStates?: DrawState[];\n  updateState?: (ds: DrawState) => void;\n  preview?: boolean;\n  imgSrc?: string;\n}> = ({ drawState, updateState, otherStates, preview = false, imgSrc }) => {\n  const drawCtrl = useDrawCtrl();\n  const drawRef = useRef<DrawRefType>(null);\n  const [selectShow, setSelectShow] = useState(false);\n  const [clickPoint, setClickPoint] = useState<paper.Point>(P_ZERO);\n  const [pointText, setPointText] = useState<paper.PointText>();\n  const [renderSlow, setRenderSlow] = useState(false);\n\n  const handleChange = useEvent(\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\n      if (!updateState) return;\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\n      if (newDS === drawState) return;\n      updateState(newDS);\n    }\n  );\n\n  const toggleSelectTool = (active: boolean, clickPoint?: paper.Point) => {\n    setClickPoint((p) => clickPoint ?? p);\n    setSelectShow(active);\n  };\n\n  const toggleTextTool = (\n    pointText: paper.PointText | undefined,\n    slow: boolean\n  ) => {\n    setPointText(pointText);\n    setRenderSlow(slow);\n  };\n\n  return preview ? (\n    <Draw\n      drawState={drawState}\n      otherStates={otherStates}\n      imgSrc={imgSrc}\n      readonly\n    />\n  ) : (\n    <ErrorBoundary>\n      <Draw\n        drawState={drawState}\n        otherStates={otherStates}\n        onChange={handleChange}\n        imgSrc={imgSrc}\n        drawCtrl={drawCtrl}\n        ref={drawRef}\n        toggleTextTool={toggleTextTool}\n        toggleSelectTool={toggleSelectTool}\n      />\n      <SelectTool\n        drawRef={drawRef}\n        visible={selectShow}\n        clickPoint={clickPoint}\n      />\n      {pointText && (\n        <TextTool\n          drawRef={drawRef}\n          pointText={pointText}\n          renderSlow={renderSlow}\n        />\n      )}\n    </ErrorBoundary>\n  );\n};\n","import { PageWrapper } from \"./PageWrapper\";\nimport \"./page-wrapper.sass\";\nexport default PageWrapper;\n","import React, {\n  FC,\n  PropsWithChildren,\n  useContext,\n  useDebugValue,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Button, message } from \"antd\";\nimport { EditOutlined, CloseOutlined } from \"@ant-design/icons\";\nimport localforage from \"localforage\";\nimport { once } from \"lodash\";\nimport \"./draw-ctrl.sass\";\n\nexport interface DrawCtrl {\n  mode: \"draw\" | \"erase\" | \"select\" | \"text\" | \"rect\" | \"picture\";\n  finger: boolean;\n  lineWidth: number;\n  eraserWidth: number;\n  color: string;\n  highlight: boolean;\n  lasso: boolean;\n  pixelEraser: boolean;\n  globalEraser: boolean;\n  widthList: number[];\n  imageSrc: string;\n}\n\nexport const defaultWidthList = [10, 20, 30, 50];\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\n  mode: \"draw\",\n  finger: true,\n  lineWidth: 10,\n  eraserWidth: 10,\n  color: \"#000000\",\n  highlight: false,\n  lasso: false,\n  pixelEraser: false,\n  globalEraser: false,\n  widthList: defaultWidthList,\n  imageSrc: \"\",\n};\n\nasync function getDrawCtrl() {\n  let drawCtrl = await localforage.getItem<DrawCtrl>(\"DRAW_CTRL\");\n  if (!drawCtrl) {\n    drawCtrl = defaultDrawCtrl;\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\n  }\n  return drawCtrl;\n}\n\nasync function saveDrawCtrl(drawCtrl: DrawCtrl) {\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\n}\n\nconst DrawCtrlContext = React.createContext({\n  drawCtrl: defaultDrawCtrl,\n  updateDrawCtrl: (() => {}) as (updated: Partial<DrawCtrl>) => void,\n});\n\nexport function useDrawCtrl() {\n  const { drawCtrl } = useContext(DrawCtrlContext);\n  useDebugValue(drawCtrl);\n  return drawCtrl;\n}\n\nexport function useUpdateDrawCtrl() {\n  const { updateDrawCtrl } = useContext(DrawCtrlContext);\n  return updateDrawCtrl;\n}\n\nexport const DrawCtrlProvider: FC<PropsWithChildren> = ({ children }) => {\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\n  useEffect(() => {\n    getDrawCtrl().then(setDrawCtrl);\n  }, []);\n\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\n    setDrawCtrl((prev) => {\n      const newCtrl = { ...prev, ...updated };\n      saveDrawCtrl(newCtrl);\n      return newCtrl;\n    });\n  };\n\n  const { finger } = drawCtrl;\n  useEffect(() => {\n    const detectPen = (e: PointerEvent) => {\n      const isPen = e.isPrimary && e.pointerType === \"pen\";\n      if (!isPen || !finger) return;\n      showPencilMsg(() => updateDrawCtrl({ finger: false }));\n    };\n    document.addEventListener(\"pointerup\", detectPen);\n    return () => document.removeEventListener(\"pointerup\", detectPen);\n  }, [finger]);\n\n  return (\n    <DrawCtrlContext.Provider value={{ drawCtrl, updateDrawCtrl }}>\n      {children}\n    </DrawCtrlContext.Provider>\n  );\n};\n\nconst showPencilMsg = once(async (cb: () => void) => {\n  const hide = () => {\n    message.destroy(\"DETECT_PENCIL\");\n    localforage.setItem(\"SKIP_PENCIL_MSG\", true);\n  };\n  if (await localforage.getItem(\"SKIP_PENCIL_MSG\")) return;\n  message.info({\n    content: (\n      <>\n        Your device supports\n        <Button\n          shape=\"round\"\n          size=\"small\"\n          icon={<EditOutlined />}\n          onClick={() => {\n            cb();\n            hide();\n          }}\n        >\n          Pencil only\n        </Button>\n        <Button\n          size=\"small\"\n          type=\"text\"\n          shape=\"circle\"\n          icon={<CloseOutlined style={{ color: \"#999\" }} />}\n          onClick={hide}\n        />\n      </>\n    ),\n    key: \"DETECT_PENCIL\",\n    className: \"pencil-msg\",\n    duration: 0,\n  });\n});\n","export function createVirtualCanvas(width: number, height: number) {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  if (!context) {\n    throw new Error(\"can't get virtual canvas context\");\n  }\n  canvas.width = width;\n  canvas.height = height;\n  return { canvas, context };\n}\n\nexport function releaseCanvas(canvas?: HTMLCanvasElement) {\n  if (!canvas) return;\n  canvas.width = 1;\n  canvas.height = 1;\n  const ctx = canvas.getContext(\"2d\");\n  ctx?.clearRect(0, 0, 1, 1);\n}\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\nimport { defaultWidthList, DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { ColorCirle } from \"component/ColorCircle\";\nimport { WIDTH } from \"lib/draw/DrawState\";\nimport { Popover, Segmented, Slider } from \"antd\";\nimport { allColors } from \"lib/color\";\nimport { Setter } from \"lib/hooks\";\nimport IconFont from \"component/IconFont\";\nimport { List } from \"immutable\";\nimport \"./pen-panel.sass\";\n\nexport const PenPanel: FC<{\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n  drawCtrl: Partial<DrawCtrl>;\n}> = ({ updateDrawCtrl, drawCtrl }) => {\n  const { highlight, color } = drawCtrl;\n  const [panelBlur, setPanelBlur] = useState(false);\n\n  return (\n    <div className=\"pen-panel\" data-blur={panelBlur} data-hi={highlight}>\n      <div className=\"pen-status\">\n        <WidthSelect\n          updateDrawCtrl={updateDrawCtrl}\n          drawCtrl={drawCtrl}\n          setPanelBlur={setPanelBlur}\n        />\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\n      </div>\n      <ColorSelect\n        color={color || \"\"}\n        setColor={(c) => updateDrawCtrl({ color: c })}\n      />\n    </div>\n  );\n};\n\nexport const WidthSelect: FC<{\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n  drawCtrl: Partial<DrawCtrl>;\n  setPanelBlur?: Setter<boolean>;\n  field?: \"lineWidth\" | \"eraserWidth\";\n}> = ({\n  updateDrawCtrl,\n  drawCtrl,\n  setPanelBlur = () => {},\n  field = \"lineWidth\",\n}) => {\n  const currWidth = drawCtrl[field];\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\n\n  const chosen = useMemo(\n    () => widthList.indexOf(currWidth ?? -1),\n    [currWidth, widthList]\n  );\n\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\n  useEffect(() => {\n    if (popShow.includes(true)) setPanelBlur(true);\n    else setPanelBlur(false);\n  }, [popShow, setPanelBlur]);\n\n  // temp: ugly Implementation\n  const [widthRatio] = useState(() => {\n    const section = document.querySelector(\"section.note-page\");\n    const sw = section?.getBoundingClientRect().width ?? 0;\n    const bw = document.body.getBoundingClientRect().width;\n    return sw / bw;\n  });\n\n  const realSizeStyle = (width: number) =>\n    ({\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width} * ${widthRatio})`,\n    } as CSSProperties);\n\n  const options = [\n    { value: -1, label: null },\n    ...widthList.map((width, index) => ({\n      value: index,\n      label: (\n        <Popover\n          open={popShow.get(index)}\n          onOpenChange={(v) => setPopShow((prev) => prev.set(index, v))}\n          trigger={chosen === index ? [\"click\"] : []}\n          placement=\"bottom\"\n          destroyTooltipOnHide\n          content={\n            <Slider\n              min={5}\n              max={100}\n              className=\"ctrl-slider\"\n              defaultValue={width}\n              onAfterChange={(w) => {\n                if (widthList.includes(w)) {\n                  setPopShow((prev) => prev.set(index, false));\n                  return updateDrawCtrl({ [field]: w });\n                }\n                const newWL = widthList.slice();\n                newWL[index] = w;\n                updateDrawCtrl({ widthList: newWL, [field]: w });\n              }}\n            />\n          }\n        >\n          <div className=\"circle-wrapper\" style={realSizeStyle(width)}>\n            <ColorCirle className={\"width-circle \" + field} color={color} />\n          </div>\n        </Popover>\n      ),\n    })),\n  ];\n\n  return (\n    <Segmented\n      className=\"width-seg\"\n      value={chosen}\n      options={options}\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 10 })}\n    />\n  );\n};\n\nconst HighlightSwitch: FC<{\n  checked?: boolean;\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n}> = ({ checked = false, updateDrawCtrl }) => {\n  return (\n    <label className=\"hi-wrapper\">\n      <input\n        type=\"checkbox\"\n        name=\"highlight\"\n        checked={checked}\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\n      />\n      <div className=\"hi-switch\">\n        <IconFont type=\"icon-Highlight\" />\n      </div>\n    </label>\n  );\n};\n\nexport const ColorSelect: FC<{\n  color: string;\n  setColor: (color: string) => void;\n}> = ({ setColor, color }) => (\n  <div className=\"color-select\">\n    {allColors.map((c) => (\n      <label key={c}>\n        <input\n          checked={color === c}\n          type=\"radio\"\n          name=\"color\"\n          onChange={(e) => e.target.checked && setColor(c)}\n        />\n        <div\n          data-color={c}\n          className=\"circle\"\n          style={{ backgroundColor: c, borderColor: c }}\n        />\n      </label>\n    ))}\n  </div>\n);\n"],"names":["createFromIconfontCN","scriptUrl","rotateCursorFactory","src","size","cache","Map","half","createVirtualCanvas","canvas","context","image","Image","angle","Math","round","cached","get","translate","rotate","PI","drawImage","data","toDataURL","clearRect","resetTransform","set","getRotateCursor1x","getRotateCursor2x","getRotateCurcor","data1x","data2x","usePreventTouch","allowFinger","isTouch","useRef","checkPoniter","e","isPrimary","current","pointerType","preventTouch","touch","touches","touchType","isApplePencil","length","isEventValid","stopPropagation","onPointerDownCapture","onPointerMoveCapture","onTouchStartCapture","onTouchMoveCapture","rightClickHandler","onMouseDownCapture","button","onContextMenu","preventDefault","getGridRange","bounds","topLeft","bottomRight","floor","x","ceil","y","setGridItem","grid","item","replaced","strokeBounds","xmin","xmax","ymin","ymax","delete","add","getGridItems","itemSet","Set","forEach","Array","from","P_ZERO","Point","DrawRaw","React","ref","drawState","otherStates","onChange","drawCtrl","defaultDrawCtrl","readonly","imgSrc","toggleSelectTool","toggleTextTool","width","height","projSize","useMemo","Size","mode","finger","lasso","eraserWidth","canvasEl","scope","paper","useState","group","setGroup","teamGroup","setTeamGroup","usePaperItem","path","setPath","rotateHandle","setRotateHandle","useEvent","showSelectTool","bc","bottomCenter","view","projectToView","useLayoutEffect","cvs","scp","setup","settings","handleSize","hitTolerance","Layer","visible","project","layers","activate","Tool","remove","releaseCanvas","clear","useEffect","rects","paintRects","r","useSize","canvasWidth","ratio","currCenter","divide","currScale","setCurrScale","prevScale","viewSize","multiply","zoom","center","l","update","imgRaster","setImgRaster","raster","Raster","addChild","sendToBack","onLoad","fitBounds","Rectangle","bringToFront","mergedStrokes","DrawState","renderSlow","deferTimerID","deferRender","setDefer","l1","render","tempGroup","tempTeamGroup","removeChildren","stroke","self","hasStroke","uid","paintStroke","push","unrasterizeCanvas","pathClones","c","timeBeforeUpdate","performance","now","requestAnimationFrame","updateDuration","window","setTimeout","clearTimeout","hitRef","selected","setSelected","paperMode","chosenIDs","setChosenIDs","chosenItems","IDSet","filter","has","name","resetSelect","undefined","type","lastOp","test","pointText","ptProxy","Proxy","layerRaster","lrReusable","unrasterizeLayer","lr","canvasRaster","rasterizeCanvas","devicePixelRatio","element","opacity","cr","downPath","startStroke","point","downLasso","downSelectRect","startRect","selectionDragged","handleDown","draw","erase","select","hitRes","hitTest","segments","contains","text","rect","picture","dragPath","smooth","resizeRect","s1","s2","s3","moveSelected","delta","handleDrag","segment","axis","subtract","line","setCursor","moveP","baseP","next","diagonal","scale","strokeWidth","rBaseP","tool","maxDistance","erased","globalEraser","pixelEraser","itemGrid","wnum","hnum","gernerateGrid","handleToolDrag","layer","ew","hitOption","class","tolerance","parent","hitTestAll","topItem","radius","circle","Path","insert","sub","trace","replaceWith","guide","handleUp","simplify","clone","pathData","exportJSON","prev","items","splitters","map","paths","flattenCP","p","erasedList","abs","area","selection","closePath","moveDash","checkLasso","link","topCenter","lastSegment","handleSelectedCursor","updateMutation","submitText","handleTextCursor","getClickedText","t","isSelfItem","startText","justification","prevTextData","imageSrc","position","itemData","cursor","lineWidth","double","getSvg","img1x","img2x","getCircleCursor","getStrokeMap","handleMove","handleKeyDown","up","down","left","right","key","handleKeyUp","deleteSelected","handler","onMouseDown","onMouseDrag","onMouseUp","onMouseMove","onKeyDown","onKeyUp","mutations","mutateStyle","updated","updateGroupStyle","duplicateSelected","transP","copies","pathDataList","cancelText","content","mutatePointText","cb","pt","useImperativeHandle","document","addEventListener","removeEventListener","beforeViewDragged","l0","insertChild","dpi","resolution","rasterize","addTo","rasterizeLayer","usePinch","memo","offset","first","last","origin","lastOrigin","elPos","originRawP","getBoundingClientRect","originViewP","originPorjP","viewToProject","dScale","scaleView","then","putCenterBack","scaleBounds","min","max","rubberband","target","useWheel","event","ctrlKey","deltaP","tx","ty","targetCenter","getTargetCenter","dx","dy","divisorP","pow","E","eventOptions","passive","touchHandler","className","style","displayName","Draw","tuple","useDebugValue","cacheMap","WeakMap","importJSON","console","error","l2","bgRect","clip1","clip2","fillColor","Color","clipped","strokeColor","color","slow","highlight","alpha","blendMode","strokeJoin","strokeCap","dashOffset","dashArray","onFrame","originP","Promise","resolve","cx","cy","aniCount","scaleOneFrame","minSize","minX","minY","maxX","maxY","targetX","targetY","equals","moveOneFrame","isInside","compare","intersects","rotation","checkedP","newColor","fill","fontSize","fontFamily","cp","isEmpty","children","flat","btnProps","shape","getPosVars","getObjVars","obj","unit","result","Object","entries","value","SelectTool","drawRef","clickPoint","currDrawCtrl","setCurrDrawCtrl","trigger","placement","overlayClassName","getPopupContainer","parentElement","destroyTooltipOnHide","PenPanel","updateDrawCtrl","icon","BgColorsOutlined","CopyOutlined","onClick","danger","DeleteOutlined","TextTool","leading","fontWeight","bottomLeft","bx","by","bbx","bby","optionAtBottom","viewMatrix","scaling","internalBounds","lineHeight","toCSS","allColors","fontColorBtn","setColor","overlayStyle","IconFont","parseFontStyle","isItalic","isBold","fontStyleCSS","fontStyle","fontFamilySelect","popupClassName","v","bordered","virtual","dropdownMatchSelectWidth","options","label","getBaselineRatio","autoFocus","placeholder","toggleBold","BoldOutlined","toggleItalic","ItalicOutlined","div","createElement","innerText","assign","body","appendChild","span","display","r0","removeChild","ErrorBoundary","state","hasError","errorInfo","this","props","_","Component","PageWrapperRaw","thumbnail","teamStateMap","updateState","pdfIndex","noteID","preview","onViewChange","preload","ignores","skipInView","threshold","range","useInView","skip","entry","intersectionRatio","fullImg","setFullImg","loadImage","useCallback","once","getNotePageImage","show","deleteAll","toList","toArray","imageLoaded","Boolean","drawShow","viewBox","DrawWrapper","useDrawCtrl","selectShow","setSelectShow","setClickPoint","setPointText","setRenderSlow","handleChange","arg","newDS","active","defaultWidthList","widthList","getDrawCtrl","localforage","saveDrawCtrl","DrawCtrlContext","useContext","useUpdateDrawCtrl","DrawCtrlProvider","setDrawCtrl","newCtrl","detectPen","showPencilMsg","Provider","hide","message","EditOutlined","CloseOutlined","duration","getContext","Error","ctx","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","field","currWidth","chosen","indexOf","List","popShow","setPopShow","includes","section","querySelector","widthRatio","realSizeStyle","WIDTH","index","open","onOpenChange","defaultValue","onAfterChange","w","newWL","slice","i","backgroundColor","borderColor"],"sourceRoot":""}