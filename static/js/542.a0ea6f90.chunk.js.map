{"version":3,"file":"static/js/542.a0ea6f90.chunk.js","mappings":"mLAGaA,EAAwD,SAAC,GAG/D,IAFLC,EAEI,EAFJA,MACAC,EACI,EADJA,UAEMC,EAAQ,CAAEC,gBAAiBH,GACjC,OACE,gBAAKC,UAAWG,IAAW,eAAgBH,GAAYC,MAAOA,GAEjE,C,iLCTYG,EAAS,CACpB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAIWC,EAAS,UADI,CAAC,UAAW,UAAW,UAAW,WAChBD,GAE/BE,EAAiB,WAC5B,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWN,EAAOO,QAChD,OAAOP,EAAOG,EACf,EAEYK,EAAiB,SAACC,GAC7B,IAAMN,EAAQO,IAAKD,GAAOT,EAAOO,OACjC,OAAOP,EAAOG,EACf,EAEKQ,EAAgE,CACpE,UAAW,CAAEC,MAAO,UAAWC,KAAM,WACrC,UAAW,CAAED,MAAO,UAAWC,KAAM,WACrC,UAAW,CAAED,MAAO,UAAWC,KAAM,WACrC,UAAW,CAAED,MAAO,UAAWC,KAAM,WACrC,UAAW,CAAED,MAAO,UAAWC,KAAM,WACrC,UAAW,CAAED,MAAO,UAAWC,KAAM,WACrC,UAAW,CAAED,MAAO,UAAWC,KAAM,WACrC,UAAW,CAAED,MAAO,UAAWC,KAAM,WACrC,UAAW,CAAED,MAAO,UAAWC,KAAM,WACrC,UAAW,CAAED,MAAO,UAAWC,KAAM,WACrC,UAAW,CAAED,MAAO,UAAWC,KAAM,WACrC,UAAW,CAAED,MAAO,UAAWC,KAAM,WACrC,UAAW,CAAED,MAAO,UAAWC,KAAM,WACrC,UAAW,CAAED,MAAO,UAAWC,KAAM,WACrC,UAAW,CAAED,MAAO,UAAWC,KAAM,WACrC,UAAW,CAAED,MAAO,UAAWC,KAAM,YAG1BC,EAAkB,SAACnB,GAAmB,IAAD,EAC1CoB,EAAO,UAAGJ,EAAahB,UAAhB,QAA0B,CAAEiB,MAAO,UAAWC,KAAM,WACjE,MAAO,CACL,gBAAiBE,EAAQH,MACzB,eAAgBG,EAAQF,KAE3B,C,wDC3DM,IAAMG,EAAQ,G,sJCWfC,EAA+C,CACnDC,YAAYC,EAAAA,EAAAA,MACZC,WAAWD,EAAAA,EAAAA,OAIPE,GAAiBC,EAAAA,EAAAA,IAAOL,GAEjBM,EAAb,WACE,WAAoBC,IAA6B,oBAA7BA,UAAAA,CAA8B,CADpD,2CAGE,WACE,OAAOC,KAAKD,SACb,GALH,2BAOE,WACE,OAAOC,KAAKC,eAAeC,IAAI,aAChC,GATH,0BAWE,WACE,OAAOF,KAAKC,eAAeC,IAAI,YAChC,GAbH,yBAeE,SAAYC,EAAgBC,GAAiB,IAAD,EAC1C,iBAAOJ,KAAKK,gBAAgBH,IAAIC,UAAhC,aAAO,EAAkCD,IAAIE,EAC9C,GAjBH,gCAmBE,SAAmBD,GACjB,OAAOH,KAAKK,gBAAgBH,IAAIC,EACjC,GArBH,0BAuBE,SAAaA,GAAiB,IAAD,EAC3B,iBAAOH,KAAKM,eAAeJ,IAAIC,UAA/B,aAAO,EAAiCI,KACzC,GAzBH,0BA2BE,SAAaJ,GACX,OAAOH,KAAKK,gBAAgBG,IAAIL,EACjC,GA7BH,sBA+BE,SAASA,EAAgBC,EAAgBK,GACvC,IAAMC,EAAUV,KAAKK,gBAAgBH,IAAIC,GACzC,OAAKO,EACE,IAAIZ,EACTE,KAAKC,eAAeU,OAAO,cAAc,SAACC,GAAD,OACvCA,EAAEC,IAAIV,EAAQO,EAAQG,IAAIT,EAAQK,GADK,KAFtBT,IAMtB,GAvCH,qBA0DE,SAAQG,EAAgBW,GACtB,IAAQP,EAAUO,EAAVP,MACR,OAAO,IAAIT,EACTE,KAAKC,eACFU,OAAO,cAAc,SAACC,GAAD,OAAOA,EAAEC,IAAIV,GAAQT,EAAAA,EAAAA,MAArB,IACrBiB,OAAO,aAAa,SAACC,GAAD,OAAOA,EAAEC,IAAIV,EAAQ,CAAEI,MAAAA,GAAvB,IAE1B,GAjEH,2BAmEE,SAAcQ,EAAqBX,GACjC,IAAQD,EAAkBY,EAAlBZ,OAAWa,GAAnB,OAA0BD,EAA1B,GACMR,EAAQP,KAAKiB,aAAad,GAChC,IAAKH,KAAKkB,aAAaf,KAAYI,EAAO,OAAOP,KACjD,IAAMmB,EACJnB,KAAKoB,YAAYjB,EAAQC,IAAWiB,EAAAA,UAAAA,YAAsBd,EAAOhB,EAAAA,GAE7D+B,EAAKD,EAAAA,UAAAA,cAAwBF,EAAQH,GAC3C,OAAOhB,KAAKuB,SAASpB,EAAQC,EAAQkB,EACtC,GA5EH,uBA8EE,SAAUlB,EAAgBoB,GAExB,IADA,IAAIC,EAAmBzB,KACvB,MAAuC0B,OAAOC,QAAQH,GAAtD,eAAgE,CAA3D,sBAAKrB,EAAL,YAAeyB,EAAf,EAAeA,MAAOrB,EAAtB,EAAsBA,MACVkB,EAAML,YAAYjB,EAAQC,KAEzCqB,EAAQA,EAAMF,SACZpB,EACAC,EACAiB,EAAAA,UAAAA,aAAuBO,EAAOrB,EAAOhB,EAAAA,IAExC,CACD,OAAOkC,CACR,IA1FH,kCAyCE,SAA2BI,GACzB,IAAIC,EAASlC,IAab,OAZA8B,OAAOC,QAAQE,GAAWE,SAAQ,YAAyB,IAAD,eAAtB5B,EAAsB,KAAd6B,EAAc,KAChDC,EAAkBD,EAAlBC,OAAQ1B,EAAUyB,EAAVzB,MACVG,GAAUhB,EAAAA,EAAAA,IACdgC,OAAOC,QAAQM,GAAQC,KAAI,+BAAE9B,EAAF,KAAU+B,EAAV,WAAyB,CAClD/B,EACAiB,EAAAA,UAAAA,aAAuBc,EAAW5B,EAAOhB,EAAAA,GAFhB,KAK7BuC,EAASA,EACNnB,OAAO,cAAc,SAACC,GAAD,OAAOA,EAAEC,IAAIV,EAAQO,EAArB,IACrBC,OAAO,aAAa,SAACC,GAAD,OAAOA,EAAEC,IAAIV,EAAQ,CAAEI,MAAAA,GAAvB,GACxB,IACM,IAAIT,EAAUgC,EACtB,GAxDH,2BA4FE,SACEM,GAEC,IADDC,EACA,wDADUC,EAAAA,EAAAA,MAEV,OAAKF,EACEG,MAAMC,KACXJ,EACGK,QAAO,SAACnB,GAAD,OAASA,EAAGoB,SAAZ,IACPC,UAAUN,GACVO,QALqB,EAO3B,GAvGH,qBAwGE,SAAeR,GACb,OAAQA,GAAgBA,EAAaS,OAAM,SAACvB,GAAD,OAAQA,EAAGoB,SAAX,GAC5C,KA1GH,I,8LCJO,SAASI,EAAT,GAMsC,IAL3CC,EAK0C,EAL1CA,aAK0C,IAJ1CC,OAAAA,OAI0C,SACpCC,GAASC,EAAAA,EAAAA,SAAO,WAAQ,IAC9B,GAAkBC,EAAAA,EAAAA,WAChB,kBAAM,IAAIC,SAAc,SAACC,GAAD,OAAUJ,EAAOK,QAAUD,CAA3B,GAAxB,IAEF,MAAO,EAHP,eAKE,SAACE,GACKA,EAAER,eAAiBA,GAAgBC,GAAQC,EAAOK,SACvD,EAEJ,CAED,IAAME,GAAeC,EAAAA,EAAAA,eAAwC,CAAC,GAAI,WAAQ,IACnE,SAASC,IACd,IAAMC,GAAQC,EAAAA,EAAAA,YAAWJ,GAEzB,OADAK,EAAAA,EAAAA,eAAcF,EAAM,IACbA,CACR,CAEM,IAAMG,EAAgE,SAAC,GAGvE,IAFLC,EAEI,EAFJA,SACAC,EACI,EADJA,QAEML,GAAQR,EAAAA,EAAAA,UAASa,GACvB,OACE,SAACR,EAAaS,SAAd,CAAuBC,MAAOP,EAA9B,SAAsCI,GAEzC,EAEKI,GAAeV,EAAAA,EAAAA,eAA0C,EAC7D,EACA,WAAQ,IAEH,SAASW,IACd,IAAMT,GAAQC,EAAAA,EAAAA,YAAWO,GAEzB,OADAN,EAAAA,EAAAA,eAAcF,EAAM,IACbA,CACR,CAEM,IAAMU,EAA2C,SAAC,GAAkB,IAAhBN,EAAe,EAAfA,SACnDJ,GAAQR,EAAAA,EAAAA,WAAS,GACvB,OACE,SAACgB,EAAaF,SAAd,CAAuBC,MAAOP,EAA9B,SAAsCI,GAEzC,C,8VCtDYO,EAAQ,UAAGC,sCAAH,EAA8C,GAI5D,SAAeC,EAAtB,+CAAO,OAAP,0BAAO,WAAyBC,GAAzB,uGAEoBC,IAAAA,IAAA,eAAkBD,IAFtC,mBAGqB,OADhBE,EAFL,EAEKA,MACCC,WAHN,yCAGiC,MAHjC,gCAIID,EAAKE,QAJT,yCAMHC,QAAQC,MAAR,MANG,kBAOI,MAPJ,iFAkBA,SAAeC,EAAtB,+CAAO,OAAP,0BAAO,WAA+BH,GAA/B,6GAEoBH,IAAAA,IAAA,eAAkBG,IAFtC,mBAEKF,EAFL,EAEKA,KACAC,GAHL,EAG4BD,GAAvBC,WAAevB,GAHpB,YAIgB,MAAfuB,EAJD,yCAI4B,MAJ5B,gCAKIvB,GALJ,yCAOHyB,QAAQC,MAAR,MAPG,kBAQI,MARJ,iFAYA,SAAeE,EAAtB,iDAAO,OAAP,0BAAO,WACLJ,EACAK,GAFK,+GAKmBF,EAAgBH,GALnC,UAKGM,EALH,gDAMkB,MANlB,cAOKC,EAAwBD,EAAxBC,SAAUzF,EAAcwF,EAAdxF,UAPf,UASO0F,EAAAA,EAAAA,IAAeR,EAAQO,EAAUzF,GATxC,4DAS2DwF,GAT3D,YAWCC,EAASE,QAXV,kCAYsBZ,IAAM,CAC3Ba,OAAQ,MACRC,IAAKX,EACLY,aAAc,OACdC,mBAJ2B,YAIoB,IAA1BC,EAAyB,EAAzBA,OACjB,OAAFT,QAAE,IAAFA,GAAAA,EAAKS,EACN,IAlBF,wBAYOhB,EAZP,EAYOA,KAQFiB,EAAO,IAAIC,KAAK,CAAClB,GAAO,CAAEmB,KAAM,oBApBrC,WAqBKC,EAAAA,EAAAA,IAAalB,EAAQO,EAAUzF,EAAWiG,GArB/C,kDAuBKG,EAAAA,EAAAA,IAAalB,EAAQO,EAAUzF,GAvBpC,iCAyBIwF,GAzBJ,yCA2BHL,QAAQC,MAAR,MA3BG,kBA4BI,MA5BJ,iFAgCA,SAAeiB,EAAtB,+CAAO,OAAP,0BAAO,WAAuBnB,GAAvB,mHACcoB,EAAAA,EAAAA,IAASpB,GADvB,UACCqB,EADD,iDAEa,GAFb,cAGGC,EAAgDD,EAAhDC,IAAKC,EAA2CF,EAA3CE,KAAMd,EAAqCY,EAArCZ,QAASe,EAA4BH,EAA5BG,IAAKC,EAAuBJ,EAAvBI,UAAW9E,EAAY0E,EAAZ1E,SAC5C+E,EAAAA,EAAAA,IAAe/E,GAJV,mBAOoBkD,IAAAA,IAAA,iBAAoBG,GAAU,CACnDzE,QAAQoG,EAAAA,EAAAA,MACRhF,QAAAA,EACA4D,SAAU,CAAEe,IAAAA,EAAKC,KAAAA,EAAMd,QAAAA,EAASgB,UAAAA,KAV/B,oBAOK3B,EAPL,EAOKA,MAMJ0B,EAbD,wBAcKI,EAAW,IAAIC,SAdpB,UAegBL,EAAIM,cAfpB,eAeKC,EAfL,OAgBKhB,EAAO,IAAIC,KAAK,CAACe,IACvBH,EAASI,OAAO,OAAQjB,EAAMf,GAjB7B,UAkBKH,IAAM,CACVa,OAAQ,OACRC,IAAK,SACLb,KAAM8B,EACNK,QAAS,CAAE,eAAgB,yBAtB5B,WA0BqB,MAApBnC,EAAKC,WA1BN,2CA0BiC,GA1BjC,kCA2BI,GA3BJ,yCA6BHE,QAAQC,MAAR,MA7BG,mBA8BI,GA9BJ,iFAhEPL,IAAAA,SAAAA,QAAyBJ,EAkGzB,IAAMyC,EAAaC,IAAAA,eAA2B,CAAEZ,KAAM,eAC/C,SAAea,EAAtB,+CAAO,OAAP,0BAAO,WAA2BpC,GAA3B,iHACcoB,EAAAA,EAAAA,IAASpB,GADvB,UACCqB,EADD,gDAEa,MAFb,cAGGC,EAA2CD,EAA3CC,IAAKC,EAAsCF,EAAtCE,KAAMd,EAAgCY,EAAhCZ,QAASgB,EAAuBJ,EAAvBI,UAAW9E,EAAY0E,EAAZ1E,SACvC+E,EAAAA,EAAAA,IAAe/E,GACT4D,EAAW,CAAEe,IAAAA,EAAKC,KAAAA,EAAMd,QAAAA,EAASgB,UAAAA,GAEjCrH,EAAOiI,IAAIC,KAAKC,UAAU,CAAC5F,EAAS4D,KAPrC,UAQkB2B,EAAWM,QAAgBxC,GAR7C,WAQCyC,EARD,OASDrI,IAASqI,EATR,2CASyB,GATzB,yBAYGC,EAAO,CAAEnH,QAAQoG,EAAAA,EAAAA,MAAahF,QAAAA,EAAS4D,SAAAA,GAZ1C,UAaoBV,IAAAA,IAAA,iBAAoBG,GAAU0C,GAblD,oBAcqB,MAdrB,EAaK5C,KACCC,WAdN,2CAciC,GAdjC,yBAeGmC,EAAWS,QAAQ3C,EAAQ5F,GAf9B,kCAgBI,GAhBJ,0CAkBH6F,QAAQC,MAAR,MAlBG,mBAmBI,GAnBJ,kFAuBP,IAAM0C,EAAaT,IAAAA,eAA2B,CAAEZ,KAAM,cAC/C,SAAesB,EAAtB,iDAAO,OAAP,0BAAO,WACL7C,EACAK,GAFK,wGAIqByC,EAAoB9C,GAJzC,cAIC+C,EAJD,OAKC3I,EAAO2I,GAAeV,IAAIC,KAAKC,UAAUQ,IAL1C,kBAQoBlD,IAAAA,IAAA,gBAAmBG,GAAU,CAClDgD,OAAQ,CAAEzH,QAAQoG,EAAAA,EAAAA,MAAavH,KAAAA,GAC/ByG,mBAFkD,YAEH,IAA1BC,EAAyB,EAAzBA,OACjB,OAAFT,QAAE,IAAFA,GAAAA,EAAKS,EACN,IAZA,mBAQKhB,EARL,EAQKA,KAMAC,EAAoCD,EAApCC,WAAYkD,EAAwBnD,EAAxBmD,SAAUjG,EAAc8C,EAAd9C,UACX,MAAf+C,IAAsBkD,EAfvB,kCAgBKL,EAAWD,QAAQ3C,EAAQhD,GAhBhC,iCAiBMA,GAjBN,iCAmBI+F,GAnBJ,yCAqBH9C,QAAQC,MAAR,MArBG,kBAsBI6C,GAtBJ,iFA0BA,SAAeD,EAAtB,+CAAO,OAAP,0BAAO,WAAmC9C,GAAnC,4FACS4C,EAAWJ,QAAqBxC,GADzC,yJACqDkD,EADrD,0G,igBCtJA,SAAeC,IAAtB,4CAAO,OAAP,0BAAO,yGACkBhB,IAAAA,QACrB,aAFG,YACCiB,EADD,iDAIgBA,GAJhB,cAKLjB,IAAAA,QAAoB,YAAa,CAAC,GAL7B,kBAME,CAAC,GANH,kEASA,SAAekB,IAAtB,4CAAO,OAAP,0BAAO,yGACclB,IAAAA,QAA6C,YAD3D,YACCmB,EADD,iDAEYA,GAFZ,cAGLnB,IAAAA,QAAoB,WAAY,CAAC,GAH5B,kBAIE,CAAC,GAJH,kEAOA,SAAeoB,EAAtB,iDAAO,OAAP,0BAAO,WAAyBhC,EAAclI,GAAvC,yFACCiI,GAAMkC,EAAAA,EAAAA,KACNC,EAAkB,CACtBnC,IAAAA,EACAC,KAAAA,EACAlI,MAAAA,EACAqK,MAAO,IANJ,SAQkBL,IARlB,cAQCM,EARD,OASCL,GATD,kBASaK,GATb,cASwBrC,EAAMmC,IAT9B,SAUCtB,IAAAA,QAAoB,WAAYmB,GAVjC,gCAYEA,GAZF,kEAeA,SAAeM,EAAtB,+CAAO,OAAP,0BAAO,WAAyBtC,GAAzB,8FACkB+B,IADlB,cACCM,EADD,OAEyBA,EAArBrC,GAAYgC,GAFhB,OAEyBK,EAFzB,CAEIrC,GAFJ,mBAGCa,IAAAA,QAAoB,WAAYmB,GAHjC,gCAKEA,GALF,kEAQA,SAAeO,EAAtB,+CAAO,OAAP,0BAAO,WAAuBC,GAAvB,8FACkBT,IADlB,cACCM,EADD,OAECL,GAFD,kBAEaK,GAFb,cAEwBG,EAAIxC,IAAMwC,IAFlC,SAGC3B,IAAAA,QAAoB,WAAYmB,GAHjC,gCAIEA,GAJF,kEAOA,SAAelC,EAAtB,+CAAO,OAAP,0BAAO,WAAwBE,GAAxB,8FACca,IAAAA,QAA0Bb,GADxC,UACCD,EADD,wEAGac,IAAAA,QAAA,cAAiCb,IAH9C,YAGCE,EAHD,qEAIgBH,GAJhB,IAIsBG,IAAAA,KAJtB,iCAKOH,GALP,mEAQA,SAAe0C,EAAtB,iDAAO,OAAP,0BAAO,WAA4BzC,EAAa0C,GAAzC,0FAED,YADJA,GAAWC,EAAAA,EAAAA,QAAOD,GAAU,SAACE,GAAD,YAAahB,IAANgB,CAAP,OACDF,EAASG,SAAWC,KAAKC,OAF/C,SAIkBlB,IAJlB,UAICC,EAJD,UAKuCY,GAApCrH,QALH,EAKY8E,UAAclB,GAL1B,YAMC+D,EAAelB,EAAS9B,GANzB,wDAQL8B,EAAS9B,IAAT,kBAAqBgD,GAAiB/D,GARjC,UAUC4B,IAAAA,QAAoB,YAAaiB,GAVlC,yBAWkBhC,EAASE,GAX3B,WAWCiD,EAXD,2EAaCpC,IAAAA,QAAoBb,GAApB,kBAA8BiD,GAAaP,IAb5C,mEAgBA,SAAeQ,EAAtB,+CAAO,OAAP,0BAAO,WAA4BjE,GAA5B,2FACGe,EAAef,EAAfe,IAAKmD,EAAUlE,EAAVkE,MADR,SAEkBtB,IAFlB,cAECC,EAFD,QAGI9B,GAAOf,EAHX,SAIC4B,IAAAA,QAAoB,YAAaiB,GAJlC,uBAKcC,IALd,UAKCC,EALD,SAMCQ,EAAMR,EAAKmB,IANZ,wBAQHX,EAAIJ,MAAMgB,KAAKnE,EAASe,KARrB,UASGa,IAAAA,QAAoB,WAAYmB,GATnC,iCAWE,CAAEA,KAAAA,EAAMF,SAAAA,IAXV,mEAcA,SAAeuB,EAAtB,+CAAO,OAAP,0BAAO,WAA6BC,GAA7B,uFACGpD,EAAiBoD,EAAjBpD,IAAQH,GADX,OACoBuD,EADpB,YAECzC,IAAAA,QAAoBd,EAAKC,IAAKD,GAF/B,WAGDG,EAHC,gCAGUW,IAAAA,QAAA,cAA2Bd,EAAKC,KAAOE,GAHjD,cAIuCH,EAApC1E,QAAoC0E,EAA3BI,UAAclB,GAJ1B,OAIuCc,EAJvC,YAKQmD,EAAajE,GALrB,2GAQA,SAAesE,EAAtB,+CAAO,OAAP,0BAAO,WAA0BvD,GAA1B,oGACcF,EAASE,GADvB,cACCD,EADD,gBAEkB8B,IAFlB,cAECC,EAFD,gBAGcC,IAHd,UAGCC,EAHD,OAIAjC,EAJA,0CAIa,CAAEiC,KAAAA,EAAMF,SAAAA,IAJrB,yBAKCjB,IAAAA,WAAuBb,GALxB,yBAMCa,IAAAA,WAAA,cAA8Bb,IAN/B,sBAOE8B,EAAS9B,GAPX,UAQCa,IAAAA,QAAoB,YAAaiB,GARlC,WAUGqB,EAAUpD,EAAVoD,QACFK,EAAUxB,EAAKmB,IAXhB,wBAaHK,EAAQpB,MAAQoB,EAAQpB,MAAM9F,QAAO,SAACmH,GAAD,OAAQA,IAAOzD,CAAf,IAblC,UAcGa,IAAAA,QAAoB,WAAYmB,GAdnC,iCAgBE,CAAEA,KAAAA,EAAMF,SAAAA,IAhBV,mEAmBA,SAAe4B,EAAtB,iDAAO,OAAP,0BAAO,WAA2BhF,EAAgByE,GAA3C,wGACcrD,EAASpB,GADvB,cACCqB,EADD,gBAEkB8B,IAFlB,cAECC,EAFD,gBAGcC,IAHd,UAGCC,EAHD,OAIC/C,EAAW6C,EAASpD,GACrBqB,GAASd,EALT,0CAK0B,CAAE+C,KAAAA,EAAMF,SAAAA,IALlC,eAOU6B,EAAc5D,EAArBoD,MACRpD,EAAKoD,MAAQA,EARR,UASCtC,IAAAA,QAAoBnC,EAAQqB,GAT7B,eAULd,EAASkE,MAAQA,EAVZ,UAWCtC,IAAAA,QAAoB,YAAaiB,GAXlC,eAaC0B,EAAUxB,EAAK2B,MAEnBH,EAAQpB,MAAQoB,EAAQpB,MAAM9F,QAAO,SAACmH,GAAD,OAAQA,IAAO/E,CAAf,KAEvC,UAAAsD,EAAKmB,UAAL,SAAaf,MAAMgB,KAAK1E,GAjBnB,UAkBCmC,IAAAA,QAAoB,WAAYmB,GAlBjC,iCAmBE,CAAEA,KAAAA,EAAMF,SAAAA,IAnBV,mEAsBA,SAAelC,EAAtB,qDAAO,OAAP,0BAAO,WACLlB,EACAO,EACAvD,EACA+D,GAJK,wGAMYK,EAASpB,GANrB,YAMDqB,EANC,4DAQC6D,EAAOd,KAAKC,MACZ1H,EAAoC,CAAC,EAC3C0E,GAAI,kBACCd,GADD,IAEFkE,MAAO,UACPU,MAAM,EACNxI,QAAAA,EACA6E,IAAKT,EACLqE,WAAYF,EACZf,SAAUe,IAIZrI,OAAOC,QAAQE,GAAWE,SAAQ,YAAqB,IAAD,eAAlB5B,EAAkB,KAAV+J,EAAU,KACpD1I,EAAQrB,IAAR,kBAAuB+J,GAAvB,IAA6BtI,OAAOuI,EAAAA,EAAAA,wBACrC,KAGGvE,EA1BC,kCA2B4B,uDA3B5B,wBA2BKwE,EA3BL,EA2BKA,aA3BL,UA4BsBA,EAAaxE,EAAM,IA5BzC,iBA4BKyE,EA5BL,EA4BKA,OACR3I,OAAO4I,OAAO9I,GAASO,SAAQ,SAACmI,GAC9B,IAAQK,EAAaL,EAAbK,SACHA,IACLL,EAAKM,MAAQH,EAAOE,EAAW,GAChC,IAjCE,yBAoCCf,EAActD,GApCf,mEAuCA,SAAeb,EAAtB,mDAAO,OAAP,0BAAO,WACLR,EACAO,EACAzF,GAHK,sHAKYsG,EAASpB,GALrB,UAKDqB,EALC,iDAMa,GANb,cAOGI,EAAclB,EAAdkB,UACA9E,EAAiB0E,EAAjB1E,QAAS6E,EAAQH,EAARG,IARZ,SASyB,uDATzB,gBASGoE,EATH,EASGA,YATH,MAY0B/I,OAAOC,QAAQhC,GAZzC,+DAYKQ,EAZL,KAYa6B,EAZb,OAaC7B,KAAUqB,GAbX,2DAcK+I,EAAavI,EAAbuI,SACF3I,GAAQuI,EAAAA,EAAAA,uBACRrJ,GAhBH,kBAgB6BkB,GAhB7B,IAgBuCJ,MAAAA,IAC1CJ,EAAQrB,GAAUW,GACduF,IAAOkE,EAlBR,kCAmBsBE,EAAYpE,EAAKkE,EAAU,IAnBjD,QAmBDzJ,EAAS0J,MAnBR,4DAsBC5B,EAAa/D,EAAQ,CAAEyB,UAAAA,EAAW9E,QAAAA,IAtBnC,kCAuBE,GAvBF,mE,yLC9KMkJ,EAAsC,CACjDnK,MAAO,IACPqB,MAAO,CAAE+I,QAAS,CAAC,IA0Cd,SAASC,IACd,IAAMzK,GAASkI,EAAAA,EAAAA,KACT0B,EAAOd,KAAKC,MAClB,MAAO,CACL/C,KAAKkC,EAAAA,EAAAA,KACLjC,KAAK,QAAD,OAAUyE,IAAMd,GAAMe,OAAO,qBACjCxB,MAAO,UACPU,MAAM,EACN1E,SAAS,EACT2E,WAAYF,EACZf,SAAUe,EACVvI,SAAQ,UACLrB,EAAS,CACRI,MAAO,IACPqB,OAAOuI,EAAAA,EAAAA,yBAGX7D,UAAW,CAACnG,GAEf,CAEM,SAAS4K,EAAWb,GAMzB,MAAO,EALQ7B,EAAAA,EAAAA,KACF,OAAG6B,QAAH,IAAGA,EAAAA,EAAQ,CACtB3J,MAAO,IACPqB,OAAOuI,EAAAA,EAAAA,wBAGV,CAEM,SAAS5D,EAAe/E,GAC7BE,OAAO4I,OAAO9I,GAASO,SAAQ,SAACmI,UACvBA,EAAKM,aACLN,EAAKc,MACb,GACF,C,mICjFYxE,EAAa,WACxB,IAAIyE,EACJ,OAAO,WACL,GAAIA,EAAQ,OAAOA,EACnB,IAAI7K,EAAS8K,aAAa7D,QAAQ,WAMlC,OALKjH,IACHA,GAASiI,EAAAA,EAAAA,KACT6C,aAAa1D,QAAQ,UAAWpH,IAElC6K,EAAS7K,EACFA,CACR,CACF,CAZyB,GAcb+K,EAAc,WACzB,IAAI/E,EAAO8E,aAAa7D,QAAQ,aAQhC,OAPKjB,IACHA,GAAOgF,EAAAA,EAAAA,IAAqB,CAC1BC,aAAc,CAAC9M,EAAAA,GAAQ+M,EAAAA,IACvBlN,MAAO,YAET8M,aAAa1D,QAAQ,YAAapB,IAE7BA,CACR,EAEYmF,EAAe,SAACnF,GAE3B,SADAA,EAAOA,EAAKoF,UAEPN,aAAa1D,QAAQ,YAAapB,IAChC,EACR,C","sources":["component/ColorCircle/ColorCircle.tsx","lib/color.ts","lib/draw/DrawConst.ts","lib/draw/TeamState.ts","lib/hooks.tsx","lib/network/http.ts","lib/note/archive.ts","lib/note/note.ts","lib/user.ts"],"sourcesContent":["import classNames from \"classnames\";\nimport { FC } from \"react\";\n\nexport const ColorCirle: FC<{ color: string; className?: string }> = ({\n  color,\n  className,\n}) => {\n  const style = { backgroundColor: color };\n  return (\n    <div className={classNames(\"color-circle\", className)} style={style} />\n  );\n};\n","import { CSSProperties } from \"react\";\nimport hash from \"string-hash\";\nexport const colors = [\n  \"#f97316\",\n  \"#eab308\",\n  \"#84cc16\",\n  \"#22c55e\",\n  \"#10b981\",\n  \"#14b8a6\",\n  \"#06b6d4\",\n  \"#0ea5e9\",\n  \"#3b82f6\",\n  \"#6366f1\",\n  \"#8b5cf6\",\n  \"#a855f7\",\n  \"#d946ef\",\n  \"#ec4899\",\n  \"#f43f5e\",\n  \"#ef4444\",\n];\n\nexport const grayColors = [\"#000000\", \"#9ca3af\", \"#64748b\", \"#78716c\"];\nexport const allColors = [...grayColors, ...colors];\n\nexport const getRandomColor = () => {\n  const index = Math.floor(Math.random() * colors.length);\n  return colors[index]!;\n};\n\nexport const getHashedColor = (str: string) => {\n  const index = hash(str) % colors.length;\n  return colors[index];\n};\n\nconst colorPalette: Record<string, { light: string; dark: string }> = {\n  \"#f97316\": { light: \"#FFEDD5\", dark: \"#9A3412\" },\n  \"#eab308\": { light: \"#FEF9C3\", dark: \"#854D0E\" },\n  \"#84cc16\": { light: \"#ECFCCB\", dark: \"#3F6212\" },\n  \"#22c55e\": { light: \"#DCFCE7\", dark: \"#166534\" },\n  \"#10b981\": { light: \"#D1FAE5\", dark: \"#065F46\" },\n  \"#14b8a6\": { light: \"#CCFBF1\", dark: \"#115E59\" },\n  \"#06b6d4\": { light: \"#CFFAFE\", dark: \"#155E75\" },\n  \"#0ea5e9\": { light: \"#E0F2FE\", dark: \"#075985\" },\n  \"#3b82f6\": { light: \"#DBEAFE\", dark: \"#1E40AF\" },\n  \"#6366f1\": { light: \"#E0E7FF\", dark: \"#3730A3\" },\n  \"#8b5cf6\": { light: \"#EDE9FE\", dark: \"#5B21B6\" },\n  \"#a855f7\": { light: \"#F3E8FF\", dark: \"#6B21A8\" },\n  \"#d946ef\": { light: \"#FAE8FF\", dark: \"#86198F\" },\n  \"#ec4899\": { light: \"#FCE7F3\", dark: \"#9D174D\" },\n  \"#f43f5e\": { light: \"#FFE4E6\", dark: \"#9F1239\" },\n  \"#ef4444\": { light: \"#FEE2E2\", dark: \"#991B1B\" },\n};\n\nexport const getColorPalette = (color: string) => {\n  const palette = colorPalette[color] ?? { light: \"#E5E7EB\", dark: \"#374151\" };\n  return {\n    \"--light-color\": palette.light,\n    \"--dark-color\": palette.dark,\n  } as CSSProperties;\n};\n","export const WIDTH = 2_000;\n","import { NotePage, TeamPageInfo, TeamPageRec } from \"lib/note/note\";\nimport { DrawState } from \"draft-pad\";\nimport { SetOperation } from \"./StateSet\";\nimport { Map, Record, Set } from \"immutable\";\nimport { WIDTH } from \"./DrawConst\";\n\ninterface TeamStateRecordType {\n  pageStates: Map<string, Map<string, DrawState>>;\n  pageInfos: Map<string, TeamPageInfo>;\n}\n\nconst defaultRecord: Readonly<TeamStateRecordType> = {\n  pageStates: Map(),\n  pageInfos: Map(),\n};\n\ntype TeamStateRecord = Record<TeamStateRecordType>;\nconst defaultFactory = Record(defaultRecord);\n\nexport class TeamState {\n  constructor(private immutable: TeamStateRecord) {}\n\n  getImmutable() {\n    return this.immutable;\n  }\n\n  getPageStates() {\n    return this.getImmutable().get(\"pageStates\");\n  }\n\n  getPageInfos() {\n    return this.getImmutable().get(\"pageInfos\");\n  }\n\n  getOneState(pageID: string, userID: string) {\n    return this.getPageStates().get(pageID)?.get(userID);\n  }\n\n  getOnePageStateMap(pageID: string) {\n    return this.getPageStates().get(pageID);\n  }\n\n  getPageRatio(pageID: string) {\n    return this.getPageInfos().get(pageID)?.ratio;\n  }\n\n  includesPage(pageID: string) {\n    return this.getPageStates().has(pageID);\n  }\n\n  setState(pageID: string, userID: string, drawState: DrawState) {\n    const pageMap = this.getPageStates().get(pageID);\n    if (!pageMap) return this;\n    return new TeamState(\n      this.getImmutable().update(\"pageStates\", (m) =>\n        m.set(pageID, pageMap.set(userID, drawState))\n      )\n    );\n  }\n\n  static createFromTeamPages(teamPages: TeamPageRec) {\n    let record = defaultFactory();\n    Object.entries(teamPages).forEach(([pageID, teamPage]) => {\n      const { states, ratio } = teamPage;\n      const pageMap = Map(\n        Object.entries(states).map(([userID, flatState]) => [\n          userID,\n          DrawState.loadFromFlat(flatState, ratio, WIDTH),\n        ])\n      );\n      record = record\n        .update(\"pageStates\", (m) => m.set(pageID, pageMap))\n        .update(\"pageInfos\", (m) => m.set(pageID, { ratio }));\n    });\n    return new TeamState(record);\n  }\n\n  addPage(pageID: string, notePage: NotePage) {\n    const { ratio } = notePage;\n    return new TeamState(\n      this.getImmutable()\n        .update(\"pageStates\", (m) => m.set(pageID, Map()))\n        .update(\"pageInfos\", (m) => m.set(pageID, { ratio }))\n    );\n  }\n\n  pushOperation(setOp: SetOperation, userID: string) {\n    const { pageID, ...op } = setOp;\n    const ratio = this.getPageRatio(pageID);\n    if (!this.includesPage(pageID) || !ratio) return this;\n    const prevDs =\n      this.getOneState(pageID, userID) || DrawState.createEmpty(ratio, WIDTH);\n\n    const ds = DrawState.pushOperation(prevDs, op);\n    return this.setState(pageID, userID, ds);\n  }\n\n  resetUser(userID: string, pageRec: globalThis.Record<string, NotePage>) {\n    let newTS: TeamState = this;\n    for (let [pageID, { state, ratio }] of Object.entries(pageRec)) {\n      const prevDS = newTS.getOneState(pageID, userID);\n      if (!prevDS) continue;\n      newTS = newTS.setState(\n        pageID,\n        userID,\n        DrawState.loadFromFlat(state, ratio, WIDTH)\n      );\n    }\n    return newTS;\n  }\n\n  static getValidUsers(\n    teamStateMap?: Map<string, DrawState>,\n    ignores = Set<string>()\n  ) {\n    if (!teamStateMap) return [];\n    return Array.from(\n      teamStateMap\n        .filter((ds) => !ds.isEmpty())\n        .deleteAll(ignores)\n        .keys()\n    );\n  }\n  static isEmpty(teamStateMap?: Map<string, DrawState>) {\n    return !teamStateMap || teamStateMap.every((ds) => ds.isEmpty());\n  }\n}\n","import React, {\n  createContext,\n  Dispatch,\n  FC,\n  PropsWithChildren,\n  SetStateAction,\n  TransitionEventHandler,\n  useContext,\n  useDebugValue,\n  useRef,\n  useState,\n} from \"react\";\n\nexport type Setter<T> = Dispatch<SetStateAction<T>>;\n\nexport function useTransitionEnd({\n  propertyName,\n  active = true,\n}: {\n  propertyName: string;\n  active?: boolean;\n}): [Promise<void>, TransitionEventHandler] {\n  const resRef = useRef(() => {});\n  const [promise] = useState(\n    () => new Promise<void>((res) => (resRef.current = res))\n  );\n  return [\n    promise,\n    (e) => {\n      if (e.propertyName === propertyName && active) resRef.current();\n    },\n  ];\n}\n\nconst ActiveKeyCtx = createContext<[string, Setter<string>]>([\"\", () => {}]);\nexport function useActiveKey() {\n  const tuple = useContext(ActiveKeyCtx);\n  useDebugValue(tuple[0]);\n  return tuple;\n}\n\nexport const ActiveKeyProvider: FC<PropsWithChildren<{ initKey: string }>> = ({\n  children,\n  initKey,\n}) => {\n  const tuple = useState(initKey);\n  return (\n    <ActiveKeyCtx.Provider value={tuple}>{children}</ActiveKeyCtx.Provider>\n  );\n};\n\nconst AsideOpenCtx = createContext<[boolean, Setter<boolean>]>([\n  false,\n  () => {},\n]);\nexport function useAsideOpen() {\n  const tuple = useContext(AsideOpenCtx);\n  useDebugValue(tuple[0]);\n  return tuple;\n}\n\nexport const AsideOpenProvider: FC<PropsWithChildren> = ({ children }) => {\n  const tuple = useState(false);\n  return (\n    <AsideOpenCtx.Provider value={tuple}>{children}</AsideOpenCtx.Provider>\n  );\n};\n","import axios from \"axios\";\nimport {\n  removePageTimg,\n  TeamNoteInfo,\n  TeamPageInfo,\n  TeamPageRec,\n} from \"lib/note/note\";\nimport { loadNote, saveTeamNote, updateTeamNote } from \"lib/note/archive\";\nimport { getUserID } from \"lib/user\";\nimport localforage from \"localforage\";\nimport md5 from \"md5\";\n\nexport const BASE_URL = process.env.REACT_APP_PUBLIC_SERVER_URL ?? \"\";\n// export const BASE_URL = process.env.REACT_APP_LOCAL_SERVER_URL ?? \"\";\naxios.defaults.baseURL = BASE_URL;\n\nexport async function getNoteID(roomCode: string) {\n  try {\n    const { data } = await axios.get(`code/${roomCode}`);\n    if (data.statusCode !== 200) return null;\n    return data.noteID as string;\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n}\n\ninterface InfoRes {\n  statusCode: number;\n  code: number;\n  noteInfo: TeamNoteInfo;\n  pageInfos: Record<string, TeamPageInfo>;\n}\n\nexport async function getTeamNoteInfo(noteID: string) {\n  try {\n    const { data } = await axios.get(`info/${noteID}`);\n    const { statusCode, ...res } = data as InfoRes;\n    if (statusCode !== 200) return null;\n    return res;\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n}\n\nexport async function loadTeamNoteInfo(\n  noteID: string,\n  cb?: (len: number) => void\n) {\n  try {\n    const infoRes = await getTeamNoteInfo(noteID);\n    if (!infoRes) return null;\n    const { noteInfo, pageInfos } = infoRes;\n\n    if (await updateTeamNote(noteID, noteInfo, pageInfos)) return infoRes;\n\n    if (noteInfo.withImg) {\n      const { data } = await axios({\n        method: \"GET\",\n        url: noteID,\n        responseType: \"blob\",\n        onDownloadProgress({ loaded }: ProgressEvent) {\n          cb?.(loaded);\n        },\n      });\n      const file = new Blob([data], { type: \"application/pdf\" });\n      await saveTeamNote(noteID, noteInfo, pageInfos, file);\n    } else {\n      await saveTeamNote(noteID, noteInfo, pageInfos);\n    }\n    return infoRes;\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n}\n\nexport async function putNote(noteID: string) {\n  const note = await loadNote(noteID);\n  if (!note) return false;\n  const { uid, name, withImg, pdf, pageOrder, pageRec } = note;\n  removePageTimg(pageRec);\n\n  try {\n    const { data } = await axios.put(`create/${noteID}`, {\n      userID: getUserID(),\n      pageRec,\n      noteInfo: { uid, name, withImg, pageOrder },\n    });\n\n    if (pdf) {\n      const formData = new FormData();\n      const ab = await pdf.arrayBuffer();\n      const file = new Blob([ab]);\n      formData.append(\"file\", file, noteID);\n      await axios({\n        method: \"POST\",\n        url: \"upload\",\n        data: formData,\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      });\n    }\n\n    if (data.statusCode !== 201) return false;\n    return true;\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\n\nconst hashForage = localforage.createInstance({ name: \"updateHash\" });\nexport async function updatePages(noteID: string) {\n  const note = await loadNote(noteID);\n  if (!note) return null;\n  const { uid, name, withImg, pageOrder, pageRec } = note;\n  removePageTimg(pageRec);\n  const noteInfo = { uid, name, withImg, pageOrder };\n\n  const hash = md5(JSON.stringify([pageRec, noteInfo]));\n  const lastHash = await hashForage.getItem<string>(noteID);\n  if (hash === lastHash) return true;\n\n  try {\n    const body = { userID: getUserID(), pageRec, noteInfo };\n    const { data } = await axios.put(`update/${noteID}`, body);\n    if (data.statusCode !== 201) return false;\n    await hashForage.setItem(noteID, hash);\n    return true;\n  } catch (e) {\n    console.error(e);\n    return false;\n  }\n}\n\nconst teamForage = localforage.createInstance({ name: \"teamState\" });\nexport async function getTeamNoteState(\n  noteID: string,\n  cb?: (len: number) => void\n) {\n  const cachedState = await loadCachedTeamState(noteID);\n  const hash = cachedState && md5(JSON.stringify(cachedState));\n\n  try {\n    const { data } = await axios.get(`state/${noteID}`, {\n      params: { userID: getUserID(), hash },\n      onDownloadProgress({ loaded }: ProgressEvent) {\n        cb?.(loaded);\n      },\n    });\n    const { statusCode, modified, teamPages } = data;\n    if (statusCode === 200 && modified) {\n      await teamForage.setItem(noteID, teamPages);\n      return teamPages as TeamPageRec;\n    }\n    return cachedState;\n  } catch (e) {\n    console.error(e);\n    return cachedState;\n  }\n}\n\nexport async function loadCachedTeamState(noteID: string) {\n  return (await teamForage.getItem<TeamPageRec>(noteID)) ?? undefined;\n}\n","import { Note, NoteInfo, NotePage, TeamNoteInfo, TeamPageInfo } from \"./note\";\nimport { getDefaultFlatState } from \"draft-pad\";\nimport localforage from \"localforage\";\nimport { v4 as getUid } from \"uuid\";\nimport { pickBy } from \"lodash\";\n\nexport interface NoteTag {\n  uid: string;\n  name: string;\n  color: string;\n  notes: string[];\n}\n\nexport async function getAllNotes() {\n  const allNotes = await localforage.getItem<Record<string, NoteInfo>>(\n    \"ALL_NOTES\"\n  );\n  if (allNotes) return allNotes;\n  localforage.setItem(\"ALL_NOTES\", {});\n  return {};\n}\n\nexport async function getAllTags() {\n  const tags = await localforage.getItem<Record<string, NoteTag>>(\"ALL_TAGS\");\n  if (tags) return tags;\n  localforage.setItem(\"ALL_TAGS\", {});\n  return {};\n}\n\nexport async function addNewTag(name: string, color: string) {\n  const uid = getUid();\n  const newTag: NoteTag = {\n    uid,\n    name,\n    color,\n    notes: [],\n  };\n  const prevTags = await getAllTags();\n  const tags = { ...prevTags, [uid]: newTag };\n  await localforage.setItem(\"ALL_TAGS\", tags);\n\n  return tags;\n}\n\nexport async function deleteTag(uid: string) {\n  const prevTags = await getAllTags();\n  const { [uid]: _, ...tags } = prevTags;\n  await localforage.setItem(\"ALL_TAGS\", tags);\n\n  return tags;\n}\n\nexport async function editTag(tag: NoteTag) {\n  const prevTags = await getAllTags();\n  const tags = { ...prevTags, [tag.uid]: tag };\n  await localforage.setItem(\"ALL_TAGS\", tags);\n  return tags;\n}\n\nexport async function loadNote(uid: string) {\n  const note = await localforage.getItem<Note>(uid);\n  if (!note) return;\n  const pdf = await localforage.getItem<Blob>(`PDF_${uid}`);\n  if (pdf) return { ...note, pdf };\n  else return note;\n}\n\nexport async function editNoteData(uid: string, noteData: Partial<Note>) {\n  noteData = pickBy(noteData, (v) => v !== undefined);\n  if (\"pageRec\" in noteData) noteData.lastTime = Date.now();\n\n  const allNotes = await getAllNotes();\n  const { pageRec, pageOrder, ...noteInfo } = noteData;\n  const prevNoteInfo = allNotes[uid];\n  if (!prevNoteInfo) return;\n  allNotes[uid] = { ...prevNoteInfo, ...noteInfo };\n\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\n  const prevNote = await loadNote(uid);\n  if (!prevNote) return;\n  await localforage.setItem(uid, { ...prevNote, ...noteData });\n}\n\nexport async function saveNoteInfo(noteInfo: NoteInfo) {\n  const { uid, tagID } = noteInfo;\n  const allNotes = await getAllNotes();\n  allNotes[uid] = noteInfo;\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\n  const tags = await getAllTags();\n  const tag = tags[tagID];\n  if (tag) {\n    tag.notes.push(noteInfo.uid);\n    await localforage.setItem(\"ALL_TAGS\", tags);\n  }\n  return { tags, allNotes };\n}\n\nexport async function createNewNote(noteWithPdf: Note) {\n  const { pdf, ...note } = noteWithPdf;\n  await localforage.setItem(note.uid, note);\n  if (pdf) await localforage.setItem(`PDF_${note.uid}`, pdf);\n  const { pageRec, pageOrder, ...noteInfo } = note;\n  return await saveNoteInfo(noteInfo);\n}\n\nexport async function deleteNote(uid: string) {\n  const note = await loadNote(uid);\n  const allNotes = await getAllNotes();\n  const tags = await getAllTags();\n  if (!note) return { tags, allNotes };\n  await localforage.removeItem(uid);\n  await localforage.removeItem(`PDF_${uid}`);\n  delete allNotes[uid];\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\n\n  const { tagID } = note;\n  const prevTag = tags[tagID];\n  if (prevTag) {\n    prevTag.notes = prevTag.notes.filter((id) => id !== uid);\n    await localforage.setItem(\"ALL_TAGS\", tags);\n  }\n  return { tags, allNotes };\n}\n\nexport async function moveNoteTag(noteID: string, tagID: string) {\n  const note = await loadNote(noteID);\n  const allNotes = await getAllNotes();\n  const tags = await getAllTags();\n  const noteInfo = allNotes[noteID];\n  if (!note || !noteInfo) return { tags, allNotes };\n\n  const { tagID: prevTagId } = note;\n  note.tagID = tagID;\n  await localforage.setItem(noteID, note);\n  noteInfo.tagID = tagID;\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\n\n  const prevTag = tags[prevTagId];\n  if (prevTag) {\n    prevTag.notes = prevTag.notes.filter((id) => id !== noteID);\n  }\n  tags[tagID]?.notes.push(noteID);\n  await localforage.setItem(\"ALL_TAGS\", tags);\n  return { tags, allNotes };\n}\n\nexport async function saveTeamNote(\n  noteID: string,\n  noteInfo: TeamNoteInfo,\n  teamPages: Record<string, TeamPageInfo>,\n  file?: Blob\n) {\n  let note = await loadNote(noteID);\n  if (note) return;\n  const time = Date.now();\n  const pageRec: Record<string, NotePage> = {};\n  note = {\n    ...noteInfo,\n    tagID: \"DEFAULT\",\n    team: true,\n    pageRec,\n    pdf: file,\n    createTime: time,\n    lastTime: time,\n  };\n\n  // set empty state for each page\n  Object.entries(teamPages).forEach(([pageID, page]) => {\n    pageRec[pageID] = { ...page, state: getDefaultFlatState() };\n  });\n\n  // parse timg for each page\n  if (file) {\n    const { getPDFImages } = await import(\"./pdfImage\");\n    const { images } = await getPDFImages(file, 0.5);\n    Object.values(pageRec).forEach((page) => {\n      const { pdfIndex } = page;\n      if (!pdfIndex) return;\n      page.image = images[pdfIndex - 1];\n    });\n  }\n\n  await createNewNote(note);\n}\n\nexport async function updateTeamNote(\n  noteID: string,\n  noteInfo: TeamNoteInfo,\n  pageInfos: Record<string, TeamPageInfo>\n) {\n  let note = await loadNote(noteID);\n  if (!note) return false;\n  const { pageOrder } = noteInfo;\n  const { pageRec, pdf } = note;\n  const { getOneImage } = await import(\"./pdfImage\");\n\n  // parse timgs & set empty states for new pages.\n  for (let [pageID, teamPage] of Object.entries(pageInfos)) {\n    if (pageID in pageRec) continue;\n    const { pdfIndex } = teamPage;\n    const state = getDefaultFlatState();\n    const notePage: NotePage = { ...teamPage, state };\n    pageRec[pageID] = notePage;\n    if (pdf && pdfIndex) {\n      notePage.image = await getOneImage(pdf, pdfIndex, 0.5);\n    }\n  }\n  await editNoteData(noteID, { pageOrder, pageRec });\n  return true;\n}\n","import { getDefaultFlatState, FlatState } from \"draft-pad\";\nimport { v4 as getUid } from \"uuid\";\nimport dayjs from \"dayjs\";\nexport interface NotePage {\n  ratio: number;\n  state: FlatState;\n  image?: string;\n  marked?: boolean;\n  pdfIndex?: number;\n}\n\nexport const defaultNotePage: Readonly<NotePage> = {\n  ratio: 1.5,\n  state: { strokes: {} },\n};\n\nexport interface TeamPageState {\n  states: Record<string, FlatState>;\n}\n\nexport interface TeamPageInfo {\n  ratio: number;\n  pdfIndex?: number;\n}\n\nexport type TeamPage = TeamPageInfo & TeamPageState;\nexport type TeamPageRec = Record<string, TeamPage>;\nexport interface TeamNote {\n  uid: string;\n  pageRec: TeamPageRec;\n}\n\nexport interface NoteInfo {\n  uid: string;\n  name: string;\n  tagID: string;\n  team: boolean;\n  withImg: boolean;\n  createTime: number;\n  lastTime: number;\n}\n\nexport type Note = NoteInfo & {\n  pdf?: Blob;\n  pageRec: Record<string, NotePage>;\n  pageOrder: string[];\n};\n\nexport interface TeamNoteInfo {\n  uid: string;\n  name: string;\n  pageOrder: string[];\n  withImg: boolean;\n}\n\nexport function createEmptyNote(): Note {\n  const pageID = getUid();\n  const time = Date.now();\n  return {\n    uid: getUid(),\n    name: `Note ${dayjs(time).format(\"HH:mm, ddd MMM D\")}`,\n    tagID: \"DEFAULT\",\n    team: false,\n    withImg: false,\n    createTime: time,\n    lastTime: time,\n    pageRec: {\n      [pageID]: {\n        ratio: 1.5,\n        state: getDefaultFlatState(),\n      },\n    },\n    pageOrder: [pageID],\n  };\n}\n\nexport function createPage(page?: NotePage): [string, NotePage] {\n  const pageID = getUid();\n  const newPage = page ?? {\n    ratio: 1.5,\n    state: getDefaultFlatState(),\n  };\n  return [pageID, newPage];\n}\n\nexport function removePageTimg(pageRec: Record<string, NotePage>) {\n  Object.values(pageRec).forEach((page) => {\n    delete page.image;\n    delete page.marked;\n  });\n}\n","import { animals, colors, uniqueNamesGenerator } from \"unique-names-generator\";\nimport { v4 as getUid } from \"uuid\";\n\nexport interface UserInfo {\n  userID: string;\n  userName: string;\n  online: boolean;\n}\n\nexport const getUserID = (() => {\n  let cached: string;\n  return () => {\n    if (cached) return cached;\n    let userID = localStorage.getItem(\"USER_ID\");\n    if (!userID) {\n      userID = getUid();\n      localStorage.setItem(\"USER_ID\", userID);\n    }\n    cached = userID;\n    return userID;\n  };\n})();\n\nexport const getUserName = () => {\n  let name = localStorage.getItem(\"USER_NAME\");\n  if (!name) {\n    name = uniqueNamesGenerator({\n      dictionaries: [colors, animals],\n      style: \"capital\",\n    });\n    localStorage.setItem(\"USER_NAME\", name);\n  }\n  return name;\n};\n\nexport const saveUserName = (name: string) => {\n  name = name.trim();\n  if (!name) return false;\n  else localStorage.setItem(\"USER_NAME\", name);\n  return true;\n};\n"],"names":["ColorCirle","color","className","style","backgroundColor","classNames","colors","allColors","getRandomColor","index","Math","floor","random","length","getHashedColor","str","hash","colorPalette","light","dark","getColorPalette","palette","WIDTH","defaultRecord","pageStates","Map","pageInfos","defaultFactory","Record","TeamState","immutable","this","getImmutable","get","pageID","userID","getPageStates","getPageInfos","ratio","has","drawState","pageMap","update","m","set","notePage","setOp","op","getPageRatio","includesPage","prevDs","getOneState","DrawState","ds","setState","pageRec","newTS","Object","entries","state","teamPages","record","forEach","teamPage","states","map","flatState","teamStateMap","ignores","Set","Array","from","filter","isEmpty","deleteAll","keys","every","useTransitionEnd","propertyName","active","resRef","useRef","useState","Promise","res","current","e","ActiveKeyCtx","createContext","useActiveKey","tuple","useContext","useDebugValue","ActiveKeyProvider","children","initKey","Provider","value","AsideOpenCtx","useAsideOpen","AsideOpenProvider","BASE_URL","process","getNoteID","roomCode","axios","data","statusCode","noteID","console","error","getTeamNoteInfo","loadTeamNoteInfo","cb","infoRes","noteInfo","updateTeamNote","withImg","method","url","responseType","onDownloadProgress","loaded","file","Blob","type","saveTeamNote","putNote","loadNote","note","uid","name","pdf","pageOrder","removePageTimg","getUserID","formData","FormData","arrayBuffer","ab","append","headers","hashForage","localforage","updatePages","md5","JSON","stringify","getItem","lastHash","body","setItem","teamForage","getTeamNoteState","loadCachedTeamState","cachedState","params","modified","undefined","getAllNotes","allNotes","getAllTags","tags","addNewTag","getUid","newTag","notes","prevTags","deleteTag","editTag","tag","editNoteData","noteData","pickBy","v","lastTime","Date","now","prevNoteInfo","prevNote","saveNoteInfo","tagID","push","createNewNote","noteWithPdf","deleteNote","prevTag","id","moveNoteTag","prevTagId","time","team","createTime","page","getDefaultFlatState","getPDFImages","images","values","pdfIndex","image","getOneImage","defaultNotePage","strokes","createEmptyNote","dayjs","format","createPage","marked","cached","localStorage","getUserName","uniqueNamesGenerator","dictionaries","animals","saveUserName","trim"],"sourceRoot":""}