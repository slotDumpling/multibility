{"version":3,"file":"static/js/199.411fd09a.chunk.js","mappings":"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","sources":["pages/reader/tools/DrawTools.tsx","lib/ErrorBoundary.tsx","component/PageWrapper/PageWrapper.tsx","component/PageWrapper/index.tsx","lib/draw/DrawCtrl.tsx","pages/reader/tools/PenPanel.tsx"],"sourcesContent":["/// <reference types=\"paper\" />\nimport { CSSProperties, FC, RefObject, useMemo, useState } from \"react\";\nimport {\n  CopyOutlined,\n  BoldOutlined,\n  DeleteOutlined,\n  BgColorsOutlined,\n  ItalicOutlined,\n} from \"@ant-design/icons\";\nimport { Button, ButtonProps, Popover, Select } from \"antd\";\nimport { DrawRefType } from \"draft-pad\";\nimport { DrawCtrl } from \"draft-pad/dist/lib\";\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\nimport { allColors } from \"lib/color\";\nimport IconFont from \"component/IconFont\";\nimport \"./draw-tools.sass\";\n\nconst btnProps: ButtonProps = {\n  type: \"text\",\n  shape: \"round\",\n  size: \"small\",\n};\n\nconst getPosVars = (x: number, y: number) => {\n  return { \"--pos-x\": x + \"px\", \"--pos-y\": y + \"px\" } as CSSProperties;\n};\nconst getObjVars = (obj: Record<string, string | number>, unit?: string) => {\n  const result: Record<string, string | number> = {};\n  Object.entries(obj).forEach(([key, value]) => {\n    if (unit) value += unit;\n    result[\"--\" + key] = value;\n  });\n  return result as CSSProperties;\n};\n\nexport const SelectTool: FC<{\n  drawRef: RefObject<DrawRefType>;\n  visible: boolean;\n  clickPoint?: paper.Point;\n}> = ({ drawRef, visible, clickPoint }) => {\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\n  if (!clickPoint) return null;\n  const { x, y } = clickPoint;\n  return (\n    <div\n      className=\"select-tool tool-options\"\n      data-visible={visible}\n      style={getPosVars(x, y)}\n    >\n      <Popover\n        trigger=\"click\"\n        placement=\"bottom\"\n        overlayClassName=\"style-pop\"\n        getPopupContainer={(e) => e.parentElement!}\n        destroyTooltipOnHide\n        content={\n          <PenPanel\n            updateDrawCtrl={(updated) => {\n              setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\n              drawRef.current?.mutateStyle(updated);\n            }}\n            drawCtrl={currDrawCtrl}\n          />\n        }\n      >\n        <Button icon={<BgColorsOutlined />} {...btnProps} />\n      </Popover>\n      <Button\n        icon={<CopyOutlined />}\n        onClick={() => drawRef.current?.duplicateSelected()}\n        {...btnProps}\n      />\n      <Button\n        danger\n        icon={<DeleteOutlined />}\n        onClick={() => drawRef.current?.deleteSelected()}\n        {...btnProps}\n      />\n    </div>\n  );\n};\n\nexport const TextTool: FC<{\n  pointText: paper.PointText;\n  drawRef: RefObject<DrawRefType>;\n  renderSlow: boolean;\n}> = ({ pointText, drawRef, renderSlow }) => {\n  const { view, position, leading, content, rotation } = pointText;\n  const { fontFamily, fontWeight, fontSize } = pointText;\n\n  const { x, y } = view.projectToView(position);\n  const { topLeft, bottomLeft } = pointText.bounds;\n  const { x: bx, y: by } = view.projectToView(topLeft);\n  const { x: bbx, y: bby } = view.projectToView(bottomLeft);\n  const optionAtBottom = by < 90;\n\n  const scale = pointText.viewMatrix.scaling.x;\n  const { width, height } = pointText.internalBounds;\n\n  const lineHeight = +leading / +fontSize ?? 1.2;\n\n  const color = pointText.fillColor?.toCSS(true) ?? allColors[0]!;\n  const fontColorBtn = (\n    <Popover\n      content={\n        <ColorSelect\n          color={color}\n          setColor={(c) =>\n            drawRef.current?.mutatePointText((prev) => {\n              prev.fillColor = c as unknown as paper.Color;\n            })\n          }\n        />\n      }\n      trigger=\"click\"\n      overlayStyle={{ width: 200 }}\n      placement=\"bottom\"\n      getPopupContainer={(e) => e.parentElement!}\n    >\n      <Button\n        {...btnProps}\n        icon={\n          <IconFont\n            type=\"icon-circle\"\n            className=\"text-color-icon\"\n            style={{ color }}\n          />\n        }\n      />\n    </Popover>\n  );\n\n  const { isItalic, isBold } = parseFontStyle(fontWeight);\n  const fontStyleCSS = {\n    fontWeight: isBold ? \"bold\" : \"normal\",\n    fontStyle: isItalic ? \"italic\" : \"normal\",\n  };\n\n  const fontFamilySelect = (\n    <Select\n      className=\"font-select\"\n      popupClassName=\"font-drop\"\n      value={fontFamily}\n      onChange={(v) => {\n        drawRef.current?.mutatePointText((prev) => {\n          prev.fontFamily = v;\n        });\n      }}\n      size=\"small\"\n      bordered={false}\n      virtual={false}\n      getPopupContainer={(e) => e.parentElement.parentElement!}\n      dropdownMatchSelectWidth={100}\n      options={[\n        { value: \"Arial, sans-serif\", name: \"Arial\" },\n        { value: \"'Times New Roman', serif\", name: \"Times\" },\n        { value: \"Georgia, serif\", name: \"Georgia\" },\n        { value: \"'Courier New', monospace\", name: \"Courier\" },\n      ].map(({ value, name }) => ({\n        value,\n        label: (\n          <span style={{ fontFamily: value, fontWeight: \"normal\" }}>\n            {name}\n          </span>\n        ),\n      }))}\n    />\n  );\n\n  const offset = useMemo(\n    // paperjs sets all baseline ratio to 0.75.\n    () => 0.75 - getBaselineRatio(fontFamily, lineHeight),\n    [fontFamily, lineHeight]\n  );\n\n  return (\n    <div\n      className=\"text-tool\"\n      style={{\n        ...getObjVars({ scale, color }),\n        ...getObjVars({ rotation }, \"deg\"),\n        ...getObjVars({ width, height }, \"px\"),\n        ...getObjVars({ offset }, \"em\"),\n        ...getPosVars(x, y),\n      }}\n    >\n      <div\n        className=\"textarea-wrapper\"\n        data-empty={!content}\n        style={{ fontSize, fontFamily, lineHeight, ...fontStyleCSS }}\n      >\n        <textarea\n          autoFocus={!content}\n          placeholder=\"Text\"\n          value={content}\n          onChange={(e) => {\n            drawRef.current?.mutatePointText((prev) => {\n              prev.content = e.target.value;\n            });\n          }}\n          data-slow={renderSlow}\n        />\n      </div>\n      <div\n        className=\"tool-options text-options\"\n        data-bottom={optionAtBottom}\n        style={{\n          ...(optionAtBottom ? getPosVars(bbx, bby) : getPosVars(bx, by)),\n        }}\n      >\n        <div className=\"row\">\n          {fontFamilySelect}\n          {fontColorBtn}\n        </div>\n        <div className=\"row\">\n          <Button\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                prev.fontWeight = toggleBold(prev.fontWeight);\n              });\n            }}\n            {...btnProps}\n            type={isBold ? \"link\" : \"text\"}\n            icon={<BoldOutlined />}\n          />\n          <Button\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                prev.fontWeight = toggleItalic(prev.fontWeight);\n              });\n            }}\n            {...btnProps}\n            type={isItalic ? \"link\" : \"text\"}\n            icon={<ItalicOutlined />}\n          />\n          <Button\n            {...btnProps}\n            icon={<IconFont type=\"icon-font_size_down\" />}\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                const { topLeft } = prev.bounds;\n                prev.scale(0.9, topLeft);\n              });\n            }}\n          />\n          <Button\n            {...btnProps}\n            icon={<IconFont type=\"icon-font_size_up\" />}\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                const { topLeft } = prev.bounds;\n                prev.scale(1.1, topLeft);\n              });\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst parseFontStyle = (fontStyle: string | number) => {\n  fontStyle = fontStyle + \"\";\n  const isItalic = /italic/g.test(fontStyle);\n  const isBold = /bold/g.test(fontStyle);\n  return { isItalic, isBold };\n};\n\nconst toggleItalic = (fontStyle: string | number) => {\n  const { isItalic, isBold } = parseFontStyle(fontStyle);\n  const boldText = isBold ? \"bold\" : \"normal\";\n  return (isItalic ? \"\" : \"italic \") + boldText;\n};\n\nconst toggleBold = (fontStyle: string | number) => {\n  const { isItalic, isBold } = parseFontStyle(fontStyle);\n  const italicText = isItalic ? \"italic \" : \"\";\n  return italicText + (isBold ? \"normal\" : \"bold\");\n};\n\nconst getBaselineRatio = (fontFamily: string, lineHeight: number) => {\n  const div = document.createElement(\"div\");\n  div.innerText = \"p\";\n  Object.assign(div.style, { fontSize: \"100px\", fontFamily, lineHeight });\n  document.body.appendChild(div);\n\n  const span = document.createElement(\"span\");\n  span.style.display = \"inline-block\";\n  div.appendChild(span);\n\n  const r0 = div.getBoundingClientRect();\n  const r1 = span.getBoundingClientRect();\n  const ratio = (r1.y - r0.y) / r0.height;\n  document.body.removeChild(div);\n  return Math.max(-1, Math.min(ratio, 1));\n};\n","import { Result } from \"antd\";\nimport { Component, ErrorInfo, ReactNode } from \"react\";\n\ninterface Props {\n  children?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"Uncaught error:\", error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return <Result status=\"error\" title=\"Something went wrong.\" />;\n    }\n\n    return this.props.children;\n  }\n}\n","/// <reference types=\"paper\" />\nimport React, {\n  FC,\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport { useDrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { Draw, DrawRefType } from \"draft-pad\";\nimport { DrawState } from \"draft-pad/dist/lib\";\nimport { SelectTool, TextTool } from \"pages/reader/tools/DrawTools\";\nimport { once, range } from \"lodash\";\nimport { useInView } from \"react-intersection-observer\";\nimport { Map, Set } from \"immutable\";\nimport { ErrorBoundary } from \"lib/ErrorBoundary\";\nimport { useEvent } from \"lib/hooks\";\n\nconst PageWrapperRaw: FC<{\n  drawState: DrawState;\n  teamStateMap?: Map<string, DrawState>;\n  thumbnail?: string;\n  pdfIndex?: number;\n  noteID?: string;\n  updateState?: (ds: DrawState) => void;\n  onViewChange?: (ratio: number) => void;\n  preview?: boolean;\n  preload?: boolean;\n  ignores?: Set<string>;\n  skipInView?: boolean;\n}> = ({\n  thumbnail,\n  drawState,\n  teamStateMap,\n  updateState,\n  pdfIndex,\n  noteID = \"\",\n  preview = false,\n  onViewChange,\n  preload = false,\n  ignores = Set<string>(),\n  skipInView = false,\n}) => {\n  const threshold = onViewChange && range(0, 1.2, 0.2);\n  const [ref, visible, entry] = useInView({ threshold, skip: skipInView });\n  useEffect(() => {\n    if (!onViewChange) return;\n    if (!entry || !visible) return onViewChange(0);\n    onViewChange(entry.intersectionRatio);\n  }, [visible, entry, onViewChange]);\n\n  const [fullImg, setFullImg] = useState<string>();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const loadImage = useCallback(\n    once(async () => {\n      if (!pdfIndex || !noteID) return;\n      const { getNotePageImage } = await import(\"lib/note/pdfImage\");\n      setFullImg(await getNotePageImage(noteID, pdfIndex));\n    }),\n    [pdfIndex, noteID]\n  );\n\n  const show = visible || preload;\n  useEffect(() => {\n    if (!preview && show) loadImage();\n  }, [show, preview, loadImage]);\n\n  const otherStates = useMemo(\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\n    [teamStateMap, ignores]\n  );\n\n  const imageLoaded = Boolean(fullImg || !pdfIndex);\n  const drawShow = show && imageLoaded;\n\n  const { height, width } = drawState;\n  const ratio = height / width;\n\n  return (\n    <ErrorBoundary>\n      <div ref={ref} className=\"page-wrapper\" data-preview={preview}>\n        <svg className=\"size-holder\" viewBox={`0 0 100 ${ratio * 100}`} />\n        {drawShow && (\n          <DrawWrapper\n            drawState={drawState}\n            otherStates={otherStates}\n            updateState={updateState}\n            imgSrc={fullImg || thumbnail}\n            preview={preview}\n          />\n        )}\n      </div>\n    </ErrorBoundary>\n  );\n};\nPageWrapperRaw.displayName = \"PageWrapper\";\nexport const PageWrapper = React.memo(PageWrapperRaw);\n\nconst DrawWrapper: FC<{\n  drawState: DrawState;\n  otherStates?: DrawState[];\n  updateState?: (ds: DrawState) => void;\n  preview?: boolean;\n  imgSrc?: string;\n}> = ({ drawState, updateState, otherStates, preview = false, imgSrc }) => {\n  const drawCtrl = useDrawCtrl();\n  const drawRef = useRef<DrawRefType>(null);\n  const [selectShow, setSelectShow] = useState(false);\n  const [clickPoint, setClickPoint] = useState<paper.Point>();\n  const [pointText, setPointText] = useState<paper.PointText>();\n  const [renderSlow, setRenderSlow] = useState(false);\n\n  const handleChange = useEvent(\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\n      if (!updateState) return;\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\n      if (newDS === drawState) return;\n      updateState(newDS);\n    }\n  );\n\n  const toggleSelectTool = (active: boolean, clickPoint?: paper.Point) => {\n    if (clickPoint) setClickPoint(clickPoint);\n    setSelectShow(active);\n  };\n\n  const toggleTextTool = (\n    pointText: paper.PointText | undefined,\n    slow: boolean\n  ) => {\n    setPointText(pointText);\n    setRenderSlow(slow);\n  };\n\n  return preview ? (\n    <Draw\n      drawState={drawState}\n      otherStates={otherStates}\n      imgSrc={imgSrc}\n      readonly\n    />\n  ) : (\n    <>\n      <Draw\n        drawState={drawState}\n        otherStates={otherStates}\n        onChange={handleChange}\n        imgSrc={imgSrc}\n        drawCtrl={drawCtrl}\n        ref={drawRef}\n        toggleTextTool={toggleTextTool}\n        toggleSelectTool={toggleSelectTool}\n      />\n      <SelectTool\n        drawRef={drawRef}\n        visible={selectShow}\n        clickPoint={clickPoint}\n      />\n      {pointText && (\n        <TextTool\n          drawRef={drawRef}\n          pointText={pointText}\n          renderSlow={renderSlow}\n        />\n      )}\n    </>\n  );\n};\n","import { PageWrapper } from \"./PageWrapper\";\nimport \"./page-wrapper.sass\";\nexport default PageWrapper;\n","import React, {\n  FC,\n  PropsWithChildren,\n  useContext,\n  useDebugValue,\n  useEffect,\n  useState,\n} from \"react\";\nimport { notification } from \"antd\";\nimport localforage from \"localforage\";\nimport { debounce, once } from \"lodash\";\nimport { defaultDrawCtrl, DrawCtrl } from \"draft-pad/dist/lib\";\nimport \"./draw-ctrl.sass\";\n\nasync function getDrawCtrl() {\n  let drawCtrl = await localforage.getItem<DrawCtrl>(\"DRAW_CTRL\");\n  if (!drawCtrl) {\n    drawCtrl = defaultDrawCtrl;\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\n  }\n  return drawCtrl;\n}\n\nasync function saveDrawCtrl(drawCtrl: DrawCtrl) {\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\n}\n\nconst DrawCtrlContext = React.createContext({\n  drawCtrl: defaultDrawCtrl,\n  updateDrawCtrl: (() => {}) as (updated: Partial<DrawCtrl>) => void,\n});\n\nexport function useDrawCtrl() {\n  const { drawCtrl } = useContext(DrawCtrlContext);\n  useDebugValue(drawCtrl);\n  return drawCtrl;\n}\n\nexport function useUpdateDrawCtrl() {\n  const { updateDrawCtrl } = useContext(DrawCtrlContext);\n  return updateDrawCtrl;\n}\n\nexport const DrawCtrlProvider: FC<PropsWithChildren> = ({ children }) => {\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\n  useEffect(() => {\n    getDrawCtrl().then(setDrawCtrl);\n  }, []);\n\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\n    setDrawCtrl((prev) => {\n      const newCtrl = { ...prev, ...updated };\n      saveDrawCtrl(newCtrl);\n      return newCtrl;\n    });\n  };\n\n  const { finger } = drawCtrl;\n  useEffect(() => {\n    const detectPen = debounce((e: PointerEvent) => {\n      const isPen = e.isPrimary && e.pointerType === \"pen\";\n      if (!isPen || !finger) return;\n      showPencilMsg(() => updateDrawCtrl({ finger: false }));\n    }, 1000);\n    document.addEventListener(\"pointerup\", detectPen);\n    return () => document.removeEventListener(\"pointerup\", detectPen);\n  }, [finger]);\n\n  return (\n    <DrawCtrlContext.Provider value={{ drawCtrl, updateDrawCtrl }}>\n      {children}\n    </DrawCtrlContext.Provider>\n  );\n};\n\nconst showPencilMsg = once(async (cb: () => void) => {\n  const hide = () => {\n    notification.close(\"PENCIL_ONLY\");\n    localforage.setItem(\"SKIP_PENCIL_ONLY_NOTY\", true);\n  };\n\n  if (await localforage.getItem(\"SKIP_PENCIL_ONLY_NOTY\")) return;\n\n  notification.info({\n    message: \"Your device supports Pencil Only\",\n    description: (\n      <div className=\"pencil-noty-content\">\n        <div\n          className=\"enable demo-card\"\n          onClick={() => {\n            cb();\n            hide();\n          }}\n        >\n          <div className=\"title\">Draw with pencil only</div>\n          <div className=\"stroke\"></div>\n          <div className=\"pencil-1 emoji\">✍️</div>\n          <div className=\"finger-1 emoji\">🫵</div>\n        </div>\n        <div className=\"disable demo-card\" onClick={hide}>\n          <div className=\"title\">Draw with fingers</div>\n          <div className=\"stroke\"></div>\n          <div className=\"finger-1 emoji\">🫵</div>\n          <div className=\"finger-2 emoji\">🫵</div>\n        </div>\n      </div>\n    ),\n    icon: <></>,\n    duration: 60,\n    className: \"pencil-noty\",\n    key: \"PENCIL_ONLY\",\n  });\n});\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\nimport { defaultWidthList, DrawCtrl } from \"draft-pad/dist/lib\";\nimport { ColorCirle } from \"component/ColorCircle\";\nimport { Popover, Segmented, Slider, Tooltip } from \"antd\";\nimport { allColors } from \"lib/color\";\nimport { Setter, useEvent } from \"lib/hooks\";\nimport IconFont from \"component/IconFont\";\nimport { List } from \"immutable\";\nimport { WIDTH } from \"lib/draw/DrawConst\";\nimport \"./pen-panel.sass\";\n\nexport const PenPanel: FC<{\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n  drawCtrl: Partial<DrawCtrl>;\n}> = ({ updateDrawCtrl, drawCtrl }) => {\n  const { highlight, color, mode } = drawCtrl;\n  const [panelBlur, setPanelBlur] = useState(false);\n\n  return (\n    <div\n      className=\"pen-panel\"\n      data-blur={panelBlur}\n      data-hi={highlight}\n      data-mode={mode}\n    >\n      <div className=\"pen-status\">\n        <WidthSelect\n          updateDrawCtrl={updateDrawCtrl}\n          drawCtrl={drawCtrl}\n          setPanelBlur={setPanelBlur}\n        />\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\n      </div>\n      <ColorSelect\n        color={color || \"\"}\n        setColor={(c) => updateDrawCtrl({ color: c })}\n      />\n    </div>\n  );\n};\n\nexport const WidthSelect: FC<{\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n  drawCtrl: Partial<DrawCtrl>;\n  setPanelBlur?: Setter<boolean>;\n  field?: \"lineWidth\" | \"eraserWidth\";\n}> = ({\n  updateDrawCtrl,\n  drawCtrl,\n  setPanelBlur = () => {},\n  field = \"lineWidth\",\n}) => {\n  const currWidth = drawCtrl[field];\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\n\n  const chosenIndex = useMemo(\n    () => widthList.indexOf(currWidth ?? -1),\n    [currWidth, widthList]\n  );\n\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\n  setPanelBlur = useEvent(setPanelBlur);\n  useEffect(() => {\n    if (popShow.includes(true)) setPanelBlur(true);\n    else setPanelBlur(false);\n  }, [popShow, setPanelBlur]);\n\n  // temp: ugly Implementation\n  const [widthRatio] = useState(() => {\n    const section = document.querySelector(\"section.note-page\");\n    const sw = section?.getBoundingClientRect().width ?? 0;\n    const bw = document.body.getBoundingClientRect().width;\n    return sw / bw;\n  });\n\n  const realSizeStyle = (width: number) =>\n    ({\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width} * ${widthRatio})`,\n    } as CSSProperties);\n\n  const options = [\n    { value: -1, label: null },\n    ...widthList.map((width, index) => ({\n      value: index,\n      label: (\n        <Popover\n          open={popShow.get(index)}\n          onOpenChange={(v) => setPopShow((prev) => prev.set(index, v))}\n          trigger={chosenIndex === index ? [\"click\"] : []}\n          placement=\"bottom\"\n          destroyTooltipOnHide\n          content={\n            <Slider\n              min={5}\n              max={100}\n              className=\"ctrl-slider\"\n              defaultValue={width}\n              onAfterChange={(w) => {\n                if (widthList.includes(w)) {\n                  setPopShow((prev) => prev.set(index, false));\n                  return updateDrawCtrl({ [field]: w });\n                }\n                const newWL = widthList.slice();\n                newWL[index] = w;\n                updateDrawCtrl({ widthList: newWL, [field]: w });\n              }}\n            />\n          }\n        >\n          <div\n            className=\"circle-wrapper\"\n            data-chosen={chosenIndex === index}\n            style={realSizeStyle(width)}\n          >\n            <ColorCirle className={\"width-circle \" + field} color={color} />\n          </div>\n        </Popover>\n      ),\n    })),\n  ];\n\n  return (\n    <Segmented\n      className=\"width-seg\"\n      value={chosenIndex}\n      options={options}\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 10 })}\n    />\n  );\n};\n\nconst HighlightSwitch: FC<{\n  checked?: boolean;\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n}> = ({ checked = false, updateDrawCtrl }) => {\n  return (\n    <label className=\"hi-wrapper\">\n      <input\n        type=\"checkbox\"\n        name=\"highlight\"\n        checked={checked}\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\n      />\n      <Tooltip title=\"Highlighter\" placement=\"bottom\">\n        <div className=\"hi-switch\">\n          <IconFont type=\"icon-Highlight\" />\n        </div>\n      </Tooltip>\n    </label>\n  );\n};\n\nexport const ColorSelect: FC<{\n  color: string;\n  setColor: (color: string) => void;\n}> = ({ setColor, color }) => (\n  <div className=\"color-select\">\n    {allColors.map((c) => (\n      <div\n        key={c}\n        data-color={c}\n        data-selected={color === c}\n        className=\"circle\"\n        style={{ backgroundColor: c, borderColor: c }}\n        onClick={() => setColor(c)}\n      />\n    ))}\n  </div>\n);\n"],"names":["btnProps","type","shape","size","getPosVars","x","y","getObjVars","obj","unit","result","Object","entries","forEach","key","value","SelectTool","drawRef","visible","clickPoint","useState","currDrawCtrl","setCurrDrawCtrl","className","style","trigger","placement","overlayClassName","getPopupContainer","e","parentElement","destroyTooltipOnHide","content","PenPanel","updateDrawCtrl","updated","prev","current","mutateStyle","drawCtrl","icon","BgColorsOutlined","CopyOutlined","onClick","duplicateSelected","danger","DeleteOutlined","deleteSelected","TextTool","pointText","renderSlow","view","position","leading","rotation","fontFamily","fontWeight","fontSize","projectToView","bounds","topLeft","bottomLeft","bx","by","bbx","bby","optionAtBottom","scale","viewMatrix","scaling","internalBounds","width","height","lineHeight","color","fillColor","toCSS","allColors","fontColorBtn","setColor","c","mutatePointText","overlayStyle","IconFont","parseFontStyle","isItalic","isBold","fontStyleCSS","fontStyle","fontFamilySelect","popupClassName","onChange","v","bordered","virtual","dropdownMatchSelectWidth","options","name","map","label","offset","useMemo","getBaselineRatio","autoFocus","placeholder","target","toggleBold","BoldOutlined","toggleItalic","ItalicOutlined","test","div","document","createElement","innerText","assign","body","appendChild","span","display","r0","getBoundingClientRect","ratio","removeChild","Math","max","min","ErrorBoundary","state","hasError","error","errorInfo","console","this","status","title","props","children","_","Component","PageWrapperRaw","thumbnail","drawState","teamStateMap","updateState","pdfIndex","noteID","preview","onViewChange","preload","ignores","Set","skipInView","threshold","range","useInView","skip","ref","entry","useEffect","intersectionRatio","fullImg","setFullImg","loadImage","useCallback","once","getNotePageImage","show","otherStates","deleteAll","toList","toArray","imageLoaded","Boolean","drawShow","viewBox","DrawWrapper","imgSrc","displayName","useDrawCtrl","useRef","selectShow","setSelectShow","setClickPoint","setPointText","setRenderSlow","handleChange","useEvent","arg","newDS","DrawState","Draw","readonly","toggleTextTool","slow","toggleSelectTool","active","React","getDrawCtrl","localforage","defaultDrawCtrl","saveDrawCtrl","DrawCtrlContext","useContext","useDebugValue","useUpdateDrawCtrl","DrawCtrlProvider","setDrawCtrl","then","newCtrl","finger","detectPen","debounce","isPrimary","pointerType","showPencilMsg","addEventListener","removeEventListener","Provider","cb","hide","notification","message","description","duration","highlight","mode","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","field","currWidth","widthList","defaultWidthList","chosenIndex","indexOf","List","popShow","setPopShow","includes","section","querySelector","widthRatio","realSizeStyle","WIDTH","index","open","get","onOpenChange","set","defaultValue","onAfterChange","w","newWL","slice","i","backgroundColor","borderColor"],"sourceRoot":""}