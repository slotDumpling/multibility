{"version":3,"file":"static/js/542.cc1c5324.chunk.js","mappings":"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","sources":["component/ColorCircle/ColorCircle.tsx","lib/color.ts","lib/draw/DrawState.ts","lib/draw/TeamState.ts","lib/hooks.tsx","lib/network/http.ts","lib/note/archive.ts","lib/note/note.ts","lib/user.ts"],"sourcesContent":["import classNames from \"classnames\";\r\nimport { FC } from \"react\";\r\nimport './circle.sass'\r\n\r\nexport const ColorCirle: FC<{ color: string; className?: string }> = ({\r\n  color,\r\n  className,\r\n}) => {\r\n  const style = { backgroundColor: color };\r\n  return (\r\n    <div className={classNames(\"color-circle\", className)} style={style} />\r\n  );\r\n};\r\n","import { CSSProperties } from \"react\";\r\nimport hash from \"string-hash\";\r\nexport const colors = [\r\n  \"#f97316\",\r\n  \"#eab308\",\r\n  \"#84cc16\",\r\n  \"#22c55e\",\r\n  \"#10b981\",\r\n  \"#14b8a6\",\r\n  \"#06b6d4\",\r\n  \"#0ea5e9\",\r\n  \"#3b82f6\",\r\n  \"#6366f1\",\r\n  \"#8b5cf6\",\r\n  \"#a855f7\",\r\n  \"#d946ef\",\r\n  \"#ec4899\",\r\n  \"#f43f5e\",\r\n  \"#ef4444\",\r\n];\r\n\r\nexport const grayColors = [\"#000000\", \"#9ca3af\", \"#64748b\", \"#78716c\"];\r\nexport const allColors = [...grayColors, ...colors];\r\n\r\nexport const getRandomColor = () => {\r\n  const index = Math.floor(Math.random() * colors.length);\r\n  return colors[index]!;\r\n};\r\n\r\nexport const getHashedColor = (str: string) => {\r\n  const index = hash(str) % colors.length;\r\n  return colors[index];\r\n};\r\n\r\nconst colorPalette: Record<string, { light: string; dark: string }> = {\r\n  \"#f97316\": { light: \"#FFEDD5\", dark: \"#9A3412\" },\r\n  \"#eab308\": { light: \"#FEF9C3\", dark: \"#854D0E\" },\r\n  \"#84cc16\": { light: \"#ECFCCB\", dark: \"#3F6212\" },\r\n  \"#22c55e\": { light: \"#DCFCE7\", dark: \"#166534\" },\r\n  \"#10b981\": { light: \"#D1FAE5\", dark: \"#065F46\" },\r\n  \"#14b8a6\": { light: \"#CCFBF1\", dark: \"#115E59\" },\r\n  \"#06b6d4\": { light: \"#CFFAFE\", dark: \"#155E75\" },\r\n  \"#0ea5e9\": { light: \"#E0F2FE\", dark: \"#075985\" },\r\n  \"#3b82f6\": { light: \"#DBEAFE\", dark: \"#1E40AF\" },\r\n  \"#6366f1\": { light: \"#E0E7FF\", dark: \"#3730A3\" },\r\n  \"#8b5cf6\": { light: \"#EDE9FE\", dark: \"#5B21B6\" },\r\n  \"#a855f7\": { light: \"#F3E8FF\", dark: \"#6B21A8\" },\r\n  \"#d946ef\": { light: \"#FAE8FF\", dark: \"#86198F\" },\r\n  \"#ec4899\": { light: \"#FCE7F3\", dark: \"#9D174D\" },\r\n  \"#f43f5e\": { light: \"#FFE4E6\", dark: \"#9F1239\" },\r\n  \"#ef4444\": { light: \"#FEE2E2\", dark: \"#991B1B\" },\r\n};\r\n\r\nexport const getColorPalette = (color: string) => {\r\n  const palette = colorPalette[color] ?? { light: \"#E5E7EB\", dark: \"#374151\" };\r\n  return {\r\n    \"--light-color\": palette.light,\r\n    \"--dark-color\": palette.dark,\r\n  } as CSSProperties;\r\n};\r\n","import { List, Record, OrderedMap, Map } from \"immutable\";\r\nimport { v4, v5, validate } from \"uuid\";\r\nimport Heap from \"heap\";\r\n\r\nexport const WIDTH = 2000;\r\n\r\nexport interface Stroke {\r\n  uid: string;\r\n  pathData: string;\r\n  timestamp: number;\r\n}\r\n\r\nexport type StrokeRecord = globalThis.Record<string, Stroke>;\r\nexport type Mutation = [string, string];\r\nexport type Splitter = [string, string[]];\r\n\r\nexport type Operation =\r\n  | {\r\n      type: \"add\";\r\n      stroke: Stroke;\r\n    }\r\n  | {\r\n      type: \"erase\";\r\n      erased: string[];\r\n    }\r\n  | {\r\n      type: \"mutate\";\r\n      mutations: Mutation[];\r\n    }\r\n  | {\r\n      type: \"split\";\r\n      splitters: Splitter[];\r\n    }\r\n  | {\r\n      type: \"undo\";\r\n    }\r\n  | {\r\n      type: \"redo\";\r\n    };\r\n\r\ninterface DrawStateRecordType {\r\n  strokes: OrderedMap<string, Stroke>;\r\n  undoStack: List<DrawStateRecord>;\r\n  historyStack: List<DrawStateRecord>;\r\n}\r\n\r\ntype DrawStateRecord = Record<DrawStateRecordType>;\r\n\r\nconst defaultRecord: Readonly<DrawStateRecordType> = {\r\n  strokes: OrderedMap(),\r\n  undoStack: List(),\r\n  historyStack: List(),\r\n};\r\n\r\nconst defaultFactory = Record(defaultRecord);\r\n\r\nexport interface FlatState {\r\n  strokes: StrokeRecord;\r\n  operations?: Operation[];\r\n}\r\n\r\nexport const getDefaultFlatState = (): FlatState => {\r\n  return { strokes: {} };\r\n};\r\n\r\nexport class DrawState {\r\n  constructor(\r\n    private immutable: DrawStateRecord,\r\n    public readonly width: number,\r\n    public readonly height: number,\r\n    public lastOp?: Operation\r\n  ) {}\r\n\r\n  getImmutable() {\r\n    return this.immutable;\r\n  }\r\n\r\n  getUndoStack() {\r\n    return this.getImmutable().get(\"undoStack\");\r\n  }\r\n\r\n  getHistoryStack() {\r\n    return this.getImmutable().get(\"historyStack\");\r\n  }\r\n\r\n  getStrokeMap() {\r\n    return this.getImmutable().get(\"strokes\");\r\n  }\r\n\r\n  getStrokeList(): Stroke[] {\r\n    return this.getStrokeMap()\r\n      .toArray()\r\n      .map(([_, stroke]) => stroke);\r\n  }\r\n\r\n  getLastStroke() {\r\n    return this.getStrokeMap().last();\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.getStrokeMap().size === 0;\r\n  }\r\n\r\n  hasStroke(uid: string) {\r\n    return this.getStrokeMap().has(uid);\r\n  }\r\n\r\n  static createEmpty(ratio: number, width = WIDTH) {\r\n    return new DrawState(defaultFactory(), width, width * ratio);\r\n  }\r\n\r\n  static undo(drawState: DrawState) {\r\n    const lastOp: Operation = { type: \"undo\" };\r\n    const lastRecord = drawState.getHistoryStack().last();\r\n    if (!lastRecord) return drawState;\r\n    const undoStack = drawState\r\n      .getUndoStack()\r\n      .unshift(drawState.getImmutable());\r\n    return new DrawState(\r\n      lastRecord.set(\"undoStack\", undoStack),\r\n      drawState.width,\r\n      drawState.height,\r\n      lastOp\r\n    );\r\n  }\r\n\r\n  static redo(drawState: DrawState) {\r\n    const lastOp: Operation = { type: \"redo\" };\r\n\r\n    const nextRecord = drawState.getUndoStack().first();\r\n    if (!nextRecord) return drawState;\r\n    return new DrawState(nextRecord, drawState.width, drawState.height, lastOp);\r\n  }\r\n\r\n  static addStroke(drawState: DrawState, pathData: string) {\r\n    const uid = DrawState.getUid();\r\n    const timestamp = Date.now();\r\n    const stroke = { pathData, uid, timestamp };\r\n    return DrawState.pushStroke(drawState, stroke);\r\n  }\r\n\r\n  static pushStroke(drawState: DrawState, stroke: Stroke) {\r\n    const { uid } = stroke;\r\n    const prevRecord = drawState.getImmutable();\r\n    const currRecord = prevRecord\r\n      .update(\"strokes\", (s) => s.set(uid, stroke))\r\n      .update(\"historyStack\", (s) => s.push(prevRecord))\r\n      .delete(\"undoStack\");\r\n\r\n    const lastOp: Operation = { type: \"add\", stroke };\r\n\r\n    return new DrawState(currRecord, drawState.width, drawState.height, lastOp);\r\n  }\r\n\r\n  static eraseStrokes(drawState: DrawState, erased: string[]) {\r\n    if (erased.length === 0) return drawState;\r\n    const prevRecord = drawState.getImmutable();\r\n    const currRecord = prevRecord\r\n      .update(\"strokes\", (m) => m.deleteAll(erased))\r\n      .update(\"historyStack\", (s) => s.push(prevRecord))\r\n      .delete(\"undoStack\");\r\n\r\n    const lastOp: Operation = { type: \"erase\", erased };\r\n\r\n    return new DrawState(currRecord, drawState.width, drawState.height, lastOp);\r\n  }\r\n\r\n  static mutateStrokes(drawState: DrawState, mutations: Mutation[]) {\r\n    if (mutations.length === 0) return drawState;\r\n    const prevRecord = drawState.getImmutable();\r\n    let strokes = drawState.getStrokeMap();\r\n    mutations.forEach(\r\n      ([uid, pathData]) =>\r\n        (strokes = strokes.update(\r\n          uid,\r\n          { uid, pathData, timestamp: Date.now() },\r\n          (s) => ({ ...s, pathData })\r\n        ))\r\n    );\r\n    const currRecord = prevRecord\r\n      .set(\"strokes\", strokes)\r\n      .update(\"historyStack\", (s) => s.push(prevRecord))\r\n      .delete(\"undoStack\");\r\n\r\n    const lastOp: Operation = { type: \"mutate\", mutations };\r\n\r\n    return new DrawState(currRecord, drawState.width, drawState.height, lastOp);\r\n  }\r\n\r\n  static splitStrokes(drawState: DrawState, splitters: Splitter[]) {\r\n    if (splitters.length === 0) return drawState;\r\n    const splitMap = Map(splitters);\r\n    let strokes = OrderedMap<string, Stroke>();\r\n    const prevStrokes = drawState.getStrokeMap();\r\n    prevStrokes.forEach((stroke, prevUid) => {\r\n      const splitStrokes = splitMap.get(prevUid);\r\n      if (splitStrokes) {\r\n        splitStrokes.forEach((pathData, index) => {\r\n          if (!validate(prevUid)) prevUid = v4();\r\n          const uid = v5(String(index), prevUid);\r\n          const { timestamp } = stroke;\r\n          strokes = strokes.set(uid, { pathData, timestamp, uid });\r\n        });\r\n      } else {\r\n        strokes = strokes.set(prevUid, stroke);\r\n      }\r\n    });\r\n    const prevRecord = drawState.getImmutable();\r\n    const currRecord = prevRecord\r\n      .set(\"strokes\", strokes)\r\n      .update(\"historyStack\", (s) => s.push(prevRecord));\r\n    const lastOp: Operation = { type: \"split\", splitters };\r\n    return new DrawState(currRecord, drawState.width, drawState.height, lastOp);\r\n  }\r\n\r\n  // sync with mutation.\r\n  static syncStrokeTime(drawState: DrawState, stroke: Stroke) {\r\n    const { uid, timestamp } = stroke;\r\n    const prevStroke = drawState.getStrokeMap().get(uid);\r\n    if (!prevStroke) return;\r\n    prevStroke.timestamp = timestamp;\r\n  }\r\n\r\n  static pushOperation(drawState: DrawState, op: Operation) {\r\n    switch (op.type) {\r\n      case \"add\":\r\n        return DrawState.pushStroke(drawState, op.stroke);\r\n      case \"erase\":\r\n        return DrawState.eraseStrokes(drawState, op.erased);\r\n      case \"mutate\":\r\n        return DrawState.mutateStrokes(drawState, op.mutations);\r\n      case \"undo\":\r\n        return DrawState.undo(drawState);\r\n      case \"redo\":\r\n        return DrawState.redo(drawState);\r\n      case \"split\":\r\n        return DrawState.splitStrokes(drawState, op.splitters);\r\n    }\r\n  }\r\n\r\n  static flaten(drawState: DrawState): FlatState {\r\n    const strokes = drawState.getImmutable().get(\"strokes\").toObject();\r\n    return { strokes };\r\n  }\r\n\r\n  static loadFromFlat(\r\n    flatState: FlatState,\r\n    ratio: number,\r\n    width = WIDTH\r\n  ): DrawState {\r\n    const { strokes, operations } = flatState;\r\n    let ds = new DrawState(\r\n      defaultFactory().set(\"strokes\", OrderedMap(strokes)),\r\n      width,\r\n      width * ratio\r\n    );\r\n    operations?.forEach((op) => (ds = DrawState.pushOperation(ds, op)));\r\n    return ds;\r\n  }\r\n\r\n  static mergeStates(...states: DrawState[]): Stroke[] {\r\n    const iterators = states.map((ds) => ds.getStrokeMap().values());\r\n    const mergedStrokes = [];\r\n    const heap = new Heap<[Stroke, number]>(\r\n      ([s0], [s1]) => s0.timestamp - s1.timestamp\r\n    );\r\n\r\n    iterators.forEach((iter, index) => {\r\n      const { value, done } = iter.next();\r\n      done || heap.push([value, index]);\r\n    });\r\n\r\n    while (heap.size() > 0) {\r\n      const record = heap.pop();\r\n      if (!record) break;\r\n      const [stroke, index] = record;\r\n      mergedStrokes.push(stroke);\r\n\r\n      const iterator = iterators[index];\r\n      if (!iterator) break;\r\n      const { value, done } = iterator.next();\r\n      done || heap.push([value, index]);\r\n    }\r\n    return mergedStrokes;\r\n  }\r\n\r\n  static getUid() {\r\n    return v4();\r\n  }\r\n}\r\n","import { NotePage, TeamPage, TeamPageInfo } from \"lib/note/note\";\r\nimport { DrawState } from \"./DrawState\";\r\nimport { SetOperation } from \"./StateSet\";\r\nimport { Map, Record, Set } from \"immutable\";\r\n\r\ninterface TeamStateRecordType {\r\n  pageStates: Map<string, Map<string, DrawState>>;\r\n  pageInfos: Map<string, TeamPageInfo>;\r\n}\r\n\r\nconst defaultRecord: Readonly<TeamStateRecordType> = {\r\n  pageStates: Map(),\r\n  pageInfos: Map(),\r\n};\r\n\r\ntype TeamStateRecord = Record<TeamStateRecordType>;\r\nconst defaultFactory = Record(defaultRecord);\r\n\r\nexport class TeamState {\r\n  constructor(private immutable: TeamStateRecord) {}\r\n\r\n  getImmutable() {\r\n    return this.immutable;\r\n  }\r\n\r\n  getPageStates() {\r\n    return this.getImmutable().get(\"pageStates\");\r\n  }\r\n\r\n  getPageInfos() {\r\n    return this.getImmutable().get(\"pageInfos\");\r\n  }\r\n\r\n  getOneState(pageID: string, userID: string) {\r\n    return this.getPageStates().get(pageID)?.get(userID);\r\n  }\r\n\r\n  getOnePageStateMap(pageID: string) {\r\n    return this.getPageStates().get(pageID);\r\n  }\r\n\r\n  getPageRatio(pageID: string) {\r\n    return this.getPageInfos().get(pageID)?.ratio;\r\n  }\r\n\r\n  includesPage(pageID: string) {\r\n    return this.getPageStates().has(pageID);\r\n  }\r\n\r\n  setState(pageID: string, userID: string, drawState: DrawState) {\r\n    const pageMap = this.getPageStates().get(pageID);\r\n    if (!pageMap) return this;\r\n    return new TeamState(\r\n      this.getImmutable().update(\"pageStates\", (m) =>\r\n        m.set(pageID, pageMap.set(userID, drawState))\r\n      )\r\n    );\r\n  }\r\n\r\n  static createFromTeamPages(teamPages: globalThis.Record<string, TeamPage>) {\r\n    let record = defaultFactory();\r\n    Object.entries(teamPages).forEach(([pageID, teamPage]) => {\r\n      const { states, ratio } = teamPage;\r\n      const pageMap = Map(\r\n        Object.entries(states).map(([userID, flatState]) => [\r\n          userID,\r\n          DrawState.loadFromFlat(flatState, ratio),\r\n        ])\r\n      );\r\n      record = record\r\n        .update(\"pageStates\", (m) => m.set(pageID, pageMap))\r\n        .update(\"pageInfos\", (m) => m.set(pageID, { ratio }));\r\n    });\r\n    return new TeamState(record);\r\n  }\r\n\r\n  addPage(pageID: string, notePage: NotePage) {\r\n    const { ratio } = notePage;\r\n    return new TeamState(\r\n      this.getImmutable()\r\n        .update(\"pageStates\", (m) => m.set(pageID, Map()))\r\n        .update(\"pageInfos\", (m) => m.set(pageID, { ratio }))\r\n    );\r\n  }\r\n\r\n  pushOperation(setOp: SetOperation, userID: string) {\r\n    const { pageID, ...op } = setOp;\r\n    const ratio = this.getPageRatio(pageID);\r\n    if (!this.includesPage(pageID) || !ratio) return this;\r\n    const prevDs =\r\n      this.getOneState(pageID, userID) || DrawState.createEmpty(ratio);\r\n\r\n    const ds = DrawState.pushOperation(prevDs, op);\r\n    return this.setState(pageID, userID, ds);\r\n  }\r\n\r\n  resetUser(userID: string, pageRec: globalThis.Record<string, NotePage>) {\r\n    let newTS: TeamState = this;\r\n    for (let [pageID, { state, ratio }] of Object.entries(pageRec)) {\r\n      const prevDS = newTS.getOneState(pageID, userID);\r\n      if (!prevDS) continue;\r\n      newTS = newTS.setState(\r\n        pageID,\r\n        userID,\r\n        DrawState.loadFromFlat(state, ratio)\r\n      );\r\n    }\r\n    return newTS;\r\n  }\r\n\r\n  static getValidUsers(\r\n    teamStateMap?: Map<string, DrawState>,\r\n    ignores = Set<string>()\r\n  ) {\r\n    if (!teamStateMap) return [];\r\n    return Array.from(\r\n      teamStateMap\r\n        .filter((ds) => !ds.isEmpty())\r\n        .deleteAll(ignores)\r\n        .keys()\r\n    );\r\n  }\r\n}\r\n","import React, {\r\n  createContext,\r\n  Dispatch,\r\n  FC,\r\n  SetStateAction,\r\n  TransitionEventHandler,\r\n  useContext,\r\n  useDebugValue,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\n\r\nexport type Setter<T> = Dispatch<SetStateAction<T>>;\r\n\r\nexport function useTransitionEnd({\r\n  propertyName,\r\n  active = true,\r\n}: {\r\n  propertyName: string;\r\n  active?: boolean;\r\n}): [Promise<void>, TransitionEventHandler] {\r\n  const resRef = useRef(() => {});\r\n  const [promise] = useState(\r\n    () => new Promise<void>((res) => (resRef.current = res))\r\n  );\r\n  return [\r\n    promise,\r\n    (e) => {\r\n      if (e.propertyName === propertyName && active) resRef.current();\r\n    },\r\n  ];\r\n}\r\n\r\nconst ActiveKeyCtx = createContext<[string, Setter<string>]>([\"\", () => {}]);\r\nexport function useActiveKey() {\r\n  const tuple = useContext(ActiveKeyCtx);\r\n  useDebugValue(tuple[0]);\r\n  return tuple;\r\n}\r\n\r\nexport const ActiveKeyProvider: FC<{ initKey: string }> = ({\r\n  children,\r\n  initKey,\r\n}) => {\r\n  const tuple = useState(initKey);\r\n  return (\r\n    <ActiveKeyCtx.Provider value={tuple}>{children}</ActiveKeyCtx.Provider>\r\n  );\r\n};\r\n\r\nconst AsideOpenCtx = createContext<[boolean, Setter<boolean>]>([\r\n  false,\r\n  () => {},\r\n]);\r\nexport function useAsideOpen() {\r\n  const tuple = useContext(AsideOpenCtx);\r\n  useDebugValue(tuple[0]);\r\n  return tuple;\r\n}\r\n\r\nexport const AsideOpenProvider: FC = ({ children }) => {\r\n  const tuple = useState(false);\r\n  return (\r\n    <AsideOpenCtx.Provider value={tuple}>{children}</AsideOpenCtx.Provider>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\nimport {\r\n  removePageTimg,\r\n  TeamNoteInfo,\r\n  TeamPage,\r\n  TeamPageInfo,\r\n} from \"lib/note/note\";\r\nimport { loadNote, saveTeamNote, updateTeamNote } from \"lib/note/archive\";\r\nimport { getUserID } from \"lib/user\";\r\nimport localforage from \"localforage\";\r\n\r\nexport let BASE_URL = \"https://api.slotdumpling.top/paint\";\r\n// BASE_URL = \"http://192.168.1.14:8090/paint\";\r\naxios.defaults.baseURL = BASE_URL;\r\n\r\nexport async function getNoteID(roomCode: string) {\r\n  try {\r\n    const { data } = await axios.get(`code/${roomCode}`);\r\n    console.log({ data });\r\n    if (data.statusCode !== 200) return null;\r\n    return data.noteID as string;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return null;\r\n  }\r\n}\r\n\r\ninterface InfoRes {\r\n  statusCode: number;\r\n  code: number;\r\n  noteInfo: TeamNoteInfo;\r\n  pageInfos: Record<string, TeamPageInfo>;\r\n}\r\n\r\nexport async function getTeamNoteInfo(noteID: string) {\r\n  try {\r\n    const { data } = await axios.get(`info/${noteID}`);\r\n    const { statusCode, ...res } = data as InfoRes;\r\n    if (statusCode !== 200) return null;\r\n    return res;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function loadTeamNoteInfo(noteID: string) {\r\n  try {\r\n    const infoRes = await getTeamNoteInfo(noteID);\r\n    if (!infoRes) return null;\r\n    const { noteInfo, pageInfos } = infoRes;\r\n\r\n    if (await updateTeamNote(noteID, noteInfo, pageInfos)) return infoRes;\r\n\r\n    if (noteInfo.withImg) {\r\n      const { data } = await axios({\r\n        method: \"GET\",\r\n        url: noteID,\r\n        responseType: \"blob\",\r\n      });\r\n      const file = new Blob([data], { type: \"application/pdf\" });\r\n      await saveTeamNote(noteID, noteInfo, pageInfos, file);\r\n    } else {\r\n      await saveTeamNote(noteID, noteInfo, pageInfos);\r\n    }\r\n    return infoRes;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function putNote(noteID: string) {\r\n  const note = await loadNote(noteID);\r\n  if (!note) return false;\r\n  const { uid, name, withImg, pdf, pageOrder, pageRec } = note;\r\n  removePageTimg(pageRec);\r\n\r\n  try {\r\n    const { data } = await axios.put(`create/${noteID}`, {\r\n      userID: getUserID(),\r\n      pageRec,\r\n      noteInfo: { uid, name, withImg, pageOrder },\r\n    });\r\n\r\n    if (pdf) {\r\n      const formData = new FormData();\r\n      const ab = await pdf.arrayBuffer();\r\n      const file = new Blob([ab]);\r\n      formData.append(\"file\", file, noteID);\r\n      await axios({\r\n        method: \"POST\",\r\n        url: \"upload\",\r\n        data: formData,\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      });\r\n    }\r\n\r\n    if (data.statusCode !== 201) return false;\r\n    return true;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function updatePages(noteID: string) {\r\n  const note = await loadNote(noteID);\r\n  if (!note) return null;\r\n  const { uid, name, withImg, pageOrder, pageRec } = note;\r\n  removePageTimg(pageRec);\r\n\r\n  try {\r\n    const { data } = await axios.put(`update/${noteID}`, {\r\n      userID: getUserID(),\r\n      pageRec,\r\n      noteInfo: { uid, name, withImg, pageOrder },\r\n    });\r\n    if (data.statusCode === 201) return true;\r\n    else return false;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return false;\r\n  }\r\n}\r\n\r\nconst teamForage = localforage.createInstance({ name: \"teamState\" });\r\nexport async function getTeamNoteState(noteID: string) {\r\n  try {\r\n    const { data } = await axios.get(`state/${noteID}`, {\r\n      params: { userID: getUserID() },\r\n    });\r\n    if (data.statusCode !== 200) return null;\r\n    const { teamPages } = data;\r\n    teamForage.setItem(noteID, teamPages);\r\n    return teamPages as Record<string, TeamPage>;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function getCachedTeamState(noteID: string) {\r\n  return teamForage.getItem<Record<string, TeamPage>>(noteID);\r\n}\r\n","import { Note, NoteInfo, NotePage, TeamNoteInfo, TeamPageInfo } from \"./note\";\r\nimport { getDefaultFlatState } from \"lib/draw/DrawState\";\r\nimport localforage from \"localforage\";\r\nimport { v4 as getUid } from \"uuid\";\r\nimport { pickBy } from \"lodash-es\";\r\n\r\nexport interface NoteTag {\r\n  uid: string;\r\n  name: string;\r\n  color: string;\r\n  notes: string[];\r\n}\r\n\r\nexport async function getAllNotes() {\r\n  const allNotes = await localforage.getItem<Record<string, NoteInfo>>(\r\n    \"ALL_NOTES\"\r\n  );\r\n  if (allNotes) return allNotes;\r\n  localforage.setItem(\"ALL_NOTES\", {});\r\n  return {};\r\n}\r\n\r\nexport async function getAllTags() {\r\n  const tags = await localforage.getItem<Record<string, NoteTag>>(\"ALL_TAGS\");\r\n  if (tags) return tags;\r\n  localforage.setItem(\"ALL_TAGS\", {});\r\n  return {};\r\n}\r\n\r\nexport async function addNewTag(name: string, color: string) {\r\n  const uid = getUid();\r\n  const newTag: NoteTag = {\r\n    uid,\r\n    name,\r\n    color,\r\n    notes: [],\r\n  };\r\n  const prevTags = await getAllTags();\r\n  const tags = { ...prevTags, [uid]: newTag };\r\n  await localforage.setItem(\"ALL_TAGS\", tags);\r\n\r\n  return tags;\r\n}\r\n\r\nexport async function deleteTag(uid: string) {\r\n  const prevTags = await getAllTags();\r\n  const { [uid]: _, ...tags } = prevTags;\r\n  await localforage.setItem(\"ALL_TAGS\", tags);\r\n\r\n  return tags;\r\n}\r\n\r\nexport async function editTag(tag: NoteTag) {\r\n  const prevTags = await getAllTags();\r\n  const tags = { ...prevTags, [tag.uid]: tag };\r\n  await localforage.setItem(\"ALL_TAGS\", tags);\r\n  return tags;\r\n}\r\n\r\nexport async function loadNote(uid: string) {\r\n  const note = await localforage.getItem<Note>(uid);\r\n  if (!note) return;\r\n  const pdf = await localforage.getItem<Blob>(`PDF_${uid}`);\r\n  if (pdf) return { ...note, pdf };\r\n  else return note;\r\n}\r\n\r\nexport async function editNoteData(uid: string, noteData: Partial<Note>) {\r\n  noteData = pickBy(noteData, (v) => v !== undefined);\r\n  if (\"pageRec\" in noteData) noteData.lastTime = Date.now();\r\n\r\n  const allNotes = await getAllNotes();\r\n  const { pageRec, pageOrder, ...noteInfo } = noteData;\r\n  const prevNoteInfo = allNotes[uid];\r\n  if (!prevNoteInfo) return;\r\n  allNotes[uid] = { ...prevNoteInfo, ...noteInfo };\r\n\r\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\r\n  const prevNote = await loadNote(uid);\r\n  if (!prevNote) return;\r\n  await localforage.setItem(uid, { ...prevNote, ...noteData });\r\n}\r\n\r\nexport async function saveNoteInfo(noteInfo: NoteInfo) {\r\n  const { uid, tagID } = noteInfo;\r\n  const allNotes = await getAllNotes();\r\n  allNotes[uid] = noteInfo;\r\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\r\n  const tags = await getAllTags();\r\n  const tag = tags[tagID];\r\n  if (tag) {\r\n    tag.notes.push(noteInfo.uid);\r\n    await localforage.setItem(\"ALL_TAGS\", tags);\r\n  }\r\n  return { tags, allNotes };\r\n}\r\n\r\nexport async function createNewNote(noteWithPdf: Note) {\r\n  const { pdf, ...note } = noteWithPdf;\r\n  await localforage.setItem(note.uid, note);\r\n  if (pdf) await localforage.setItem(`PDF_${note.uid}`, pdf);\r\n  const { pageRec, pageOrder, ...noteInfo } = note;\r\n  return await saveNoteInfo(noteInfo);\r\n}\r\n\r\nexport async function deleteNote(uid: string) {\r\n  const note = await loadNote(uid);\r\n  const allNotes = await getAllNotes();\r\n  const tags = await getAllTags();\r\n  if (!note) return { tags, allNotes };\r\n  await localforage.removeItem(uid);\r\n  await localforage.removeItem(`PDF_${uid}`);\r\n  delete allNotes[uid];\r\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\r\n\r\n  const { tagID } = note;\r\n  const prevTag = tags[tagID];\r\n  if (prevTag) {\r\n    prevTag.notes = prevTag.notes.filter((id) => id !== uid);\r\n    await localforage.setItem(\"ALL_TAGS\", tags);\r\n  }\r\n  return { tags, allNotes };\r\n}\r\n\r\nexport async function moveNoteTag(noteID: string, tagID: string) {\r\n  const note = await loadNote(noteID);\r\n  const allNotes = await getAllNotes();\r\n  const tags = await getAllTags();\r\n  const noteInfo = allNotes[noteID];\r\n  if (!note || !noteInfo) return { tags, allNotes };\r\n\r\n  const { tagID: prevTagId } = note;\r\n  note.tagID = tagID;\r\n  await localforage.setItem(noteID, note);\r\n  noteInfo.tagID = tagID;\r\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\r\n\r\n  const prevTag = tags[prevTagId];\r\n  if (prevTag) {\r\n    prevTag.notes = prevTag.notes.filter((id) => id !== noteID);\r\n  }\r\n  tags[tagID]?.notes.push(noteID);\r\n  await localforage.setItem(\"ALL_TAGS\", tags);\r\n  return { tags, allNotes };\r\n}\r\n\r\nexport async function saveTeamNote(\r\n  noteID: string,\r\n  noteInfo: TeamNoteInfo,\r\n  teamPages: Record<string, TeamPageInfo>,\r\n  file?: Blob\r\n) {\r\n  let note = await loadNote(noteID);\r\n  if (note) return;\r\n  const time = Date.now();\r\n  const pageRec: Record<string, NotePage> = {};\r\n  note = {\r\n    ...noteInfo,\r\n    tagID: \"DEFAULT\",\r\n    team: true,\r\n    pageRec,\r\n    pdf: file,\r\n    createTime: time,\r\n    lastTime: time,\r\n  };\r\n\r\n  // set empty state for each page\r\n  Object.entries(teamPages).forEach(([pageID, page]) => {\r\n    pageRec[pageID] = { ...page, state: getDefaultFlatState() };\r\n  });\r\n\r\n  // parse timg for each page\r\n  if (file) {\r\n    const { getPDFImages } = await import(\"./pdfImage\");\r\n    const { images } = await getPDFImages(file, 0.5);\r\n    Object.values(pageRec).forEach((page) => {\r\n      const { pdfIndex } = page;\r\n      if (!pdfIndex) return;\r\n      page.image = images[pdfIndex - 1];\r\n    });\r\n  }\r\n\r\n  await createNewNote(note);\r\n}\r\n\r\nexport async function updateTeamNote(\r\n  noteID: string,\r\n  noteInfo: TeamNoteInfo,\r\n  pageInfos: Record<string, TeamPageInfo>\r\n) {\r\n  let note = await loadNote(noteID);\r\n  if (!note) return false;\r\n  const { pageOrder } = noteInfo;\r\n  if (pageOrder.length < note.pageOrder.length) return true;\r\n  const { pageRec, pdf } = note;\r\n  const { getOneImage } = await import(\"./pdfImage\");\r\n\r\n  // parse timgs & set empty states for new pages.\r\n  for (let [pageID, teamPage] of Object.entries(pageInfos)) {\r\n    if (pageID in pageRec) continue;\r\n    const { pdfIndex } = teamPage;\r\n    const state = getDefaultFlatState();\r\n    const notePage: NotePage = { ...teamPage, state };\r\n    if (!pdf || !pdfIndex) continue;\r\n    notePage.image = await getOneImage(pdf, pdfIndex, 0.5);\r\n    pageRec[pageID] = notePage;\r\n  }\r\n  await editNoteData(noteID, { pageOrder, pageRec });\r\n  return true;\r\n}\r\n","import { getDefaultFlatState, FlatState } from \"lib/draw/DrawState\";\r\nimport { v4 as getUid } from \"uuid\";\r\nimport dayjs from \"dayjs\";\r\n\r\nexport interface NotePage {\r\n  ratio: number;\r\n  state: FlatState;\r\n  image?: string;\r\n  marked?: boolean;\r\n  pdfIndex?: number;\r\n}\r\n\r\nexport const defaultNotePage: Readonly<NotePage> = {\r\n  ratio: 1.5,\r\n  state: { strokes: {} },\r\n};\r\n\r\nexport interface TeamPageState {\r\n  states: Record<string, FlatState>;\r\n}\r\n\r\nexport interface TeamPageInfo {\r\n  ratio: number;\r\n  pdfIndex?: number;\r\n}\r\n\r\nexport type TeamPage = TeamPageInfo & TeamPageState;\r\n\r\nexport interface TeamNote {\r\n  uid: string;\r\n  pageRec: Record<string, TeamPage>;\r\n}\r\n\r\nexport interface NoteInfo {\r\n  uid: string;\r\n  name: string;\r\n  tagID: string;\r\n  team: boolean;\r\n  withImg: boolean;\r\n  createTime: number;\r\n  lastTime: number;\r\n}\r\n\r\nexport type Note = NoteInfo & {\r\n  pdf?: Blob;\r\n  pageRec: Record<string, NotePage>;\r\n  pageOrder: string[];\r\n};\r\n\r\nexport interface TeamNoteInfo {\r\n  uid: string;\r\n  name: string;\r\n  pageOrder: string[];\r\n  withImg: boolean;\r\n}\r\n\r\nexport function createEmptyNote(): Note {\r\n  const pageID = getUid();\r\n  const time = Date.now();\r\n  return {\r\n    uid: getUid(),\r\n    name: `Note ${dayjs(time).format(\"HH:mm, ddd MMM D\")}`,\r\n    tagID: \"DEFAULT\",\r\n    team: false,\r\n    withImg: false,\r\n    createTime: time,\r\n    lastTime: time,\r\n    pageRec: {\r\n      [pageID]: {\r\n        ratio: 1.5,\r\n        state: getDefaultFlatState(),\r\n      },\r\n    },\r\n    pageOrder: [pageID],\r\n  };\r\n}\r\n\r\nexport function createPage(page?: NotePage): [string, NotePage] {\r\n  const pageID = getUid();\r\n  const newPage = page ?? {\r\n    ratio: 1.5,\r\n    state: getDefaultFlatState(),\r\n  };\r\n  return [pageID, newPage];\r\n}\r\n\r\nexport function removePageTimg(pageRec: Record<string, NotePage>) {\r\n  Object.values(pageRec).forEach((page) => {\r\n    delete page.image;\r\n    delete page.marked;\r\n  });\r\n}\r\n","import { v4 as getUid } from \"uuid\";\r\n\r\nexport interface UserInfo {\r\n  userID: string;\r\n  userName: string;\r\n  online: boolean;\r\n}\r\n\r\nexport const getUserID = (() => {\r\n  let cached: string;\r\n  return () => {\r\n    if (cached) return cached;\r\n    let userID = localStorage.getItem(\"USER_ID\");\r\n    if (!userID) {\r\n      userID = getUid();\r\n      localStorage.setItem(\"USER_ID\", userID);\r\n    }\r\n    cached = userID;\r\n    return userID;\r\n  };\r\n})();\r\n\r\nexport const getUserName = () => {\r\n  let name = localStorage.getItem(\"USER_NAME\");\r\n  if (!name) {\r\n    name = getUid().slice(0, 8);\r\n    localStorage.setItem(\"USER_NAME\", name);\r\n  }\r\n  return name;\r\n};\r\n\r\nexport const saveUserName = (name: string) => {\r\n  name = name.trim();\r\n  if (!name) return false;\r\n  else localStorage.setItem(\"USER_NAME\", name);\r\n  return true;\r\n};\r\n"],"names":["ColorCirle","color","className","style","backgroundColor","classNames","colors","allColors","getRandomColor","index","Math","floor","random","length","getHashedColor","str","hash","colorPalette","light","dark","getColorPalette","palette","WIDTH","defaultRecord","strokes","OrderedMap","undoStack","List","historyStack","defaultFactory","Record","getDefaultFlatState","DrawState","immutable","width","height","lastOp","this","getImmutable","get","getStrokeMap","toArray","map","last","size","uid","has","ratio","drawState","lastRecord","getHistoryStack","getUndoStack","unshift","set","type","nextRecord","first","pathData","stroke","getUid","timestamp","Date","now","pushStroke","prevRecord","currRecord","update","s","push","delete","erased","m","deleteAll","mutations","forEach","splitters","splitMap","Map","prevUid","splitStrokes","validate","v4","v5","String","prevStroke","op","eraseStrokes","mutateStrokes","undo","redo","toObject","flatState","operations","ds","pushOperation","states","iterators","values","mergedStrokes","heap","Heap","s0","s1","iter","next","value","done","record","pop","iterator","pageStates","pageInfos","TeamState","pageID","userID","getPageStates","getPageInfos","pageMap","notePage","setOp","getPageRatio","includesPage","prevDs","getOneState","setState","pageRec","newTS","Object","entries","state","teamPages","teamPage","teamStateMap","ignores","Set","Array","from","filter","isEmpty","keys","useTransitionEnd","propertyName","active","resRef","useRef","useState","Promise","res","current","e","ActiveKeyCtx","createContext","useActiveKey","tuple","useContext","useDebugValue","ActiveKeyProvider","children","initKey","Provider","AsideOpenCtx","useAsideOpen","AsideOpenProvider","BASE_URL","getNoteID","roomCode","axios","data","console","log","statusCode","noteID","error","getTeamNoteInfo","loadTeamNoteInfo","infoRes","noteInfo","updateTeamNote","withImg","method","url","responseType","file","Blob","saveTeamNote","putNote","loadNote","note","name","pdf","pageOrder","removePageTimg","getUserID","formData","FormData","arrayBuffer","ab","append","headers","updatePages","teamForage","localforage","getTeamNoteState","params","setItem","getCachedTeamState","getItem","getAllNotes","allNotes","getAllTags","tags","addNewTag","newTag","notes","prevTags","deleteTag","editTag","tag","editNoteData","noteData","pickBy","v","undefined","lastTime","prevNoteInfo","prevNote","saveNoteInfo","tagID","createNewNote","noteWithPdf","deleteNote","prevTag","id","moveNoteTag","prevTagId","time","team","createTime","page","getPDFImages","images","pdfIndex","image","getOneImage","defaultNotePage","createEmptyNote","dayjs","format","createPage","marked","cached","localStorage","getUserName","slice","saveUserName","trim"],"sourceRoot":""}