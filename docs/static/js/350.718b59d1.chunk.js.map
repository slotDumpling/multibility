{"version":3,"file":"static/js/350.718b59d1.chunk.js","mappings":"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","sources":["lib/draw/drawCtrl.ts","component/reader/ReaderTools.tsx","lib/draw/StateSet.ts","lib/array.ts","component/ui/DigitDisplay.tsx","component/ui/IconFont.tsx","component/reader/PageNav.tsx","component/reader/DrawTools.tsx","component/draw/Draw.tsx","lib/touch/touch.ts","lib/hooks.ts","component/reader/Reader.tsx","lib/draw/TeamState.ts","lib/network/io.ts","component/reader/Team.tsx","lib/draw/drawer.ts"],"sourcesContent":["import localforage from \"localforage\";\r\n\r\nexport type CtrlMode = \"draw\" | \"erase\" | \"select\" | \"selected\" | \"delete\";\r\n\r\nexport interface DrawCtrl {\r\n  finger: boolean;\r\n  lineWidth: number;\r\n  eraserWidth: number;\r\n  color: string;\r\n  highlight: boolean;\r\n}\r\n\r\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\r\n  finger: true,\r\n  lineWidth: 10,\r\n  eraserWidth: 10,\r\n  color: \"#000000\",\r\n  highlight: false,\r\n};\r\n\r\nexport async function getDrawCtrl() {\r\n  let drawCtrl = (await localforage.getItem(\"DRAW_CTRL\")) as DrawCtrl | null;\r\n  if (!drawCtrl) {\r\n    drawCtrl = defaultDrawCtrl;\r\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n  }\r\n  return drawCtrl;\r\n}\r\n\r\nexport async function saveDrawCtrl(drawCtrl: DrawCtrl) {\r\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n}\r\n","import { Button, Input, message } from \"antd\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { ReaderMethodCtx, ReaderStateCtx } from \"./Reader\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport classNames from \"classnames\";\r\n\r\nexport const AddPageButton = () => {\r\n  const { addFinalPage } = useContext(ReaderMethodCtx);\r\n  const { pageOrder } = useContext(ReaderStateCtx);\r\n  const empty = Boolean(pageOrder && !pageOrder.length);\r\n  return (\r\n    <div className={classNames(\"add-btn-wrapper\", { empty })}>\r\n      <Button\r\n        type=\"dashed\"\r\n        icon={<PlusOutlined />}\r\n        block\r\n        onClick={addFinalPage}\r\n      >\r\n        New page\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const NoteHeader = () => {\r\n  const { noteInfo } = useContext(ReaderStateCtx);\r\n  const [noteName, setNoteName] = useState(\"\");\r\n  useEffect(() => {\r\n    if (!noteInfo) return;\r\n    setNoteName(noteInfo?.name);\r\n  }, [noteInfo]);\r\n\r\n  if (!noteInfo) return null;\r\n\r\n  return (\r\n    <div className=\"note-header\">\r\n      <Input value={noteName} bordered={false} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const showPageDelMsg = (onUndo: () => void) => {\r\n  message.warning({\r\n    content: (\r\n      <>\r\n        One page was deleted.\r\n        <Button\r\n          size=\"small\"\r\n          type=\"link\"\r\n          onClick={() => {\r\n            message.destroy(\"DELETE\");\r\n            onUndo();\r\n          }}\r\n        >\r\n          Undo\r\n        </Button>\r\n      </>\r\n    ),\r\n    key: \"DELETE\",\r\n    duration: 10,\r\n  });\r\n};\r\n","import { List, Map, Record } from \"immutable\";\r\nimport { DrawState, Operation, WIDTH } from \"./DrawState\";\r\nimport { NotePage } from \"../note/note\";\r\n\r\ninterface StateSetRecordType {\r\n  states: Map<string, DrawState>;\r\n  editStack: List<string>;\r\n  undoStack: List<string>;\r\n}\r\n\r\nconst defaultRecord: Readonly<StateSetRecordType> = {\r\n  states: Map(),\r\n  editStack: List(),\r\n  undoStack: List(),\r\n};\r\n\r\ntype StateSetRecord = Record<StateSetRecordType>;\r\nconst defaultFactory = Record(defaultRecord);\r\n\r\nexport type SetOperation = Operation & { pageID: string };\r\n\r\nexport class StateSet {\r\n  constructor(\r\n    private immutable: StateSetRecord,\r\n    public lastOp?: SetOperation\r\n  ) {}\r\n\r\n  static createFromList(list: [string, DrawState][]) {\r\n    return new StateSet(defaultFactory().set(\"states\", Map(list)));\r\n  }\r\n\r\n  static createFromPages(\r\n    pageRec: globalThis.Record<string, NotePage>,\r\n    width = WIDTH\r\n  ) {\r\n    const entries = Object.entries(pageRec);\r\n    return StateSet.createFromList(\r\n      entries.map(([key, { state, ratio }]) => [\r\n        key,\r\n        DrawState.loadFromFlat(state, width, width * ratio),\r\n      ])\r\n    );\r\n  }\r\n\r\n  getImmutable() {\r\n    return this.immutable;\r\n  }\r\n\r\n  getStates() {\r\n    return this.getImmutable().get(\"states\");\r\n  }\r\n\r\n  getOneState(pageID: string) {\r\n    return this.getStates().get(pageID);\r\n  }\r\n\r\n  getEditStack() {\r\n    return this.getImmutable().get(\"editStack\");\r\n  }\r\n\r\n  getUndoStack() {\r\n    return this.getImmutable().get(\"undoStack\");\r\n  }\r\n\r\n  setState(pageID: string, drawState: DrawState) {\r\n    const prevDS = this.getOneState(pageID);\r\n    if (!prevDS || prevDS === drawState) return this;\r\n    let currRecord = this.getImmutable()\r\n      .update(\"states\", (s) => s.set(pageID, drawState))\r\n      .update(\"editStack\", (l) => l.push(pageID))\r\n      .delete(\"undoStack\");\r\n\r\n    const { lastOp } = drawState;\r\n    const lastSetOp = lastOp && { ...lastOp, pageID };\r\n\r\n    return new StateSet(currRecord, lastSetOp);\r\n  }\r\n\r\n  addState(pageID: string, notePage: NotePage, width = WIDTH) {\r\n    const { state, ratio } = notePage;\r\n    const newDS = DrawState.loadFromFlat(state, width, width * ratio);\r\n    const currRecord = this.getImmutable().update(\"states\", (s) =>\r\n      s.set(pageID, newDS)\r\n    );\r\n    return new StateSet(currRecord);\r\n  }\r\n\r\n  deleteState(pageID: string) {\r\n    return new StateSet(\r\n      this.getImmutable().update(\"states\", (s) => s.delete(pageID))\r\n    );\r\n  }\r\n\r\n  isUndoable() {\r\n    return this.getEditStack().size > 0;\r\n  }\r\n\r\n  isRedoable() {\r\n    return this.getUndoStack().size > 0;\r\n  }\r\n\r\n  undo() {\r\n    if (!this.isUndoable()) return this;\r\n    const lastUid = this.getEditStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.undo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"editStack\", (s) => s.pop())\r\n        .update(\"undoStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  redo() {\r\n    if (!this.isRedoable()) return this;\r\n    const lastUid = this.getUndoStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.redo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"undoStack\", (s) => s.pop())\r\n        .update(\"editStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  getLastDS(): [string, DrawState] | undefined {\r\n    const pageID = this.lastOp?.pageID;\r\n    const ds = pageID && this.getOneState(pageID);\r\n    return ds ? [pageID, ds] : undefined;\r\n  }\r\n}\r\n","export function exchange<T>(list: T[], fromIndex: number, toIndex: number) {\r\n  const result = list.slice();\r\n  const [removed] = result.splice(fromIndex, 1);\r\n  result.splice(toIndex, 0, removed);\r\n  return result;\r\n}\r\n\r\nexport function insertAfter<T>(list: T[], prevItem: T, newItem: T) {\r\n  const prevIndex = list.indexOf(prevItem);\r\n  const curr = list.slice();\r\n  if (prevIndex === -1) return curr;\r\n  curr.splice(prevIndex + 1, 0, newItem);\r\n  return curr;\r\n}\r\n","import classNames from \"classnames\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./digitDisplay.sass\";\r\n\r\nfunction num2digits(num: number): number[] {\r\n  return String(num)\r\n    .padStart(4, \"0\")\r\n    .split(\"\")\r\n    .map((s) => Number(s));\r\n}\r\n\r\nexport default function DigitDisplay({ value }: { value: number }) {\r\n  const [randomNum, setRandomNum] = useState(9999);\r\n  const displayNum = value >= 0 ? value : randomNum;\r\n  const digits = num2digits(displayNum);\r\n\r\n  function resetRandom() {\r\n    setRandomNum(Math.floor(Math.random() * 10000));\r\n  }\r\n  useEffect(() => {\r\n    if (value !== -1) return setRandomNum(9999);\r\n    const timer = setTimeout(resetRandom, 100);\r\n    return () => clearTimeout(timer);\r\n  }, [value]);\r\n\r\n  return (\r\n    <div className={classNames(\"digit-display\", { disabled: value === -2 })}>\r\n      {digits.map((d, idx) => (\r\n        <Digit key={idx} digit={d} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Digit({ digit }: { digit: number }) {\r\n  if (!(digit <= 9 && digit >= 0)) {\r\n    return <div className=\"digit\">*</div>;\r\n  }\r\n  return <div className=\"digit\">{digit}</div>;\r\n}\r\n","import { createFromIconfontCN } from \"@ant-design/icons\";\r\n\r\nexport default createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_3181679_eb02zt96p4p.js\",\r\n});\r\n","import { Button, Drawer, Menu, Popover, Tabs } from \"antd\";\r\nimport React, {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  MouseEvent,\r\n} from \"react\";\r\nimport { PageWrapper, ReaderMethodCtx, ReaderStateCtx } from \"./Reader\";\r\nimport {\r\n  MoreOutlined,\r\n  PlusOutlined,\r\n  CopyOutlined,\r\n  DeleteOutlined,\r\n  MenuFoldOutlined,\r\n  MenuUnfoldOutlined,\r\n} from \"@ant-design/icons\";\r\nimport IconFont from \"../ui/IconFont\";\r\nimport {\r\n  Draggable,\r\n  Droppable,\r\n  DropResult,\r\n  DragDropContext,\r\n} from \"react-beautiful-dnd\";\r\nimport { AddPageButton } from \"./ReaderTools\";\r\nimport { exchange } from \"../../lib/array\";\r\nimport { Setter } from \"../../lib/hooks\";\r\nimport classNames from \"classnames\";\r\nimport \"./preview.sass\";\r\n\r\nconst PageNavContent = ({\r\n  activeKey,\r\n  setActiveKey,\r\n}: {\r\n  activeKey: string;\r\n  setActiveKey: Setter<string>;\r\n}) => {\r\n  const { pageOrder, inviewPages } = useContext(ReaderStateCtx);\r\n  const { scrollPage, saveReorder } = useContext(ReaderMethodCtx);\r\n  const refRec = useRef<Record<string, HTMLElement>>({});\r\n  const listEl = useRef<HTMLDivElement>();\r\n\r\n  const onDragEnd = ({ source, destination }: DropResult) => {\r\n    if (!destination || !pageOrder) return;\r\n    const { index: fromIndex } = source;\r\n    const { index: toIndex } = destination;\r\n    const pageID = pageOrder[fromIndex];\r\n    const newOrder = exchange(pageOrder, fromIndex, toIndex);\r\n    saveReorder(newOrder, true);\r\n    requestAnimationFrame(() => scrollPage(pageID));\r\n  };\r\n\r\n  const currpageID = useMemo(\r\n    () => pageOrder?.find((pageID) => inviewPages.has(pageID)) || \"\",\r\n    [pageOrder, inviewPages]\r\n  );\r\n\r\n  useEffect(() => {\r\n    refRec.current[currpageID]?.scrollIntoView();\r\n    const itemHeight = refRec.current[currpageID]?.clientHeight || 0;\r\n    const listHeight = listEl.current?.clientHeight || 0;\r\n    listEl.current?.scrollBy(0, -listHeight / 2 + itemHeight / 2);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"preview-container\">\r\n      <PreviewTabs activeKey={activeKey} setActiveKey={setActiveKey} />\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"droppable\">\r\n          {({ droppableProps, innerRef, placeholder }) => (\r\n            <div\r\n              className=\"page-list\"\r\n              ref={(e) => {\r\n                innerRef(e);\r\n                if (e) listEl.current = e;\r\n              }}\r\n              {...droppableProps}\r\n            >\r\n              {pageOrder?.map((uid, index) => (\r\n                <PagePreview\r\n                  key={uid}\r\n                  uid={uid}\r\n                  mode={activeKey}\r\n                  pageIndex={index}\r\n                  currpageID={currpageID}\r\n                  refRec={refRec.current}\r\n                />\r\n              ))}\r\n              {placeholder}\r\n              {activeKey === \"ALL\" && <AddPageButton />}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PagePreview: FC<{\r\n  uid: string;\r\n  mode: string;\r\n  pageIndex: number;\r\n  currpageID: string;\r\n  refRec: Record<string, HTMLElement>;\r\n}> = ({ uid, pageIndex, mode, currpageID, refRec }) => {\r\n  const { stateSet, teamState, pageRec } = useContext(ReaderStateCtx);\r\n  const { scrollPage, switchPageMarked } = useContext(ReaderMethodCtx);\r\n  const page = pageRec && pageRec[uid];\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStateMap = teamState?.getOnePageState(uid);\r\n  if (!page || !drawState) return null;\r\n\r\n  if (\r\n    mode === \"WRITTEN\" &&\r\n    drawState.isEmpty() &&\r\n    (!teamStateMap || teamStateMap.every((ds) => ds.isEmpty()))\r\n  ) {\r\n    return null;\r\n  } else if (mode === \"MARKED\" && !page.marked) {\r\n    return null;\r\n  }\r\n\r\n  const switchMarked = (e: MouseEvent<HTMLSpanElement>) => {\r\n    switchPageMarked(uid);\r\n    e.stopPropagation();\r\n  };\r\n  const curr = currpageID === uid;\r\n  const dragDisabled = mode !== \"ALL\";\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={uid}\r\n      index={pageIndex}\r\n      isDragDisabled={dragDisabled}\r\n    >\r\n      {(\r\n        { innerRef, draggableProps, dragHandleProps },\r\n        { isDragging: drag }\r\n      ) => {\r\n        const { image, marked } = page;\r\n        return (\r\n          <div\r\n            ref={(e) => {\r\n              innerRef(e);\r\n              if (e) refRec[uid] = e;\r\n            }}\r\n            className={classNames(\"page\", { curr, drag })}\r\n            onClick={() => scrollPage(uid)}\r\n            {...draggableProps}\r\n            {...dragHandleProps}\r\n          >\r\n            <PageWrapper\r\n              uid={uid}\r\n              drawState={drawState}\r\n              teamStateMap={teamStateMap}\r\n              thumbnail={image}\r\n              preview\r\n            />\r\n            <span\r\n              className={classNames(\"bookmark\", { marked })}\r\n              onClickCapture={switchMarked}\r\n            />\r\n            <span className=\"index\">{pageIndex + 1}</span>\r\n            <PreviewOption uid={uid} />\r\n          </div>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nconst PreviewOption = ({ uid }: { uid: string }) => {\r\n  const [popShow, setPopShow] = useState(false);\r\n  const { addPage, deletePage } = useContext(ReaderMethodCtx);\r\n  const { Item } = Menu;\r\n\r\n  const menu = (\r\n    <Menu\r\n      onClick={({ key, domEvent }) => {\r\n        if (key === \"ADD\") {\r\n          addPage(uid);\r\n        } else if (key === \"COPY\") {\r\n          addPage(uid, true);\r\n        } else if (key === \"DELETE\") {\r\n          deletePage(uid);\r\n        }\r\n        domEvent.stopPropagation();\r\n        setPopShow(false);\r\n      }}\r\n    >\r\n      <Item key=\"ADD\" icon={<PlusOutlined />}>\r\n        Add page\r\n      </Item>\r\n      <Item key=\"COPY\" icon={<CopyOutlined />}>\r\n        Duplicate\r\n      </Item>\r\n      <Item key=\"DELETE\" danger icon={<DeleteOutlined />}>\r\n        Delete\r\n      </Item>\r\n    </Menu>\r\n  );\r\n  return (\r\n    <Popover\r\n      content={menu}\r\n      trigger=\"click\"\r\n      placement=\"left\"\r\n      visible={popShow}\r\n      onVisibleChange={setPopShow}\r\n      destroyTooltipOnHide\r\n    >\r\n      <span\r\n        className=\"option\"\r\n        onClickCapture={(e) => {\r\n          setPopShow((prev) => !prev);\r\n          e.stopPropagation();\r\n        }}\r\n      >\r\n        <MoreOutlined />\r\n      </span>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst PreviewTabs = ({\r\n  activeKey,\r\n  setActiveKey,\r\n}: {\r\n  activeKey: string;\r\n  setActiveKey: (key: string) => void;\r\n}) => {\r\n  const { TabPane } = Tabs;\r\n  return (\r\n    <Tabs\r\n      className=\"tabs\"\r\n      activeKey={activeKey}\r\n      onChange={setActiveKey}\r\n      tabBarGutter={10}\r\n      size=\"small\"\r\n      centered\r\n    >\r\n      <TabPane tab={<IconFont type=\"icon-uf_paper\" />} key=\"ALL\" />\r\n      <TabPane tab={<IconFont type=\"icon-bookmark2\" />} key=\"MARKED\" />\r\n      <TabPane tab={<IconFont type=\"icon-write\" />} key=\"WRITTEN\" />\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport default function PageNav() {\r\n  const [navOn, setNavOn] = useState(false);\r\n  const [activeKey, setActiveKey] = useState<string>(\"ALL\");\r\n  const title = {\r\n    ALL: \"All Pages\",\r\n    MARKED: \"Bookmarks\",\r\n    WRITTEN: \"Notes\",\r\n  }[activeKey];\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        type=\"text\"\r\n        icon={navOn ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\r\n        onClick={() => setNavOn((prev) => !prev)}\r\n      />\r\n      <Drawer\r\n        visible={navOn}\r\n        onClose={() => setNavOn(false)}\r\n        width={200}\r\n        title={title}\r\n        closable={false}\r\n        className=\"preview-drawer\"\r\n        contentWrapperStyle={{ boxShadow: \"none\" }}\r\n        bodyStyle={{ padding: 0, overflow: \"hidden\" }}\r\n        headerStyle={{ textAlign: \"center\", borderTop: \"1px solid #eee\" }}\r\n        destroyOnClose\r\n      >\r\n        <PageNavContent activeKey={activeKey} setActiveKey={setActiveKey} />\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n","import React, {\r\n  FC,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  CSSProperties,\r\n} from \"react\";\r\nimport {\r\n  Badge,\r\n  Alert,\r\n  Avatar,\r\n  Button,\r\n  Slider,\r\n  Divider,\r\n  message,\r\n  Popover,\r\n  Popconfirm,\r\n  ButtonProps,\r\n} from \"antd\";\r\nimport Search from \"antd/lib/input/Search\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { ReaderMethodCtx, ReaderStateCtx } from \"./Reader\";\r\nimport { TeamCtx } from \"./Team\";\r\nimport DigitDisplay from \"../ui/DigitDisplay\";\r\nimport { colors, getHashedColor } from \"../../lib/color\";\r\nimport { getUserID, setUserName, UserInfo } from \"../../lib/user\";\r\nimport { CtrlMode, DrawCtrl } from \"../../lib/draw/drawCtrl\";\r\nimport PageNav from \"./PageNav\";\r\nimport {\r\n  HomeFilled,\r\n  EyeOutlined,\r\n  FormOutlined,\r\n  UndoOutlined,\r\n  RedoOutlined,\r\n  SaveOutlined,\r\n  TeamOutlined,\r\n  CopyOutlined,\r\n  DragOutlined,\r\n  CheckOutlined,\r\n  ExpandOutlined,\r\n  ReloadOutlined,\r\n  DeleteOutlined,\r\n  HighlightOutlined,\r\n  DisconnectOutlined,\r\n  RotateLeftOutlined,\r\n  RotateRightOutlined,\r\n  EyeInvisibleOutlined,\r\n  UsergroupAddOutlined,\r\n} from \"@ant-design/icons\";\r\nimport IconFont from \"../ui/IconFont\";\r\nimport \"./drawTools.sass\";\r\nimport { putNote } from \"../../lib/network/http\";\r\nimport { editNoteData } from \"../../lib/note/archive\";\r\nimport { Setter } from \"../../lib/hooks\";\r\nimport classNames from \"classnames\";\r\n\r\nexport default function DrawTools({\r\n  handleUndo,\r\n  handleRedo,\r\n  instantSave,\r\n}: {\r\n  handleUndo: () => void;\r\n  handleRedo: () => void;\r\n  instantSave: () => Promise<void> | undefined;\r\n}) {\r\n  const { saved, stateSet, teamOn, mode, drawCtrl } =\r\n    useContext(ReaderStateCtx);\r\n  const { setDrawCtrl, setMode } = useContext(ReaderMethodCtx);\r\n  const { finger } = drawCtrl;\r\n\r\n  const nav = useNavigate();\r\n\r\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\r\n    setDrawCtrl((prev) => ({ ...prev, ...updated }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (mode === \"selected\") {\r\n      message.info({\r\n        icon: <DragOutlined style={{ display: \"none\" }} />,\r\n        content: <SelectMenu setMode={setMode} />,\r\n        className: \"select-message\",\r\n        key: \"selected\",\r\n        duration: 0,\r\n      });\r\n      return () => message.destroy(\"selected\");\r\n    }\r\n  }, [mode]);\r\n\r\n  return (\r\n    <header>\r\n      <div className=\"left\">\r\n        <Button\r\n          type=\"text\"\r\n          onClick={async () => {\r\n            await instantSave();\r\n            nav(\"/\");\r\n          }}\r\n          icon={<HomeFilled style={{ opacity: 0.8 }} />}\r\n        />\r\n        <br />\r\n        <Button\r\n          type=\"text\"\r\n          className=\"save\"\r\n          onClick={instantSave}\r\n          disabled={saved}\r\n          icon={<SaveOutlined />}\r\n        />\r\n      </div>\r\n      <div className=\"middle\">\r\n        <Button\r\n          type=\"text\"\r\n          shape=\"circle\"\r\n          icon={<UndoOutlined />}\r\n          onClick={handleUndo}\r\n          disabled={!stateSet?.isUndoable()}\r\n        />\r\n        <Button\r\n          className=\"redo\"\r\n          type=\"text\"\r\n          shape=\"circle\"\r\n          icon={<RedoOutlined />}\r\n          onClick={handleRedo}\r\n          disabled={!stateSet?.isRedoable()}\r\n        />\r\n        <br />\r\n        <PenButton updateDrawCtrl={updateDrawCtrl} />\r\n        <EraserButton updateDrawCtrl={updateDrawCtrl} />\r\n        <Button\r\n          type={[\"select\", \"selected\"].includes(mode) ? \"default\" : \"text\"}\r\n          shape=\"circle\"\r\n          onClick={() => setMode(\"select\")}\r\n          icon={<ExpandOutlined />}\r\n        />\r\n        <Button\r\n          className=\"finger\"\r\n          type={finger ? \"primary\" : \"text\"}\r\n          ghost={finger}\r\n          shape=\"circle\"\r\n          onClick={() => updateDrawCtrl({ finger: !finger })}\r\n          icon={<IconFont type=\"icon-finger\" />}\r\n        />\r\n      </div>\r\n      <div className=\"right\">\r\n        {teamOn && <RoomInfo />}\r\n        {teamOn || <JoinRoom instantSave={instantSave} />}\r\n        <br />\r\n        <PageNav />\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nconst PenButton: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ updateDrawCtrl }) => {\r\n  const { mode } = useContext(ReaderStateCtx);\r\n  const { setMode } = useContext(ReaderMethodCtx);\r\n  return mode === \"draw\" ? (\r\n    <Popover\r\n      content={<PenPanel updateDrawCtrl={updateDrawCtrl} />}\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button type=\"default\" shape=\"circle\" icon={<HighlightOutlined />} />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      shape=\"circle\"\r\n      onClick={() => setMode(\"draw\")}\r\n      icon={<HighlightOutlined />}\r\n    />\r\n  );\r\n};\r\n\r\nconst PenPanel: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ updateDrawCtrl }) => {\r\n  const {\r\n    drawCtrl: { lineWidth, highlight },\r\n  } = useContext(ReaderStateCtx);\r\n  const [tempLineWidth, setTempLineWidth] = useState(lineWidth);\r\n\r\n  return (\r\n    <div className=\"pen-panel\">\r\n      <div className=\"pen-status\">\r\n        <Slider\r\n          min={5}\r\n          max={100}\r\n          value={tempLineWidth}\r\n          onChange={setTempLineWidth}\r\n          onAfterChange={(lineWidth) => updateDrawCtrl({ lineWidth })}\r\n        />\r\n        <Button\r\n          type={highlight ? \"primary\" : \"text\"}\r\n          ghost={highlight}\r\n          shape=\"circle\"\r\n          icon={<IconFont type=\"icon-Highlight\" />}\r\n          onClick={() => updateDrawCtrl({ highlight: !highlight })}\r\n        />\r\n      </div>\r\n      <ColorSelect updateDrawCtrl={updateDrawCtrl} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ColorSelect: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ updateDrawCtrl }) => {\r\n  const {\r\n    drawCtrl: { color },\r\n  } = useContext(ReaderStateCtx);\r\n\r\n  return (\r\n    <div className=\"color-select\">\r\n      {colors.map((c) => (\r\n        <label key={c}>\r\n          <input\r\n            checked={color === c}\r\n            type=\"radio\"\r\n            name=\"color\"\r\n            onChange={() => updateDrawCtrl({ color: c })}\r\n          />\r\n          <div\r\n            className=\"circle\"\r\n            style={{ \"--circle-color\": c } as CSSProperties}\r\n          ></div>\r\n        </label>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst EraserButton: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ updateDrawCtrl }) => {\r\n  const { setMode } = useContext(ReaderMethodCtx);\r\n  const {\r\n    mode,\r\n    drawCtrl: { eraserWidth },\r\n  } = useContext(ReaderStateCtx);\r\n  const [tempEraserWidth, setTempEraserWidth] = useState(eraserWidth);\r\n\r\n  const content = (\r\n    <div className=\"pen-panel\">\r\n      <Slider\r\n        min={5}\r\n        max={100}\r\n        value={tempEraserWidth}\r\n        onChange={setTempEraserWidth}\r\n        onAfterChange={(eraserWidth) => updateDrawCtrl({ eraserWidth })}\r\n      />\r\n    </div>\r\n  );\r\n  return mode === \"erase\" ? (\r\n    <Popover\r\n      content={content}\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button\r\n        type=\"default\"\r\n        shape=\"circle\"\r\n        icon={<IconFont type=\"icon-eraser\" />}\r\n      />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      shape=\"circle\"\r\n      onClick={() => setMode(\"erase\")}\r\n      icon={<IconFont type=\"icon-eraser\" />}\r\n    />\r\n  );\r\n};\r\n\r\nconst SelectMenu: FC<{\r\n  setMode: Setter<CtrlMode>;\r\n}> = ({ setMode }) => {\r\n  const buttonProps: ButtonProps = {\r\n    type: \"text\",\r\n    shape: \"round\",\r\n  };\r\n  return (\r\n    <>\r\n      <Button icon={<RotateLeftOutlined />} {...buttonProps} />\r\n      <Button icon={<RotateRightOutlined />} {...buttonProps} />\r\n      <Button\r\n        danger\r\n        icon={<DeleteOutlined />}\r\n        onClick={() => setMode(\"delete\")}\r\n        {...buttonProps}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst UserCard: FC<{ userInfo: UserInfo; self?: boolean }> = ({\r\n  userInfo,\r\n  self = false,\r\n}) => {\r\n  const { userName, userID, online } = userInfo;\r\n  const { ignores, setIgnores, resetIO } = useContext(TeamCtx);\r\n  const color = useMemo(() => getHashedColor(userID), [userID]);\r\n  const ignored = ignores.has(userID) && !self;\r\n  const [renaming, setRenaming] = useState(false);\r\n\r\n  const switchIgnore = () => {\r\n    setIgnores((prev) => {\r\n      if (prev.has(userID)) return prev.delete(userID);\r\n      return prev.add(userID);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={classNames(\"user-item\", { online })}>\r\n      <Avatar\r\n        className=\"avatar\"\r\n        size=\"small\"\r\n        style={{ backgroundColor: color }}\r\n      >\r\n        {userName?.slice(0, 4)}\r\n      </Avatar>\r\n      {renaming || <span className=\"user-name\">{userName}</span>}\r\n      {renaming && (\r\n        <Search\r\n          autoFocus\r\n          className=\"rename-input\"\r\n          defaultValue={userName}\r\n          onSearch={(val) => {\r\n            const name = val.trim();\r\n            if (!name) return setRenaming(false);\r\n            setUserName(name);\r\n            resetIO();\r\n            setRenaming(false);\r\n          }}\r\n          enterButton={<Button icon={<CheckOutlined />} />}\r\n        />\r\n      )}\r\n      {self ? (\r\n        renaming || (\r\n          <Button\r\n            type=\"text\"\r\n            icon={<FormOutlined />}\r\n            onClick={() => setRenaming(true)}\r\n          />\r\n        )\r\n      ) : (\r\n        <Button\r\n          type=\"text\"\r\n          icon={ignored ? <EyeInvisibleOutlined /> : <EyeOutlined />}\r\n          onClick={switchIgnore}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction RoomInfo() {\r\n  const { code, userRec, connected, loadInfo, resetIO } = useContext(TeamCtx);\r\n  const link = window.location.href;\r\n  const copy = () => {\r\n    navigator.clipboard.writeText(link);\r\n    message.destroy(\"copy\");\r\n    message.success({\r\n      content: \"Share link copied!\",\r\n      icon: <CopyOutlined />,\r\n      key: \"copy\",\r\n    });\r\n  };\r\n\r\n  const userList = useMemo(() => {\r\n    const values = Object.values(userRec);\r\n    const selfID = getUserID();\r\n    const selfInfo = userRec[selfID];\r\n    const list = selfInfo ? [selfInfo] : [];\r\n    list.push(\r\n      ...values.filter(({ online, userID }) => online && userID !== selfID),\r\n      ...values.filter(({ online, userID }) => !online && userID !== selfID)\r\n    );\r\n    return list;\r\n  }, [userRec]);\r\n  const onlineNum = userList.filter((u) => u.online).length;\r\n\r\n  const content = (\r\n    <div className=\"team-popover\">\r\n      {connected || (\r\n        <Alert\r\n          className=\"disconn-alert\"\r\n          message=\"Network failed.\"\r\n          icon={<DisconnectOutlined />}\r\n          type=\"error\"\r\n          showIcon\r\n          banner\r\n        />\r\n      )}\r\n      <DigitDisplay value={code} />\r\n      <Search\r\n        className=\"copy-link code-font\"\r\n        value={link}\r\n        enterButton={<Button icon={<CopyOutlined />} />}\r\n        onSearch={copy}\r\n      />\r\n      <Divider />\r\n      <div className=\"user-list\">\r\n        {userList.map((u) => (\r\n          <UserCard\r\n            key={u.userID}\r\n            userInfo={u}\r\n            self={u.userID === getUserID()}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const title = (\r\n    <div className=\"team-title\">\r\n      <span>Team info</span>\r\n      <Button\r\n        shape=\"circle\"\r\n        type=\"text\"\r\n        size=\"small\"\r\n        icon={<ReloadOutlined />}\r\n        onClick={() => {\r\n          loadInfo();\r\n          resetIO();\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Popover\r\n      content={content}\r\n      trigger=\"click\"\r\n      placement=\"bottomRight\"\r\n      title={title}\r\n      defaultVisible\r\n      getPopupContainer={(e) => e}\r\n    >\r\n      <Button\r\n        type=\"text\"\r\n        icon={\r\n          <Badge\r\n            status={connected ? \"success\" : \"error\"}\r\n            count={connected ? onlineNum : \"!\"}\r\n            size=\"small\"\r\n          >\r\n            <TeamOutlined />\r\n          </Badge>\r\n        }\r\n      />\r\n    </Popover>\r\n  );\r\n}\r\n\r\nconst JoinRoom: FC<{ instantSave: () => Promise<void> | undefined }> = ({\r\n  instantSave,\r\n}) => {\r\n  const { noteID } = useContext(ReaderStateCtx);\r\n  const nav = useNavigate();\r\n  const createRoom = async () => {\r\n    await instantSave();\r\n    const resCode = await putNote(noteID);\r\n    if (!resCode) {\r\n      message.error(\"Can't create room.\");\r\n      return;\r\n    }\r\n    await editNoteData(noteID, { team: true });\r\n    nav(\"/team/\" + noteID);\r\n  };\r\n  return (\r\n    <Popconfirm\r\n      placement=\"bottomRight\"\r\n      title=\"Enable team editing?\"\r\n      onConfirm={createRoom}\r\n      okText=\"Yes\"\r\n      cancelText=\"No\"\r\n    >\r\n      <Button type=\"text\" icon={<UsergroupAddOutlined />} />\r\n    </Popconfirm>\r\n  );\r\n};\r\n","import React, { useRef, useState, useEffect, TouchEvent, useMemo } from \"react\";\r\nimport { CtrlMode, defaultDrawCtrl, DrawCtrl } from \"../../lib/draw/drawCtrl\";\r\nimport { DrawState, Mutation, Stroke } from \"../../lib/draw/DrawState\";\r\nimport { releaseCanvas } from \"../../lib/draw/drawer\";\r\nimport { Setter, usePreventGesture } from \"../../lib/hooks\";\r\nimport { isStylus } from \"../../lib/touch/touch\";\r\nimport { usePinch } from \"@use-gesture/react\";\r\nimport { Set } from \"immutable\";\r\nimport paper from \"paper\";\r\nimport \"./draw.sass\";\r\n\r\nconst PREVIEW_WIDTH = 200;\r\nconst {\r\n  Point,\r\n  Path,\r\n  Group,\r\n  Shape: { Rectangle },\r\n  Color,\r\n  Size,\r\n  Raster,\r\n} = paper;\r\n\r\nconst Draw = ({\r\n  drawState,\r\n  onChange = () => {},\r\n  otherStates,\r\n  drawCtrl = defaultDrawCtrl,\r\n  mode = \"draw\",\r\n  setMode = () => {},\r\n  readonly = false,\r\n  preview = false,\r\n  imgSrc,\r\n}: {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  onChange?: Setter<DrawState>;\r\n  drawCtrl?: DrawCtrl;\r\n  mode?: CtrlMode;\r\n  setMode?: Setter<CtrlMode>;\r\n  readonly?: boolean;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}) => {\r\n  const { width, height } = drawState;\r\n  const canvasEl = useRef<HTMLCanvasElement>(null);\r\n  const scope = useRef(new paper.PaperScope());\r\n  const group = useRef<paper.Path[]>();\r\n  const path = useRef<paper.Path>();\r\n  const [rect, setRect] = useState<paper.Shape.Rectangle>();\r\n  const selectGroup = useRef<paper.Group>();\r\n  const [erased, setErased] = useState(Set<string>());\r\n  const ratio = useRef(1);\r\n\r\n  let { color, finger, lineWidth, highlight, eraserWidth } = drawCtrl;\r\n\r\n  const isEventValid = (e: TouchEvent) => finger || isStylus(e);\r\n  const preventTouch = (e: TouchEvent) => {\r\n    isEventValid(e) || e.stopPropagation();\r\n  };\r\n\r\n  const updateRatio = () => {\r\n    const clientWidth = canvasEl.current?.clientWidth;\r\n    if (clientWidth) ratio.current = width / clientWidth;\r\n  };\r\n\r\n  const transformPoint = (projP: paper.Point) => {\r\n    const { center, zoom } = scope.current.view;\r\n    const viewP = scope.current.view.projectToView(projP);\r\n    const absoluteP = viewP.multiply(ratio.current);\r\n    const offsetP = new Point(width, height)\r\n      .divide(2)\r\n      .subtract(center.multiply(zoom));\r\n    return absoluteP.subtract(offsetP).divide(zoom);\r\n  };\r\n\r\n  const setupPaper = () => {\r\n    if (!canvasEl.current) return;\r\n    scope.current.setup(canvasEl.current);\r\n\r\n    const r = preview ? PREVIEW_WIDTH / width : 1;\r\n    scope.current.view.viewSize = new Size(width, height).multiply(r);\r\n    scope.current.view.scale(r, new Point(0, 0));\r\n    paintBackground(width, height);\r\n  };\r\n\r\n  const setNewRect = (e: paper.MouseEvent) => {\r\n    updateRatio();\r\n    scope.current.activate();\r\n    const point = transformPoint(e.point);\r\n    const rectangle = startSelectRect(point);\r\n    setRect(rectangle);\r\n  };\r\n\r\n  const handleDown = {\r\n    draw() {\r\n      updateRatio();\r\n      scope.current.activate();\r\n      path.current = startStroke(color, lineWidth, highlight);\r\n    },\r\n    erase() {\r\n      updateRatio();\r\n      scope.current.activate();\r\n      path.current = startStroke(\"#0003\", eraserWidth);\r\n    },\r\n    select(e: paper.MouseEvent) {\r\n      setNewRect(e);\r\n    },\r\n    selected(e: paper.MouseEvent) {\r\n      scope.current.activate();\r\n      const point = transformPoint(e.point);\r\n      if (!rect) return;\r\n      if (!point.isInside(rect.strokeBounds)) {\r\n        setNewRect(e);\r\n        setMode(\"select\");\r\n      }\r\n    },\r\n    delete() {},\r\n  }[mode];\r\n\r\n  const handleDrag = {\r\n    draw(e: paper.MouseEvent) {\r\n      if (!path.current) return;\r\n      scope.current.activate();\r\n      const point = transformPoint(e.point);\r\n      path.current.add(point);\r\n      path.current.smooth();\r\n    },\r\n    erase(e: paper.MouseEvent) {\r\n      const eraserPath = path.current;\r\n      if (!eraserPath) return;\r\n      scope.current.activate();\r\n      const point = transformPoint(e.point);\r\n      eraserPath.add(point);\r\n      eraserPath.smooth();\r\n\r\n      const newErased = group.current\r\n        ?.filter((p) => !erased.has(p.name))\r\n        .filter((p) => checkErase(p, eraserPath))\r\n        .map((p) => p.name);\r\n      newErased && setErased((prev) => prev.concat(newErased));\r\n    },\r\n    select(e: paper.MouseEvent) {\r\n      if (!rect) return;\r\n      scope.current.activate();\r\n      const delta = e.delta.multiply(ratio.current);\r\n      rect.size = rect.size.add(new Size(delta.x, delta.y));\r\n      rect.position = rect.position.add(delta.divide(2));\r\n    },\r\n    selected(e: paper.MouseEvent) {\r\n      const sGroup = selectGroup.current;\r\n      if (!rect || !sGroup) return;\r\n      const delta = e.delta.multiply(ratio.current);\r\n      rect.position = rect.position.add(delta);\r\n      sGroup.position = sGroup.position.add(delta);\r\n    },\r\n    delete() {},\r\n  }[mode];\r\n\r\n  const handleUp = {\r\n    erase() {\r\n      if (!path.current) return;\r\n      scope.current.activate();\r\n      path.current.remove();\r\n      onChange((prev) => DrawState.eraseStrokes(prev, erased.toArray()));\r\n      setErased(Set());\r\n    },\r\n    draw() {\r\n      if (!path.current || path.current.segments.length === 0) return;\r\n      path.current.simplify();\r\n      if (path.current.segments.length === 0) return;\r\n      const pathData = path.current.exportJSON();\r\n      path.current.remove();\r\n      onChange((prev) => DrawState.addStroke(prev, pathData));\r\n    },\r\n    select() {\r\n      if (!rect || rect.size.width < 10 || rect.size.height < 10) {\r\n        return setRect(undefined);\r\n      }\r\n      scope.current.activate();\r\n\r\n      const bounds = rect.strokeBounds;\r\n      selectGroup.current = new Group();\r\n      group.current?.forEach((p) => {\r\n        if (!(p instanceof paper.Path)) return;\r\n        if (p.isInside(bounds) || p.intersects(rect)) {\r\n          selectGroup.current?.addChild(p);\r\n        }\r\n      });\r\n      selectGroup.current.shadowColor = new Color(\"#0005\");\r\n      selectGroup.current.shadowBlur = 10;\r\n      setMode(\"selected\");\r\n    },\r\n    selected() {},\r\n    delete() {},\r\n  }[mode];\r\n\r\n  useEffect(() => {\r\n    setupPaper();\r\n    scope.current.activate();\r\n    const cvs = canvasEl.current;\r\n    return () => void (cvs && releaseCanvas(cvs));\r\n  }, []);\r\n\r\n  const handlePaper = () => {\r\n    if (readonly) return;\r\n    scope.current.view.onMouseDown = handleDown;\r\n    scope.current.view.onMouseDrag = handleDrag;\r\n    scope.current.view.onMouseUp = handleUp;\r\n  };\r\n  useEffect(handlePaper);\r\n\r\n  useEffect(() => {\r\n    if (!imgSrc) return;\r\n    const img = new Image();\r\n    img.src = imgSrc;\r\n    let raster: paper.Raster;\r\n\r\n    img.onload = () => {\r\n      scope.current.activate();\r\n      raster = new Raster(img);\r\n      raster.position = scope.current.view.center;\r\n      let r = width / img.width;\r\n      raster.scale(r);\r\n      raster.sendToBack();\r\n      raster.parent.getItem({ name: \"BGRECT\" })?.sendToBack();\r\n    };\r\n\r\n    return () => void raster?.remove();\r\n  }, [imgSrc]);\r\n\r\n  const mergedStrokes = useMemo(() => {\r\n    if (!otherStates) return drawState.getStrokeList();\r\n    else return DrawState.mergeStates([drawState, ...otherStates]);\r\n  }, [drawState, otherStates]);\r\n\r\n  useEffect(() => {\r\n    scope.current.activate();\r\n    group.current = [];\r\n    const otherGroup: paper.Path[] = [];\r\n\r\n    mergedStrokes.forEach((stroke) => {\r\n      const passedGroup = drawState.hasStroke(stroke.uid)\r\n        ? group.current\r\n        : otherGroup;\r\n      paintStroke(stroke, passedGroup, erased);\r\n    });\r\n\r\n    return () => {\r\n      group.current?.forEach((item) => item.remove());\r\n      otherGroup.forEach((item) => item.remove());\r\n    };\r\n  }, [mergedStrokes, erased]);\r\n\r\n  const updateMutation = () => {\r\n    const sg = selectGroup.current;\r\n    if (!sg) return;\r\n    sg.shadowColor = null;\r\n    const list = sg.children;\r\n    if (!list.length) return;\r\n\r\n    const mutations: Mutation[] = list.map((p) => [\r\n      p.name,\r\n      p.exportJSON(),\r\n    ]);\r\n    onChange((prev) => DrawState.mutateStroke(prev, mutations));\r\n  };\r\n\r\n  const deleteSelected = () => {\r\n    const list = selectGroup.current?.children;\r\n    if (!list?.length) return;\r\n    const deleted = list.map((item) => item.name);\r\n    onChange((prev) => DrawState.eraseStrokes(prev, deleted));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (mode === \"select\") {\r\n      //\r\n    } else if (mode === \"selected\") {\r\n      if (rect?.strokeColor) rect.strokeColor.alpha /= 2;\r\n      scope.current.activate();\r\n      return updateMutation;\r\n    } else if (mode === \"delete\") {\r\n      deleteSelected();\r\n      setMode(\"select\");\r\n      setRect(undefined);\r\n    } else {\r\n      setRect(undefined);\r\n    }\r\n  }, [mode]);\r\n\r\n  useEffect(() => {\r\n    if (!rect) return;\r\n    let id = 0;\r\n    const moveDash = () => {\r\n      rect.dashOffset += 3;\r\n      id = requestAnimationFrame(moveDash);\r\n    };\r\n    moveDash();\r\n    return () => {\r\n      rect.remove();\r\n      cancelAnimationFrame(id);\r\n    };\r\n  }, [rect]);\r\n\r\n  usePinch(\r\n    ({ memo, offset, last, first, origin }) => {\r\n      if (!canvasEl.current) return;\r\n\r\n      let lastScale, lastOX, lastOY, osX, osY: number;\r\n      if (first || !memo) {\r\n        updateRatio();\r\n        scope.current.activate();\r\n        const { x, y } = canvasEl.current.getBoundingClientRect();\r\n        [lastScale, [lastOX, lastOY], [osX, osY]] = [\r\n          1,\r\n          [origin[0] - x, origin[1] - y],\r\n          [x, y],\r\n        ];\r\n      } else {\r\n        [lastScale, [lastOX, lastOY], [osX, osY]] = memo;\r\n      }\r\n\r\n      const { view } = scope.current;\r\n\r\n      const scale = first ? 1 : offset[0] / lastScale;\r\n      const r = ratio.current;\r\n      const [oX, oY] = [origin[0] - osX, origin[1] - osY];\r\n      const originViewP = new Point(oX, oY).multiply(r);\r\n      const originProjP = view.viewToProject(originViewP);\r\n      view.scale(scale, originProjP);\r\n\r\n      const [dX, dY] = [oX - lastOX, oY - lastOY];\r\n      const transP = new Point(dX, dY).multiply(r / offset[0]);\r\n      view.translate(transP);\r\n\r\n      if (!last) return [offset[0], [oX, oY], [osX, osY]];\r\n      putCenterBack(view);\r\n    },\r\n    {\r\n      scaleBounds: { max: 5, min: 1 },\r\n      target: canvasEl,\r\n      enabled: !finger,\r\n    }\r\n  );\r\n\r\n  usePreventGesture();\r\n  return (\r\n    <canvas\r\n      ref={canvasEl}\r\n      className=\"draw-canvas\"\r\n      data-paper-hidpi={false}\r\n      onTouchStartCapture={preventTouch}\r\n      onTouchMoveCapture={preventTouch}\r\n    />\r\n  );\r\n};\r\n\r\nexport default React.memo(Draw);\r\n\r\nconst paintStroke = (\r\n  stroke: Stroke,\r\n  group?: paper.Path[],\r\n  erased?: Set<string>\r\n) => {\r\n  let { pathData, uid } = stroke;\r\n  try {\r\n    const path = new Path();\r\n    path.importJSON(pathData);\r\n    path.name = uid;\r\n    if (erased?.has(uid)) path.opacity /= 2;\r\n    group?.push(path);\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n\r\nconst getCheckPoints = (() => {\r\n  const cache = new WeakMap<paper.Segment, paper.Point[]>();\r\n  return (segment: paper.Segment, width: number) => {\r\n    const cached = cache.get(segment);\r\n    if (cached) return cached;\r\n\r\n    const { point } = segment;\r\n    const prevPoint = segment.previous?.point;\r\n    if (!prevPoint) return [];\r\n    const delta = point.subtract(prevPoint);\r\n    const times = (delta.length / width) * 2;\r\n    const checkPoints: paper.Point[] = [];\r\n    for (let i = 0; i < times; i += 1) {\r\n      checkPoints.push(point.subtract(delta.multiply(i / times)));\r\n    }\r\n    cache.set(segment, checkPoints);\r\n    return checkPoints;\r\n  };\r\n})();\r\n\r\nconst checkErase = (checkedPath: paper.Path, eraserPath: paper.Path) => {\r\n  const curveBound = eraserPath.lastSegment.curve?.strokeBounds;\r\n  if (\r\n    !(checkedPath instanceof paper.Path) ||\r\n    !curveBound?.intersects(checkedPath.strokeBounds)\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  if (eraserPath.intersects(checkedPath)) return true;\r\n\r\n  const { strokeWidth, lastSegment } = eraserPath;\r\n  const checkPoints = getCheckPoints(lastSegment, strokeWidth);\r\n  return checkPoints.some((cPoint) => {\r\n    const d = checkedPath.getNearestPoint(cPoint)?.getDistance(cPoint);\r\n    return d && d < (checkedPath.strokeWidth + strokeWidth) / 2;\r\n  });\r\n};\r\n\r\nconst paintBackground = (width: number, height: number) => {\r\n  const bgRect = new Rectangle(new Point(0, 0), new Point(width, height));\r\n  bgRect.fillColor = new Color(\"#fff\");\r\n  bgRect.name = \"BGRECT\";\r\n  bgRect.sendToBack();\r\n  bgRect.strokeColor = new Color(\"#ddd\");\r\n  bgRect.strokeWidth = 1;\r\n  return bgRect;\r\n};\r\n\r\nconst startSelectRect = (point: paper.Point) => {\r\n  const rect = new Rectangle(point, new Size(0, 0));\r\n  rect.strokeColor = new Color(\"#1890ff\");\r\n  rect.strokeWidth = 3;\r\n  rect.dashOffset = 0;\r\n  rect.dashArray = [30, 20];\r\n  return rect;\r\n};\r\n\r\nconst startStroke = (color: string, lineWidth: number, highlight = false) => {\r\n  const path = new Path();\r\n  const strokeColor = new Color(color);\r\n  if (highlight) {\r\n    strokeColor.alpha /= 2;\r\n    path.blendMode = \"multiply\";\r\n  }\r\n  path.strokeColor = strokeColor;\r\n  path.strokeWidth = lineWidth;\r\n  path.strokeJoin = \"round\";\r\n  path.strokeCap = \"round\";\r\n  return path;\r\n};\r\n\r\nconst getCenterTranslate = (view: paper.View) => {\r\n  const { center, zoom } = view;\r\n  const { height, width } = view.viewSize;\r\n  const dX = (width * (zoom - 1)) / zoom / 2;\r\n  const dY = (height * (zoom - 1)) / zoom / 2;\r\n  const [minX, maxX, minY, maxY] = [\r\n    width / 2 - dX,\r\n    width / 2 + dX,\r\n    height / 2 - dY,\r\n    height / 2 + dY,\r\n  ];\r\n\r\n  const { x, y } = center;\r\n  const deltaX = x < minX ? minX - x : x > maxX ? maxX - x : 0;\r\n  const deltaY = y < minY ? minY - y : y > maxY ? maxY - y : 0;\r\n  return [deltaX, deltaY];\r\n};\r\n\r\nconst putCenterBack = (view: paper.View) => {\r\n  const [deltaX, deltaY] = getCenterTranslate(view);\r\n  let count = 10;\r\n  const dP = new Point(deltaX, deltaY).divide(count);\r\n  const move = () => {\r\n    view.center = view.center.add(dP);\r\n    if (--count > 0) requestAnimationFrame(move);\r\n  };\r\n  move();\r\n};\r\n","import { TouchEvent } from \"react\";\r\n\r\nexport type iOSTouch = Touch & {\r\n  force?: number;\r\n  touchType?: \"stylus\" | \"direct\";\r\n};\r\n\r\nexport function isStylus(e: TouchEvent) {\r\n  const touch = e.touches[0] as iOSTouch;\r\n  return touch?.touchType === \"stylus\";\r\n}\r\n","import { Dispatch, SetStateAction, useEffect, useMemo, useRef } from \"react\";\r\n\r\nexport function useObjectUrl(obj: Blob | MediaSource | undefined) {\r\n  const url = useMemo(\r\n    () => (obj ? URL.createObjectURL(obj) : undefined),\r\n    [obj]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const prevUrl = url || \"\";\r\n    return () => URL.revokeObjectURL(prevUrl);\r\n  }, [url]);\r\n\r\n  return url;\r\n}\r\n\r\nexport function useMounted() {\r\n  const _mounted = useRef(false);\r\n\r\n  useEffect(() => {\r\n    _mounted.current = true;\r\n    return () => {\r\n      _mounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  return _mounted;\r\n}\r\n\r\nexport function usePreventGesture() {\r\n  useEffect(() => {\r\n    const handler = (e: Event) => e.preventDefault();\r\n    document.addEventListener(\"gesturestart\", handler);\r\n    document.addEventListener(\"gesturechange\", handler);\r\n    document.addEventListener(\"gestureend\", handler);\r\n    return () => {\r\n      document.removeEventListener(\"gesturestart\", handler);\r\n      document.removeEventListener(\"gesturechange\", handler);\r\n      document.removeEventListener(\"gestureend\", handler);\r\n    };\r\n  }, []);\r\n}\r\n\r\nexport type Setter<T> = Dispatch<SetStateAction<T>>;\r\n","import React, {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  useCallback,\r\n  createContext,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport {\r\n  DrawCtrl,\r\n  CtrlMode,\r\n  getDrawCtrl,\r\n  saveDrawCtrl,\r\n  defaultDrawCtrl,\r\n} from \"../../lib/draw/drawCtrl\";\r\nimport { createPage, NoteInfo, NotePage } from \"../../lib/note/note\";\r\nimport { loadNote, editNoteData } from \"../../lib/note/archive\";\r\nimport { AddPageButton, showPageDelMsg } from \"./ReaderTools\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { updatePages } from \"../../lib/network/http\";\r\nimport { useBeforeunload } from \"react-beforeunload\";\r\nimport { TeamState } from \"../../lib/draw/TeamState\";\r\nimport { DrawState } from \"../../lib/draw/DrawState\";\r\nimport { Setter, useMounted } from \"../../lib/hooks\";\r\nimport { StateSet } from \"../../lib/draw/StateSet\";\r\nimport { insertAfter } from \"../../lib/array\";\r\nimport { debounce, last } from \"lodash\";\r\nimport { Map, Set } from \"immutable\";\r\nimport DrawTools from \"./DrawTools\";\r\nimport { TeamCtx } from \"./Team\";\r\nimport Draw from \"../draw/Draw\";\r\nimport { message } from \"antd\";\r\nimport \"./reader.sass\";\r\n\r\nexport const ReaderStateCtx = createContext({\r\n  noteID: \"\",\r\n  noteInfo: undefined as NoteInfo | undefined,\r\n  stateSet: undefined as StateSet | undefined,\r\n  teamState: undefined as TeamState | undefined,\r\n  pageRec: undefined as Record<string, NotePage> | undefined,\r\n  pageOrder: undefined as string[] | undefined,\r\n  saved: true,\r\n  teamOn: false,\r\n  inviewPages: Set<string>(),\r\n  refRec: {} as Record<string, HTMLElement>,\r\n  drawCtrl: defaultDrawCtrl,\r\n  mode: \"draw\" as CtrlMode,\r\n});\r\n\r\nexport const ReaderMethodCtx = createContext({\r\n  scrollPage: (pageID: string) => {},\r\n  switchPageMarked: (pageID: string) => {},\r\n  setPageState: (uid: string, ds: DrawState) => {},\r\n  addPage: (prevpageID: string, copy?: boolean) => {},\r\n  addFinalPage: () => {},\r\n  deletePage: (pageID: string) => {},\r\n  saveReorder: async (order: string[], push: boolean) => {},\r\n  setInviewPages: (() => {}) as Setter<Set<string>>,\r\n  setMode: (() => {}) as Setter<CtrlMode>,\r\n  setDrawCtrl: (() => {}) as Setter<DrawCtrl>,\r\n});\r\n\r\nexport default function Reader({ teamOn }: { teamOn: boolean }) {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const nav = useNavigate();\r\n\r\n  const [pageRec, setPageRec] = useState<Record<string, NotePage>>();\r\n  const [noteInfo, setNoteInfo] = useState<NoteInfo>();\r\n  const [stateSet, setStateSet] = useState<StateSet>();\r\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\r\n  const [mode, setMode] = useState<CtrlMode>(\"draw\");\r\n  const [saved, setSaved] = useState(true);\r\n  const [inviewPages, setInviewPages] = useState(Set<string>());\r\n  const [pageOrder, setPageOrder] = useState<string[]>();\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  const refRec = useRef<Record<string, HTMLElement>>({});\r\n  const mounted = useMounted();\r\n\r\n  const { teamState, pushOperation, teamUpdate, pushNewPage, pushReorder } =\r\n    useContext(TeamCtx);\r\n\r\n  const loadNotePages = async () => {\r\n    const storedNote = await loadNote(noteID);\r\n    if (!storedNote) {\r\n      message.error(\"Note not found\");\r\n      return nav(\"/\");\r\n    }\r\n    const { pageRec, pdf, pageOrder, ...noteInfo } = storedNote;\r\n    setPageRec(pageRec);\r\n    setPageOrder(pageOrder);\r\n    setNoteInfo(noteInfo);\r\n    setStateSet(StateSet.createFromPages(pageRec));\r\n    setDrawCtrl(await getDrawCtrl());\r\n    setLoaded(true);\r\n    if (teamOn) updatePages(noteID);\r\n  };\r\n\r\n  const debouncedSave = useCallback(\r\n    debounce(async (pr: Record<string, NotePage>) => {\r\n      const canvas = document.querySelector(\"canvas\");\r\n      const data = canvas?.toDataURL();\r\n      await editNoteData(noteID, { pageRec: pr, thumbnail: data });\r\n      mounted.current && setSaved(true);\r\n    }, 2000),\r\n    []\r\n  );\r\n  const instantSave = debouncedSave.flush;\r\n\r\n  useLayoutEffect(() => {\r\n    loadNotePages();\r\n    return () => void instantSave();\r\n  }, [noteID, teamOn]);\r\n\r\n  useBeforeunload(instantSave);\r\n\r\n  useEffect(() => {\r\n    if (!noteInfo) return;\r\n    document.title = noteInfo.name + \" - Multibility\";\r\n  }, [noteInfo]);\r\n\r\n  useEffect(() => {\r\n    loaded && saveDrawCtrl(drawCtrl);\r\n  }, [drawCtrl]);\r\n\r\n  useEffect(() => {\r\n    if (!stateSet?.lastOp) return;\r\n    pushOperation(stateSet.lastOp);\r\n  }, [stateSet]);\r\n\r\n  useEffect(() => {\r\n    if (!pageRec || !loaded) return;\r\n    debouncedSave(pageRec);\r\n    setSaved(false);\r\n  }, [pageRec]);\r\n\r\n  useEffect(() => {\r\n    if (!teamUpdate) return;\r\n    const { type, pageOrder } = teamUpdate;\r\n    if (type === \"reorder\") {\r\n      saveReorder(pageOrder);\r\n\r\n      if (!teamUpdate.deleted) return;\r\n      showPageDelMsg(() => {\r\n        saveReorder(teamUpdate.prevOrder, true);\r\n      });\r\n    } else if (type === \"newPage\") {\r\n      saveReorder(pageOrder);\r\n      let { pageID, newPage } = teamUpdate;\r\n      setPageRec((prev) => prev && { ...prev, [pageID]: newPage });\r\n      setStateSet((prev) => prev?.addState(pageID, newPage));\r\n    }\r\n  }, [teamUpdate]);\r\n\r\n  const updatePageRec = (pageID: string, ds: DrawState) => {\r\n    const state = DrawState.flaten(ds);\r\n    setPageRec(\r\n      (prev) => prev && { ...prev, [pageID]: { ...prev[pageID], state } }\r\n    );\r\n  };\r\n\r\n  const setPageState = useCallback((pageID: string, ds: DrawState) => {\r\n    setStateSet((prev) => prev?.setState(pageID, ds));\r\n    updatePageRec(pageID, ds);\r\n  }, []);\r\n\r\n  const switchPageMarked = (pageID: string) => {\r\n    const page = pageRec && pageRec[pageID];\r\n    if (!page) return;\r\n    const marked = !Boolean(page.marked);\r\n    setPageRec(\r\n      (prev) => prev && { ...prev, [pageID]: { ...prev[pageID], marked } }\r\n    );\r\n  };\r\n\r\n  const handleUndo = () => {\r\n    setStateSet((prev) => {\r\n      if (!prev) return;\r\n      const newSS = prev.undo();\r\n      const lastDS = newSS.getLastDS();\r\n      lastDS && updatePageRec(...lastDS);\r\n      return newSS;\r\n    });\r\n  };\r\n\r\n  const handleRedo = () => {\r\n    setStateSet((prev) => {\r\n      if (!prev) return;\r\n      const newSS = prev.redo();\r\n      const lastDS = newSS.getLastDS();\r\n      lastDS && updatePageRec(...lastDS);\r\n      return newSS;\r\n    });\r\n  };\r\n\r\n  const scrollPage = (pageID: string) => {\r\n    refRec.current[pageID]?.scrollIntoView();\r\n  };\r\n\r\n  const saveReorder = async (newOrder: string[], push = false) => {\r\n    setPageOrder(newOrder);\r\n    await editNoteData(noteID, { pageOrder: newOrder });\r\n    await instantSave();\r\n    push && pushReorder(newOrder);\r\n  };\r\n\r\n  const addPage = (prevpageID: string, copy = false) => {\r\n    if (!pageOrder) return;\r\n    const prevPage = copy ? pageRec && pageRec[prevpageID] : undefined;\r\n    const [pageID, newPage] = createPage(prevPage);\r\n    const newOrder = insertAfter(pageOrder, prevpageID, pageID);\r\n    pushNewPage(newOrder, pageID, newPage);\r\n    saveReorder(newOrder);\r\n    setPageRec((prev) => prev && { ...prev, [pageID]: newPage });\r\n    setStateSet((prev) => prev?.addState(pageID, newPage));\r\n  };\r\n\r\n  const addFinalPage = () => {\r\n    const lastpageID = last(pageOrder);\r\n    lastpageID && addPage(lastpageID);\r\n  };\r\n\r\n  const deletePage = (pageID: string) => {\r\n    const newOrder = pageOrder?.filter((id) => id !== pageID);\r\n    newOrder && saveReorder(newOrder, true);\r\n  };\r\n\r\n  const renderResult = (\r\n    <div className=\"reader container\">\r\n      <DrawTools\r\n        instantSave={instantSave}\r\n        handleUndo={handleUndo}\r\n        handleRedo={handleRedo}\r\n      />\r\n      <main>\r\n        {pageOrder?.map((uid) => (\r\n          <PageContainer uid={uid} key={uid} />\r\n        ))}\r\n        <AddPageButton />\r\n      </main>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <ReaderStateCtx.Provider\r\n      value={{\r\n        noteID,\r\n        noteInfo,\r\n        stateSet,\r\n        teamState,\r\n        saved,\r\n        teamOn,\r\n        pageRec,\r\n        pageOrder,\r\n        inviewPages,\r\n        refRec: refRec.current,\r\n        mode,\r\n        drawCtrl,\r\n      }}\r\n    >\r\n      <ReaderMethodCtx.Provider\r\n        value={{\r\n          scrollPage,\r\n          setInviewPages,\r\n          switchPageMarked,\r\n          setPageState,\r\n          addPage,\r\n          addFinalPage,\r\n          deletePage,\r\n          setMode,\r\n          setDrawCtrl,\r\n          saveReorder,\r\n        }}\r\n      >\r\n        {renderResult}\r\n      </ReaderMethodCtx.Provider>\r\n    </ReaderStateCtx.Provider>\r\n  );\r\n}\r\n\r\nconst PageContainer: FC<{ uid: string }> = ({ uid }) => {\r\n  const { pageRec, stateSet, teamState } = useContext(ReaderStateCtx);\r\n  const { setPageState } = useContext(ReaderMethodCtx);\r\n\r\n  const page = pageRec && pageRec[uid];\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStateMap = teamState?.getOnePageState(uid);\r\n  const updateState = useCallback(\r\n    (ds: DrawState) => setPageState(uid, ds),\r\n    [uid, setPageState]\r\n  );\r\n  if (!page || !drawState) return null;\r\n\r\n  return (\r\n    <PageWrapper\r\n      drawState={drawState}\r\n      teamStateMap={teamStateMap}\r\n      updateState={updateState}\r\n      pdfIndex={page.pdfIndex}\r\n      uid={uid}\r\n    />\r\n  );\r\n};\r\n\r\nexport const PageWrapper = ({\r\n  thumbnail,\r\n  drawState,\r\n  teamStateMap,\r\n  updateState,\r\n  pdfIndex,\r\n  preview = false,\r\n  uid,\r\n}: {\r\n  uid: string;\r\n  drawState: DrawState;\r\n  teamStateMap?: Map<string, DrawState>;\r\n  thumbnail?: string;\r\n  pdfIndex?: number;\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n}) => {\r\n  const { setInviewPages } = useContext(ReaderMethodCtx);\r\n  const { refRec, noteID } = useContext(ReaderStateCtx);\r\n  const [fullImg, setFullImg] = useState<string>();\r\n  const [visibleRef, visible] = useInView({ delay: 100 });\r\n\r\n  const { height, width } = drawState;\r\n  const ratio = height / width;\r\n\r\n  const handleRef = useCallback(\r\n    (e: HTMLDivElement | null) => {\r\n      if (!e) return;\r\n      visibleRef(e);\r\n      if (!preview && refRec) refRec[uid] = e;\r\n    },\r\n    [refRec]\r\n  );\r\n\r\n  const loadImage = useCallback(\r\n    (() => {\r\n      let called = false;\r\n      return async () => {\r\n        if (preview || !pdfIndex || called) return;\r\n        called = true;\r\n        const { getOnePageImage } = await import(\"../../lib/note/pdfImage\");\r\n        setFullImg(await getOnePageImage(noteID, pdfIndex));\r\n      };\r\n    })(),\r\n    [preview, pdfIndex]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (preview) return;\r\n    if (visible) {\r\n      loadImage();\r\n      setInviewPages((prev) => prev.add(uid));\r\n    } else {\r\n      setInviewPages((prev) => prev.delete(uid));\r\n    }\r\n  }, [visible, loadImage, preview]);\r\n\r\n  const { ignores } = useContext(TeamCtx);\r\n  const otherStates = useMemo(\r\n    () => teamStateMap && Array.from(teamStateMap.deleteAll(ignores).values()),\r\n    [teamStateMap, ignores]\r\n  );\r\n\r\n  const imageLoaded = fullImg || !pdfIndex;\r\n  const drawShow = visible && imageLoaded;\r\n  const maskShow = Boolean(preview || !imageLoaded);\r\n\r\n  return (\r\n    <section\r\n      ref={handleRef}\r\n      className=\"note-page\"\r\n      style={{ paddingTop: `${ratio * 100}%` }}\r\n    >\r\n      {drawShow && (\r\n        <DrawWrapper\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          updateState={updateState}\r\n          imgSrc={fullImg || thumbnail || undefined}\r\n          preview={preview}\r\n        />\r\n      )}\r\n      {maskShow && <div className=\"mask\" />}\r\n    </section>\r\n  );\r\n};\r\nPageWrapper.displayName = \"PageWrapper\";\r\n\r\nconst DrawWrapper = ({\r\n  drawState,\r\n  updateState,\r\n  otherStates,\r\n  preview = false,\r\n  imgSrc,\r\n}: {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}) => {\r\n  const { mode, drawCtrl } = useContext(ReaderStateCtx);\r\n  const { setMode } = useContext(ReaderMethodCtx);\r\n\r\n  const handleChange = useCallback(\r\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\r\n      if (!updateState) return;\r\n      let ds = arg instanceof DrawState ? arg : arg(drawState);\r\n      updateState(ds);\r\n    },\r\n    [updateState, drawState]\r\n  );\r\n\r\n  return (\r\n    <div className=\"page-draw\">\r\n      {preview ? (\r\n        <Draw\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          imgSrc={imgSrc}\r\n          readonly\r\n          preview\r\n        />\r\n      ) : (\r\n        <Draw\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          onChange={handleChange}\r\n          imgSrc={imgSrc}\r\n          drawCtrl={drawCtrl}\r\n          mode={mode}\r\n          setMode={setMode}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nDrawWrapper.displayName = \"DrawWrapper\";\r\n","import { Map, Record } from \"immutable\";\nimport { NotePage, TeamPage, TeamPageInfo } from \"../note/note\";\nimport { DrawState, WIDTH } from \"./DrawState\";\nimport { SetOperation } from \"./StateSet\";\n\ninterface TeamStateRecordType {\n  pageStates: Map<string, Map<string, DrawState>>;\n  pageInfos: Map<string, TeamPageInfo>;\n}\n\nconst defaultRecord: Readonly<TeamStateRecordType> = {\n  pageStates: Map(),\n  pageInfos: Map(),\n};\n\ntype TeamStateRecord = Record<TeamStateRecordType>;\nconst defaultFactory = Record(defaultRecord);\n\nexport class TeamState {\n  constructor(private immutable: TeamStateRecord) {}\n\n  getImmutable() {\n    return this.immutable;\n  }\n\n  getPageStates() {\n    return this.getImmutable().get(\"pageStates\");\n  }\n\n  getPageInfos() {\n    return this.getImmutable().get(\"pageInfos\");\n  }\n\n  getOneState(pageID: string, userID: string) {\n    return this.getPageStates().get(pageID)?.get(userID);\n  }\n\n  getOnePageState(pageID: string) {\n    return this.getPageStates().get(pageID);\n  }\n\n  getPageRatio(pageID: string) {\n    return this.getPageInfos().get(pageID)?.ratio;\n  }\n\n  includesPage(pageID: string) {\n    return this.getPageStates().has(pageID);\n  }\n\n  setState(pageID: string, userID: string, drawState: DrawState) {\n    const pageMap = this.getPageStates().get(pageID);\n    if (!pageMap) return this;\n    return new TeamState(\n      this.getImmutable().update(\"pageStates\", (m) =>\n        m.set(pageID, pageMap.set(userID, drawState))\n      )\n    );\n  }\n\n  static createFromTeamPages(\n    teamPages: globalThis.Record<string, TeamPage>,\n    width = WIDTH\n  ) {\n    let record = defaultFactory();\n    Object.entries(teamPages).forEach(([pageID, teamPage]) => {\n      const { states, ratio } = teamPage;\n      const pageMap = Map(\n        Object.entries(states).map(([userID, flatState]) => [\n          userID,\n          DrawState.loadFromFlat(flatState, width, width * ratio),\n        ])\n      );\n      record = record\n        .update(\"pageStates\", (m) => m.set(pageID, pageMap))\n        .update(\"pageInfos\", (m) => m.set(pageID, { ratio }));\n    });\n    return new TeamState(record);\n  }\n\n  addPage(pageID: string, notePage: NotePage) {\n    const { ratio } = notePage;\n    return new TeamState(\n      this.getImmutable()\n        .update(\"pageStates\", (m) => m.set(pageID, Map()))\n        .update(\"pageInfos\", (m) => m.set(pageID, { ratio }))\n    );\n  }\n\n  pushOperation(setOp: SetOperation, userID: string, width = WIDTH) {\n    const { pageID, ...op } = setOp;\n    const ratio = this.getPageRatio(pageID);\n    if (!this.includesPage(pageID) || !ratio) return this;\n    const prevDs =\n      this.getOneState(pageID, userID) ||\n      DrawState.createEmpty(width, width * ratio);\n\n    const ds = DrawState.pushOperation(prevDs, op);\n    return this.setState(pageID, userID, ds);\n  }\n\n  resetUser(userID: string, pageRec: globalThis.Record<string, NotePage>) {\n    let newTS: TeamState = this;\n    for (let [pageID, { state, ratio }] of Object.entries(pageRec)) {\n      const prevDS = newTS.getOneState(pageID, userID);\n      if (!prevDS) continue;\n      const { width } = prevDS;\n      newTS = newTS.setState(\n        pageID,\n        userID,\n        DrawState.loadFromFlat(state, width, width * ratio)\n      );\n    }\n    return newTS;\n  }\n}\n","import { io } from \"socket.io-client\";\r\nimport { getUserID, getUserName } from \"../user\";\r\nimport { BASE_URL } from \"./http\";\r\n\r\nexport const IoFactory = (noteID: string) => {\r\n  return () =>\r\n    io(BASE_URL, {\r\n      query: {\r\n        userID: getUserID(),\r\n        userName: getUserName(),\r\n        noteID,\r\n      },\r\n    });\r\n};\r\n","import { message } from \"antd\";\r\nimport React, { useState, useEffect, createContext } from \"react\";\r\nimport { getTeamNoteState, loadTeamNoteInfo } from \"../../lib/network/http\";\r\nimport { LoginOutlined, LogoutOutlined } from \"@ant-design/icons\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { SetOperation } from \"../../lib/draw/StateSet\";\r\nimport { TeamState } from \"../../lib/draw/TeamState\";\r\nimport { getUserID, UserInfo } from \"../../lib/user\";\r\nimport { IoFactory } from \"../../lib/network/io\";\r\nimport { NotePage } from \"../../lib/note/note\";\r\nimport { Set } from \"immutable\";\r\nimport Reader from \"./Reader\";\r\nimport { Setter } from \"../../lib/hooks\";\r\n\r\nexport const TeamCtx = createContext({\r\n  code: -2,\r\n  connected: false,\r\n  ignores: Set<string>(),\r\n  userRec: {} as Record<string, UserInfo>,\r\n  teamState: undefined as TeamState | undefined,\r\n  teamUpdate: undefined as undefined | TeamUpdate,\r\n  loadInfo: async () => false,\r\n  pushOperation: (op: SetOperation) => {},\r\n  pushReorder: (pageOrder: string[]) => {},\r\n  pushNewPage: (pageOrder: string[], pageID: string, newPage: NotePage) => {},\r\n  setIgnores: (() => {}) as Setter<Set<string>>,\r\n  resetIO: () => {},\r\n});\r\n\r\ninterface ReorderInfo {\r\n  pageOrder: string[];\r\n  prevOrder: string[];\r\n  deleted: boolean;\r\n}\r\n\r\ninterface NewPageInfo {\r\n  pageOrder: string[];\r\n  pageID: string;\r\n  newPage: NotePage;\r\n}\r\n\r\ntype TeamUpdate =\r\n  | ({\r\n      type: \"reorder\";\r\n    } & ReorderInfo)\r\n  | ({\r\n      type: \"newPage\";\r\n    } & NewPageInfo);\r\n\r\nexport default function Team() {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const [teamState, setTeamState] = useState<TeamState>();\r\n  const [code, setCode] = useState(-2);\r\n  const [userRec, setUserRec] = useState<Record<string, UserInfo>>({});\r\n  const [ignores, setIgnores] = useState(Set<string>());\r\n  const [io, setIO] = useState(IoFactory(noteID));\r\n  const [teamUpdate, setTeamUpdate] = useState<TeamUpdate>();\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [connected, setConnected] = useState(false);\r\n  const nav = useNavigate();\r\n\r\n  const loadState = async () => {\r\n    const teamNote = await getTeamNoteState(noteID);\r\n    if (!teamNote) {\r\n      message.error(\"Failed loading the team note state\");\r\n      return false;\r\n    }\r\n    setTeamState(TeamState.createFromTeamPages(teamNote));\r\n    return true;\r\n  };\r\n\r\n  const loadInfo = async () => {\r\n    const info = await loadTeamNoteInfo(noteID);\r\n    if (!info) {\r\n      message.error(\"Failed loading the team note info\");\r\n      return false;\r\n    }\r\n    setCode(info.code);\r\n    return true;\r\n  };\r\n\r\n  const roomInit = async () => {\r\n    message.loading({\r\n      content: \"Loading team note...\",\r\n      duration: 0,\r\n      key: \"TEAM_LOADING\",\r\n    });\r\n    if (!((await loadInfo()) && (await loadState()))) {\r\n      message.destroy(\"TEAM_LOADING\");\r\n      return nav(\"/\");\r\n    }\r\n    message.destroy(\"TEAM_LOADING\");\r\n    setLoaded(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    io.compress(true).on(\"push\", ({ operation, userID }) => {\r\n      setTeamState((prev) => prev?.pushOperation(operation, userID));\r\n    });\r\n\r\n    io.on(\"join\", ({ joined, members }) => {\r\n      const { userID, userName } = joined;\r\n      setUserRec(members);\r\n      if (userID === getUserID()) return;\r\n      message.destroy(userID);\r\n      message.success({\r\n        content: `${userName} joined room`,\r\n        icon: <LoginOutlined />,\r\n        key: userID,\r\n      });\r\n    });\r\n\r\n    io.on(\"rejoin\", ({ members }) => setUserRec(members));\r\n\r\n    io.on(\"leave\", ({ leaved, members }) => {\r\n      const { userID, userName } = leaved;\r\n      setUserRec(members);\r\n      if (userID === getUserID()) return io.emit(\"join\");\r\n      message.destroy(userID);\r\n      message.warning({\r\n        content: `${userName} leaved room`,\r\n        icon: <LogoutOutlined />,\r\n        key: userID,\r\n      });\r\n    });\r\n\r\n    io.on(\"reorder\", (info: ReorderInfo) => {\r\n      setTeamUpdate({ type: \"reorder\", ...info });\r\n    });\r\n\r\n    io.on(\"newPage\", (info: NewPageInfo) => {\r\n      const { pageID, newPage } = info;\r\n      setTeamState((prev) => prev?.addPage(pageID, newPage));\r\n      setTeamUpdate({ type: \"newPage\", ...info });\r\n    });\r\n\r\n    io.on(\"reset\", ({ userID, pageRec }) => {\r\n      if (userID === getUserID()) return;\r\n      setTeamState((prev) => prev?.resetUser(userID, pageRec));\r\n    });\r\n    io.connect();\r\n\r\n    io.on('connect_error', console.error)\r\n    io.on(\"connect\", () => setConnected(true));\r\n    io.on(\"disconnect\", () => setConnected(false));\r\n\r\n    return () => {\r\n      io.removeAllListeners();\r\n      io.close();\r\n    };\r\n  }, [io]);\r\n\r\n  const roomDestroy = () => {\r\n    message.destroy(\"TEAM_LOADING\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    roomInit();\r\n    return roomDestroy;\r\n  }, [noteID]);\r\n\r\n  const pushOperation = (operation: SetOperation) => {\r\n    io.emit(\"push\", { operation });\r\n  };\r\n\r\n  const pushReorder = (pageOrder: string[]) => {\r\n    io.emit(\"reorder\", { pageOrder });\r\n  };\r\n\r\n  const pushNewPage = (\r\n    pageOrder: string[],\r\n    pageID: string,\r\n    newPage: NotePage\r\n  ) => {\r\n    setTeamState((prev) => prev?.addPage(pageID, newPage));\r\n    const { image, marked, ...newTeamPage } = newPage;\r\n    io.emit(\"newPage\", { pageOrder, pageID, newPage: newTeamPage });\r\n  };\r\n\r\n  const resetIO = () => setIO(IoFactory(noteID));\r\n\r\n  if (!loaded) return null;\r\n  return (\r\n    <TeamCtx.Provider\r\n      value={{\r\n        code,\r\n        ignores,\r\n        userRec,\r\n        connected,\r\n        teamState,\r\n        teamUpdate,\r\n        resetIO,\r\n        loadInfo,\r\n        setIgnores,\r\n        pushReorder,\r\n        pushNewPage,\r\n        pushOperation,\r\n      }}\r\n    >\r\n      <Reader teamOn />\r\n    </TeamCtx.Provider>\r\n  );\r\n}\r\n","export function createVirtualCanvas(width: number, height: number) {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const context = canvas.getContext(\"2d\");\r\n  if (!context) {\r\n    throw new Error(\"can't get virtual canvas context\");\r\n  }\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  return { canvas, context };\r\n}\r\n\r\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  const ctx = canvas.getContext('2d');\r\n  ctx?.clearRect(0, 0, 1, 1);\r\n}\r\n"],"names":["defaultDrawCtrl","finger","lineWidth","eraserWidth","color","highlight","getDrawCtrl","localforage","drawCtrl","AddPageButton","addFinalPage","useContext","ReaderMethodCtx","pageOrder","ReaderStateCtx","empty","Boolean","length","className","classNames","type","icon","PlusOutlined","block","onClick","defaultRecord","states","Map","editStack","List","undoStack","defaultFactory","Record","StateSet","immutable","lastOp","this","getImmutable","get","pageID","getStates","drawState","prevDS","getOneState","currRecord","update","s","set","l","push","delete","notePage","width","WIDTH","state","ratio","newDS","DrawState","getEditStack","size","getUndoStack","isUndoable","lastUid","last","lastSetOp","pop","isRedoable","ds","undefined","list","pageRec","entries","Object","createFromList","map","key","insertAfter","prevItem","newItem","prevIndex","indexOf","curr","slice","splice","DigitDisplay","value","useState","randomNum","setRandomNum","digits","String","padStart","split","Number","resetRandom","Math","floor","random","useEffect","timer","setTimeout","clearTimeout","disabled","d","idx","Digit","digit","createFromIconfontCN","scriptUrl","PageNavContent","activeKey","setActiveKey","inviewPages","scrollPage","saveReorder","refRec","useRef","listEl","currpageID","useMemo","find","has","current","scrollIntoView","itemHeight","clientHeight","listHeight","scrollBy","PreviewTabs","onDragEnd","source","destination","fromIndex","index","toIndex","newOrder","result","removed","exchange","requestAnimationFrame","droppableId","droppableProps","innerRef","placeholder","ref","e","uid","PagePreview","mode","pageIndex","stateSet","teamState","switchPageMarked","page","teamStateMap","getOnePageState","isEmpty","every","marked","switchMarked","stopPropagation","dragDisabled","draggableId","isDragDisabled","draggableProps","dragHandleProps","drag","isDragging","image","PageWrapper","thumbnail","preview","onClickCapture","PreviewOption","popShow","setPopShow","addPage","deletePage","Item","Menu","menu","domEvent","CopyOutlined","danger","DeleteOutlined","content","trigger","placement","visible","onVisibleChange","destroyTooltipOnHide","prev","MoreOutlined","TabPane","Tabs","onChange","tabBarGutter","centered","tab","PageNav","navOn","setNavOn","title","ALL","MARKED","WRITTEN","MenuUnfoldOutlined","MenuFoldOutlined","onClose","closable","contentWrapperStyle","boxShadow","bodyStyle","padding","overflow","headerStyle","textAlign","borderTop","destroyOnClose","DrawTools","handleUndo","handleRedo","instantSave","saved","teamOn","setDrawCtrl","setMode","nav","useNavigate","updateDrawCtrl","updated","message","DragOutlined","style","display","SelectMenu","duration","HomeFilled","opacity","SaveOutlined","shape","UndoOutlined","RedoOutlined","PenButton","EraserButton","includes","ExpandOutlined","ghost","RoomInfo","JoinRoom","PenPanel","getPopupContainer","HighlightOutlined","tempLineWidth","setTempLineWidth","min","max","onAfterChange","ColorSelect","colors","c","checked","name","tempEraserWidth","setTempEraserWidth","buttonProps","RotateLeftOutlined","RotateRightOutlined","UserCard","userInfo","self","userName","userID","online","TeamCtx","ignores","setIgnores","resetIO","getHashedColor","ignored","renaming","setRenaming","backgroundColor","Search","autoFocus","defaultValue","onSearch","val","trim","setUserName","enterButton","CheckOutlined","FormOutlined","EyeInvisibleOutlined","EyeOutlined","add","code","userRec","connected","loadInfo","link","window","location","href","userList","values","selfID","getUserID","selfInfo","filter","onlineNum","u","DisconnectOutlined","showIcon","banner","navigator","clipboard","writeText","ReloadOutlined","defaultVisible","status","count","TeamOutlined","noteID","createRoom","putNote","editNoteData","team","onConfirm","okText","cancelText","UsergroupAddOutlined","Point","paper","Path","Group","Rectangle","Color","Size","Raster","Draw","otherStates","readonly","imgSrc","height","canvasEl","scope","group","path","rect","setRect","selectGroup","Set","erased","setErased","preventTouch","touch","touches","touchType","isStylus","isEventValid","updateRatio","clientWidth","transformPoint","projP","view","center","zoom","absoluteP","projectToView","multiply","offsetP","divide","subtract","setNewRect","activate","point","rectangle","startSelectRect","handleDown","draw","startStroke","erase","select","selected","isInside","strokeBounds","handleDrag","smooth","eraserPath","newErased","p","checkErase","concat","delta","x","y","position","sGroup","handleUp","remove","toArray","segments","simplify","pathData","exportJSON","bounds","forEach","intersects","addChild","shadowColor","shadowBlur","setup","r","viewSize","scale","paintBackground","setupPaper","cvs","releaseCanvas","onMouseDown","onMouseDrag","onMouseUp","raster","img","Image","src","onload","sendToBack","parent","getItem","mergedStrokes","getStrokeList","otherGroup","stroke","passedGroup","hasStroke","paintStroke","item","updateMutation","sg","children","mutations","strokeColor","alpha","deleted","deleteSelected","id","moveDash","dashOffset","cancelAnimationFrame","usePinch","memo","offset","first","origin","lastScale","lastOX","lastOY","osX","osY","getBoundingClientRect","oX","oY","originViewP","originProjP","viewToProject","transP","translate","putCenterBack","scaleBounds","target","enabled","handler","preventDefault","document","addEventListener","removeEventListener","onTouchStartCapture","onTouchMoveCapture","React","importJSON","console","error","getCheckPoints","cache","WeakMap","segment","cached","prevPoint","previous","times","checkPoints","i","checkedPath","curveBound","lastSegment","curve","strokeWidth","some","cPoint","getNearestPoint","getDistance","bgRect","fillColor","dashArray","blendMode","strokeJoin","strokeCap","dX","dY","minX","maxX","minY","maxY","getCenterTranslate","deltaX","deltaY","dP","move","createContext","noteInfo","setPageState","prevpageID","copy","order","setInviewPages","Reader","useParams","setPageRec","setNoteInfo","setStateSet","setSaved","setPageOrder","loaded","setLoaded","mounted","_mounted","useMounted","pushOperation","teamUpdate","pushNewPage","pushReorder","loadNotePages","loadNote","storedNote","pdf","createFromPages","updatePages","debouncedSave","useCallback","debounce","pr","canvas","querySelector","data","toDataURL","flush","useLayoutEffect","useBeforeunload","saveDrawCtrl","onUndo","prevOrder","newPage","addState","updatePageRec","setState","prevPage","createPage","renderResult","newSS","undo","lastDS","getLastDS","redo","PageContainer","Provider","lastpageID","updateState","pdfIndex","fullImg","setFullImg","useInView","delay","visibleRef","handleRef","loadImage","called","getOnePageImage","Array","from","deleteAll","imageLoaded","drawShow","maskShow","paddingTop","DrawWrapper","displayName","handleChange","arg","pageStates","pageInfos","TeamState","getPageStates","getPageInfos","pageMap","m","setOp","op","getPageRatio","includesPage","prevDs","newTS","teamPages","record","teamPage","flatState","IoFactory","io","BASE_URL","query","getUserName","Team","setTeamState","setCode","setUserRec","setIO","setTeamUpdate","setConnected","loadState","getTeamNoteState","teamNote","createFromTeamPages","loadTeamNoteInfo","info","roomInit","compress","on","operation","joined","members","LoginOutlined","leaved","emit","LogoutOutlined","resetUser","connect","removeAllListeners","close","roomDestroy","newTeamPage","createVirtualCanvas","createElement","context","getContext","Error","ctx","clearRect"],"sourceRoot":""}