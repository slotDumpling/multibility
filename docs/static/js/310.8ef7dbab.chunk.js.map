{"version":3,"file":"static/js/310.8ef7dbab.chunk.js","mappings":"8VAUMA,EAA8C,CAClDC,QAAQC,EAAAA,EAAAA,MACRC,WAAWC,EAAAA,EAAAA,MACXC,WAAWD,EAAAA,EAAAA,OAIPE,GAAiBC,EAAAA,EAAAA,IAAOP,GAIjBQ,EAAb,WACE,WACUC,EACDC,IACN,oBAFOD,UAAAA,EAER,KADOC,OAAAA,EAHX,2CAiBE,WACE,OAAOC,KAAKF,YAlBhB,uBAqBE,WACE,OAAOE,KAAKC,eAAeC,IAAI,YAtBnC,yBAyBE,SAAYC,GACV,OAAOH,KAAKI,YAAYF,IAAIC,KA1BhC,0BA6BE,WACE,OAAOH,KAAKC,eAAeC,IAAI,eA9BnC,0BAiCE,WACE,OAAOF,KAAKC,eAAeC,IAAI,eAlCnC,sBAqCE,SAASC,EAAgBE,GACvB,IAAMC,EAASN,KAAKO,YAAYJ,GAChC,IAAKG,GAAUA,IAAWD,EAAW,OAAOL,KAC5C,IAAIQ,EAAaR,KAAKC,eACnBQ,OAAO,UAAU,SAACC,GAAD,OAAOA,EAAEC,IAAIR,EAAQE,MACtCI,OAAO,aAAa,SAACG,GAAD,OAAOA,EAAEC,KAAKV,MAClCW,OAAO,aAEFf,EAAWM,EAAXN,OAGR,OAAO,IAAIF,EAASW,EAFFT,IAAM,kBAASA,GAAT,IAAiBI,OAAAA,OA9C7C,4BAoDE,SAAeA,EAAgBY,GAC7B,IAAMT,EAASN,KAAKO,YAAYJ,GAEhC,OADAG,GAAUU,EAAAA,GAAAA,eAAyBV,EAAQS,GACpCf,OAvDX,sBA0DE,SAASG,EAAgBc,GACvB,IAAQC,EAAiBD,EAAjBC,MAAOC,EAAUF,EAAVE,MACTC,EAAQJ,EAAAA,GAAAA,aAAuBE,EAAOC,GAI5C,OAAO,IAAItB,EAHQG,KAAKC,eAAeQ,OAAO,UAAU,SAACC,GAAD,OACtDA,EAAEC,IAAIR,EAAQiB,SA9DpB,yBAmEE,SAAYjB,GACV,OAAO,IAAIN,EACTG,KAAKC,eAAeQ,OAAO,UAAU,SAACC,GAAD,OAAOA,EAAEI,OAAOX,SArE3D,wBAyEE,WACE,OAAOH,KAAKqB,eAAeC,KAAO,IA1EtC,wBA6EE,WACE,OAAOtB,KAAKuB,eAAeD,KAAO,IA9EtC,kBAiFE,WACE,IAAKtB,KAAKwB,aAAc,OAAOxB,KAC/B,IAAMyB,EAAUzB,KAAKqB,eAAeK,OAC9BpB,EAASmB,GAAWzB,KAAKO,YAAYkB,GAC3C,IAAKnB,EAAQ,OAAON,KAEpB,IAAMoB,EAAQJ,EAAAA,GAAAA,KAAeV,GACrBP,EAAWqB,EAAXrB,OACF4B,EAAY5B,IAAM,QAAMI,OAAQsB,GAAY1B,GAElD,OAAO,IAAIF,EACTG,KAAKC,eACFQ,OAAO,aAAa,SAACC,GAAD,OAAOA,EAAEkB,SAC7BnB,OAAO,aAAa,SAACC,GAAD,OAAOA,EAAEG,KAAKY,MAClChB,OAAO,UAAU,SAACC,GAAD,OAAOA,EAAEC,IAAIc,EAASL,MAC1CO,KAhGN,kBAoGE,WACE,IAAK3B,KAAK6B,aAAc,OAAO7B,KAC/B,IAAMyB,EAAUzB,KAAKuB,eAAeG,OAC9BpB,EAASmB,GAAWzB,KAAKO,YAAYkB,GAC3C,IAAKnB,EAAQ,OAAON,KAEpB,IAAMoB,EAAQJ,EAAAA,GAAAA,KAAeV,GACrBP,EAAWqB,EAAXrB,OACF4B,EAAY5B,IAAM,QAAMI,OAAQsB,GAAY1B,GAElD,OAAO,IAAIF,EACTG,KAAKC,eACFQ,OAAO,aAAa,SAACC,GAAD,OAAOA,EAAEkB,SAC7BnB,OAAO,aAAa,SAACC,GAAD,OAAOA,EAAEG,KAAKY,MAClChB,OAAO,UAAU,SAACC,GAAD,OAAOA,EAAEC,IAAIc,EAASL,MAC1CO,KAnHN,uBAuHE,WAA8C,IAAD,EACrCxB,EAAM,UAAGH,KAAKD,cAAR,aAAG,EAAaI,OACtB2B,EAAK3B,GAAUH,KAAKO,YAAYJ,GACtC,GAAI2B,EAAI,MAAO,CAAC3B,EAAQ2B,MA1H5B,8BAME,SAAuBC,GACrB,OAAO,IAAIlC,EACTF,IAAiBgB,IACf,UACApB,EAAAA,EAAAA,IAAIwC,GAASC,KAAI,gBAAGd,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OACfH,EAAAA,GAAAA,aAAuBE,EAAOC,YAXxC,K,uDCjBac,EAAkD,SAAC,GAEzD,IADLC,EACI,EADJA,aAEA,OACE,gBAAKC,UAAU,kBAAf,UACE,SAAC,IAAD,CACEC,KAAK,SACLC,MAAM,SAACC,EAAA,EAAD,IACNC,OAAK,EACLC,QAASN,EAJX,yB,4CCLAO,E,MAAeC,GAAAA,eAA2B,CAAEC,KAAM,WA8CxD,IAAMC,EAAa,SAACZ,EAA0Ba,GAC5C,IADgE,EAC5DC,EAAS,GACTC,EAAW,EAFiD,UAGhDF,GAHgD,IAGhE,2BAAuB,CAAC,IAAfG,EAAc,QACf7B,EAAQa,EAAI9B,IAAI8C,GACtB,GAAK7B,EAAL,CACA,GAAc,IAAVA,EAAa,OAAO6B,EACpB7B,EAAQ4B,IACVD,EAASE,EACTD,EAAW5B,KATiD,8BAYhE,OAAO2B,G,sBCtDF,SAASG,EAAeC,EAAWC,EAAaC,GACrD,IAAMC,EAAYH,EAAKI,QAAQH,GACzBI,EAAOL,EAAKM,QAClB,OAAmB,IAAfH,GACJE,EAAKE,OAAOJ,EAAY,EAAG,EAAGD,GADDG,E,iHCLlBG,EAMR,SAAC,GAMC,IALLC,EAKI,EALJA,SAKI,IAJJrC,KAAAA,OAII,MAJG,UAIH,MAHJkB,QAAAA,OAGI,MAHM,aAGN,MAFJoB,OAAAA,OAEI,SADJzB,EACI,EADJA,UAEM0B,GAAQC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,IAAeJ,EAASK,UAAS,CAACL,IAC9D,IAAKA,EAAU,OAAO,KACtB,IAAQM,EAAaN,EAAbM,SAER,OACE,SAAC,IAAD,CACE9B,UAAWA,EACX,cAAayB,EACbtC,KAAMA,EACN4C,MAAO,CAAEC,gBAAiBN,GAJ5B,UAME,gBAAK1B,UAAU,iBAAiBK,QAASA,EAAzC,gBACGyB,QADH,IACGA,OADH,EACGA,EAAUT,MAAM,EAAG,Q,iLCWfY,GAA4C,SAACC,GACxD,OAAwBC,EAAAA,EAAAA,WAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAoBC,EAAAA,EAAAA,MAAbC,GAAP,eAEMC,GACJ,SAAC,KAAD,CAAWC,YAAY,WAAWC,MAAON,EAAO,EAAI,EAApD,SACG,gBAAGO,EAAH,EAAGA,SAAUC,EAAb,EAAaA,eAAgBC,EAA7B,EAA6BA,gBAA7B,OACC,gCACE7C,UAAU,WACV8C,IAAKH,GACDC,GACAC,OAMZ,OACE,SAAC,KAAD,CAAmBE,QAAQ,MAA3B,UACE,SAAC,KAAD,CACEC,UAAW,YAAmC,IAAhCP,EAA+B,EAA/BA,YAAaQ,EAAkB,EAAlBA,YACL,SAAhBR,IACuB,KAAZ,OAAXQ,QAAW,IAAXA,OAAA,EAAAA,EAAaP,QAAaL,GAAQ,GACX,KAAZ,OAAXY,QAAW,IAAXA,OAAA,EAAAA,EAAaP,QAAaL,GAAQ,KAJ1C,UAOE,SAAC,KAAD,CAAWa,YAAY,eAAeC,UAAU,aAAhD,SACG,kBAAGC,EAAH,EAAGA,eAAgBT,EAAnB,EAAmBA,SAAUU,EAA7B,EAA6BA,YAAiBC,EAA9C,EAA8CA,eAA9C,OACC,iCACEtD,UAAU,eACV,YAAWoC,EACX,YAAWG,EACX,eAAce,EACdR,IAAKH,GACDS,GANN,cAQGZ,GACD,SAACe,IAAD,QAAanB,KAAMA,GAAUF,IAC5BmB,cASTE,GAAoE,SAAC,GAGpE,IAFLnB,EAEI,EAFJA,KACGF,GACC,aACJ,GAAoBsB,EAAAA,EAAAA,MAAbC,GAAP,eACA,GAAkCnB,EAAAA,EAAAA,MAAlC,eAAOC,EAAP,KAAkBmB,EAAlB,KAEMC,EAAQ,CACZC,IAAK,YACLC,OAAQ,YACRC,QAAS,SACTL,GAEF,GAA2CM,EAAAA,EAAAA,IAAa,CACtDC,aADsD,WAEhD5B,GAAMsB,GAAa,IAEzBO,cAJsD,WAK/C7B,GAAMsB,GAAa,IAE1BQ,cAAe,MAPJC,EAAb,EAAQrB,IAAkBsB,GAA1B,aAUMC,GAAc1C,EAAAA,EAAAA,UAAQ,kBAAM,SAAC2C,GAAD,MAAiB,IAC7CC,GAAW5C,EAAAA,EAAAA,UAAQ,kBAAM,SAAC6C,IAAD,UAActC,MAAW,CAACA,IAEzD,OACE,SAAC,KAAD,CAAWO,YAAa,OAAQC,MAAON,EAAO,EAAI,EAAlD,SACG,kBACGO,EADH,EACGA,SAAUC,EADb,EACaA,eAAgBC,EAD7B,EAC6BA,gBAC1B4B,EAFH,EAEGA,WAAYC,EAFf,EAEeA,gBAFf,OAIC,yCACE1E,UAAU,eACV8C,IAAK,SAAC6B,GACJhC,EAASgC,GACTR,EAASQ,IAEX,YAAWpC,EACX,eAAckC,EACd,iBAAgBC,GACZ9B,GACAwB,GAVN,eAYE,wBAAKpE,UAAU,eAAkB6C,KACjC,wBAAKc,IACJU,EACAE,UAOLC,GAA6C,SAACtC,GAClD,IAAM0C,GAASC,EAAAA,EAAAA,QAAoC,IACnD,GAAoBrB,EAAAA,EAAAA,MAAbC,GAAP,eACA,GAAoBnB,EAAAA,EAAAA,MAAbC,GAAP,eACQuC,EAA0B5C,EAA1B4C,UAAWC,EAAe7C,EAAf6C,WACXC,EAA0C9C,EAA1C8C,YAAaC,EAA6B/C,EAA7B+C,WAAYlF,EAAiBmC,EAAjBnC,aAa3BmF,GAAaC,EAAAA,EAAAA,IAAS,WAAO,IAAD,EAChC,UAAAP,EAAOQ,QAAQL,UAAf,SAA4BM,oBAM9B,OAJAC,EAAAA,EAAAA,kBAAgB,WACV/C,GAAW2C,MACd,CAAC3C,EAAW2C,KAGb,SAAC,KAAD,CAAiBlC,UAnBD,SAAC,GAAyC,IAAvCuC,EAAsC,EAAtCA,OAAQtC,EAA8B,EAA9BA,YAC3B,GAAKA,GAAgB6B,EAArB,CACA,IAAeU,EAAcD,EAArB7C,MACO+C,EAAYxC,EAAnBP,MACF1E,EAAS8G,EAAUU,GACzB,GAAIA,IAAcC,GAAYzH,EAA9B,CACA,IAAM0H,EF5JH,SAAqB3E,EAAWyE,EAAmBC,GACxD,IAAM9E,EAASI,EAAKM,QACpB,EAAkBV,EAAOW,OAAOkE,EAAW,GAApCG,GAAP,eACA,OAAKA,GACLhF,EAAOW,OAAOmE,EAAS,EAAGE,GACnBhF,GAFcI,EEyJF6E,CAASd,EAAWU,EAAWC,GAChDT,EAAYU,GAAU,GACtBG,uBAAsB,kBAAMZ,EAAWjH,SAWvC,UACE,SAAC,KAAD,CAAWkF,YAAY,eAAvB,SACG,gBAAGE,EAAH,EAAGA,eAAgBT,EAAnB,EAAmBA,SAAUU,EAA7B,EAA6BA,YAA7B,OACC,iCAAKrD,UAAU,YAAY8C,IAAKH,GAAcS,GAA9C,qBACG0B,QADH,IACGA,OADH,EACGA,EAAWjF,KAAI,SAACiG,EAAKpD,GAAN,OACd,SAACqD,IAAD,QAEED,IAAKA,EACLE,UAAWtD,EACXkC,OAAQA,EAAOQ,SACXlD,GAJC4D,MAORzC,EACc,QAAdI,IACC,SAAC3D,EAAD,CAAeC,aAAcA,cASrCgG,GAOF,SAAC,GAA0C,IAAxCD,EAAuC,EAAvCA,IAAKE,EAAkC,EAAlCA,UAAWpB,EAAuB,EAAvBA,OAAW1C,GAAY,aACpC+D,EAAkC/D,EAAlC+D,SAAUrG,EAAwBsC,EAAxBtC,QAASmF,EAAe7C,EAAf6C,WAC3B,GAA+BmB,EAAAA,EAAAA,YAAWC,EAAAA,SAAlCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QACnB,GAAoB7C,EAAAA,EAAAA,MAAbC,GAAP,eACA,GAA4BtB,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAe6E,EAAf,KAEMC,EAAI,OAAG3G,QAAH,IAAGA,OAAH,EAAGA,EAAS7B,IAAI+H,GACpB5H,EAAS,OAAG+H,QAAH,IAAGA,OAAH,EAAGA,EAAU7H,YAAY0H,GAClCU,EAAY,OAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAWK,mBAAmBX,GAE7CY,GAAS7B,EAAAA,EAAAA,SAAO,IACtB8B,EAAAA,EAAAA,YAAU,WACU,WAAdlD,IAAwBiD,EAAOtB,SAAU,KAC5C,CAAC3B,IAEJ,IAAMmD,GAAUjF,EAAAA,EAAAA,UACd,kBAAMkF,GAAAA,EAAAA,cAAwBL,EAAcH,KAC5C,CAACG,EAAcH,IAGjB,IAAKE,IAASrI,EAAW,OAAO,KAGhC,GAFAwI,EAAOtB,QAAUmB,EAAKG,QAAUA,EAAOtB,QAGvB,YAAd3B,GACAvF,EAAU4I,aACRN,GAAgBA,EAAaO,OAAM,SAACpH,GAAD,OAAQA,EAAGmH,cAEhD,OAAO,KAET,GAAkB,WAAdrD,IAA2BiD,EAAOtB,QAAS,OAAO,KACtD,IAAMhE,EAAO2D,IAAee,EACpBb,EAAe/C,EAAf+C,WAER,OACE,SAAC,KAAD,CACExC,YAAaqD,EACbpD,MAAOsD,EACPgB,eAA8B,QAAdvD,EAHlB,SAKG,kBACGd,EADH,EACGA,SAAUC,EADb,EACaA,eAAgBC,EAD7B,EAC6BA,gBAC1B4B,EAFH,EAEGA,WAAYC,EAFf,EAEeA,gBAFf,OAIC,yCACE5B,IAAK,SAAC6B,GACJhC,EAASgC,GACLA,IAAGC,EAAOkB,GAAOnB,IAEvB3E,UAAU,OACV,YAAWoB,EACX,eAAcqD,EACd,iBAAgBC,EAChBrE,QAAS,kBAAM4E,EAAWa,KACtBlD,GACAC,GAXN,eAaE,SAACoE,EAAA,QAAD,CACE/I,WAAuB,OAAZsI,QAAY,IAAZA,OAAA,EAAAA,EAAczI,IAAI0D,KAAWvD,EACxCsI,aAAc/E,OAASyF,EAAYV,EACnCW,UAAWZ,EAAKa,MAChBf,QAASA,EACTgB,SAAO,KAET,SAACC,IAAD,QACExB,IAAKA,EACLpD,MAAOsD,EACPvE,OAAQA,EACR6E,UAAWA,EACXC,KAAMA,EACNK,QAASA,GACL1E,YAQVoF,GASFC,EAAAA,MAAW,YAAiE,IAA9DzB,EAA6D,EAA7DA,IAAKpD,EAAwD,EAAxDA,MAAOjB,EAAiD,EAAjDA,OAAQ6E,EAAyC,EAAzCA,UAAWC,EAA8B,EAA9BA,KAAMK,EAAwB,EAAxBA,QAAY1E,GAAY,aACrEsF,EAAqBtF,EAArBsF,iBACR,OACE,iBAAKxH,UAAU,QAAQK,QAAS,SAACsE,GAAD,OAAOA,EAAE8C,mBAAzC,WACE,gBACEzH,UAAU,WACV,cAAauG,EAAKG,OAClBrG,QAAS,kBAAMmH,EAAiB1B,OAElC,gBAAK9F,UAAU,QAAf,SAAwB0C,EAAQ,KAChC,SAACgF,IAAD,QAAe5B,IAAKA,GAAS5D,KAC7B,SAACyF,GAAD,CAAaf,QAASA,EAASnF,OAAQA,EAAQ6E,UAAWA,UAIhEgB,GAAaM,YAAc,eAE3B,IAAMD,GAID,SAAC,GAAoC,IAAlCf,EAAiC,EAAjCA,QAASnF,EAAwB,EAAxBA,OAAQ6E,EAAgB,EAAhBA,UACfuB,GAAY3B,EAAAA,EAAAA,YAAWC,EAAAA,SAAvB0B,QACR,OACE,SAAC,UAAD,CACEC,SAAU,EACV3I,KAAK,UACLa,UAAW+H,GAAAA,CAAW,aAAc,CAAEtG,OAAAA,IACtCuG,oBAAoB,SAJtB,SAMGpB,EAAQ/G,KAAI,SAACgC,GACZ,IAAML,EAAWqG,EAAQhG,GACzB,OAAKL,GAEH,SAACD,EAAD,CAEEpC,KAAK,UACLqC,SAAUA,EACVxB,UAAU,iBACVyB,OAAQA,IAAWI,EACnBxB,QAAS,kBAAMiG,GAAU,SAAC2B,GAAD,OAAWA,IAASpG,EAAS,GAAKA,OALtDA,GAHa,WAgBxB6F,GAAqD,SAAC,GAIrD,IAHL5B,EAGI,EAHJA,IACAoC,EAEI,EAFJA,QACAC,EACI,EADJA,WAEMC,GACJ,SAAC,IAAD,CACEC,MAAO,CACL,CACExH,IAAK,MACLX,MAAM,SAACC,EAAA,EAAD,IACNmI,MAAO,WACPjI,QAAS,kBAAM6H,EAAQpC,KAEzB,CACEjF,IAAK,OACLX,MAAM,SAACqI,EAAA,EAAD,IACND,MAAO,YACPjI,QAAS,kBAAM6H,EAAQpC,GAAK,KAE9B,CACEjF,IAAK,SACLX,MAAM,SAACsI,EAAA,EAAD,IACNF,MAAO,SACPG,QAAQ,EACRpI,QAAS,kBAAM8H,EAAWrC,QAKlC,OACE,SAAC,IAAD,CACE4C,QAASN,EACTO,QAAQ,QACRC,UAAU,OACVC,sBAAoB,EACpBC,kBAAmB,SAACnE,GAAD,yBAAOA,EAAEoE,qBAAT,iBAAO,EAAiBA,qBAAxB,aAAO,EAAgCA,eAL5D,UAOE,gBAAK/I,UAAU,SAAf,UACE,SAACgJ,EAAA,EAAD,SAMF1E,GAAkB,WACtB,OAAkCd,EAAAA,EAAAA,MAAlC,eAAOC,EAAP,KAAkBwF,EAAlB,KACQC,EAAYC,EAAAA,EAAAA,QACpB,OACE,UAAC,IAAD,CACEnJ,UAAU,OACVyD,UAAWA,EACX2F,SAAUH,EACVI,aAAc,EACdlK,KAAK,QACLmK,UAAQ,EANV,WAQE,SAACJ,EAAD,CAASK,KAAK,SAACC,EAAA,EAAD,CAAUvJ,KAAK,mBAAwB,QACrD,SAACiJ,EAAD,CAASK,KAAK,SAACC,EAAA,EAAD,CAAUvJ,KAAK,oBAAyB,WACtD,SAACiJ,EAAD,CAASK,KAAK,SAACC,EAAA,EAAD,CAAUvJ,KAAK,gBAAqB,e,wBCtY3CwJ,GAGR,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACPC,GAAMC,EAAAA,EAAAA,MACZ,OACE,iBAAK7J,UAAU,OAAf,WACE,SAAC,IAAD,CACEC,KAAK,OACLI,SAAO,iBAAE,8FACDsJ,IADC,OAEPC,EAAI,KAFG,2CAIT1J,MAAM,SAAC4J,GAAA,EAAD,CAAY/H,MAAO,CAAEgI,QAAS,SAEtC,SAAC,IAAD,CACE9J,KAAK,OACLD,UAAU,OACVK,QAASsJ,EACTK,SAAUN,EACVxJ,MAAM,SAAC+J,GAAA,EAAD,U,sGCTDC,GAKR,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACxC,GAAyBC,EAAAA,EAAAA,MAAjBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACRC,GAAiBC,EAAAA,EAAAA,MACvB,GAAoCC,EAAAA,EAAAA,MAApC,eAAOC,EAAP,KAAmBC,EAAnB,KAEA,OACE,iBAAK9K,UAAU,SAAS,mBAAkB6K,EAA1C,WACE,SAAC,IAAD,CACE5K,KAAK,OACLC,MAAM,SAAC6K,GAAA,EAAD,IACN1K,QAAS8J,EACTH,UAAWK,KAEb,SAAC,IAAD,CACEpK,KAAK,OACLC,MAAM,SAAC8K,GAAA,EAAD,IACN3K,QAAS+J,EACTJ,UAAWM,KAEb,SAAC,IAAD,CACErK,KAAMwK,EAAS,OAAS,OACxBpK,QAAS,WACPqK,EAAe,CAAED,QAASA,IAC1BQ,EAAAA,GAAAA,QAAgB,UAChBA,EAAAA,GAAAA,KAAa,CACXvC,QAAS+B,EAAS,cAAgB,mBAClC5J,IAAK,YAGTX,MAAM,SAACsJ,EAAA,EAAD,CAAUvJ,KAAK,mBAEvB,SAAC,IAAD,CACED,UAAU,kBACVC,KAAK,OACLC,KAAM2K,GAAa,SAACK,GAAA,EAAD,KAAiB,SAACC,GAAA,EAAD,IACpC9K,QAAS,kBAAMyK,GAAc,SAAC7C,GAAD,OAAWA,SAE1C,SAACmD,GAAD,KACA,SAACC,GAAD,KACA,SAAC,IAAD,CACEpL,KAAe,SAATuK,EAAkB,OAAS,OACjCnK,QAAS,kBAAMqK,EAAe,CAAEF,KAAM,UACtCtK,MAAM,SAACsJ,EAAA,EAAD,CAAUvJ,KAAK,kBAEvB,SAACqL,GAAD,QAKAF,GAAY,WAChB,IAAMG,GAAWhB,EAAAA,EAAAA,MACTC,EAAgBe,EAAhBf,KAAM9I,EAAU6J,EAAV7J,MACRgJ,GAAiBC,EAAAA,EAAAA,MAEvB,MAAgB,SAATH,GACL,SAAC,IAAD,CACE9B,SAAS,SAAC8C,GAAA,GAAD,CAAUd,eAAgBA,EAAgBa,SAAUA,IAC7D5C,QAAQ,QACRC,UAAU,SACVE,kBAAmB,SAACnE,GAAD,OAAOA,EAAEoE,eAC5BF,sBAAoB,EALtB,UAOE,SAAC,IAAD,CACE5I,KAAK,OACLC,MAAM,SAACuL,GAAA,EAAD,CAAkBC,aAAchK,EAAO1B,UAAU,kBAI3D,SAAC,IAAD,CACEC,KAAK,OACLI,QAAS,kBAAMqK,EAAe,CAAEF,KAAM,UACtCtK,MAAM,SAACyL,GAAA,EAAD,OAKNN,GAAe,WACnB,IAAME,GAAWhB,EAAAA,EAAAA,MACTC,EAAsBe,EAAtBf,KAAMoB,EAAgBL,EAAhBK,YACRlB,GAAiBC,EAAAA,EAAAA,MAEjBkB,EAAwB,CAC5BC,MAAO,SACP5L,MAAM,SAACsJ,EAAA,EAAD,CAAUvJ,KAAK,iBAGvB,MAAgB,UAATuK,GACL,SAAC,IAAD,CACE9B,SACE,iBAAK1I,UAAU,oBAAf,WACE,SAAC,KAAD,CACEI,OAAK,EACLjB,KAAK,QACLa,UAAU,YACV+L,QAAS,CAAC,QAAS,UACnBC,MAAOJ,EAAc,QAAU,SAC/BxC,SAAU,SAAC4C,GACctB,EAAT,UAAVsB,EAAkC,CAAEJ,aAAa,GACjC,CAAEA,aAAa,QAGvC,SAAC,MAAD,CACEL,SAAUA,EACVb,eAAgBA,EAChBuB,MAAM,mBAIZtD,QAAQ,QACRC,UAAU,SACVE,kBAAmB,SAACnE,GAAD,OAAOA,EAAEoE,eAC5BF,sBAAoB,EAxBtB,UA0BE,SAAC,KAAD,QAAQ5I,KAAK,QAAW4L,OAG1B,SAAC,KAAD,QACE5L,KAAK,OACLI,QAAS,kBAAMqK,EAAe,CAAEF,KAAM,YAClCqB,KAKJP,GAAe,WACnB,OAAwBf,EAAAA,EAAAA,MAAhB2B,EAAR,EAAQA,MAAO1B,EAAf,EAAeA,KACTE,GAAiBC,EAAAA,EAAAA,MAEjBzK,EAAOgM,GAAQ,SAAC1C,EAAA,EAAD,CAAUvJ,KAAK,iBAAmB,SAACkM,GAAA,EAAD,IAEvD,MAAgB,WAAT3B,GACL,SAAC,IAAD,CACEvK,KAAK,OACLC,KAAMA,EACNG,QAAS,kBAAMqK,EAAe,CAAEwB,OAAQA,QAG1C,SAAC,IAAD,CACEjM,KAAK,OACLC,KAAMA,EACNG,QAAS,kBAAMqK,EAAe,CAAEF,KAAM,e,wPCvI/B4B,GAER,SAAC,GAAqB,IAAnBzC,EAAkB,EAAlBA,YACE0C,GAAWnG,EAAAA,EAAAA,YAAWC,EAAAA,SAAtBkG,OACR,OACE,iBAAKrM,UAAU,QAAf,UACGqM,GAAS,SAACC,GAAD,KAAe,SAACC,GAAD,CAAU5C,YAAaA,KAChD,SAAC6C,GAAD,QAKAA,GAAgB,WACpB,OAAkClK,EAAAA,EAAAA,MAAlC,eAAOC,EAAP,KAAkBmB,EAAlB,KACA,OACE,SAAC,IAAD,CACEzD,KAAMsC,EAAY,OAAS,OAC3BrC,MAAM,SAACuM,GAAA,EAAD,IACNpM,QAAS,kBAAMqD,GAAa,SAACuE,GAAD,OAAWA,SAKvCyE,GAAmC,SAAC,GAAgB,IAAd7K,EAAa,EAAbA,OAC1C,GAAgCM,EAAAA,EAAAA,WAAS,GAAzC,eAAOwK,EAAP,KAAiBC,EAAjB,KACA,GAAkD1G,EAAAA,EAAAA,YAAWC,EAAAA,SAArDE,EAAR,EAAQA,QAASwG,EAAjB,EAAiBA,WAAYC,EAA7B,EAA6BA,QACvBtL,EADN,EAAsCqG,QACbhG,GAEzB,IADA8E,EAAAA,EAAAA,YAAU,kBAAMiG,GAAY,KAAQ,CAACpL,KAChCA,EAAU,OAAO,KAEtB,IAAQM,EAAqBN,EAArBM,SAAUiL,EAAWvL,EAAXuL,OACZC,EAAOnL,KAAWoL,EAAAA,GAAAA,MAClBC,EAAU7G,EAAQ8G,IAAItL,KAAYmL,EAgBxC,OACE,iBAAKhN,UAAU,YAAY,cAAa+M,EAAxC,WACE,SAACxL,EAAD,CAAYC,SAAUA,EAAUrC,KAAK,QAAQa,UAAU,gBACtD2M,IAAY,iBAAM3M,UAAU,YAAhB,SAA6B8B,IACzC6K,IACC,SAACS,GAAA,EAAD,CACEC,WAAS,EACTrN,UAAU,eACVsN,aAAcxL,EACdyL,SAhBa,SAACvB,GACpB,IAAMxL,EAAOwL,EAAMwB,OACnB,IAAKhN,GAAQA,IAASsB,EAAU,OAAO8K,GAAY,IACnDa,EAAAA,GAAAA,IAAajN,GACbsM,KAaMY,aAAa,SAAC,IAAD,CAAQxN,MAAM,SAACyN,GAAA,EAAD,QAG9BX,EACCL,IACE,SAAC,IAAD,CACE1M,KAAK,OACLC,MAAM,SAAC0N,GAAA,EAAD,IACNvN,QAAS,kBAAMuM,GAAY,OAI/B,SAAC,IAAD,CACE3M,KAAK,OACLC,KAAMgN,GAAU,SAACW,GAAA,EAAD,KAA2B,SAACC,GAAA,EAAD,IAC3CzN,QAvCa,WACnBwM,GAAW,SAAC5E,GACV,OAAIA,EAAKkF,IAAItL,GAAgBoG,EAAKtJ,OAAOkD,GAClCoG,EAAK8F,IAAIlM,aA2ChByK,GAAe,WACnB,OACEpG,EAAAA,EAAAA,YAAWC,EAAAA,SADL6H,EAAR,EAAQA,KAAMnG,EAAd,EAAcA,QAASoG,EAAvB,EAAuBA,UAAWC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,UAAWrB,EAAvD,EAAuDA,QAEjDsB,EAAOC,OAAOC,SAASC,KACvBC,EAAK,mCAAG,uGAEJC,IAAAA,CAAK,GAAD,OAAIC,SAAS/K,MAAb,aAAuByK,IAFvB,OAGVnD,EAAAA,GAAAA,QAAgB,QAChBA,EAAAA,GAAAA,QAAgB,CACdvC,QAAS,eACTxI,MAAM,SAACqI,EAAA,EAAD,IACN1H,IAAK,SAPG,gDAUV8N,QAAQC,IAAR,MAVU,yDAAH,qDAcLC,GAAWlN,EAAAA,EAAAA,UAAQ,WACvB,IAAMmN,GAAS7B,EAAAA,GAAAA,MACG8B,EAA4BlH,EAArCiH,GAAsBE,GAA/B,OAA8CnH,EAA9C,CAASiH,GAAT,WACM/N,EAAOgO,EAAW,CAACA,GAAY,GAC/BE,EAASC,OAAOD,OAAOD,GAK7B,OAJAjO,EAAKrC,KAAL,MAAAqC,GAAI,OACCkO,EAAOE,QAAO,qBAAGpC,WADlB,eAECkC,EAAOE,QAAO,qBAAGpC,aAEfhM,IACN,CAAC8G,IAEEuH,GAAYzN,EAAAA,EAAAA,UAChB,kBAAMkN,EAASM,QAAO,qBAAGpC,UAAqBsC,SAC9C,CAACR,IAGGS,GACJ,iBAAKtP,UAAU,eAAf,UACGiO,IACC,SAAC,KAAD,CACEjO,UAAU,gBACViL,QAAQ,kBACR/K,MAAM,SAACqP,GAAA,EAAD,IACNtP,KAAK,QACLuP,UAAQ,EACRC,QAAM,KAGV,SAAC,MAAD,CACEzP,UAAU,eACVgM,MAAO0D,OAAO1B,GACdqB,OAAQ,EACRM,OAAK,KAEP,SAAC,IAAD,CACEzP,MAAM,SAAC0P,GAAA,EAAD,IACN5P,UAAU,YACVK,QAASmO,EACTpO,OAAK,EAJP,oBAQA,SAAC,KAAD,KACA,gBAAKJ,UAAU,YAAf,SACG6O,EAAShP,KAAI,SAACgQ,GAAD,OACZ,SAACnD,GAAD,CAAyB7K,OAAQgO,EAAEhO,QAApBgO,EAAEhO,gBAMzB,GAAkCM,EAAAA,EAAAA,WAAS,GAA3C,eAAO2N,EAAP,KAAkBC,EAAlB,KACMpM,GACJ,iBAAK3D,UAAU,aAAf,WACE,yCACA,SAAC,IAAD,CACE8L,MAAM,SACN7L,KAAK,OACLd,KAAK,QACL6Q,QAASF,EACT5P,MAAM,SAAC+P,GAAA,EAAD,IACN5P,SAAO,iBAAE,qFACP0P,GAAa,GADN,SAED7B,IAFC,uBAGDC,IAHC,OAIP4B,GAAa,GACbjD,IALO,gDAWf,OACE,SAAC,IAAD,CACEpE,QAAS4G,EACT3G,QAAQ,QACRC,UAAU,cACVjF,MAAOA,EACPmF,kBAAmB,SAACnE,GAAD,OAAOA,EAAEoE,eAL9B,UAOE,SAAC,IAAD,CACE9I,KAAK,OACLC,MACE,SAAC,KAAD,CACEgQ,OAAQjC,EAAY,UAAY,QAChCkC,MAAOlC,EAAYmB,EAAY,IAC/BjQ,KAAK,QAHP,UAKE,SAACiR,GAAA,EAAD,WAQN7D,GAED,SAAC,GAAqB,IAAD,EAAlB5C,EAAkB,EAAlBA,YACA0G,EAAM,WAAGC,EAAAA,EAAAA,MAAYD,cAAf,QAAyB,GAC/BzG,GAAMC,EAAAA,EAAAA,MAEN0G,EAAU,mCAAG,8FACX5G,IADW,wBAEC6G,EAAAA,GAAAA,IAAQH,GAFT,0DAGApF,EAAAA,GAAAA,MAAc,uBAHd,wBAIXwF,EAAAA,EAAAA,IAAaJ,EAAQ,CAAEK,MAAM,IAJlB,OAKjB9G,EAAI,SAAWyG,GALE,4CAAH,qDAQhB,OACE,SAAC,IAAD,CACEpQ,KAAK,OACLC,MAAM,SAACyQ,GAAA,EAAD,IACNtQ,QAAS,WACPuQ,GAAAA,EAAAA,QAAc,CACZjN,MAAO,sBACP+E,QAAS,2DACTxI,MAAM,SAACkQ,GAAA,EAAD,CAAcrO,MAAO,CAAEL,MAAO,UACpCmP,KAAMN,Q,2BC9OHO,GAOR,SAAC,GAAD,IAAGpH,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAgBoH,GAA1B,oBACH,+BACE,SAACtH,GAAD,CAAYC,MAAOA,EAAOC,YAAaA,KACvC,SAACO,IAAD,UAAkB6G,KAClB,SAAC3E,GAAD,CAAazC,YAAaA,Q,uDC8Bf,SAASqH,KAAU,IAAD,MACzBX,EAAM,WAAGC,EAAAA,EAAAA,MAAYD,cAAf,QAAyB,GAC/BzG,GAAMC,EAAAA,EAAAA,MAEZ,GAA8B1H,EAAAA,EAAAA,YAA9B,eAAOvC,EAAP,KAAgBqR,EAAhB,KACA,GAAgC9O,EAAAA,EAAAA,YAAhC,eAAO+O,EAAP,KAAiBC,EAAjB,KACA,GAAgChP,EAAAA,EAAAA,YAAhC,eAAO8D,EAAP,KAAiBmL,EAAjB,KACA,GAAkCjP,EAAAA,EAAAA,YAAlC,eAAO2C,EAAP,KAAkBuM,EAAlB,KACA,GAA0BC,EAAAA,EAAAA,IAAa,GAAvC,eAAO5H,EAAP,KAAc6H,EAAd,KAEA,GAAyCrL,EAAAA,EAAAA,YAAWC,EAAAA,SAA5CqL,GAAR,EAAQA,GAAInF,GAAZ,EAAYA,OAAQoF,GAApB,EAAoBA,iBACpB,GRpDK,SAAuBpB,GAA6C,IAA7BvL,EAA4B,uDAAhB,GACxD,GAA4B3C,EAAAA,EAAAA,WAAS/E,EAAAA,EAAAA,OAArC,eAAOsU,EAAP,KAAeC,EAAf,KACMC,GAAW/M,EAAAA,EAAAA,SAAO,GACxB,GAAoC1C,EAAAA,EAAAA,UAAS,IAA7C,eAAO0P,EAAP,KAAmBC,EAAnB,KACA,GAAwC3P,EAAAA,EAAAA,WAAS/E,EAAAA,EAAAA,OAAjD,eAAO2U,EAAP,KAAqBC,EAArB,KACMjN,GAAapD,EAAAA,EAAAA,UACjB,kBAAMlB,EAAWsR,EAAcjN,KAC/B,CAACiN,EAAcjN,IAkCjB,OAhCAmN,EAAAA,EAAAA,eAAclN,IAEd4B,EAAAA,EAAAA,YAAU,YACR,iBAAC,oGACsBrG,EAAa4R,QAAgB7B,GADnD,UACO8B,EADP,gDAEsBP,EAASxM,SAAU,GAFzC,OAGC0M,EAAcK,GAHf,0CAAD,KAKC,CAAC9B,KAEJ1J,EAAAA,EAAAA,YAAU,YACJiL,EAASxM,SAAYsM,EAAOvE,IAAI0E,IACpChM,uBAAsB,WAAO,IAAD,EAC1B,UAAA6L,EAAO3T,IAAI8T,UAAX,SAAwBxM,iBACxBuM,EAASxM,SAAU,OAEpB,CAACyM,EAAYH,KAEhB/K,EAAAA,EAAAA,YAAU,WACHiL,EAASxM,SACd9E,EAAa8R,QAAQ/B,EAAQtL,KAC5B,CAACsL,EAAQtL,IAWL,CAAEE,WAJU,SAACjH,GAAoB,IAAD,EACrC,UAAA0T,EAAO3T,IAAIC,UAAX,SAAoBqH,kBAGD2M,gBAAAA,EAAiBK,WATnB,SAACrU,GAAD,OAAoB,SAACsU,GACjCA,GACLX,GAAU,SAAC1J,GAAD,OAAUA,EAAKzJ,IAAIR,EAAQsU,QAOWvN,WAAAA,GQWcwN,CAC9DlC,EACAvL,GAFMkN,GAAR,GAAQA,gBAAiB/M,GAAzB,GAAyBA,WAAYoN,GAArC,GAAqCA,WAAYtN,GAAjD,GAAiDA,YAKjD4B,EAAAA,EAAAA,YAAU,YACR,iBAAC,2GAC0B6L,EAAAA,EAAAA,IAASnC,GADnC,UACOoC,EADP,8BAGGxH,EAAAA,GAAAA,MAAc,kBAHjB,kBAIUrB,EAAI,MAJd,OAMShK,EAAyC6S,EAAzC7S,QAAyC6S,EAAhCC,IAAK5N,EAA2B2N,EAA3B3N,UAAcoM,GANrC,OAMkDuB,EANlD,IAOCxB,GAAW7T,EAAAA,EAAAA,IAAIwC,IACfyR,EAAavM,GACbqM,EAAYD,GACZE,EAAY1T,EAASiV,gBAAgB/S,IAVtC,2CAAD,KAYC,CAACgK,EAAKyG,EAAQhE,MAEjB1F,EAAAA,EAAAA,YAAU,WACHuK,IACLxC,SAAS/K,MAAQuN,EAAS1Q,KAAO,oBAChC,CAAC0Q,IAEJ,IAAM0B,IAAQzN,EAAAA,EAAAA,IAAQ,iBAAC,2FACf0N,EADe,OACVjT,QADU,IACVA,OADU,EACVA,EAASkT,WADC,UAEfrC,EAAAA,EAAAA,IAAaJ,EAAQ,CAAEzQ,QAASiT,IAFjB,OAGrBtB,GAAS,GAHY,4CAOjBwB,IAAgBC,EAAAA,EAAAA,cAAYC,EAAAA,EAAAA,GAASL,GAAO,KAAO,CAACA,KACpDjJ,GAAcoJ,GAAcG,MAE5BC,GAAc,SAACnV,EAAgBoV,GACnCnC,GAAW,SAAChJ,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAM3J,OAAON,EAAQqV,EAAAA,GAAiBD,MAC3D7B,GAAS,GACTwB,MAGI/N,GAAW,mCAAG,WAAOF,GAAP,0FAA4BpG,EAA5B,gCAClB2S,EAAavM,GADK,UAEZ2L,EAAAA,EAAAA,IAAaJ,EAAQ,CAAEvL,UAAAA,IAFX,uBAGZ6E,KAHY,OAIlBjL,GAAQ4U,GAAYxO,GAJF,2CAAH,sDAOXwO,GAAc,SAACxO,GAAD,cAClB0M,SADkB,IAClBA,QADkB,EAClBA,GAAI+B,KAAK,UAAW,CAAEzO,UAAAA,KAElB0O,IAAgBrO,EAAAA,EAAAA,IACpB,YAAqD,ITzF1BsO,ESyFxBC,EAAiD,EAAjDA,QAAS5O,EAAwC,EAAxCA,UAAW6O,EAA6B,EAA7BA,WACrB3O,GAAYF,GACP4O,KT3FoBD,ES4FV,kBAAMzO,GAAY2O,GAAW,IT3FhD1I,EAAAA,GAAAA,QAAgB,CACdvC,SACE,yDAEE,SAAC,IAAD,CACEvJ,KAAK,QACLc,KAAK,OACLI,QAAS,WACP4K,EAAAA,GAAAA,QAAgB,UAChBwI,KALJ,qBAYJ5S,IAAK,SACL+S,SAAU,SS8ENC,IAAgB1O,EAAAA,EAAAA,IACpB,YAAkD,IAA/CL,EAA8C,EAA9CA,UAAW9G,EAAmC,EAAnCA,OAAQ8V,EAA2B,EAA3BA,QACpB9O,GAAYF,GACZqO,GAAYnV,GAAQ,kBAAM8V,KAC1B1C,GAAY,SAACnJ,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAM8L,SAAS/V,EAAQ8V,UAIjDnN,EAAAA,EAAAA,YAAU,WAGR,OAFE,OAAF6K,SAAE,IAAFA,IAAAA,GAAIwC,GAAG,UAAWR,IAChB,OAAFhC,SAAE,IAAFA,IAAAA,GAAIwC,GAAG,UAAWH,IACX,WAAM,OAAKrC,SAAL,IAAKA,IAAAA,GAAIyC,wBACrB,CAACzC,GAAIgC,GAAeK,KAEvB,IAOMK,GAAc,SAClBpP,EACA9G,EACA8V,GAE0CA,EAAlC1M,MAAkC0M,EAA3BpN,OAAf,IAA0ByN,GAA1B,OAA0CL,EAA1C,IACE,OAAFtC,SAAE,IAAFA,IAAAA,GAAI+B,KAAK,UAAW,CAAEzO,UAAAA,EAAW9G,OAAAA,EAAQ8V,QAASK,IAClD1C,GAAiBzT,EAAQ8V,IAGrBM,GAAgB,SAACpW,EAAgB2B,GACrC,IAAMZ,EAAQF,EAAAA,GAAAA,OAAiBc,GAC/BwT,GAAYnV,GAAQ,SAACiK,GAAD,eAAC,UAAeA,GAAhB,IAAsBlJ,MAAAA,QAGtCsV,GAAiB,SAACjB,GACtB,GAAKnN,EAAL,CACA,IAAMqO,EAAQlB,EAAGnN,GACjB,GAAIqO,IAAUrO,EAAd,CACAmL,EAAYkD,GACZ,IA3BqBC,EA2BfC,EAASF,EAAMG,YACf7W,EAAS0W,EAAM1W,OACrB,GAAK4W,GAAW5W,EAChBwW,GAAa,WAAb,UAAiBI,IA9BID,EA+BP3W,EA3BZ,OAAF4T,SAAE,IAAFA,IAAAA,GAAI+B,KAAK,OAAQ,CAAEgB,UAAAA,IAHA,SAAC,GAAD,IAAGvW,EAAH,EAAGA,OAAQY,EAAX,EAAWA,OAAX,OACjBwS,GAAY,SAACnJ,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMyM,eAAe1W,EAAQY,YAmCjDsJ,GAAU,SAAC2J,GAAsC,IAAlBpD,EAAiB,wDACpD,GAAK3J,EAAL,CACA,IAAM6P,EAAWlG,EAAI,OAAG7O,QAAH,IAAGA,OAAH,EAAGA,EAAS7B,IAAI8T,QAAc3K,EACnD,GAA0B0N,EAAAA,EAAAA,IAAWD,GAArC,eAAO3W,EAAP,KAAe8V,EAAf,KACMpO,EAAW5E,EAAYgE,EAAW+M,EAAY7T,GACpDkW,GAAYxO,EAAU1H,EAAQ8V,GAC9B9O,GAAYU,GACZyN,GAAYnV,GAAQ,kBAAM8V,KAC1B1C,GAAY,SAACnJ,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAM8L,SAAS/V,EAAQ8V,QAGzC/T,GAAe,WACnB,IAAM8U,GAAatV,EAAAA,EAAAA,GAAKuF,GACxB+P,GAAc3M,GAAQ2M,IAQlBC,GAAe,CAAEzE,OAAAA,EAAQzQ,QAAAA,EAASkF,UAAAA,EAAWmB,SAAAA,EAAUlB,WAAAA,IAEvDgQ,IACJ,iBAAK/U,UAAU,mBAAf,WACE,SAAC8Q,GAAD,CACEpH,MAAOA,EACPC,YAAaA,GACbQ,WAAY,kBAAMkK,IAAe,SAACpM,GAAD,OAAUA,EAAK+M,WAChD5K,WAAY,kBAAMiK,IAAe,SAACpM,GAAD,OAAUA,EAAKgN,WAChD5K,SAAQ,iBAAEpE,QAAF,IAAEA,OAAF,EAAEA,EAAU5G,oBAAZ,SACRiL,SAAQ,iBAAErE,QAAF,IAAEA,OAAF,EAAEA,EAAUvG,oBAAZ,YAEV,mCACGoF,QADH,IACGA,OADH,EACGA,EAAWjF,KAAI,SAACiG,GAAD,OACd,oBAAmB9F,UAAU,YAAY8C,IAAKuP,GAAWvM,GAAzD,UACE,SAACoP,IAAD,QACEpP,IAAKA,EACLuO,eAAgBA,GAChBrC,gBAAiBA,IACb8C,MALMhP,OAShB,SAAChG,EAAD,CAAeC,aAAcA,SAE/B,SAACkC,IAAD,QACEiG,QAASA,GACTnI,aAAcA,GACdkF,WAAYA,GACZkD,WAlCa,SAACnK,GAClB,IAAM0H,EAAQ,OAAGZ,QAAH,IAAGA,OAAH,EAAGA,EAAWqK,QAAO,SAACgG,GAAD,OAAQA,IAAOnX,MAC1C,OAAR0H,QAAQ,IAARA,OAAA,EAAAA,EAAU2J,SAAUrK,GAAYU,GAAU,IAiCtCV,YAAaA,GACbwC,iBAvDmB,SAACxJ,GAAD,OACvBmV,GAAYnV,GAAQ,SAACiK,GAAD,eAAC,UAAeA,GAAhB,IAAsBvB,QAASuB,EAAKvB,cAuDhDoO,QAKV,OACE,SAAC,KAAD,WACE,SAACM,EAAA,GAAD,WACE,SAACC,EAAA,GAAD,UAAmBN,SAM3B,IAAMG,GAMF,SAAC,GASE,IARLpP,EAQI,EARJA,IACAuO,EAOI,EAPJA,eACArC,EAMI,EANJA,gBACApS,EAKI,EALJA,QACAqG,EAII,EAJJA,SACAlB,EAGI,EAHJA,WACAD,EAEI,EAFJA,UACAuL,EACI,EADJA,OAEA,GAA+BnK,EAAAA,EAAAA,YAAWC,EAAAA,SAAlCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QAEbE,EAAI,OAAG3G,QAAH,IAAGA,OAAH,EAAGA,EAAS7B,IAAI+H,GACpB5H,EAAS,OAAG+H,QAAH,IAAGA,OAAH,EAAGA,EAAU7H,YAAY0H,GAClCU,EAAY,OAAGJ,QAAH,IAAGA,OAAH,EAAGA,EAAWK,mBAAmBX,GAU7CwP,GAAU3T,EAAAA,EAAAA,UAAQ,WACtB,IAAKmD,EAAW,OAAO,EACvB,IAAMyQ,EAAYzQ,EAAU3D,QAAQ4D,GAC9ByQ,EAAY1Q,EAAU3D,QAAQ2E,GACpC,OAAO2P,KAAKC,IAAIF,EAAYD,IAAc,IACzC,CAACxQ,EAAYe,EAAKhB,IAErB,OAAKyB,GAASrI,GAEZ,SAAC+I,EAAA,QAAD,CACE/I,UAAWA,EACXsI,aAAcA,EACdmP,YArBgB,SAAChW,GACnB0U,GAAe,SAACpM,GAAD,OAAUA,EAAK2N,SAAS9P,EAAKnG,OAqB1CkW,SAAUtP,EAAKsP,SACfxF,OAAQA,EACRhK,QAASA,EACTyP,aArBiB,SAACC,EAAkB/W,GACtC,IAAK+W,EAAS,OAAO/D,GAAgB,SAAC/J,GAAD,OAAUA,EAAKtJ,OAAOmH,MAC3DkM,GAAgB,SAAC/J,GAAD,OAAUA,EAAKzJ,IAAIsH,EAAK9G,OAoBtCsW,QAASA,IAVmB,O,gNC1QrBU,EAAY,SAAC3F,GAAD,OAAoB,kBAC3CmB,EAAAA,EAAAA,IAAGyE,EAAAA,GAAU,CACXC,MAAO,CACLrU,QAAQoL,EAAAA,EAAAA,MACRnL,UAAUqU,EAAAA,EAAAA,MACV9F,OAAAA,O,6ECQOlK,EAAUoB,EAAAA,cAAoB,CACzCiK,QAAItK,EACJ8G,KAAM,EACN3B,QAAQ,EACR4B,WAAW,EACX5H,SAAS+P,EAAAA,EAAAA,MACTvO,QAAS,GACTzB,eAAWc,EACX4F,QAAS,aACToB,SAAS,WAAD,wBAAE,wGAAY,GAAZ,2CAAF,kDAAC,GACTC,UAAU,WAAD,wBAAE,wGAAY,GAAZ,2CAAF,kDAAC,GACVtB,WAAa,aACb4E,iBAAkB,SAACzT,EAAgB8V,OAGtB,SAASuC,IAAQ,IAAD,EACvBhG,EAAM,WAAGC,EAAAA,EAAAA,MAAYD,cAAf,QAAyB,GACrC,GAAkClO,EAAAA,EAAAA,YAAlC,eAAOiE,EAAP,KAAkBkQ,EAAlB,KACA,GAAwBnU,EAAAA,EAAAA,WAAU,GAAlC,eAAO6L,EAAP,KAAauI,EAAb,KACA,GAA8BpU,EAAAA,EAAAA,UAAmC,IAAjE,eAAO0F,EAAP,KAAgB2O,EAAhB,KACA,GAA8BrU,EAAAA,EAAAA,WAASiU,EAAAA,EAAAA,OAAvC,eAAO/P,EAAP,KAAgBwG,EAAhB,KACA,GAAoB1K,EAAAA,EAAAA,UAAS6T,EAAU3F,IAAvC,eAAOmB,EAAP,KAAWiF,EAAX,KACA,GAA4BtU,EAAAA,EAAAA,WAAS,GAArC,eAAOuU,EAAP,KAAeC,EAAf,KACA,GAAkCxU,EAAAA,EAAAA,WAAS,GAA3C,eAAO8L,EAAP,KAAkB2I,EAAlB,KACMhN,GAAMC,EAAAA,EAAAA,MAENqE,GAAW8E,EAAAA,EAAAA,cAAW,iBAAC,qGACR6D,EAAAA,EAAAA,IAAiBxG,GADT,UACrByG,EADqB,8BAGzB7L,EAAAA,GAAAA,MAAc,qCAHW,mBAIlB,GAJkB,cAM3BsL,EAAQO,EAAK9I,MANc,mBAOpB,GAPoB,2CAQ1B,CAACqC,IAEElC,GAAY6E,EAAAA,EAAAA,cAAW,iBAAC,qGACL+D,EAAAA,EAAAA,IAAiB1G,GADZ,UACtB2G,EADsB,8BAG1B/L,EAAAA,GAAAA,MAAc,sCAHY,mBAInB,GAJmB,cAM5BqL,EAAazP,EAAAA,EAAAA,oBAA8BmQ,IANf,mBAOrB,GAPqB,2CAQ3B,CAAC3G,IAEE4G,GAAkBjE,EAAAA,EAAAA,cAAY,YAClCkE,EAAAA,EAAAA,IAAY7G,KACX,CAACA,KAEJ1J,EAAAA,EAAAA,YAAU,WACR,IAAMwQ,EAAQ,mCAAG,sGACUjJ,IADV,cACTkJ,EADS,gBAEWjJ,IAFX,UAETkJ,EAFS,OAGVD,GAAeC,EAHL,yCAGyBzN,EAAI,MAH7B,OAIf+M,GAAU,GACVM,IALe,4CAAH,qDAQd,OADAE,IACOF,IACN,CAAC/I,EAAUC,EAAWvE,EAAKqN,KAE9BtQ,EAAAA,EAAAA,YAAU,WAiCR,OAhCA6K,EAAGwC,GAAG,QAAQ,YAA4B,IAAzBO,EAAwB,EAAxBA,UAAW1S,EAAa,EAAbA,OAC1ByU,GAAa,SAACrO,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMqP,cAAc/C,EAAW1S,SAGxD2P,EAAGwC,GAAG,QAAQ,YAA0B,IAAvBuD,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACf3V,EAAqB0V,EAArB1V,OAAQC,EAAayV,EAAbzV,SAChB0U,EAAWgB,GACP3V,KAAWoL,EAAAA,EAAAA,OACfwK,EAAY5V,EAAQC,MAGtB0P,EAAGwC,GAAG,SAAS,YAA0B,IAAvB0D,EAAsB,EAAtBA,OAAQF,EAAc,EAAdA,QAChB3V,EAAqB6V,EAArB7V,OAAQC,EAAa4V,EAAb5V,SAEhB,GADA0U,EAAWgB,GACP3V,KAAWoL,EAAAA,EAAAA,MAAa,OAAOuE,EAAG+B,KAAK,QAC3CoE,EAAa9V,EAAQC,MAGvB0P,EAAGwC,GAAG,WAAW,SAAC8C,GAChB,IAAQ9Y,EAAoB8Y,EAApB9Y,OAAQ8V,EAAYgD,EAAZhD,QAChBwC,GAAa,SAACrO,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMC,QAAQlK,EAAQ8V,SAG/CtC,EAAGwC,GAAG,SAAS,YAA0B,IAAvBnS,EAAsB,EAAtBA,OAAQjC,EAAc,EAAdA,QACpBiC,KAAWoL,EAAAA,EAAAA,OACfqJ,GAAa,SAACrO,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAM2P,UAAU/V,EAAQjC,SAGjD4R,EAAGwC,GAAG,gBAAiBrF,QAAQkJ,OAC/BrG,EAAGwC,GAAG,WAAW,kBAAM4C,GAAa,MACpCpF,EAAGwC,GAAG,cAAc,kBAAM4C,GAAa,MAEhC,WACLpF,EAAGyC,qBACHzC,EAAGsG,WAEJ,CAACtG,IAQJ,OACE,SAACuG,EAAA,EAAD,CAAS/H,SAAU0G,EAAnB,UACE,SAACvQ,EAAQ6R,SAAT,CACEhM,MAAO,CACLwF,GAAAA,EACAxD,KAAAA,EACA3B,QAAQ,EACRhG,QAAAA,EACAwB,QAAAA,EACAoG,UAAAA,EACA7H,UAAAA,EACA0G,QAbQ,kBAAM2J,EAAMT,EAAU3F,KAc9BnC,SAAAA,EACAC,UAAAA,EACAtB,WAAAA,EACA4E,iBArBiB,SAACzT,EAAgB8V,GACxCwC,GAAa,SAACrO,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMC,QAAQlK,EAAQ8V,QAO3C,UAgBE,SAAC9C,EAAA,QAAD,QAMR,IAAMyG,EAAc,SAAC5V,EAAgBC,GACnCmJ,EAAAA,GAAAA,QAAgBpJ,GAChBoJ,EAAAA,GAAAA,QAAgB,CACdvC,QAAQ,GAAD,OAAK5G,EAAL,oBACP5B,MAAM,SAAC+X,EAAA,EAAD,IACNpX,IAAKgB,KAIH8V,EAAe,SAAC9V,EAAgBC,GACpCmJ,EAAAA,GAAAA,QAAgBpJ,GAChBoJ,EAAAA,GAAAA,QAAgB,CACdvC,QAAQ,GAAD,OAAK5G,EAAL,oBACP5B,MAAM,SAACgY,EAAA,EAAD,IACNrX,IAAKgB","sources":["lib/draw/StateSet.ts","pages/reader/ReaderUtils.tsx","pages/reader/lib/scroll.ts","pages/reader/lib/array.ts","component/UserAvatar.tsx","pages/reader/PageNav/PageNav.tsx","pages/reader/header/Left.tsx","pages/reader/header/Middle.tsx","pages/reader/header/Right.tsx","pages/reader/header/index.tsx","pages/reader/Reader.tsx","lib/network/io.ts","pages/reader/Team.tsx"],"sourcesContent":["import { DrawState, Operation, Stroke } from \"./DrawState\";\r\nimport { List, Map, Record } from \"immutable\";\r\nimport { NotePage } from \"lib/note/note\";\r\n\r\ninterface StateSetRecordType {\r\n  states: Map<string, DrawState>;\r\n  editStack: List<string>;\r\n  undoStack: List<string>;\r\n}\r\n\r\nconst defaultRecord: Readonly<StateSetRecordType> = {\r\n  states: Map(),\r\n  editStack: List(),\r\n  undoStack: List(),\r\n};\r\n\r\ntype StateSetRecord = Record<StateSetRecordType>;\r\nconst defaultFactory = Record(defaultRecord);\r\n\r\nexport type SetOperation = Operation & { pageID: string };\r\n\r\nexport class StateSet {\r\n  constructor(\r\n    private immutable: StateSetRecord,\r\n    public lastOp?: SetOperation\r\n  ) {}\r\n\r\n  static createFromPages(pageRec: globalThis.Record<string, NotePage>) {\r\n    return new StateSet(\r\n      defaultFactory().set(\r\n        \"states\",\r\n        Map(pageRec).map(({ state, ratio }) =>\r\n          DrawState.loadFromFlat(state, ratio)\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  getImmutable() {\r\n    return this.immutable;\r\n  }\r\n\r\n  getStates() {\r\n    return this.getImmutable().get(\"states\");\r\n  }\r\n\r\n  getOneState(pageID: string) {\r\n    return this.getStates().get(pageID);\r\n  }\r\n\r\n  getEditStack() {\r\n    return this.getImmutable().get(\"editStack\");\r\n  }\r\n\r\n  getUndoStack() {\r\n    return this.getImmutable().get(\"undoStack\");\r\n  }\r\n\r\n  setState(pageID: string, drawState: DrawState) {\r\n    const prevDS = this.getOneState(pageID);\r\n    if (!prevDS || prevDS === drawState) return this;\r\n    let currRecord = this.getImmutable()\r\n      .update(\"states\", (s) => s.set(pageID, drawState))\r\n      .update(\"editStack\", (l) => l.push(pageID))\r\n      .delete(\"undoStack\");\r\n\r\n    const { lastOp } = drawState;\r\n    const lastSetOp = lastOp && { ...lastOp, pageID };\r\n\r\n    return new StateSet(currRecord, lastSetOp);\r\n  }\r\n\r\n  // sync with mutation.\r\n  syncStrokeTime(pageID: string, stroke: Stroke) {\r\n    const prevDS = this.getOneState(pageID);\r\n    prevDS && DrawState.syncStrokeTime(prevDS, stroke);\r\n    return this;\r\n  }\r\n\r\n  addState(pageID: string, notePage: NotePage) {\r\n    const { state, ratio } = notePage;\r\n    const newDS = DrawState.loadFromFlat(state, ratio);\r\n    const currRecord = this.getImmutable().update(\"states\", (s) =>\r\n      s.set(pageID, newDS)\r\n    );\r\n    return new StateSet(currRecord);\r\n  }\r\n\r\n  deleteState(pageID: string) {\r\n    return new StateSet(\r\n      this.getImmutable().update(\"states\", (s) => s.delete(pageID))\r\n    );\r\n  }\r\n\r\n  isUndoable() {\r\n    return this.getEditStack().size > 0;\r\n  }\r\n\r\n  isRedoable() {\r\n    return this.getUndoStack().size > 0;\r\n  }\r\n\r\n  undo() {\r\n    if (!this.isUndoable()) return this;\r\n    const lastUid = this.getEditStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.undo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"editStack\", (s) => s.pop())\r\n        .update(\"undoStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  redo() {\r\n    if (!this.isRedoable()) return this;\r\n    const lastUid = this.getUndoStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.redo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"undoStack\", (s) => s.pop())\r\n        .update(\"editStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  getLastDS(): [string, DrawState] | undefined {\r\n    const pageID = this.lastOp?.pageID;\r\n    const ds = pageID && this.getOneState(pageID);\r\n    if (ds) return [pageID, ds];\r\n  }\r\n}\r\n","import { Button, message } from \"antd\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport { FC } from \"react\";\r\n\r\nexport const AddPageButton: FC<{ addFinalPage: () => void }> = ({\r\n  addFinalPage,\r\n}) => {\r\n  return (\r\n    <div className=\"add-btn-wrapper\">\r\n      <Button\r\n        type=\"dashed\"\r\n        icon={<PlusOutlined />}\r\n        block\r\n        onClick={addFinalPage}\r\n      >\r\n        New page\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const showPageDelMsg = (onUndo: () => void) => {\r\n  message.warning({\r\n    content: (\r\n      <>\r\n        One page was deleted.\r\n        <Button\r\n          size=\"small\"\r\n          type=\"link\"\r\n          onClick={() => {\r\n            message.destroy(\"DELETE\");\r\n            onUndo();\r\n          }}\r\n        >\r\n          Undo\r\n        </Button>\r\n      </>\r\n    ),\r\n    key: \"DELETE\",\r\n    duration: 10,\r\n  });\r\n};\r\n","import { useDebugValue, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport localforage from \"localforage\";\r\nimport { Map } from \"immutable\";\r\n\r\nconst scrollForage = localforage.createInstance({ name: \"scroll\" });\r\n\r\nexport function useScrollPage(noteID: string, pageOrder = [] as string[]) {\r\n  const [refMap, setRefMap] = useState(Map<string, HTMLElement>());\r\n  const scrolled = useRef(false);\r\n  const [prevPageID, setPrevPageID] = useState(\"\");\r\n  const [inviewRatios, setInviewRatios] = useState(Map<string, number>());\r\n  const currPageID = useMemo(\r\n    () => largestKey(inviewRatios, pageOrder),\r\n    [inviewRatios, pageOrder]\r\n  );\r\n  useDebugValue(currPageID);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const stored = await scrollForage.getItem<string>(noteID);\r\n      if (!stored) return (scrolled.current = true);\r\n      setPrevPageID(stored);\r\n    })();\r\n  }, [noteID]);\r\n\r\n  useEffect(() => {\r\n    if (scrolled.current || !refMap.has(prevPageID)) return;\r\n    requestAnimationFrame(() => {\r\n      refMap.get(prevPageID)?.scrollIntoView();\r\n      scrolled.current = true;\r\n    });\r\n  }, [prevPageID, refMap]);\r\n\r\n  useEffect(() => {\r\n    if (!scrolled.current) return;\r\n    scrollForage.setItem(noteID, currPageID);\r\n  }, [noteID, currPageID]);\r\n\r\n  const sectionRef = (pageID: string) => (el: HTMLElement | null) => {\r\n    if (!el) return;\r\n    setRefMap((prev) => prev.set(pageID, el));\r\n  };\r\n\r\n  const scrollPage = (pageID: string) => {\r\n    refMap.get(pageID)?.scrollIntoView();\r\n  };\r\n\r\n  return { scrollPage, setInviewRatios, sectionRef, currPageID };\r\n}\r\n\r\nconst largestKey = (map: Map<string, number>, order: string[]) => {\r\n  let result = \"\";\r\n  let maxRatio = 0;\r\n  for (let key of order) {\r\n    const ratio = map.get(key);\r\n    if (!ratio) continue;\r\n    if (ratio === 1) return key;\r\n    if (ratio > maxRatio) {\r\n      result = key;\r\n      maxRatio = ratio;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n","export function exchange<T>(list: T[], fromIndex: number, toIndex: number) {\r\n  const result = list.slice();\r\n  const [removed] = result.splice(fromIndex, 1);\r\n  if (!removed) return list;\r\n  result.splice(toIndex, 0, removed);\r\n  return result;\r\n}\r\n\r\nexport function insertAfter<T>(list: T[], prevItem: T, newItem: T) {\r\n  const prevIndex = list.indexOf(prevItem);\r\n  const curr = list.slice();\r\n  if (prevIndex === -1) return curr;\r\n  curr.splice(prevIndex + 1, 0, newItem);\r\n  return curr;\r\n}\r\n","import { Avatar } from \"antd\";\r\nimport { AvatarSize } from \"antd/lib/avatar/SizeContext\";\r\nimport { FC, useMemo } from \"react\";\r\nimport { getHashedColor } from \"lib/color\";\r\nimport { UserInfo } from \"lib/user\";\r\n\r\nexport const UserAvatar: FC<{\r\n  userInfo: UserInfo;\r\n  size?: AvatarSize;\r\n  onClick?: () => void;\r\n  chosen?: boolean;\r\n  className?: string;\r\n}> = ({\r\n  userInfo,\r\n  size = \"default\",\r\n  onClick = () => {},\r\n  chosen = false,\r\n  className,\r\n}) => {\r\n  const color = useMemo(() => getHashedColor(userInfo.userID), [userInfo]);\r\n  if (!userInfo) return null;\r\n  const { userName } = userInfo;\r\n\r\n  return (\r\n    <Avatar\r\n      className={className}\r\n      data-chosen={chosen}\r\n      size={size}\r\n      style={{ backgroundColor: color }}\r\n    >\r\n      <div className=\"avatar-wrapper\" onClick={onClick}>\r\n        {userName?.slice(0, 3)}\r\n      </div>\r\n    </Avatar>\r\n  );\r\n};\r\n","import React, {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useContext,\r\n  useLayoutEffect,\r\n  useEffect,\r\n} from \"react\";\r\nimport {\r\n  MoreOutlined,\r\n  PlusOutlined,\r\n  CopyOutlined,\r\n  DeleteOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  Draggable,\r\n  Droppable,\r\n  DropResult,\r\n  DragDropContext,\r\n} from \"react-beautiful-dnd\";\r\nimport { Avatar, Menu, Popover, Tabs } from \"antd\";\r\nimport {\r\n  ActiveKeyProvider,\r\n  Setter,\r\n  useActiveKey,\r\n  useAsideOpen,\r\n} from \"lib/hooks\";\r\nimport { ReaderMethods, ReaderStates } from \"../Reader\";\r\nimport PageWrapper from \"component/PageWrapper\";\r\nimport { UserAvatar } from \"component/UserAvatar\";\r\nimport { AddPageButton } from \"../ReaderUtils\";\r\nimport { exchange } from \"../lib/array\";\r\nimport IconFont from \"component/IconFont\";\r\nimport classNames from \"classnames\";\r\nimport { TeamCtx } from \"../Team\";\r\nimport { useMemoizedFn as useEvent } from \"ahooks\";\r\nimport { useSwipeable } from \"react-swipeable\";\r\nimport { NotePage } from \"lib/note/note\";\r\nimport { TeamState } from \"lib/draw/TeamState\";\r\nimport \"./preview.sass\";\r\n\r\nexport const PageNav: FC<ReaderMethods & ReaderStates> = (props) => {\r\n  const [left, setLeft] = useState(false);\r\n  const [asideOpen] = useAsideOpen();\r\n\r\n  const opposite = (\r\n    <Draggable draggableId=\"opposite\" index={left ? 1 : 0}>\r\n      {({ innerRef, draggableProps, dragHandleProps }) => (\r\n        <div\r\n          className=\"opposite\"\r\n          ref={innerRef}\r\n          {...draggableProps}\r\n          {...dragHandleProps}\r\n        />\r\n      )}\r\n    </Draggable>\r\n  );\r\n\r\n  return (\r\n    <ActiveKeyProvider initKey=\"ALL\">\r\n      <DragDropContext\r\n        onDragEnd={({ draggableId, destination }) => {\r\n          if (draggableId !== \"CARD\") return;\r\n          if (destination?.index === 0) setLeft(true);\r\n          if (destination?.index === 1) setLeft(false);\r\n        }}\r\n      >\r\n        <Droppable droppableId=\"preview-drop\" direction=\"horizontal\">\r\n          {({ droppableProps, innerRef, placeholder }, { isDraggingOver }) => (\r\n            <div\r\n              className=\"preview-drop\"\r\n              data-left={left}\r\n              data-open={asideOpen}\r\n              data-dragged={isDraggingOver}\r\n              ref={innerRef}\r\n              {...droppableProps}\r\n            >\r\n              {opposite}\r\n              <PreviewCard left={left} {...props} />\r\n              {placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </ActiveKeyProvider>\r\n  );\r\n};\r\n\r\nconst PreviewCard: FC<{ left: boolean } & ReaderMethods & ReaderStates> = ({\r\n  left,\r\n  ...props\r\n}) => {\r\n  const [activeKey] = useActiveKey();\r\n  const [asideOpen, setAsideOpen] = useAsideOpen();\r\n\r\n  const title = {\r\n    ALL: \"All Pages\",\r\n    MARKED: \"Bookmarks\",\r\n    WRITTEN: \"Notes\",\r\n  }[activeKey];\r\n\r\n  const { ref: swipeRef, ...swipeHandler } = useSwipeable({\r\n    onSwipedLeft() {\r\n      if (left) setAsideOpen(false);\r\n    },\r\n    onSwipedRight() {\r\n      if (!left) setAsideOpen(false);\r\n    },\r\n    swipeDuration: 200,\r\n  });\r\n\r\n  const previewTabs = useMemo(() => <PreviewTabs />, []);\r\n  const pageList = useMemo(() => <PageList {...props} />, [props]);\r\n\r\n  return (\r\n    <Draggable draggableId={\"CARD\"} index={left ? 0 : 1}>\r\n      {(\r\n        { innerRef, draggableProps, dragHandleProps },\r\n        { isDragging, isDropAnimating }\r\n      ) => (\r\n        <div\r\n          className=\"preview-card\"\r\n          ref={(e) => {\r\n            innerRef(e);\r\n            swipeRef(e);\r\n          }}\r\n          data-open={asideOpen}\r\n          data-dragged={isDragging}\r\n          data-animating={isDropAnimating}\r\n          {...draggableProps}\r\n          {...swipeHandler}\r\n        >\r\n          <div className=\"drag-handle\" {...dragHandleProps} />\r\n          <h3>{title}</h3>\r\n          {previewTabs}\r\n          {pageList}\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nconst PageList: FC<ReaderMethods & ReaderStates> = (props) => {\r\n  const refRec = useRef<Record<string, HTMLElement>>({});\r\n  const [activeKey] = useActiveKey();\r\n  const [asideOpen] = useAsideOpen();\r\n  const { pageOrder, currPageID } = props;\r\n  const { saveReorder, scrollPage, addFinalPage } = props;\r\n\r\n  const onDragEnd = ({ source, destination }: DropResult) => {\r\n    if (!destination || !pageOrder) return;\r\n    const { index: fromIndex } = source;\r\n    const { index: toIndex } = destination;\r\n    const pageID = pageOrder[fromIndex];\r\n    if (fromIndex === toIndex || !pageID) return;\r\n    const newOrder = exchange(pageOrder, fromIndex, toIndex);\r\n    saveReorder(newOrder, true);\r\n    requestAnimationFrame(() => scrollPage(pageID));\r\n  };\r\n\r\n  const initScroll = useEvent(() => {\r\n    refRec.current[currPageID]?.scrollIntoView();\r\n  });\r\n  useLayoutEffect(() => {\r\n    if (asideOpen) initScroll();\r\n  }, [asideOpen, initScroll]);\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Droppable droppableId=\"preview-list\">\r\n        {({ droppableProps, innerRef, placeholder }) => (\r\n          <div className=\"page-list\" ref={innerRef} {...droppableProps}>\r\n            {pageOrder?.map((uid, index) => (\r\n              <PagePreview\r\n                key={uid}\r\n                uid={uid}\r\n                pageIndex={index}\r\n                refRec={refRec.current}\r\n                {...props}\r\n              />\r\n            ))}\r\n            {placeholder}\r\n            {activeKey === \"ALL\" && (\r\n              <AddPageButton addFinalPage={addFinalPage} />\r\n            )}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nconst PagePreview: FC<\r\n  {\r\n    uid: string;\r\n    pageIndex: number;\r\n    refRec: Record<string, HTMLElement>;\r\n  } & ReaderMethods &\r\n    ReaderStates\r\n> = ({ uid, pageIndex, refRec, ...props }) => {\r\n  const { stateSet, pageRec, currPageID } = props;\r\n  const { teamState, ignores } = useContext(TeamCtx);\r\n  const [activeKey] = useActiveKey();\r\n  const [chosen, setChosen] = useState(\"\");\r\n\r\n  const page = pageRec?.get(uid);\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStateMap = teamState?.getOnePageStateMap(uid);\r\n\r\n  const marked = useRef(false);\r\n  useEffect(() => {\r\n    if (activeKey !== \"MARKED\") marked.current = false;\r\n  }, [activeKey]);\r\n\r\n  const userIDs = useMemo(\r\n    () => TeamState.getValidUsers(teamStateMap, ignores),\r\n    [teamStateMap, ignores]\r\n  );\r\n\r\n  if (!page || !drawState) return null;\r\n  marked.current = page.marked || marked.current;\r\n\r\n  if (\r\n    activeKey === \"WRITTEN\" &&\r\n    drawState.isEmpty() &&\r\n    (!teamStateMap || teamStateMap.every((ds) => ds.isEmpty()))\r\n  ) {\r\n    return null;\r\n  }\r\n  if (activeKey === \"MARKED\" && !marked.current) return null;\r\n  const curr = currPageID === uid;\r\n  const { scrollPage } = props;\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={uid}\r\n      index={pageIndex}\r\n      isDragDisabled={activeKey !== \"ALL\"}\r\n    >\r\n      {(\r\n        { innerRef, draggableProps, dragHandleProps },\r\n        { isDragging, isDropAnimating }\r\n      ) => (\r\n        <div\r\n          ref={(e) => {\r\n            innerRef(e);\r\n            if (e) refRec[uid] = e;\r\n          }}\r\n          className=\"page\"\r\n          data-curr={curr}\r\n          data-dragged={isDragging}\r\n          data-animating={isDropAnimating}\r\n          onClick={() => scrollPage(uid)}\r\n          {...draggableProps}\r\n          {...dragHandleProps}\r\n        >\r\n          <PageWrapper\r\n            drawState={teamStateMap?.get(chosen) || drawState}\r\n            teamStateMap={chosen ? undefined : teamStateMap}\r\n            thumbnail={page.image}\r\n            ignores={ignores}\r\n            preview\r\n          />\r\n          <PreviewTools\r\n            uid={uid}\r\n            index={pageIndex}\r\n            chosen={chosen}\r\n            setChosen={setChosen}\r\n            page={page}\r\n            userIDs={userIDs}\r\n            {...props}\r\n          />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nconst PreviewTools: FC<\r\n  {\r\n    uid: string;\r\n    index: number;\r\n    chosen: string;\r\n    setChosen: Setter<string>;\r\n    page: NotePage;\r\n    userIDs: string[];\r\n  } & ReaderMethods\r\n> = React.memo(({ uid, index, chosen, setChosen, page, userIDs, ...props }) => {\r\n  const { switchPageMarked } = props;\r\n  return (\r\n    <div className=\"tools\" onClick={(e) => e.stopPropagation()}>\r\n      <div\r\n        className=\"bookmark\"\r\n        data-marked={page.marked}\r\n        onClick={() => switchPageMarked(uid)}\r\n      />\r\n      <div className=\"index\">{index + 1}</div>\r\n      <PreviewOption uid={uid} {...props} />\r\n      <TeamAvatars userIDs={userIDs} chosen={chosen} setChosen={setChosen} />\r\n    </div>\r\n  );\r\n});\r\nPreviewTools.displayName = \"PreviewTools\";\r\n\r\nconst TeamAvatars: FC<{\r\n  userIDs: string[];\r\n  chosen: string;\r\n  setChosen: Setter<string>;\r\n}> = ({ userIDs, chosen, setChosen }) => {\r\n  const { userRec } = useContext(TeamCtx);\r\n  return (\r\n    <Avatar.Group\r\n      maxCount={2}\r\n      size=\"default\"\r\n      className={classNames(\"team-group\", { chosen })}\r\n      maxPopoverPlacement=\"bottom\"\r\n    >\r\n      {userIDs.map((userID) => {\r\n        const userInfo = userRec[userID];\r\n        if (!userInfo) return null;\r\n        return (\r\n          <UserAvatar\r\n            key={userID}\r\n            size=\"default\"\r\n            userInfo={userInfo}\r\n            className=\"preview-avatar\"\r\n            chosen={chosen === userID}\r\n            onClick={() => setChosen((prev) => (prev === userID ? \"\" : userID))}\r\n          />\r\n        );\r\n      })}\r\n    </Avatar.Group>\r\n  );\r\n};\r\n\r\nconst PreviewOption: FC<{ uid: string } & ReaderMethods> = ({\r\n  uid,\r\n  addPage,\r\n  deletePage,\r\n}) => {\r\n  const menu = (\r\n    <Menu\r\n      items={[\r\n        {\r\n          key: \"ADD\",\r\n          icon: <PlusOutlined />,\r\n          label: \"Add page\",\r\n          onClick: () => addPage(uid),\r\n        },\r\n        {\r\n          key: \"COPY\",\r\n          icon: <CopyOutlined />,\r\n          label: \"Duplicate\",\r\n          onClick: () => addPage(uid, true),\r\n        },\r\n        {\r\n          key: \"DELETE\",\r\n          icon: <DeleteOutlined />,\r\n          label: \"Delete\",\r\n          danger: true,\r\n          onClick: () => deletePage(uid),\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n  return (\r\n    <Popover\r\n      content={menu}\r\n      trigger=\"click\"\r\n      placement=\"left\"\r\n      destroyTooltipOnHide\r\n      getPopupContainer={(e) => e.parentElement?.parentElement?.parentElement!}\r\n    >\r\n      <div className=\"option\">\r\n        <MoreOutlined />\r\n      </div>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst PreviewTabs: FC = () => {\r\n  const [activeKey, setActiveKey] = useActiveKey();\r\n  const { TabPane } = Tabs;\r\n  return (\r\n    <Tabs\r\n      className=\"tabs\"\r\n      activeKey={activeKey}\r\n      onChange={setActiveKey}\r\n      tabBarGutter={0}\r\n      size=\"small\"\r\n      centered\r\n    >\r\n      <TabPane tab={<IconFont type=\"icon-uf_paper\" />} key=\"ALL\" />\r\n      <TabPane tab={<IconFont type=\"icon-bookmark2\" />} key=\"MARKED\" />\r\n      <TabPane tab={<IconFont type=\"icon-write\" />} key=\"WRITTEN\" />\r\n    </Tabs>\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { HomeFilled, SaveOutlined } from \"@ant-design/icons\";\r\n\r\nexport const HeaderLeft: FC<{\r\n  saved: boolean;\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ saved, instantSave }) => {\r\n  const nav = useNavigate();\r\n  return (\r\n    <div className=\"left\">\r\n      <Button\r\n        type=\"text\"\r\n        onClick={async () => {\r\n          await instantSave();\r\n          nav(\"/\");\r\n        }}\r\n        icon={<HomeFilled style={{ opacity: 0.8 }} />}\r\n      />\r\n      <Button\r\n        type=\"text\"\r\n        className=\"save\"\r\n        onClick={instantSave}\r\n        disabled={saved}\r\n        icon={<SaveOutlined />}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\nimport { Button, message, Popover, ButtonProps, Segmented } from \"antd\";\r\nimport {\r\n  BulbFilled,\r\n  BulbOutlined,\r\n  UndoOutlined,\r\n  RedoOutlined,\r\n  GatewayOutlined,\r\n  HighlightTwoTone,\r\n  HighlightOutlined,\r\n} from \"@ant-design/icons\";\r\nimport IconFont from \"component/IconFont\";\r\nimport { PenPanel, WidthSelect } from \"../tools/PenPanel\";\r\nimport { useForceLight } from \"lib/Dark\";\r\nimport { useDrawCtrl, useUpdateDrawCtrl } from \"lib/draw/DrawCtrl\";\r\n\r\nexport const HeaderMiddle: FC<{\r\n  handleUndo: () => void;\r\n  handleRedo: () => void;\r\n  undoable: boolean;\r\n  redoable: boolean;\r\n}> = ({ handleUndo, handleRedo, undoable, redoable }) => {\r\n  const { mode, finger } = useDrawCtrl();\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n  const [forceLight, setForceLight] = useForceLight();\r\n\r\n  return (\r\n    <div className=\"middle\" data-force-light={forceLight}>\r\n      <Button\r\n        type=\"text\"\r\n        icon={<UndoOutlined />}\r\n        onClick={handleUndo}\r\n        disabled={!undoable}\r\n      />\r\n      <Button\r\n        type=\"text\"\r\n        icon={<RedoOutlined />}\r\n        onClick={handleRedo}\r\n        disabled={!redoable}\r\n      />\r\n      <Button\r\n        type={finger ? \"link\" : \"text\"}\r\n        onClick={() => {\r\n          updateDrawCtrl({ finger: !finger });\r\n          message.destroy(\"FINGER\");\r\n          message.open({\r\n            content: finger ? \"Pencil only\" : \"Draw with finger\",\r\n            key: \"FINGER\",\r\n          });\r\n        }}\r\n        icon={<IconFont type=\"icon-finger\" />}\r\n      />\r\n      <Button\r\n        className=\"force-light-btn\"\r\n        type=\"text\"\r\n        icon={forceLight ? <BulbFilled /> : <BulbOutlined />}\r\n        onClick={() => setForceLight((prev) => !prev)}\r\n      />\r\n      <PenButton />\r\n      <EraserButton />\r\n      <Button\r\n        type={mode === \"text\" ? \"link\" : \"text\"}\r\n        onClick={() => updateDrawCtrl({ mode: \"text\" })}\r\n        icon={<IconFont type=\"icon-text1\" />}\r\n      />\r\n      <SelectButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PenButton = () => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const { mode, color } = drawCtrl;\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n\r\n  return mode === \"draw\" ? (\r\n    <Popover\r\n      content={<PenPanel updateDrawCtrl={updateDrawCtrl} drawCtrl={drawCtrl} />}\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button\r\n        type=\"link\"\r\n        icon={<HighlightTwoTone twoToneColor={color} className=\"pen-icon\" />}\r\n      />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      onClick={() => updateDrawCtrl({ mode: \"draw\" })}\r\n      icon={<HighlightOutlined />}\r\n    />\r\n  );\r\n};\r\n\r\nconst EraserButton = () => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const { mode, pixelEraser } = drawCtrl;\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n\r\n  const btnProps: ButtonProps = {\r\n    shape: \"circle\",\r\n    icon: <IconFont type=\"icon-eraser\" />,\r\n  };\r\n\r\n  return mode === \"erase\" ? (\r\n    <Popover\r\n      content={\r\n        <div className=\"width-seg-wrapper\">\r\n          <Segmented\r\n            block\r\n            size=\"small\"\r\n            className=\"pixel-seg\"\r\n            options={[\"Pixel\", \"Object\"]}\r\n            value={pixelEraser ? \"Pixel\" : \"Object\"}\r\n            onChange={(value) => {\r\n              if (value === \"Pixel\") updateDrawCtrl({ pixelEraser: true });\r\n              else updateDrawCtrl({ pixelEraser: false });\r\n            }}\r\n          />\r\n          <WidthSelect\r\n            drawCtrl={drawCtrl}\r\n            updateDrawCtrl={updateDrawCtrl}\r\n            field=\"eraserWidth\"\r\n          />\r\n        </div>\r\n      }\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button type=\"link\" {...btnProps} />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      onClick={() => updateDrawCtrl({ mode: \"erase\" })}\r\n      {...btnProps}\r\n    />\r\n  );\r\n};\r\n\r\nconst SelectButton = () => {\r\n  const { lasso, mode } = useDrawCtrl();\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n\r\n  const icon = lasso ? <IconFont type=\"icon-lasso1\" /> : <GatewayOutlined />;\r\n\r\n  return mode === \"select\" ? (\r\n    <Button\r\n      type=\"link\"\r\n      icon={icon}\r\n      onClick={() => updateDrawCtrl({ lasso: !lasso })}\r\n    />\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      icon={icon}\r\n      onClick={() => updateDrawCtrl({ mode: \"select\" })}\r\n    />\r\n  );\r\n};\r\n","import { FC, useMemo, useState, useEffect, useContext } from \"react\";\r\nimport { Badge, Alert, Modal, Button, Divider, message, Popover } from \"antd\";\r\nimport Search from \"antd/lib/input/Search\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { PasscodeInput } from \"antd-mobile\";\r\nimport { TeamCtx } from \"../Team\";\r\nimport { getUserID, saveUserName } from \"lib/user\";\r\nimport {\r\n  EyeOutlined,\r\n  MenuOutlined,\r\n  FormOutlined,\r\n  TeamOutlined,\r\n  CopyOutlined,\r\n  CheckOutlined,\r\n  ReloadOutlined,\r\n  ShareAltOutlined,\r\n  DisconnectOutlined,\r\n  EyeInvisibleOutlined,\r\n  UsergroupAddOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { editNoteData } from \"lib/note/archive\";\r\nimport { UserAvatar } from \"component/UserAvatar\";\r\nimport { putNote } from \"lib/network/http\";\r\nimport copy from \"clipboard-copy\";\r\nimport { useAsideOpen } from \"lib/hooks\";\r\n\r\nexport const HeaderRight: FC<{\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ instantSave }) => {\r\n  const { teamOn } = useContext(TeamCtx);\r\n  return (\r\n    <div className=\"right\">\r\n      {teamOn ? <RoomInfo /> : <JoinRoom instantSave={instantSave} />}\r\n      <PageNavButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PageNavButton = () => {\r\n  const [asideOpen, setAsideOpen] = useAsideOpen();\r\n  return (\r\n    <Button\r\n      type={asideOpen ? \"link\" : \"text\"}\r\n      icon={<MenuOutlined />}\r\n      onClick={() => setAsideOpen((prev) => !prev)}\r\n    />\r\n  );\r\n};\r\n\r\nconst UserCard: FC<{ userID: string }> = ({ userID }) => {\r\n  const [renaming, setRenaming] = useState(false);\r\n  const { ignores, setIgnores, resetIO, userRec } = useContext(TeamCtx);\r\n  const userInfo = userRec[userID];\r\n  useEffect(() => setRenaming(false), [userInfo]);\r\n  if (!userInfo) return null;\r\n\r\n  const { userName, online } = userInfo;\r\n  const self = userID === getUserID();\r\n  const ignored = ignores.has(userID) && !self;\r\n\r\n  const switchIgnore = () => {\r\n    setIgnores((prev) => {\r\n      if (prev.has(userID)) return prev.delete(userID);\r\n      return prev.add(userID);\r\n    });\r\n  };\r\n\r\n  const submitRename = (value: string) => {\r\n    const name = value.trim();\r\n    if (!name || name === userName) return setRenaming(false);\r\n    saveUserName(name);\r\n    resetIO();\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-item\" data-online={online}>\r\n      <UserAvatar userInfo={userInfo} size=\"small\" className=\"room-avatar\" />\r\n      {renaming || <span className=\"user-name\">{userName}</span>}\r\n      {renaming && (\r\n        <Search\r\n          autoFocus\r\n          className=\"rename-input\"\r\n          defaultValue={userName}\r\n          onSearch={submitRename}\r\n          enterButton={<Button icon={<CheckOutlined />} />}\r\n        />\r\n      )}\r\n      {self ? (\r\n        renaming || (\r\n          <Button\r\n            type=\"text\"\r\n            icon={<FormOutlined />}\r\n            onClick={() => setRenaming(true)}\r\n          />\r\n        )\r\n      ) : (\r\n        <Button\r\n          type=\"text\"\r\n          icon={ignored ? <EyeInvisibleOutlined /> : <EyeOutlined />}\r\n          onClick={switchIgnore}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst RoomInfo: FC = () => {\r\n  const { code, userRec, connected, loadInfo, loadState, resetIO } =\r\n    useContext(TeamCtx);\r\n  const link = window.location.href;\r\n  const share = async () => {\r\n    try {\r\n      await copy(`${document.title}\\n${link}`);\r\n      message.destroy(\"copy\");\r\n      message.success({\r\n        content: \"Link copied!\",\r\n        icon: <CopyOutlined />,\r\n        key: \"copy\",\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const userList = useMemo(() => {\r\n    const selfID = getUserID();\r\n    const { [selfID]: selfInfo, ...otherUsers } = userRec;\r\n    const list = selfInfo ? [selfInfo] : [];\r\n    const values = Object.values(otherUsers);\r\n    list.push(\r\n      ...values.filter(({ online }) => online),\r\n      ...values.filter(({ online }) => !online)\r\n    );\r\n    return list;\r\n  }, [userRec]);\r\n\r\n  const onlineNum = useMemo(\r\n    () => userList.filter(({ online }) => online).length,\r\n    [userList]\r\n  );\r\n\r\n  const teamPop = (\r\n    <div className=\"team-popover\">\r\n      {connected || (\r\n        <Alert\r\n          className=\"disconn-alert\"\r\n          message=\"Network failed.\"\r\n          icon={<DisconnectOutlined />}\r\n          type=\"error\"\r\n          showIcon\r\n          banner\r\n        />\r\n      )}\r\n      <PasscodeInput\r\n        className=\"code-display\"\r\n        value={String(code)}\r\n        length={4}\r\n        plain\r\n      />\r\n      <Button\r\n        icon={<ShareAltOutlined />}\r\n        className=\"share-btn\"\r\n        onClick={share}\r\n        block\r\n      >\r\n        Share\r\n      </Button>\r\n      <Divider />\r\n      <div className=\"user-list\">\r\n        {userList.map((u) => (\r\n          <UserCard key={u.userID} userID={u.userID} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const [reloading, setReloading] = useState(false);\r\n  const title = (\r\n    <div className=\"team-title\">\r\n      <span>Team info</span>\r\n      <Button\r\n        shape=\"circle\"\r\n        type=\"text\"\r\n        size=\"small\"\r\n        loading={reloading}\r\n        icon={<ReloadOutlined />}\r\n        onClick={async () => {\r\n          setReloading(true);\r\n          await loadInfo();\r\n          await loadState();\r\n          setReloading(false);\r\n          resetIO();\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Popover\r\n      content={teamPop}\r\n      trigger=\"click\"\r\n      placement=\"bottomRight\"\r\n      title={title}\r\n      getPopupContainer={(e) => e.parentElement!}\r\n    >\r\n      <Button\r\n        type=\"text\"\r\n        icon={\r\n          <Badge\r\n            status={connected ? \"success\" : \"error\"}\r\n            count={connected ? onlineNum : \"!\"}\r\n            size=\"small\"\r\n          >\r\n            <TeamOutlined />\r\n          </Badge>\r\n        }\r\n      />\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst JoinRoom: FC<{\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ instantSave }) => {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const nav = useNavigate();\r\n\r\n  const createRoom = async () => {\r\n    await instantSave();\r\n    const res = await putNote(noteID);\r\n    if (!res) return message.error(\"Can't create room.\");\r\n    await editNoteData(noteID, { team: true });\r\n    nav(\"/team/\" + noteID);\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      type=\"text\"\r\n      icon={<UsergroupAddOutlined />}\r\n      onClick={() => {\r\n        Modal.confirm({\r\n          title: \"Enable team editing\",\r\n          content: \"This will make your note public to anyone with the link.\",\r\n          icon: <TeamOutlined style={{ color: \"#555\" }} />,\r\n          onOk: createRoom,\r\n        });\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\nimport { HeaderLeft } from \"./Left\";\r\nimport { HeaderMiddle } from \"./Middle\";\r\nimport { HeaderRight } from \"./Right\";\r\nimport \"./header.sass\";\r\n\r\nexport const Header: FC<{\r\n  saved: boolean;\r\n  handleUndo: () => void;\r\n  handleRedo: () => void;\r\n  undoable: boolean;\r\n  redoable: boolean;\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ saved, instantSave, ...undoProps }) => (\r\n  <header>\r\n    <HeaderLeft saved={saved} instantSave={instantSave} />\r\n    <HeaderMiddle {...undoProps} />\r\n    <HeaderRight instantSave={instantSave} />\r\n  </header>\r\n);\r\n","import React, {\r\n  FC,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  useCallback,\r\n} from \"react\";\r\nimport { NoteInfo, NotePage, createPage, defaultNotePage } from \"lib/note/note\";\r\nimport { DrawCtrlProvider } from \"lib/draw/DrawCtrl\";\r\nimport { NewPageInfo, ReorderInfo, SyncInfo } from \"lib/network/io\";\r\nimport { DarkModeProvider } from \"lib/Dark\";\r\nimport { useMemoizedFn as useEvent, useSafeState } from \"ahooks\";\r\nimport { SetOperation, StateSet } from \"lib/draw/StateSet\";\r\nimport { loadNote, editNoteData } from \"lib/note/archive\";\r\nimport { AddPageButton, showPageDelMsg } from \"./ReaderUtils\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport PageWrapper from \"component/PageWrapper\";\r\nimport { DrawState } from \"lib/draw/DrawState\";\r\nimport { useScrollPage } from \"./lib/scroll\";\r\nimport { debounce, last } from \"lodash-es\";\r\nimport { insertAfter } from \"./lib/array\";\r\nimport { PageNav } from \"./PageNav\";\r\nimport { AsideOpenProvider, Setter } from \"lib/hooks\";\r\nimport { Header } from \"./header\";\r\nimport { TeamCtx } from \"./Team\";\r\nimport { Map } from \"immutable\";\r\nimport { message } from \"antd\";\r\nimport \"./reader.sass\";\r\n\r\nexport interface ReaderStates {\r\n  noteID: string;\r\n  currPageID: string;\r\n  stateSet?: StateSet;\r\n  pageRec?: Map<string, NotePage>;\r\n  pageOrder?: string[];\r\n}\r\n\r\nexport interface ReaderMethods {\r\n  scrollPage: (pageID: string) => void;\r\n  switchPageMarked: (pageID: string) => void;\r\n  addPage: (prevPageID: string, copy?: boolean) => void;\r\n  addFinalPage: () => void;\r\n  deletePage: (pageID: string) => void;\r\n  saveReorder: (order: string[], push: boolean) => Promise<void>;\r\n}\r\n\r\nexport default function Reader() {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const nav = useNavigate();\r\n\r\n  const [pageRec, setPageRec] = useState<Map<string, NotePage>>();\r\n  const [noteInfo, setNoteInfo] = useState<NoteInfo>();\r\n  const [stateSet, setStateSet] = useState<StateSet>();\r\n  const [pageOrder, setPageOrder] = useState<string[]>();\r\n  const [saved, setSaved] = useSafeState(true);\r\n\r\n  const { io, teamOn, addTeamStatePage } = useContext(TeamCtx);\r\n  const { setInviewRatios, scrollPage, sectionRef, currPageID } = useScrollPage(\r\n    noteID,\r\n    pageOrder\r\n  );\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const storedNote = await loadNote(noteID);\r\n      if (!storedNote) {\r\n        message.error(\"Note not found\");\r\n        return nav(\"/\");\r\n      }\r\n      const { pageRec, pdf, pageOrder, ...noteInfo } = storedNote;\r\n      setPageRec(Map(pageRec));\r\n      setPageOrder(pageOrder);\r\n      setNoteInfo(noteInfo);\r\n      setStateSet(StateSet.createFromPages(pageRec));\r\n    })();\r\n  }, [nav, noteID, teamOn]);\r\n\r\n  useEffect(() => {\r\n    if (!noteInfo) return;\r\n    document.title = noteInfo.name + \" - Multibility\";\r\n  }, [noteInfo]);\r\n\r\n  const saver = useEvent(async () => {\r\n    const pr = pageRec?.toObject();\r\n    await editNoteData(noteID, { pageRec: pr });\r\n    setSaved(true);\r\n  });\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const debouncedSave = useCallback(debounce(saver, 2000), [saver]);\r\n  const instantSave = debouncedSave.flush;\r\n\r\n  const savePageRec = (pageID: string, cb: (prev: NotePage) => NotePage) => {\r\n    setPageRec((prev) => prev?.update(pageID, defaultNotePage, cb));\r\n    setSaved(false);\r\n    debouncedSave();\r\n  };\r\n\r\n  const saveReorder = async (pageOrder: string[], push = false) => {\r\n    setPageOrder(pageOrder);\r\n    await editNoteData(noteID, { pageOrder });\r\n    await instantSave();\r\n    push && pushReorder(pageOrder);\r\n  };\r\n\r\n  const pushReorder = (pageOrder: string[]) =>\r\n    io?.emit(\"reorder\", { pageOrder });\r\n\r\n  const handleReorder = useEvent(\r\n    ({ deleted, pageOrder, prevOrder }: ReorderInfo) => {\r\n      saveReorder(pageOrder);\r\n      if (!deleted) return;\r\n      showPageDelMsg(() => saveReorder(prevOrder, true));\r\n    }\r\n  );\r\n\r\n  const handleNewPage = useEvent(\r\n    ({ pageOrder, pageID, newPage }: NewPageInfo) => {\r\n      saveReorder(pageOrder);\r\n      savePageRec(pageID, () => newPage);\r\n      setStateSet((prev) => prev?.addState(pageID, newPage));\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    io?.on(\"reorder\", handleReorder);\r\n    io?.on(\"newPage\", handleNewPage);\r\n    return () => void io?.removeAllListeners();\r\n  }, [io, handleReorder, handleNewPage]);\r\n\r\n  const pushOperation = (operation: SetOperation) => {\r\n    const handleSync = ({ pageID, stroke }: SyncInfo) =>\r\n      setStateSet((prev) => prev?.syncStrokeTime(pageID, stroke));\r\n\r\n    io?.emit(\"push\", { operation }, handleSync);\r\n  };\r\n\r\n  const pushNewPage = (\r\n    pageOrder: string[],\r\n    pageID: string,\r\n    newPage: NotePage\r\n  ) => {\r\n    const { image, marked, ...newTeamPage } = newPage;\r\n    io?.emit(\"newPage\", { pageOrder, pageID, newPage: newTeamPage });\r\n    addTeamStatePage(pageID, newPage);\r\n  };\r\n\r\n  const updatePageRec = (pageID: string, ds: DrawState) => {\r\n    const state = DrawState.flaten(ds);\r\n    savePageRec(pageID, (prev) => ({ ...prev, state }));\r\n  };\r\n\r\n  const updateStateSet = (cb: (prevSS: StateSet) => StateSet) => {\r\n    if (!stateSet) return;\r\n    const newSS = cb(stateSet);\r\n    if (newSS === stateSet) return;\r\n    setStateSet(newSS);\r\n    const lastDS = newSS.getLastDS();\r\n    const lastOp = newSS.lastOp;\r\n    if (!lastDS || !lastOp) return;\r\n    updatePageRec(...lastDS);\r\n    pushOperation(lastOp);\r\n  };\r\n\r\n  const switchPageMarked = (pageID: string) =>\r\n    savePageRec(pageID, (prev) => ({ ...prev, marked: !prev.marked }));\r\n\r\n  const addPage = (prevPageID: string, copy = false) => {\r\n    if (!pageOrder) return;\r\n    const prevPage = copy ? pageRec?.get(prevPageID) : undefined;\r\n    const [pageID, newPage] = createPage(prevPage);\r\n    const newOrder = insertAfter(pageOrder, prevPageID, pageID);\r\n    pushNewPage(newOrder, pageID, newPage);\r\n    saveReorder(newOrder);\r\n    savePageRec(pageID, () => newPage);\r\n    setStateSet((prev) => prev?.addState(pageID, newPage));\r\n  };\r\n\r\n  const addFinalPage = () => {\r\n    const lastPageID = last(pageOrder);\r\n    lastPageID && addPage(lastPageID);\r\n  };\r\n\r\n  const deletePage = (pageID: string) => {\r\n    const newOrder = pageOrder?.filter((id) => id !== pageID);\r\n    newOrder?.length && saveReorder(newOrder, true);\r\n  };\r\n\r\n  const readerStates = { noteID, pageRec, pageOrder, stateSet, currPageID };\r\n\r\n  const renderResult = (\r\n    <div className=\"reader container\">\r\n      <Header\r\n        saved={saved}\r\n        instantSave={instantSave}\r\n        handleUndo={() => updateStateSet((prev) => prev.undo())}\r\n        handleRedo={() => updateStateSet((prev) => prev.redo())}\r\n        undoable={stateSet?.isUndoable() ?? false}\r\n        redoable={stateSet?.isRedoable() ?? false}\r\n      />\r\n      <main>\r\n        {pageOrder?.map((uid) => (\r\n          <section key={uid} className=\"note-page\" ref={sectionRef(uid)}>\r\n            <PageContainer\r\n              uid={uid}\r\n              updateStateSet={updateStateSet}\r\n              setInviewRatios={setInviewRatios}\r\n              {...readerStates}\r\n            />\r\n          </section>\r\n        ))}\r\n        <AddPageButton addFinalPage={addFinalPage} />\r\n      </main>\r\n      <PageNav\r\n        addPage={addPage}\r\n        addFinalPage={addFinalPage}\r\n        scrollPage={scrollPage}\r\n        deletePage={deletePage}\r\n        saveReorder={saveReorder}\r\n        switchPageMarked={switchPageMarked}\r\n        {...readerStates}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <AsideOpenProvider>\r\n      <DarkModeProvider>\r\n        <DrawCtrlProvider>{renderResult}</DrawCtrlProvider>\r\n      </DarkModeProvider>\r\n    </AsideOpenProvider>\r\n  );\r\n}\r\n\r\nconst PageContainer: FC<\r\n  {\r\n    uid: string;\r\n    updateStateSet: (cb: (prevSS: StateSet) => StateSet) => void;\r\n    setInviewRatios: Setter<Map<string, number>>;\r\n  } & ReaderStates\r\n> = ({\r\n  uid,\r\n  updateStateSet,\r\n  setInviewRatios,\r\n  pageRec,\r\n  stateSet,\r\n  currPageID,\r\n  pageOrder,\r\n  noteID,\r\n}) => {\r\n  const { teamState, ignores } = useContext(TeamCtx);\r\n\r\n  const page = pageRec?.get(uid);\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStateMap = teamState?.getOnePageStateMap(uid);\r\n  const updateState = (ds: DrawState) => {\r\n    updateStateSet((prev) => prev.setState(uid, ds));\r\n  };\r\n\r\n  const onViewChange = (visible: boolean, ratio: number) => {\r\n    if (!visible) return setInviewRatios((prev) => prev.delete(uid));\r\n    setInviewRatios((prev) => prev.set(uid, ratio));\r\n  };\r\n\r\n  const preload = useMemo(() => {\r\n    if (!pageOrder) return false;\r\n    const currIndex = pageOrder.indexOf(currPageID);\r\n    const selfIndex = pageOrder.indexOf(uid);\r\n    return Math.abs(selfIndex - currIndex) <= 1;\r\n  }, [currPageID, uid, pageOrder]);\r\n\r\n  if (!page || !drawState) return null;\r\n  return (\r\n    <PageWrapper\r\n      drawState={drawState}\r\n      teamStateMap={teamStateMap}\r\n      updateState={updateState}\r\n      pdfIndex={page.pdfIndex}\r\n      noteID={noteID}\r\n      ignores={ignores}\r\n      onViewChange={onViewChange}\r\n      preload={preload}\r\n    />\r\n  );\r\n};\r\n","import { io } from \"socket.io-client\";\r\nimport { Stroke } from \"lib/draw/DrawState\";\r\nimport { NotePage } from \"lib/note/note\";\r\nimport { getUserID, getUserName } from \"lib/user\";\r\nimport { BASE_URL } from \"./http\";\r\n\r\nexport const IoFactory = (noteID: string) => () =>\r\n  io(BASE_URL, {\r\n    query: {\r\n      userID: getUserID(),\r\n      userName: getUserName(),\r\n      noteID,\r\n    },\r\n  });\r\n\r\nexport interface ReorderInfo {\r\n  pageOrder: string[];\r\n  prevOrder: string[];\r\n  deleted: boolean;\r\n}\r\n\r\nexport interface NewPageInfo {\r\n  pageOrder: string[];\r\n  pageID: string;\r\n  newPage: NotePage;\r\n}\r\n\r\nexport interface SyncInfo {\r\n  stroke: Stroke;\r\n  pageID: string;\r\n}\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  getTeamNoteState,\r\n  loadTeamNoteInfo,\r\n  updatePages,\r\n} from \"lib/network/http\";\r\nimport { LoginOutlined, LogoutOutlined } from \"@ant-design/icons\";\r\nimport { IoFactory, NewPageInfo } from \"lib/network/io\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { TeamState } from \"lib/draw/TeamState\";\r\nimport { getUserID, UserInfo } from \"lib/user\";\r\nimport { NotePage } from \"lib/note/note\";\r\nimport { Socket } from \"socket.io-client\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport { Loading } from \"component/Loading\";\r\nimport { message } from \"antd\";\r\nimport { Set } from \"immutable\";\r\nimport Reader from \"./Reader\";\r\n\r\nexport const TeamCtx = React.createContext({\r\n  io: undefined as Socket | undefined,\r\n  code: 0,\r\n  teamOn: false,\r\n  connected: false,\r\n  ignores: Set<string>(),\r\n  userRec: {} as Record<string, UserInfo>,\r\n  teamState: undefined as TeamState | undefined,\r\n  resetIO: () => {},\r\n  loadInfo: async () => false,\r\n  loadState: async () => false,\r\n  setIgnores: (() => {}) as Setter<Set<string>>,\r\n  addTeamStatePage: (pageID: string, newPage: NotePage) => {},\r\n});\r\n\r\nexport default function Team() {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const [teamState, setTeamState] = useState<TeamState>();\r\n  const [code, setCode] = useState(-2);\r\n  const [userRec, setUserRec] = useState<Record<string, UserInfo>>({});\r\n  const [ignores, setIgnores] = useState(Set<string>());\r\n  const [io, setIO] = useState(IoFactory(noteID));\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [connected, setConnected] = useState(false);\r\n  const nav = useNavigate();\r\n\r\n  const loadInfo = useCallback(async () => {\r\n    const info = await loadTeamNoteInfo(noteID);\r\n    if (!info) {\r\n      message.error(\"Failed loading the team note info\");\r\n      return false;\r\n    }\r\n    setCode(info.code);\r\n    return true;\r\n  }, [noteID]);\r\n\r\n  const loadState = useCallback(async () => {\r\n    const teamNote = await getTeamNoteState(noteID);\r\n    if (!teamNote) {\r\n      message.error(\"Failed loading the team note state\");\r\n      return false;\r\n    }\r\n    setTeamState(TeamState.createFromTeamPages(teamNote));\r\n    return true;\r\n  }, [noteID]);\r\n\r\n  const updateSelfState = useCallback(() => {\r\n    updatePages(noteID);\r\n  }, [noteID]);\r\n\r\n  useEffect(() => {\r\n    const roomInit = async () => {\r\n      const infoLoaded = await loadInfo();\r\n      const stateLoaded = await loadState();\r\n      if (!infoLoaded || !stateLoaded) return nav(\"/\");\r\n      setLoaded(true);\r\n      updateSelfState();\r\n    };\r\n    roomInit();\r\n    return updateSelfState;\r\n  }, [loadInfo, loadState, nav, updateSelfState]);\r\n\r\n  useEffect(() => {\r\n    io.on(\"push\", ({ operation, userID }) => {\r\n      setTeamState((prev) => prev?.pushOperation(operation, userID));\r\n    });\r\n\r\n    io.on(\"join\", ({ joined, members }) => {\r\n      const { userID, userName } = joined;\r\n      setUserRec(members);\r\n      if (userID === getUserID()) return;\r\n      showJoinMsg(userID, userName);\r\n    });\r\n\r\n    io.on(\"leave\", ({ leaved, members }) => {\r\n      const { userID, userName } = leaved;\r\n      setUserRec(members);\r\n      if (userID === getUserID()) return io.emit(\"join\");\r\n      showLeaveMsg(userID, userName);\r\n    });\r\n\r\n    io.on(\"newPage\", (info: NewPageInfo) => {\r\n      const { pageID, newPage } = info;\r\n      setTeamState((prev) => prev?.addPage(pageID, newPage));\r\n    });\r\n\r\n    io.on(\"reset\", ({ userID, pageRec }) => {\r\n      if (userID === getUserID()) return;\r\n      setTeamState((prev) => prev?.resetUser(userID, pageRec));\r\n    });\r\n\r\n    io.on(\"connect_error\", console.error);\r\n    io.on(\"connect\", () => setConnected(true));\r\n    io.on(\"disconnect\", () => setConnected(false));\r\n\r\n    return () => {\r\n      io.removeAllListeners();\r\n      io.close();\r\n    };\r\n  }, [io]);\r\n\r\n  const addTeamStatePage = (pageID: string, newPage: NotePage) => {\r\n    setTeamState((prev) => prev?.addPage(pageID, newPage));\r\n  };\r\n\r\n  const resetIO = () => setIO(IoFactory(noteID));\r\n\r\n  return (\r\n    <Loading loading={!loaded}>\r\n      <TeamCtx.Provider\r\n        value={{\r\n          io,\r\n          code,\r\n          teamOn: true,\r\n          ignores,\r\n          userRec,\r\n          connected,\r\n          teamState,\r\n          resetIO,\r\n          loadInfo,\r\n          loadState,\r\n          setIgnores,\r\n          addTeamStatePage,\r\n        }}\r\n      >\r\n        <Reader />\r\n      </TeamCtx.Provider>\r\n    </Loading>\r\n  );\r\n}\r\n\r\nconst showJoinMsg = (userID: string, userName: string) => {\r\n  message.destroy(userID);\r\n  message.success({\r\n    content: `${userName} joined the room`,\r\n    icon: <LoginOutlined />,\r\n    key: userID,\r\n  });\r\n};\r\n\r\nconst showLeaveMsg = (userID: string, userName: string) => {\r\n  message.destroy(userID);\r\n  message.warning({\r\n    content: `${userName} leaved the room`,\r\n    icon: <LogoutOutlined />,\r\n    key: userID,\r\n  });\r\n};\r\n"],"names":["defaultRecord","states","Map","editStack","List","undoStack","defaultFactory","Record","StateSet","immutable","lastOp","this","getImmutable","get","pageID","getStates","drawState","prevDS","getOneState","currRecord","update","s","set","l","push","delete","stroke","DrawState","notePage","state","ratio","newDS","getEditStack","size","getUndoStack","isUndoable","lastUid","last","lastSetOp","pop","isRedoable","ds","pageRec","map","AddPageButton","addFinalPage","className","type","icon","PlusOutlined","block","onClick","scrollForage","localforage","name","largestKey","order","result","maxRatio","key","insertAfter","list","prevItem","newItem","prevIndex","indexOf","curr","slice","splice","UserAvatar","userInfo","chosen","color","useMemo","getHashedColor","userID","userName","style","backgroundColor","PageNav","props","useState","left","setLeft","useAsideOpen","asideOpen","opposite","draggableId","index","innerRef","draggableProps","dragHandleProps","ref","initKey","onDragEnd","destination","droppableId","direction","droppableProps","placeholder","isDraggingOver","PreviewCard","useActiveKey","activeKey","setAsideOpen","title","ALL","MARKED","WRITTEN","useSwipeable","onSwipedLeft","onSwipedRight","swipeDuration","swipeRef","swipeHandler","previewTabs","PreviewTabs","pageList","PageList","isDragging","isDropAnimating","e","refRec","useRef","pageOrder","currPageID","saveReorder","scrollPage","initScroll","useEvent","current","scrollIntoView","useLayoutEffect","source","fromIndex","toIndex","newOrder","removed","exchange","requestAnimationFrame","uid","PagePreview","pageIndex","stateSet","useContext","TeamCtx","teamState","ignores","setChosen","page","teamStateMap","getOnePageStateMap","marked","useEffect","userIDs","TeamState","isEmpty","every","isDragDisabled","PageWrapper","undefined","thumbnail","image","preview","PreviewTools","React","switchPageMarked","stopPropagation","PreviewOption","TeamAvatars","displayName","userRec","maxCount","classNames","maxPopoverPlacement","prev","addPage","deletePage","menu","items","label","CopyOutlined","DeleteOutlined","danger","content","trigger","placement","destroyTooltipOnHide","getPopupContainer","parentElement","MoreOutlined","setActiveKey","TabPane","Tabs","onChange","tabBarGutter","centered","tab","IconFont","HeaderLeft","saved","instantSave","nav","useNavigate","HomeFilled","opacity","disabled","SaveOutlined","HeaderMiddle","handleUndo","handleRedo","undoable","redoable","useDrawCtrl","mode","finger","updateDrawCtrl","useUpdateDrawCtrl","useForceLight","forceLight","setForceLight","UndoOutlined","RedoOutlined","message","BulbFilled","BulbOutlined","PenButton","EraserButton","SelectButton","drawCtrl","PenPanel","HighlightTwoTone","twoToneColor","HighlightOutlined","pixelEraser","btnProps","shape","options","value","field","lasso","GatewayOutlined","HeaderRight","teamOn","RoomInfo","JoinRoom","PageNavButton","MenuOutlined","UserCard","renaming","setRenaming","setIgnores","resetIO","online","self","getUserID","ignored","has","Search","autoFocus","defaultValue","onSearch","trim","saveUserName","enterButton","CheckOutlined","FormOutlined","EyeInvisibleOutlined","EyeOutlined","add","code","connected","loadInfo","loadState","link","window","location","href","share","copy","document","console","log","userList","selfID","selfInfo","otherUsers","values","Object","filter","onlineNum","length","teamPop","DisconnectOutlined","showIcon","banner","String","plain","ShareAltOutlined","u","reloading","setReloading","loading","ReloadOutlined","status","count","TeamOutlined","noteID","useParams","createRoom","putNote","editNoteData","team","UsergroupAddOutlined","Modal","onOk","Header","undoProps","Reader","setPageRec","noteInfo","setNoteInfo","setStateSet","setPageOrder","useSafeState","setSaved","io","addTeamStatePage","refMap","setRefMap","scrolled","prevPageID","setPrevPageID","inviewRatios","setInviewRatios","useDebugValue","getItem","stored","setItem","sectionRef","el","useScrollPage","loadNote","storedNote","pdf","createFromPages","saver","pr","toObject","debouncedSave","useCallback","debounce","flush","savePageRec","cb","defaultNotePage","pushReorder","emit","handleReorder","onUndo","deleted","prevOrder","duration","handleNewPage","newPage","addState","on","removeAllListeners","pushNewPage","newTeamPage","updatePageRec","updateStateSet","newSS","operation","lastDS","getLastDS","syncStrokeTime","prevPage","createPage","lastPageID","readerStates","renderResult","undo","redo","PageContainer","id","Dark","DrawCtrl","preload","currIndex","selfIndex","Math","abs","updateState","setState","pdfIndex","onViewChange","visible","IoFactory","BASE_URL","query","getUserName","Set","Team","setTeamState","setCode","setUserRec","setIO","loaded","setLoaded","setConnected","loadTeamNoteInfo","info","getTeamNoteState","teamNote","updateSelfState","updatePages","roomInit","infoLoaded","stateLoaded","pushOperation","joined","members","showJoinMsg","leaved","showLeaveMsg","resetUser","error","close","Loading","Provider","LoginOutlined","LogoutOutlined"],"sourceRoot":""}