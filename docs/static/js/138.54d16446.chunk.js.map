{"version":3,"file":"static/js/138.54d16446.chunk.js","mappings":"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","sources":["lib/note/imgCache.ts","lib/note/pdfImage.ts"],"sourcesContent":["import localforage from \"localforage\";\n\nconst IMAGE_CACHE_MAX = 10;\nconst imageForage = localforage.createInstance({ name: \"imageForage\" });\nexport const getImageCache = async (noteID: string, index: number) => {\n  let cacheList = (await imageForage.getItem<string[]>(\"LIST\")) ?? [];\n  const key = `${noteID}_${index}`;\n  if (!cacheList.includes(key)) return;\n  cacheList = [key, ...cacheList.filter((id) => id !== key)];\n  await imageForage.setItem(\"LIST\", cacheList);\n  return await imageForage.getItem<string>(key);\n};\n\nexport const setImageCache = async (noteID: string, index: number, data: string) => {\n  let cacheList = (await imageForage.getItem<string[]>(\"LIST\")) ?? [];\n  const key = `${noteID}_${index}`;\n  cacheList = [key, ...cacheList.filter((id) => id !== key)];\n  if (cacheList.length > IMAGE_CACHE_MAX) {\n    cacheList = cacheList.slice(0, IMAGE_CACHE_MAX);\n  }\n  await imageForage.setItem(\"LIST\", cacheList);\n  await imageForage.setItem(key, data);\n  removeUnusedCache();\n};\n\nconst removeUnusedCache = async () => {\n  const cacheList = (await imageForage.getItem<string[]>(\"LIST\")) ?? [];\n  const set = new Set(cacheList);\n  const allKeys = await imageForage.keys();\n  for (let key of allKeys) {\n    if (key === \"LIST\") continue;\n    if (!set.has(key)) await imageForage.removeItem(key);\n  }\n};\n\nexport const clearImageCache = () => imageForage.clear();\n","import { createVirtualCanvas, releaseCanvas } from \"lib/draw/canvas\";\r\nimport { createEmptyNote, Note, NotePage } from \"./note\";\r\nimport localforage from \"localforage\";\r\nimport { v4 as getUid } from \"uuid\";\r\nimport * as pdfjs from \"pdfjs-dist/legacy/build/pdf\";\r\n// @ts-ignore\r\nimport pdfjsWorker from \"pdfjs-dist/legacy/build/pdf.worker.entry\";\r\nimport { PDFDocumentProxy } from \"pdfjs-dist/types/src/display/api\";\r\nimport { getImageCache, setImageCache } from \"./imgCache\";\r\npdfjs.GlobalWorkerOptions.workerSrc = pdfjsWorker;\r\n\r\nconst getPDFDocument = async (file: Blob) => {\r\n  const data = new Uint8Array(await file.arrayBuffer());\r\n  return pdfjs.getDocument(data).promise;\r\n};\r\n\r\nconst parseDocPage = async (\r\n  doc: PDFDocumentProxy,\r\n  pageNum: number,\r\n  scale: number\r\n): Promise<[string, number]> => {\r\n  const page = await doc.getPage(pageNum);\r\n  const viewport = page.getViewport({ scale });\r\n\r\n  const { height, width } = viewport;\r\n  const ratio = height / width;\r\n  const { canvas, context } = createVirtualCanvas(\r\n    Math.floor(width * scale),\r\n    Math.floor(height * scale)\r\n  );\r\n\r\n  await page.render({\r\n    canvasContext: context,\r\n    viewport: viewport,\r\n    transform: [scale, 0, 0, scale, 0, 0],\r\n  }).promise;\r\n\r\n  const data = canvas.toDataURL();\r\n\r\n  releaseCanvas(canvas);\r\n\r\n  return [data, ratio];\r\n};\r\n\r\nexport async function getPDFImages(\r\n  file: Blob,\r\n  scale = 2,\r\n  progressCb?: (percent: number) => void\r\n) {\r\n  const doc = await getPDFDocument(file);\r\n  const { numPages } = doc;\r\n  const images: string[] = [];\r\n  const ratios: number[] = [];\r\n\r\n  for (let i = 1; i <= numPages; i += 1) {\r\n    const [data, ratio] = await parseDocPage(doc, i, scale);\r\n    images.push(data);\r\n    ratios.push(ratio);\r\n    if (progressCb) progressCb(Math.floor((i / numPages) * 100));\r\n  }\r\n\r\n  return { images, ratios };\r\n}\r\n\r\nexport async function getOneImage(file: Blob, index: number, scale = 2) {\r\n  const doc = await getPDFDocument(file);\r\n  const { numPages } = doc;\r\n  if (index > numPages) {\r\n    throw new Error(\"index out of range\");\r\n  }\r\n  const [data] = await parseDocPage(doc, index, scale);\r\n  return data;\r\n}\r\n\r\nexport async function getNotePageImage(noteID: string, index: number) {\r\n  const cached = await getImageCache(noteID, index);\r\n  if (cached) return cached;\r\n  const file = await localforage.getItem<Blob>(`PDF_${noteID}`);\r\n  if (!file) return;\r\n  const data = await getOneImage(file, index, 2);\r\n  setImageCache(noteID, index, data);\r\n  return data;\r\n}\r\n\r\nexport async function LoadPDF(\r\n  file: File,\r\n  progressCb?: (percent: number) => void\r\n): Promise<Note> {\r\n  const { images, ratios } = await getPDFImages(file, 0.5, progressCb);\r\n  const pageRec: Record<string, NotePage> = {};\r\n  const pageOrder: string[] = [];\r\n  images.forEach((image, idx) => {\r\n    const pageID = getUid();\r\n    const ratio = ratios[idx];\r\n    if (!ratio) return;\r\n    pageRec[pageID] = {\r\n      image,\r\n      ratio,\r\n      state: {\r\n        strokes: {},\r\n      },\r\n      pdfIndex: idx + 1,\r\n    };\r\n    pageOrder.push(pageID);\r\n  });\r\n  const name = file.name.replace(\".pdf\", \"\");\r\n  const ab = await file.arrayBuffer();\r\n  const pdf = new Blob([ab], { type: \"application/pdf\" });\r\n  return {\r\n    ...createEmptyNote(),\r\n    name,\r\n    withImg: true,\r\n    pdf,\r\n    pageRec,\r\n    pageOrder,\r\n  };\r\n}\r\n"],"names":["imageForage","localforage","name","getImageCache","noteID","index","getItem","cacheList","key","includes","filter","id","setItem","setImageCache","data","length","slice","removeUnusedCache","set","Set","keys","allKeys","has","removeItem","clearImageCache","clear","pdfjs","pdfjsWorker","getPDFDocument","file","Uint8Array","arrayBuffer","promise","parseDocPage","doc","pageNum","scale","getPage","page","viewport","getViewport","height","width","ratio","createVirtualCanvas","Math","floor","canvas","context","render","canvasContext","transform","toDataURL","releaseCanvas","getPDFImages","progressCb","numPages","images","ratios","i","push","getOneImage","Error","getNotePageImage","cached","LoadPDF","pageRec","pageOrder","forEach","image","idx","pageID","getUid","state","strokes","pdfIndex","replace","ab","pdf","Blob","type","createEmptyNote","withImg"],"sourceRoot":""}