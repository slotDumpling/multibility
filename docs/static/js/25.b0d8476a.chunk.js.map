{"version":3,"file":"static/js/25.b0d8476a.chunk.js","mappings":"8HAEA,KAAeA,EAAAA,EAAAA,GAAqB,CAClCC,UAAW,iD,sPCSPC,EAAwB,WAC5B,IAAMC,EAAQ,IAAIC,IAClB,GAA4BC,EAAAA,EAAAA,GAAoB,GAAI,IAA5CC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QACVC,EAAQ,IAAIC,MAElB,OADAD,EAAME,I,66DACC,SAACC,GACNA,EAAiC,GAAzBC,KAAKC,MAAMF,EAAQ,IAC3B,IAAMG,EAASX,EAAMY,IAAIJ,GACzB,GAAIG,EAAQ,OAAOA,EACnBP,EAAQS,UAAU,GAAI,IACtBT,EAAQU,OAAQN,EAAQC,KAAKM,GAAM,KACnCX,EAAQY,UAAUX,GAAQ,IAAK,IAC/B,IAAMY,EAAOd,EAAOe,YAIpB,OAHAd,EAAQe,WAAW,IAAK,GAAI,GAAI,IAChCf,EAAQgB,iBACRpB,EAAMqB,IAAIb,EAAOS,GACVA,CACR,CACF,CAlB6B,GAoBjBK,EAAkB,SAACd,GAC9B,MAAM,OAAN,OAAcT,EAAqBS,GAAnC,gBACD,ECtBM,SAASe,EACdC,GAEA,IAAMC,GAAUC,EAAAA,EAAAA,SAAO,GACjBC,EAAe,SAACC,GAAD,OACnBA,EAAEC,YAAcJ,EAAQK,QAA4B,UAAlBF,EAAEG,YADjB,EAQfC,EAAe,SAACJ,GAAD,OALA,SAACA,GAAD,OAClBH,EAAQK,SAbN,SAAuBF,GAC5B,IAAMK,EAAQL,EAAEM,QAAQ,GACxB,MAA4B,YAAhB,OAALD,QAAK,IAALA,OAAA,EAAAA,EAAOE,UACf,CAWGC,CAAcR,IACbJ,GAAoC,IAArBI,EAAEM,QAAQG,MAHP,CAMnBC,CAAaV,IAAMA,EAAEW,iBADF,EAGrB,MAAO,CACLC,qBAAsBb,EACtBc,qBAAsBd,EACtBe,oBAAqBV,EACrBW,mBAAoBX,EAEvB,C,eCeKY,EAAS,IAAIC,EAAAA,MAAM,EAAG,GAEtBC,EAAUC,EAAAA,YACd,WAUEC,GACI,IATFC,EASC,EATDA,UACAC,EAQC,EARDA,YAQC,IAPDC,SAAAA,OAOC,MAPU,WAAQ,EAOlB,MANDC,SAAAA,OAMC,MANUC,EAAAA,GAMV,MALDC,SAAAA,OAKC,SAJDC,EAIC,EAJDA,OAIC,IAHDC,cAAAA,OAGC,MAHe,WAAQ,EAGvB,EACKC,EAAkBR,EAAlBQ,MAAOC,EAAWT,EAAXS,OACTC,GAAWC,EAAAA,EAAAA,UAAQ,kBAAM,IAAIC,EAAAA,KAAKJ,EAAOC,EAAtB,GAA+B,CAACD,EAAOC,IACxDI,EAAqCV,EAArCU,KAAMC,EAA+BX,EAA/BW,OAAQC,EAAuBZ,EAAvBY,MAAOC,EAAgBb,EAAhBa,YAEvBC,GAAWxC,EAAAA,EAAAA,QAA0B,MACrCyC,GAAQzC,EAAAA,EAAAA,QAAO,IAAI0C,IAAAA,aACzB,GAA0BC,EAAAA,EAAAA,UAAuB,IAAjD,eAAOC,GAAP,KAAcC,GAAd,KACA,GAAwBC,IAAxB,iBAAOC,GAAP,MAAaC,GAAb,MACA,GAAwBF,IAAxB,iBAAOG,GAAP,MAAaC,GAAb,MACA,GAAwCJ,IAAxC,iBAAOK,GAAP,MAAqBC,GAArB,OAEAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRC,EAAMd,EAASpC,QACfmD,EAAMd,EAAMrC,QAClB,GAAKkD,EASL,OAPAC,EAAIC,MAAMF,GACVC,EAAIE,SAASC,WAAa,GAC1BH,EAAIE,SAASE,aAlCG,GAmChB,CAAC,EAAG,EAAG,GAAGC,SAAQ,kBAAO,IAAIC,EAAAA,OAAQC,SAAU,CAA7B,IAClB,UAAAP,EAAIQ,QAAQC,OAAO,UAAnB,SAAuBC,WACvB,IAAIV,EAAIW,KAED,WAAO,IAAD,EACX,UAAAX,EAAIY,YAAJ,SAAUC,UACVC,EAAAA,EAAAA,GAAcf,EACf,CACF,GAAE,KAEHD,EAAAA,EAAAA,YAAU,WACRZ,EAAMrC,QAAQ6D,WACd,IAAQD,EAAWvB,EAAMrC,QAAQ2D,QAAzBC,OACFM,EAAQC,EAAWP,EAAQ/B,GACjC,OAAO,kBAAMqC,EAAMV,SAAQ,SAACY,GAAD,OAAOA,EAAEJ,QAAT,GAApB,CACR,GAAE,CAACnC,IAEJ,QAAsBwC,EAAAA,EAAAA,GAAQjC,GAAvBkC,IAAP,gBACMC,GAAQD,GAAc3C,GAC5BsB,EAAAA,EAAAA,YAAU,WACR,GAAKsB,GAAL,CACA,IAAMpB,EAAMd,EAAMrC,QAMlB,OALAmD,EAAIY,KAAKS,SAAW3C,EAAS4C,SAASF,IACtCpB,EAAIY,KAAKW,MAAMH,GAAOzD,GACtBqC,EAAIQ,QAAQC,OAAOJ,SAAQ,SAACmB,GAAD,OAAQA,EAAEjB,SAAU,CAApB,IAC3BP,EAAIY,KAAKa,SAEF,kCAAMzB,EAAIY,YAAV,aAAM,EAAUW,MAAM,EAAIH,GAAOzD,EAAjC,CAPW,CAQnB,GAAE,CAACyD,GAAO1C,IAEX,OAAkCa,IAAlC,iBAAOmC,GAAP,MAAkBC,GAAlB,OACA7B,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACd,GAAKxB,EAAL,CACAY,EAAMrC,QAAQ6D,WACd,IAAMkB,EAAS,IAAIC,EAAAA,OAAOvD,GAC1B,UAAAsD,EAAOpB,QAAQC,OAAO,UAAtB,SAA0BqB,SAASF,GACnCA,EAAOG,aACPH,EAAOI,OAAS,WACdJ,EAAOhB,KAAKa,SACZG,EAAOK,UAAU,IAAI9C,IAAAA,WAAgB,EAAG,EAAGX,EAAOC,IAClDmD,EAAOM,cACR,EACDP,GAAaC,EAVM,CAWpB,GAAE,CAACtD,EAAQE,EAAOC,EAAQkD,KAE3B,IAAMQ,IAAgBxD,EAAAA,EAAAA,UACpB,kBACEV,EACImE,EAAAA,GAAAA,YAAAA,MAAAA,EAAAA,GAAS,CAAapE,GAAb,eAA2BC,KACpCD,EAAUqE,eAHhB,GAIA,CAACrE,EAAWC,IAGRqE,IAAa7F,EAAAA,EAAAA,SAAO,IAC1BqD,EAAAA,EAAAA,YAAU,WACR,IAAMyC,EAA0B,GAC1BC,EAAQtD,EAAMrC,QAAQ2D,QAAQC,OAAO,GAC3C,GAAK+B,EAAL,CAEA,IAAMC,EAAmBC,KAAKC,MAe9B,OAdAzD,EAAMrC,QAAQ6D,WACdyB,GAAc9B,SAAQ,SAACuC,GACrB,IAAMC,EAAO7E,EAAU8E,UAAUF,EAAOG,KAClCC,EAAOC,EAAYL,EAAQJ,GAAQK,GACrCA,GAAMN,EAAUW,KAAKF,EAC1B,IACD1D,GAASiD,GAETrD,EAAMrC,QAAQ+D,KAAKa,SACnB0B,uBAAsB,WACpB,IAAMC,EAAWV,KAAKC,MAAQF,EAC9BH,GAAWzF,QAAUuG,EAAW,EACjC,IAEM,WAAWZ,EAAMa,eAAe,EAAhC,CAjBW,CAkBnB,GAAE,CAAClB,GAAenE,IAEnB,IAAMsF,IAAS7G,EAAAA,EAAAA,UACf,IAAgC2C,EAAAA,EAAAA,WAAS,GAAzC,iBAAOmE,GAAP,MAAiBC,GAAjB,MACMC,GAAqB,WAAT5E,GAAqB0E,GAAW,WAAa1E,EAC/D,IAAkCO,EAAAA,EAAAA,UAAmB,IAArD,iBAAOsE,GAAP,MAAkBC,GAAlB,MACMC,IAAcjF,EAAAA,EAAAA,UAAQ,WAC1B,IAAMkF,EAAQ,IAAIC,IAAIJ,IACtB,OAAOrE,GAAM0E,QAAO,SAACf,GAAD,OAAUa,EAAMG,IAAIhB,EAAKiB,KAAzB,GACrB,GAAE,CAAC5E,GAAOqE,KAELQ,IAAcC,EAAAA,EAAAA,cAAY,WAC9BX,IAAY,GACZ/D,QAAQ2E,GACRzE,QAAQyE,GACRvE,QAAgBuE,EACjB,GAAE,CAAC3E,GAASE,GAASE,MAEtBC,EAAAA,EAAAA,YAAU,WACR,GAAa,WAATjB,EAAmB,OAAOqF,EAC/B,GAAE,CAACrF,EAAMqF,MACVpE,EAAAA,EAAAA,YAAU,kBAAMoE,EAAN,GAAmB,CAACnF,EAAOmF,MAErCpE,EAAAA,EAAAA,YAAU,WACR,GAAKyD,GACL,OAAO,WACLI,GAAa,IACbpF,EAAc,GACf,CACF,GAAE,CAACgF,GAAUhF,IAEd,IAAM8F,IAAc5H,EAAAA,EAAAA,UACd6H,IAAW7H,EAAAA,EAAAA,SAAO,GAClB8H,GAAiB,SAACC,GAAsC,IAAnBC,EAAkB,wDAC3D,GAAKnC,GAAWzF,SAAY4H,EAA5B,CACA,cAAiBvF,EAAMrC,QAAQ2D,QAAQC,OAAvC,GAAOiE,EAAP,KAAWC,EAAX,KACQ/D,EAAS1B,EAAMrC,QAAf+D,KACR,GAAK8D,GAAOC,EAAZ,CACAA,EAAGpE,SAAU,EACRiE,KACHA,EAAO,IAAII,EAAAA,KAAAA,UAAehG,EAAAA,KAAAA,IAASgC,EAAKiE,KAAMnG,KACzCoG,SAAWlE,EAAKmE,QAEvBP,EAAKQ,UAAW,EAChB,IAAMC,EAAWN,EAAGO,WACpBD,EAASE,YAAYX,GACZ,OAAT9C,SAAS,IAATA,IAAAA,GAAW0D,YAAYZ,GAEvB,IAAMa,EAAM,GAAKC,iBACXC,EAAcpE,GAAcqD,EAAKgB,OAAOhH,MAAS6G,EACnDzD,EAASyC,GAAYxH,QACzB+E,EAASyC,GAAYxH,QAAU8H,EAAGc,UAAU,CAAE7D,OAAAA,EAAQ2D,WAAAA,IACtDb,EAAG5C,SAASF,GAAQrB,SAAU,EAE9BoE,EAAGpE,SAAU,EACbiE,EAAKW,YAAYF,GACR,OAATvD,SAAS,IAATA,IAAAA,GAAWgE,YAAY9D,EAnBD,CAHmB,CAuB1C,EACK+D,GAAmB,WACvB,IAAShB,GAAT,OAAezF,EAAMrC,QAAQ2D,QAAQC,OAArC,MACMmF,EAAKvB,GAAYxH,SACnByH,GAASzH,SAAY8H,GAAOiB,IAChCjB,EAAGpE,SAAU,EACbqF,EAAGrF,SAAU,EACd,EAEKsF,GAAW,SAAClJ,GAChB4H,KACA9E,GAAQqG,EAAY3H,EAAUxB,EAAEoJ,MAAOzD,GAAWzF,SACnD,EACKmJ,GAAW,SAACrJ,GAChB4H,KACA5E,GAAQsG,EAAUtJ,EAAEoJ,OACrB,EAEKG,GAAa,CACjBC,KAAMN,GACNO,MAAOP,GACPQ,OAAQtH,EAAQ8G,GAAWG,GAC3BzC,SAJiB,SAIR5G,GACP,GAAIoC,EAAO,CAET,UAAIS,SAAJ,IAAIA,IAAAA,GAAM8G,SAAS3J,EAAEoJ,OAAQ,OAC7BF,GAASlJ,GACT6G,IAAY,EACb,KAAM,CAAC,IAAD,EAED+C,EAAM,iBACR7G,SADQ,IACRA,QADQ,EACRA,GAAM8G,QAAQ7J,EAAEoJ,MAAO,CAAEU,UAAU,WAD3B,eAER7G,SAFQ,IAERA,QAFQ,EAERA,GAAc4G,QAAQ7J,EAAEoJ,MAAO,CAAEU,UAAU,EAAMlD,UAAU,IAE7D,GADAD,GAAOzG,QAAU0J,EACbA,EAAQ,OAGZ,UAAI7G,SAAJ,IAAIA,IAAAA,GAAM4G,SAAS3J,EAAEoJ,OAAQ,OAC7BC,GAASrJ,GACTkD,QAAgBuE,GAChBZ,IAAY,EACb,CACF,EACDkD,KAzBiB,SAyBZ/J,GAAsB,IAAD,EAClB6F,EAAQtD,EAAMrC,QAAQ2D,QAAQC,OAAO,GAC3C,GAAK+B,EAAL,CACA,IAAMmE,EAAC,UAAGC,EAAepE,EAAO7F,EAAEoJ,cAA3B,QAAqCc,EAAUlK,EAAEoJ,OACxDe,GAAaH,EAFK,CAGnB,GACDlD,IAEIsD,GAAW,SAACpK,GACZ,OAAJ6C,SAAI,IAAJA,IAAAA,GAAMwH,IAAIrK,EAAEoJ,OACR,OAAJvG,SAAI,IAAJA,IAAAA,GAAMyH,QACP,EAYKC,GAAa,CACjBf,KAAMY,GACNX,MAAOW,GACPV,OAAQtH,EAAQgI,GAdC,SAACpK,GAClB,GAAK+C,GAAL,CACA,MAAiB/C,EAAEoJ,MAAXoB,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EACX,UAAuB1H,GAAK+G,SAA5B,GAASY,EAAT,KAAaC,EAAb,KAAiBC,EAAjB,KACKF,GAAOC,GAAOC,IACnBF,EAAGtB,MAAMoB,EAAIA,EACbG,EAAGvB,MAAQpJ,EAAEoJ,MACbwB,EAAGxB,MAAMqB,EAAIA,EACb1H,GAAK6D,UAAW,EAPC,CAQlB,EAMCA,SAJiB,SAIR5G,GACP,IAAM4J,EAASjD,GAAOzG,QACtB,GAAU,OAAN0J,QAAM,IAANA,GAAAA,EAAQiB,SAAW9H,IAAQE,GAAc,CAC3C,IAAM4H,EAAUjB,EAAOiB,QAEvB,GADiBA,EAAQjE,SACX,CAEZ,IAAQwB,EAAWrF,GAAK8F,OAAhBT,OACF0C,EAAOD,EAAQzB,MAAM2B,SAAS3C,GAC9B4C,EAAOhL,EAAEoJ,MAAM2B,SAAS3C,GAC9B6C,GAAUvL,EAAgBsL,EAAKpM,QAC/B,IAAMA,EAAQoM,EAAKpM,MAAQkM,EAAKlM,MAChCmE,GAAK7D,OAAON,EAAOwJ,GACnBnF,GAAa/D,OAAON,EAAOwJ,GAC3BnB,GAAYvD,SAAQ,SAAC2C,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMnH,OAAON,EAAOwJ,EAA9B,GACrB,KAAM,CAAC,IAAD,EAEC8C,EAAQL,EAAQzB,MAChB+B,EAAQN,EAAQO,KAAKA,KAAKhC,MAC1BiC,EAAWH,EAAMH,SAASI,GAE1BvG,EADa5E,EAAEoJ,MAAM2B,SAASI,GAAOtH,QAAQwH,GAC1Bb,EAAIa,EAASb,EACtC,GAAI5F,EAAQ,EAAG,OAEf7B,GAAK6B,MAAMA,EAAOuG,GAClBlE,GAAYvD,SAAQ,SAAC2C,GACnBA,EAAKzB,MAAMA,EAAOuG,GAClB9E,EAAKiF,aAAe1G,CACrB,IACD3B,GAAa2B,MAAMA,EAAOuG,GAC1B,IAAMI,EAAM,UAAGtI,GAAa6G,SAAS,UAAzB,aAAG,EAA0BV,MACzC,IAAKmC,EAAQ,OACbtI,GAAa2B,MAAM,IAAM3B,GAAaxC,OAAQ8K,EAC/C,CACF,MAECtE,GAAYvD,SAAQ,SAAC2C,GAAD,OAAUA,EAAKpH,UAAUe,EAAEwL,MAA3B,IAChB,OAAJ3I,SAAI,IAAJA,IAAAA,GAAM5D,UAAUe,EAAEwL,OACd,OAAJzI,SAAI,IAAJA,IAAAA,GAAM9D,UAAUe,EAAEwL,OACN,OAAZvI,SAAY,IAAZA,IAAAA,GAAchE,UAAUe,EAAEwL,MAE7B,EACDzB,KA9CiB,SA8CZ/J,GACH,GAAKyL,KAAaA,GAAUnE,KAA5B,CACA,MAAmCmE,GAAU5C,OAArC6C,EAAR,EAAQA,UACFL,EADN,EAAmBM,YACUZ,SAASW,GAEhC9G,EADa5E,EAAEoJ,MAAM2B,SAASW,GAAW7H,QAAQwH,GAC9Bb,EAAIa,EAASb,EAClC5F,EAAQ,GACZ6G,GAAU7G,MAAMA,EAAO8G,EANiB,CAOzC,GACD5E,KAEF3D,EAAAA,EAAAA,YAAU,WACRZ,EAAMrC,QAAQ0L,KAAKC,YAAcxJ,CAClC,GAAE,CAACA,IACJ,IAAMyJ,IAAShM,EAAAA,EAAAA,QAAO,IAAIqH,KACpB4E,IAAWjM,EAAAA,EAAAA,QAAO,IAAIzB,KAEtB2N,IAAWhK,EAAAA,EAAAA,UAAQ,WACvB,GAAkB,UAAd8E,GAAuB,MAAO,GAClC,IAAMmF,EAAOpN,KAAKqN,KAAKrK,EAAQ,KACzBsK,EAAOtN,KAAKqN,KAAKpK,EAAS,KAC1BsK,EAAOC,MAAMC,KAAK,CAAE7L,OAAQwL,IAAQ,kBACxCI,MAAMC,KAAK,CAAE7L,OAAQ0L,IAAQ,kBAAM,IAAIhF,GAAV,GADW,IAI1C,OADAzE,GAAMgB,SAAQ,SAAC2C,GAAD,OAAUkG,EAAYH,EAAM/F,EAA5B,IACP+F,CACR,GAAE,CAAC1J,GAAOb,EAAOC,EAAQgF,KAEpB0F,GAAiB,SAACxM,GACtB,IAAM6F,EAAQtD,EAAMrC,QAAQ2D,QAAQC,OAAO,GAC3C,GAAkB,UAAdgD,IAA0BjB,EAA9B,CAEA,IAAM4G,EAAY,CAChBC,MAAOlK,IAAAA,KACPyD,QAAQ,EACR0G,UAAWtK,EAAc,GAG3BuK,EAAaZ,GAAUhM,EAAEoJ,MAAO/G,GAAaqB,SAAQ,SAAC2C,GAAU,IAAD,EACzDyF,GAAO5L,QAAQmH,IAAIhB,EAAKiB,OAC5B,UAAAjB,EAAKwG,WAAW7M,EAAEoJ,MAAOqD,UAAzB,SAAqC/I,SAAQ,YAAe,IAAZ2C,EAAW,EAAXA,KAC9C,GAAMA,aAAgB7D,IAAAA,KAAtB,CAEA,IADA,IAAIsK,EAA0BzG,EACvByG,EAAQC,SAAWlH,GAClBiH,EAAQC,kBAAkBvK,IAAAA,UAChCsK,EAAUA,EAAQC,OAEpB,IAAQzF,EAASwF,EAATxF,KAER,GAAI9F,EAASwL,YAAa,CACxB,IAAMC,GAAU5K,EAAcgE,EAAKiF,aAAe,EAC5C4B,EAAS,IAAIjF,EAAAA,KAAAA,OAAY,CAC7BG,OAAQpI,EAAEoJ,MACV6D,OAAAA,EACAE,QAAQ,IAGJC,EAAM/G,EAAK0E,SAASmC,EAAQ,CAAEG,OAAO,IAC3ChH,EAAKmC,YAAY4E,GACbN,IAAYzG,IACdkG,EAAYP,GAAUoB,EAAK/G,GAC3ByG,EAAUM,GAEZrB,GAAS7L,QAAQT,IAAI6H,EAAMwF,EAC5B,MACCA,EAAQQ,QAAU,GAClBR,EAAQS,OAAQ,EAChBzB,GAAO5L,QAAQmK,IAAI/C,EA1BoB,CA4B1C,GACF,GAxC0C,CAyC5C,EAEKkG,GAAW,CACfhE,KADe,WAGb,GADAR,KACKnG,MAAQA,GAAKiH,SAASrJ,QAAU,GAArC,CACAoC,GAAK4K,WACL,IAAMC,EAAW7K,GAAK8K,aACtB7K,QAAQ2E,GACRlG,GAAS,SAACqM,GAAD,OAAUnI,EAAAA,GAAAA,UAAoBmI,EAAMF,EAApC,GAJqC,CAK/C,EACDjE,MATe,WAYb,GAFAT,KACAlG,QAAQ2E,GACJjG,EAASwL,YAAa,CACxB,IAAMa,EAAQxB,MAAMC,KAAKP,GAAS7L,SAClC6L,GAAS7L,QAAQ4N,QACjB,IAAMC,EAAwBF,EAAMG,KAAI,YAAkB,IAAD,eAAf5H,EAAe,KAAVC,EAAU,KAEvD,MAAO,CAACD,EADM6H,EAAU5H,GACL2H,KAAI,SAACE,GAAD,OAAOA,EAAEP,YAAT,IACxB,IACD,IAAKI,EAAUtN,OAAQ,OACvBc,GAAS,SAACqM,GAAD,OAAUnI,EAAAA,GAAAA,aAAuBmI,EAAMG,EAAvC,GACV,KAAM,CACL,IAAMI,EAAa9B,MAAMC,KAAKR,GAAO5L,SAErC,GADA4L,GAAO5L,QAAQ4N,SACVK,EAAW1N,OAAQ,OACxBc,GAAS,SAACqM,GAAD,OAAUnI,EAAAA,GAAAA,aAAuBmI,EAAMO,EAAvC,GACV,CACF,EACDzE,OA5Be,WA8Bb,IAAI0E,EACJ,GAFApF,KAEI5G,EAAO,CACT,IAAKS,IAAQhE,KAAKwP,IAAIxL,GAAKyL,MAAQ,IAAO,OAAOxL,QAAQ2E,GACzD5E,GAAK0L,YACL1L,GAAK4K,WACLe,EAAS3L,IACTuL,EAAYK,EAAW/L,GAAOG,GAC/B,KAAM,CACL,IAAKE,IAAQlE,KAAKwP,IAAItL,GAAKuL,MAAQ,IAAO,OAAOtL,QAAQyE,GACzD2G,EAAYK,EAAW/L,GAAOK,IAC9B,IAAM2L,EAAO,IAAIzG,EAAAA,KACTyD,EAAc3I,GAAK8F,OAAnB6C,UACRgD,EAAKrE,IAAIqB,EAAWA,EAAUX,SAAS,IAAI9J,EAAAA,MAAM,EAAG,OACpDyN,EAAKC,YAAY/H,UAAW,EAC5B1D,GAAgBwL,EACjB,CACD7H,IAAY,GACZG,GAAaoH,GACbxM,EAAc,SACf,EACDgF,SAlDe,SAkDN5G,GACP4O,KACAC,GAAqB7O,EACtB,EACD+J,KAtDe,WAuDbnI,EAAc,OACf,GACDkF,IAEF,IAA4BrE,EAAAA,EAAAA,UAAS,QAArC,iBAAOqM,GAAP,MAAe7D,GAAf,OACA9H,EAAAA,EAAAA,YAAU,WACU,SAAd2D,IAAsC,WAAdA,GAC1BmE,GAAU,aACa,aAAdnE,GACTmE,GAAU7I,EAAQ,YAAc,eACT,SAAd0E,IAAsC,UAAdA,IACjCmE,GF7cuB,SAACzJ,EAAoBiD,GAClD,IAAQsK,EAAiCvN,EAAjCuN,UAAW1M,EAAsBb,EAAtBa,YACb6F,EAAOzD,GAAkB,UADUjD,EAATU,KACSG,EAAc0M,GACvD,GAAI7G,EAAO,EAAG,MAAO,YACrB,IAAM8G,EAAO9G,EAAO,EACpB,MAAM,+FAAN,OAAqGA,EAArG,qBAAsHA,EAAtH,wEAAyL8G,EAAzL,YAAiMA,EAAjM,SACD,CEuciBC,CAAgBzN,EAAUiD,IAEvC,GAAE,CAACqC,GAAW1E,EAAOZ,EAAUiD,KAEhC,IAAMoK,GAAuB,SAAC7O,GAAyB,IAAD,IAC9C4J,EAAM,iBACV7G,SADU,IACVA,QADU,EACVA,GAAM8G,QAAQ7J,EAAEoJ,MAAO,CAAEU,UAAU,WADzB,eAEV7G,SAFU,IAEVA,QAFU,EAEVA,GAAc4G,QAAQ7J,EAAEoJ,MAAO,CAAEU,UAAU,EAAMlD,UAAU,IAC7D,UAAIgD,QAAJ,IAAIA,GAAAA,EAAQiB,QAAS,CACnB,GAAIjB,EAAOiB,QAAQjE,SAAU,CAC3B,IAAMwB,EAAM,OAAGrF,SAAH,IAAGA,QAAH,EAAGA,GAAM8F,OAAOT,OAC5B,IAAKA,EAAQ,OACb,IAAM4C,EAAOpB,EAAOiB,QAAQzB,MAAM2B,SAAS3C,GAC3C,OAAO6C,GAAUvL,EAAgBsL,EAAKpM,OACvC,CACD,IAAMsM,EAAQtB,EAAOiB,QAAQzB,MACvB+B,EAAQvB,EAAOiB,QAAQO,KAAKA,KAAKhC,MACjCiC,EAAWH,EAAMH,SAASI,GACxBX,EAASa,EAATb,EAAGC,EAAMY,EAANZ,EACX,OAAOQ,GAAUT,EAAIC,EAAI,EAAI,cAAgB,cAC9C,CACD,oBAAK1H,SAAL,IAAKA,GAAAA,GAAQF,UAAb,OAAI,EAAgB8G,SAAS3J,EAAEoJ,OAAQ,OAAO6B,GAAU,QACxDA,GAAU,YACX,EAEKiE,IAAa,QACjBtI,SAAUiI,GACV9E,KAFiB,SAEZ/J,GACH,IAAM6F,EAAQtD,EAAMrC,QAAQ2D,QAAQC,OAAO,GACtC+B,IACDoE,EAAepE,EAAO7F,EAAEoJ,OAAQ6B,GAAU,QACzCA,GAAU,aAChB,GACE,CAAEvB,OAAQ,KAAMF,KAAM,KAAMC,MAAO,OACtC3C,IAEIqI,GAAc,SAACnP,GACD,aAAd8G,IACA,uBAAuBsI,KAAKpP,EAAEqP,MAAMC,IACzC,GAEDnM,EAAAA,EAAAA,YAAU,WACR,IAAIzB,EAAJ,CAGA,IAAMqC,EAAW,SAAKwL,GACpB,OAAO,SAACvP,GAEN,GADAuC,EAAMrC,QAAQ6D,WACVwL,EAAS,OAAOA,EAAQvP,EAC7B,CACF,EACD,EAAuBuC,EAAMrC,QAArB+D,EAAR,EAAQA,KAAM2H,EAAd,EAAcA,KACd3H,EAAKuL,YAAczL,EAASwF,IAC5BtF,EAAKwL,YAAc1L,EAASwG,IAC5BtG,EAAKyL,UAAY3L,EAASyJ,IAC1BvJ,EAAK0L,YAAc5L,EAASmL,IAC5BtD,EAAK6D,YAAc1L,EAASyI,IAC5BZ,EAAKgE,QAAU7L,EAASoL,GAfJ,CAgBrB,IAED,IAAMP,GAAiB,WACrB,GAAI,OAAC3H,SAAD,IAACA,IAAAA,GAAaxG,OAAlB,CACA,IAAMoP,EAAwB5I,GAAY+G,KAAI,SAAC8B,GAAD,MAAO,CACnDA,EAAExI,KACFwI,EAAEnC,aAF0C,IAI9CpM,GAAS,SAACqM,GAAD,OAAUnI,EAAAA,GAAAA,cAAwBmI,EAAMiC,EAAxC,GALuB,CAMjC,EAEKP,GAAiB,WACrB/H,KACKR,GAAUtG,QACfc,GAAS,SAACqM,GAAD,OAAUnI,EAAAA,GAAAA,aAAuBmI,EAAM7G,GAAvC,GACV,EAEKgJ,GAAc,SAACC,GACnBzN,EAAMrC,QAAQ6D,WACdkM,EAAiBhJ,GAAa+I,GAC9BpB,IACD,EAEKsB,GAAoB,WAAO,IAAD,EAC9B3N,EAAMrC,QAAQ6D,WACd,IAAMmE,EAAI,UAAInF,IAAQF,UAAZ,aAAG,EAAgBgG,OAAOX,KACpC,GAAKA,GAASjB,GAAYxG,OAA1B,CACA,IAAQoB,EAAkBqG,EAAlBrG,MAAOC,EAAWoG,EAAXpG,OACTqO,EAAS,IAAIlP,EAAAA,MAAMY,EAAOC,GAAQsO,OAAO,IACzCC,EAASpJ,GAAY+G,KAAI,SAAC3H,GAAD,OAAUA,EAAKiK,OAAf,IAC/BD,EAAO3M,SAAQ,SAAC2C,GAAD,OAAUA,EAAKpH,UAAUkR,EAAzB,IACX,OAAJpN,SAAI,IAAJA,IAAAA,GAAM9D,UAAUkR,GACZ,OAAJtN,SAAI,IAAJA,IAAAA,GAAM5D,UAAUkR,GACJ,OAAZlN,SAAY,IAAZA,IAAAA,GAAchE,UAAUkR,GAExB,IAAMN,EAAwBQ,EAAOrC,KAAI,SAAC3H,GAAD,MAAU,CACjDZ,EAAAA,GAAAA,SACAY,EAAKsH,aAFkC,IAIzCpM,GAAS,SAACqM,GAAD,OAAUnI,EAAAA,GAAAA,cAAwBmI,EAAMiC,EAAxC,IACT7I,GAAa6I,EAAU7B,KAAI,qCAda,CAezC,EAEKuC,GAAoB,WAAO,IAAD,MAI9B,OAHAhO,EAAMrC,QAAQ6D,WACd6D,GAAc,QAAE,EAAF,OAAE7E,SAAF,IAAEA,GAAAA,GAAQF,UAAV,aAAC,EAAgByN,SAAS,GACxCtH,KACA,oBAAOtB,GAAYxH,eAAnB,aAAO,EAAqBZ,mBAA5B,QAA2C,EAC5C,EAED,GAAkCsD,IAAlC,iBAAO6I,GAAP,MAAkBtB,GAAlB,MACMqG,IAAahJ,EAAAA,EAAAA,cAAY,WAC7B2C,QAAa1C,GACb7F,EAAc,GACf,GAAE,CAACuI,GAAcvI,KAElBuB,EAAAA,EAAAA,YAAU,WACR,GAAa,SAATjB,EAAiB,OAAOsO,EAC7B,GAAE,CAACtO,EAAMsO,KAEV,IAAMC,GAAa,SACjB1G,GAGI,IAFJ2G,EAEG,uDAFK,OACRC,EACG,uDADa,SAEhB,GAAKlF,GAAL,CACAA,GAAUmF,QAAU7G,EACpB0B,GAAUoF,UAAY,IAAIC,EAAAA,MAAMJ,GAChCjF,GAAUkF,cAAgBA,EAC1B,IAAMjD,EAAWjC,GAAUkC,aACnBrG,EAASmE,GAATnE,KAER,GADAkJ,MACKlJ,EAAM,OAAO/F,GAAS,SAACqM,GAAD,OAAUnI,EAAAA,GAAAA,UAAoBmI,EAAMF,EAApC,IAC3BnM,GAAS,SAACqM,GAAD,OAAUnI,EAAAA,GAAAA,cAAwBmI,EAAM,CAAC,CAACtG,EAAMoG,IAAhD,GARa,CASvB,GAEDqD,EAAAA,EAAAA,qBAAoB3P,GAAK,iBAAO,CAC9BkO,eAAAA,GACAY,kBAAAA,GACAK,kBAAAA,GACAR,YAAAA,GACAS,WAAAA,GACAC,WAAAA,GACAhF,UAAAA,GAPuB,KDnjB3BtI,EAAAA,EAAAA,YAAU,WACR,IAAMoM,EAAU,SAACvP,GAAD,OAAcA,EAAEgR,gBAAhB,EAIhB,OAHAC,SAASC,iBAAiB,eAAgB3B,GAC1C0B,SAASC,iBAAiB,gBAAiB3B,GAC3C0B,SAASC,iBAAiB,aAAc3B,GACjC,WACL0B,SAASE,oBAAoB,eAAgB5B,GAC7C0B,SAASE,oBAAoB,gBAAiB5B,GAC9C0B,SAASE,oBAAoB,aAAc5B,EAC5C,CACF,GAAE,KCojBD6B,EAAAA,EAAAA,WACE,YAAqD,IAAlDC,EAAiD,EAAjDA,KAAezM,GAAkC,SAA3C0M,OAA2C,MAA1BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACrClP,EAAMrC,QAAQ6D,WACd,IAGI2N,EACAC,EAAYC,EAJR3N,EAAS1B,EAAMrC,QAAf+D,KACF4N,EAAa,IAAIrP,IAAAA,OAAYiP,GAInC,GAAIF,IAAUF,EAAM,CAClB,MAAiB/O,EAASpC,QAAS4R,wBAA3BtH,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EACXiH,EAAY,EACZE,EAAQ,IAAI3Q,EAAAA,MAAMuJ,EAAGC,GACrBkH,EAAaE,EAAW9G,SAAS6G,GACjChK,GAAe,IAAIK,EAAAA,KAAAA,UAAejH,EAAQe,IAC1C4F,GAASzH,SAAU,CACpB,KAAM,CAAC,IAAD,UAC4BmR,EAD5B,GACJK,EADI,KACOC,EADP,KACmBC,EADnB,IAEN,CAED,IAAMG,EAAcF,EAAW9G,SAAS6G,GAClCI,EAAc/N,EAAKgO,cAAcF,GAGjC5B,EADS4B,EAAYhH,SAAS4G,GACdvB,OAAOnM,EAAKiO,MAClCjO,EAAKhF,UAAUkR,GAEf,IAAIgC,EAASZ,EAAQ,EAAI3M,EAAQ8M,EAGjC,GAFAnP,EAAMrC,QAAQqD,SAASE,cAAgB0O,GAEnCX,EAOF,OADAvN,EAAKW,MAAMuN,EAAQH,GACZ,CAACpN,EAAOmN,EAAaH,GAN5BQ,EAAUnO,EAAM+N,EAAaG,GAC1BE,MAAK,kBAAMC,EAAcrO,EAAMlC,EAA1B,IACLsQ,MAAK,kBAAO1K,GAASzH,SAAU,CAA1B,IACLmS,KAAKrJ,GAKX,GACD,CACEuJ,YAAa,CAAEC,IAAK,EAAGC,IAAK,GAC5BC,WAAY,GACZC,OAAQrQ,IAIZ,IAAMsQ,GAAejT,EAAgBwC,GACrC,OACE,gCACE0Q,UAAU,eACVC,MAAO,CAAEhE,OAAAA,IACT,gBAAepN,GACXkR,IAJN,cAME,mBAAQxR,IAAKkB,EAAUuQ,UAAU,kBAGtC,IAGH3R,EAAQ6R,YAAc,OACf,IAAMC,EAAO7R,EAAAA,KAAWD,GAE/B,SAAS0B,IACP,IAAMqQ,GAAQxQ,EAAAA,EAAAA,YACP4D,GAAP,OAAe4M,EAAf,MAKA,OAJAC,EAAAA,EAAAA,eAAc7M,IACdlD,EAAAA,EAAAA,YAAU,WACR,GAAI,OAACkD,QAAD,IAACA,IAAAA,EAAMiB,KAAM,OAAO,WAAM,OAAKjB,QAAL,IAAKA,GAAAA,EAAMnC,QAAjB,CACzB,GAAE,CAACmC,IACG4M,CACR,CAED,IAAM3M,EAAe,WACnB,IAAM6M,EAAW,IAAIC,QAKrB,OAAO,SAACnN,EAAgBJ,GAA0C,IAAD,EAArBnE,EAAqB,wDACvDgM,EAAkBzH,EAAlByH,SAAUtH,EAAQH,EAARG,IACZhI,EAAK,UAAG+U,EAASnU,IAAI6G,UAAhB,QAA0B,IAAIxH,IACzC8U,EAAS1T,IAAIoG,EAAOzH,GACpB,IACIiI,EADEtH,EAASX,EAAMY,IAAIoH,GAEzB,IAAU,OAANrH,QAAM,IAANA,OAAA,EAAAA,EAAQkH,UAAWA,EACrBJ,EAAMV,SAASpG,EAAOsH,MACtBA,EAAOtH,EAAOsH,SACT,CAAC,IAAD,EACL,IACEA,EAAOR,EAAMwN,WAAW3F,EAGzB,CAFC,MAAO1N,GACPsT,QAAQC,MAAMvT,EACf,CACG,QAAJ,EAAAqG,SAAA,QAAAA,EAAS,IAAI7D,IAAAA,OACb6D,EAAKiB,KAAOlB,EACZhI,EAAMqB,IAAI2G,EAAK,CAAEC,KAAAA,EAAMJ,OAAAA,GACxB,CAGD,OAFAI,EAAKiH,QAAU,EACfjH,EAAKkH,MAAQ7L,EACN2E,CACR,CACF,CA7BoB,GA+BfhC,EAAa,SAACP,EAAuB/B,GACzC,cAAqB+B,EAArB,GAAOiE,EAAP,KAAWC,EAAX,KAAewL,EAAf,KACA,IAAKzL,IAAOC,IAAOwL,EAAI,MAAO,GAC9B,IAAMC,EAAS,IAAIxL,EAAAA,KAAAA,UAAejH,EAAQe,GACpC2R,EAAQD,EAAOnD,QACfqD,EAAQF,EAAOnD,QAOrB,OANAmD,EAAO5C,UAAY,IAAIC,EAAAA,MAAM,QAC7B/I,EAAG5C,SAASsO,GACZzL,EAAG7C,SAASuO,GACZF,EAAGrO,SAASwO,GACZ3L,EAAG4L,SAAU,EACbJ,EAAGI,SAAU,EACN,CAACH,EAAQC,EAAOC,EACxB,EAEKrK,EAAY,SAACF,GACjB,IAAMrG,EAAO,IAAIkF,EAAAA,KAAAA,UAAemB,EAAO,IAAInH,EAAAA,KAAK,EAAG,IAEnD,OADAc,EAAK8Q,QAAU,WAAQ,EAChB9Q,CACR,EAEKoG,EAAc,SAAC3H,EAAoB4H,GAAsC,IAAlB0K,EAAiB,wDACtE5R,EAAmDV,EAAnDU,KAAM6M,EAA6CvN,EAA7CuN,UAAW1M,EAAkCb,EAAlCa,YAAaqO,EAAqBlP,EAArBkP,MAAOqD,EAAcvS,EAAduS,UACrClR,EAAO,IAAIoF,EAAAA,KACjBpF,EAAKwH,IAAIjB,GACI,UAATlH,IACFwO,EAAQ,OACR3B,EAAY1M,GAED,WAATH,IACFwO,EAAQ,UACR3B,EAAY,GAEd,IAAMiF,EAAc,IAAIlD,EAAAA,MAAMJ,GAU9B,OATIqD,GAAuB,UAAT7R,IAAqB4R,KACrCE,EAAYC,MAAQ,GACpBpR,EAAKqR,UAAY,YAEnBrR,EAAKmR,YAAcA,EACnBnR,EAAKyI,YAAcyD,EACnBlM,EAAKsR,WAAa,QAClBtR,EAAKuR,UAAY,QACjBvR,EAAK0K,OAAQ,EACN1K,CACR,EAEK2L,EAAW,SAACnI,GAChBA,EAAKgO,WAAa,EAClBhO,EAAKiO,UAAY,CAAC,GAAI,IACtBjO,EAAKwN,QAAU,kBAAOxN,EAAKgO,YAAc,CAA1B,CAChB,EAEKjC,EAAY,SAChBnO,EACA+N,EACAG,GAHgB,OAKhB,IAAIoC,SAAc,SAACC,GACjB,GAAI3V,KAAKwP,IAAI8D,EAAS,GAAK,IAEzB,OADAlO,EAAKW,MAAMuN,EAAQH,GACZwC,IAET,IAAIC,EAAW,GACftC,EAAStT,KAAK6V,IAAIvC,EAAQ,EAAIsC,IAChB,SAAR7P,IACJX,EAAKW,MAAMuN,EAAQH,KACbyC,EAAW,EAAGjO,sBAAsB5B,GACrC4B,uBAAsB,kBAAMgO,GAAN,GAC5B,CACD5P,EACD,GAlBe,EAqCZ0N,EAAgB,SAACrO,EAAkBlC,GAAnB,OACpB,IAAIwS,SAAc,SAACC,GACjB,MAnBuB,SACzBvQ,EACAlC,GAEA,MAAiBkC,EAAKmE,OAAdoC,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EACX,EAAwCxG,EAAKiE,KAA9ByM,EAAf,EAAQ9S,MAAsB+S,EAA9B,EAAsB9S,OACP+S,EAAyB9S,EAAhCF,MAAsBiT,EAAU/S,EAAlBD,OAEfiT,EAAelW,KAAK4T,IAAIkC,EAAOE,GAAS,EAAlCG,EAAqCnW,KAAK4T,IAAImC,EAAOE,GAAS,EACpEG,EAAeJ,EAAQE,EAAjBG,EAAuBJ,EAAQE,EAK5C,MAAO,CAHQxK,EAAIuK,EAAOA,EAAOvK,EAAIA,EAAIyK,EAAOA,EAAOzK,EAAI,EAC5CC,EAAIuK,EAAOA,EAAOvK,EAAIA,EAAIyK,EAAOA,EAAOzK,EAAI,EAG5D,CAI4B0K,CAAmBlR,EAAMlC,GAAlD,eAAOqT,EAAP,KAAeC,EAAf,KACA,IAAKD,IAAWC,EAAQ,OAAOb,IAC/B,IAAIC,EAAW,GACTa,EAAK,IAAIrU,EAAAA,MAAMmU,EAAQC,GAAQjF,QAAQqE,IAChC,SAAPc,IACJtR,EAAKhF,UAAUqW,KACTb,EAAW,EAAGjO,sBAAsB+O,GACrC/O,uBAAsB,kBAAMgO,GAAN,GAC5B,CACDe,EACD,GAZmB,EAchB9G,EAAa,SAACZ,EAAqBO,GACvC,IAAMoH,EAAW,SAAC1F,GAChB,IAAM0E,EAAM1E,EAAE/E,SAASqD,EAAW,CAAEjB,QAAQ,EAAOE,OAAO,IAE1D,OADAmH,EAAItQ,UACIsQ,EAAIiB,QAAQ3F,EACrB,EACD,OAAOjC,EACJzG,QAAO,SAACf,GACP,IAAKA,EAAKiB,KAAM,OAAO,EACvB,IAAKjB,EAAKwC,OAAO6M,WAAWtH,EAAUvF,QAAS,OAAO,EACtD,GAAIxC,aAAgB7D,IAAAA,KAClB,OACiC,IAA9B4L,EAAUtE,SAASrJ,QAClB4F,EAAKmP,SAASpH,EAAUvF,SAC1B2M,EAASnP,GAGX,IAAMsP,EAAW,IAAI1N,EAAAA,KAAAA,UAAe5B,EAAKwC,QAEzC,OADA8M,EAASzR,SACFsR,EAASG,IAAavH,EAAUoH,SAASnP,EAAKwC,OAExD,IACAmF,KAAI,qBAAG1G,IAAH,GACR,EAEK2I,EAAmB,SAACpC,EAAqBmC,GAC7C,IAAQjB,EAAgCiB,EAAhCjB,UAAW2B,EAAqBV,EAArBU,MAAOqD,EAAc/D,EAAd+D,UAC1BlG,EAAMnK,SAAQ,SAAC2C,GACb,GAAIA,aAAgB7D,IAAAA,WAAmBkO,EAAO,CAC5C,IAAMkF,EAAW,IAAI9E,EAAAA,MAAMJ,GAC3BrK,EAAKwK,UAAY+E,CAClB,CAED,GAAMvP,aAAgB7D,IAAAA,KAAtB,CAEA,GAAIkO,EAAO,CACT,IAAMkF,EAAW,IAAI9E,EAAAA,MAAMJ,GACJ,aAAnBrK,EAAK6N,YAA0B0B,EAAS3B,MAAQ,IACpD5N,EAAK2N,YAAc4B,CACpB,CAEG7G,IAAW1I,EAAKiF,YAAcyD,GAE7B1I,EAAK2N,kBAA6BvM,IAAdsM,IACzB1N,EAAK2N,YAAYC,MAAQF,EAAY,GAAM,EAC3C1N,EAAK6N,UAAYH,EAAY,WAAa,SAZD,CAa1C,GACF,EAEK9J,EAAiB,SAACpE,EAAoBuD,GAC1C,IAAMQ,EAAS/D,EAAMgE,QAAQT,EAAO,CAClCsD,MAAOlK,IAAAA,UACPqT,MAAM,IAER,IAAU,OAANjM,QAAM,IAANA,OAAA,EAAAA,EAAQvD,gBAAgB7D,IAAAA,UAAiB,cAAOoH,QAAP,IAAOA,OAAP,EAAOA,EAAQvD,IAC7D,EAEK6D,EAAY,SAACd,GACjB,OAAO,IAAI5G,IAAAA,WAAgB,CACzB4G,MAAOA,EAAMiB,IAAI,IAAIpJ,EAAAA,MAAM,EAAG,KAC9B2P,QAAS,iBACTkF,SAAU,GACVnF,cAAe,SACfE,UAAW,aAEd,EAEK5C,EAAY,SAAZA,EAAa8H,GACjB,OAAIA,aAAcvT,IAAAA,KACTuT,EAAGC,UAAY,GAAK,CAACD,GAE1BA,aAAcvT,IAAAA,aACTuT,EAAGE,SAASjI,IAAIC,GAAWiI,OAE7B,EACR,EAEKC,EAAe,SAACC,EAAsBzK,GAC1C,MAAO,CACL9M,KAAKwX,MAAMD,EAAQ5L,EAAI,KACvB3L,KAAKqN,KAAKP,EAAYnB,EAAI,KAC1B3L,KAAKwX,MAAMD,EAAQ3L,EAAI,KACvB5L,KAAKqN,KAAKP,EAAYlB,EAAI,KAE7B,EAEK8B,EAAc,SAClBH,EACA/F,EACA0F,GAKA,IAHA,IAAMlD,GAAS,OAACkD,QAAD,IAACA,EAAAA,EAAY1F,GAAMiQ,aAC1BF,EAAyBvN,EAAzBuN,QAASzK,EAAgB9C,EAAhB8C,YACjB,EAAiCwK,EAAaC,EAASzK,GAAvD,eAAO4K,EAAP,KAAaC,EAAb,KAAmBC,EAAnB,KAAyBC,EAAzB,KACSlM,EAAI+L,EAAM/L,GAAKgM,EAAMhM,GAAK,EACjC,IAAK,IAAIC,EAAIgM,EAAMhM,GAAKiM,EAAMjM,GAAK,EAAG,CAAC,IAAD,QACpCsB,IAAQ,UAAIK,EAAK5B,UAAT,iBAAI,EAAUC,UAAd,OAAI,EAAckM,OAAO5K,IACjC,UAAAK,EAAK5B,UAAL,mBAAUC,UAAV,SAAcJ,IAAIhE,EACnB,CAEJ,EAEKuG,EAAe,SACnBR,EACAhD,EACAvH,GAOA,IALA,IAAM+U,EAAU,IAAIzP,IACpB,EAAiCgP,EAC/B/M,EAAM2B,SAASlJ,EAAQ,GACvBuH,EAAMiB,IAAIxI,EAAQ,IAFpB,eAAO0U,EAAP,KAAaC,EAAb,KAAmBC,EAAnB,KAAyBC,EAAzB,KAISlM,EAAI+L,EAAM/L,GAAKgM,EAAMhM,GAAK,EACjC,IAAK,IAAIC,EAAIgM,EAAMhM,GAAKiM,EAAMjM,GAAK,EAAG,CAAC,IAAD,IACpC,UAAA2B,EAAK5B,UAAL,mBAAUC,UAAV,SAAc/G,SAAQ,SAAC2C,GAAD,OAAUuQ,EAAQvM,IAAIhE,EAAtB,GACvB,CAEH,OAAOuQ,CACR,E,mNCh5BYC,GAGR,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASlT,EAAZ,EAAYA,QAAZ,OACH,SAACmT,GAAA,EAAD,CAAeC,QAAS,IAAKC,GAAIrT,EAASsT,eAAa,EAAvD,UACE,SAACC,GAAD,CAAmBL,QAASA,KAF3B,EAMQK,GAER,SAAC,GAAiB,IAAfL,EAAc,EAAdA,QACAM,EAAwB,CAC5BC,KAAM,OACNC,MAAO,QACPpP,KAAM,SAGR,GAAwCzF,EAAAA,EAAAA,UAA4B,CAAC,GAArE,eAAO8U,EAAP,KAAqBC,EAArB,KAeA,OAAOC,EAAAA,GAAAA,eACL,iBAAK5E,UAAU,cAAf,WACE,SAAC,IAAD,CACE6E,QAAQ,QACRC,UAAU,SACVC,kBAAmB,SAAC5X,GAAD,OAAOA,EAAE6X,aAAT,EACnBC,sBAAoB,EACpBlH,SACE,SAACmH,GAAA,GAAD,CACEC,eAAgB,SAAChI,GAAa,IAAD,EAC3BwH,GAAgB,SAAC5J,GAAD,eAAC,UAAeA,GAASoC,EAAzB,IAChB,UAAA8G,EAAQ5W,eAAR,SAAiB6P,YAAYC,EAC9B,EACDxO,SAAU+V,IAXhB,UAeE,SAAC,KAAD,QAAQU,MAAM,SAACC,EAAA,EAAD,KAA0Bd,OAE1C,SAAC,KAAD,QACEa,MAAM,SAACE,EAAA,EAAD,IACNC,QAAS,kCAAMtB,EAAQ5W,eAAd,aAAM,EAAiBgQ,mBAAvB,GACLkH,KAEN,SAAC,KAAD,QAAQa,MAAM,SAACI,EAAA,EAAD,IAAqBD,QArCrB,WAChB,GAAKtB,EAAQ5W,QAAb,CACA,IAAMoY,EAAYxB,EAAQ5W,QAAQqQ,oBAClCgI,EAAAA,EAAAA,QAAc,CACZC,MAAO,aACP5H,SAAS,gBAAKiC,UAAU,SAASlU,IAAK2Z,EAAWG,IAAI,WACrD5F,UAAW,eACXoF,MAAM,SAACS,EAAA,EAAD,IACNC,OAAQ,OACRC,KAAM,kBAAMC,EAAAA,GAAAA,QAAOP,EAAWrH,SAASuH,MAAMM,MAAM,KAAK,GAAK,OAAvD,GARoB,CAU7B,GA0B8D1B,KAC3D,SAAC,KAAD,QACE2B,QAAM,EACNd,MAAM,SAACe,EAAA,EAAD,IACNZ,QAAS,kCAAMtB,EAAQ5W,eAAd,aAAM,EAAiBoP,gBAAvB,GACL8H,OAGRnG,SAASgI,cAAc,8BAE1B,EAEYC,GAGR,SAAC,GAA0B,IAAxBtV,EAAuB,EAAvBA,QAASkT,EAAc,EAAdA,QACf,GAAwBrU,EAAAA,EAAAA,UAAS,IAAjC,eAAOsH,EAAP,KAAaoP,EAAb,KACA,GAA0B1W,EAAAA,EAAAA,UAAS2W,GAAAA,GAAAA,IAAnC,eAAO1I,EAAP,KAAc2I,EAAd,KACA,GAA0B5W,EAAAA,EAAAA,UAAS,UAAnC,eAAO6W,EAAP,KAAcC,EAAd,MAEApW,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRsI,EAAS,UAAGqL,EAAQ5W,eAAX,aAAG,EAAiBuL,UACnC,GAAKA,GAAc7H,EAAnB,CACA,IAEU,EAFF0D,EAA4CmE,EAA5CnE,KAAMsJ,EAAsCnF,EAAtCmF,QAASD,EAA6BlF,EAA7BkF,cAAeE,EAAcpF,EAAdoF,UAEtC,GADA0I,EAAS5I,GACLrJ,EACF6R,EAAQvI,GACRyI,EAAQ,iBAACxI,QAAD,IAACA,OAAD,EAACA,EAAW2I,OAAM,UAAlB,QAA2BJ,GAAAA,GAAAA,SAEnCD,EAAQ,IACRE,EAASD,GAAAA,GAAAA,GARuB,CAUnC,GAAE,CAACxV,EAASkT,IAEb,IAAM2C,GACJ,SAAC,IAAD,CACE7I,SAAS,SAAC,MAAD,CAAaF,MAAOA,EAAO2I,SAAUA,IAC9CK,aAAc,CAAE7X,MAAO,KACvB8V,UAAU,SACVC,kBAAmB,SAAC5X,GAAD,OAAOA,EAAE6X,aAAT,EAJrB,UAME,SAAC,IAAD,CACE3P,KAAK,QACL+P,MAAM,SAAC0B,EAAA,EAAD,CAAoB9G,UAAU,YAAYC,MAAO,CAAEpC,MAAAA,SAKzDkJ,GACJ,SAAC,WAAD,CACE1R,KAAK,QACL2R,WAAW,SACXC,MAAOR,EACPS,YAAY,QACZxY,SAAU,SAACvB,GAAD,OAAOuZ,EAASvZ,EAAE2S,OAAOmH,MAAzB,EACVE,QAAS,CACP,CAAEC,OAAO,SAACC,EAAA,EAAD,IAAuBJ,MAAO,QACvC,CAAEG,OAAO,SAACE,EAAA,EAAD,IAAyBL,MAAO,UACzC,CAAEG,OAAO,SAACG,EAAA,EAAD,IAAwBN,MAAO,YAK9C,OACE,UAAC,IAAD,CACElW,QAASA,EACT4U,MAAM,cACN6B,SAAU,kCAAMvD,EAAQ5W,eAAd,aAAM,EAAiBsQ,YAAvB,EACVoI,KAAM,WAAO,IAAD,IACJhI,EAAU7G,EAAKuQ,OACrB,IAAK1J,EAAS,iBAAOkG,EAAQ5W,eAAf,aAAO,EAAiBsQ,aACtC,UAAAsG,EAAQ5W,eAAR,SAAiBuQ,WAAWG,EAASF,EAAO4I,EAC7C,EACDiB,UAAW,CAAEC,WAAY,GACzBC,gBAAc,EAVhB,WAYE,iBAAK5H,UAAU,gBAAf,UACG4G,EACAG,MAEH,SAACc,GAAA,EAAD,CACExS,KAAK,QACLyS,KAAM,EACNC,WAAS,EACTd,MAAO/P,EACPxI,SAAU,SAACvB,GAAD,OAAOmZ,EAAQnZ,EAAE2S,OAAOmH,MAAxB,MAIjB,E,kCCxJKe,GAYD,SAAC,GAYC,IAXLC,EAWI,EAXJA,UACAzZ,EAUI,EAVJA,UACA0Z,EASI,EATJA,aACAC,EAQI,EARJA,YACAC,EAOI,EAPJA,SAOI,IANJC,OAAAA,OAMI,MANK,GAML,MALJC,QAAAA,OAKI,SAJJC,EAII,EAJJA,aAII,IAHJC,QAAAA,OAGI,aAFJC,QAAAA,OAEI,OAFMnU,EAAAA,GAAAA,MAEN,MADJoU,WAAAA,OACI,SACEC,EAAYJ,IAAgBK,EAAAA,GAAAA,OAAM,EAAG,IAAK,IAChD,GAA8BC,EAAAA,GAAAA,IAAU,CAAEF,UAAAA,EAAWG,KAAMJ,IAA3D,eAAOna,EAAP,KAAYwC,EAAZ,KAAqBgY,EAArB,MACAzY,EAAAA,EAAAA,YAAU,WACR,GAAKiY,EACL,OAAKQ,GAAUhY,OACfwX,EAAaQ,EAAMC,mBADYT,EAAa,EAE7C,GAAE,CAACxX,EAASgY,EAAOR,IAEpB,OAA8B3Y,EAAAA,EAAAA,YAA9B,eAAOqZ,EAAP,KAAgBC,EAAhB,KAEMC,GAAYxU,EAAAA,EAAAA,cAChByU,EAAAA,GAAAA,OAAI,iBAAC,yFACEhB,GAAaC,EADf,iEAEgC,uDAFhC,uBAEKgB,EAFL,EAEKA,iBAFL,KAGHH,EAHG,SAGcG,EAAiBhB,EAAQD,GAHvC,+EAKL,CAACA,EAAUC,IAGPiB,EAAOvY,GAAWyX,GACxBlY,EAAAA,EAAAA,YAAU,YACHgY,GAAWgB,GAAMH,GACvB,GAAE,CAACG,EAAMhB,EAASa,IAEnB,IAAM1a,GAAcU,EAAAA,EAAAA,UAClB,yBAAM+Y,QAAN,IAAMA,OAAN,EAAMA,EAAcqB,UAAUd,GAASe,SAASC,SAAhD,GACA,CAACvB,EAAcO,IAGXiB,EAAcC,QAAQV,IAAYb,GAClCwB,EAAWN,GAAQI,EAGnB9X,EADoBpD,EAAlBS,OAAkBT,EAAVQ,MAGhB,OACE,iBAAKT,IAAKA,EAAKyR,UAAU,eAAzB,WACE,gBAAK6J,QAAO,kBAAqB,IAARjY,KACxBgY,IACC,SAACE,GAAD,CACEtb,UAAWA,EACXC,YAAaA,EACb0Z,YAAaA,EACbrZ,OAAQma,GAAWhB,EACnBK,QAASA,MAKlB,EACDN,GAAe9H,YAAc,cACtB,IAAM6J,GAAczb,EAAAA,KAAW0Z,IAEhC8B,GAMD,SAAC,GAAsE,IAApEtb,EAAmE,EAAnEA,UAAW2Z,EAAwD,EAAxDA,YAAa1Z,EAA2C,EAA3CA,YAA2C,IAA9B6Z,QAAAA,OAA8B,SAAbxZ,EAAa,EAAbA,OACtDH,GAAWqb,EAAAA,EAAAA,MACjB,GAAoCpa,EAAAA,EAAAA,UAAwB,IAA5D,eAAOqa,EAAP,KAAmBlb,EAAnB,KACMkV,GAAUhX,EAAAA,EAAAA,QAAoB,MAE9Bid,GAAeC,EAAAA,EAAAA,IACnB,SAACC,GACC,GAAKjC,EAAL,CACA,IAAMkC,EAAQD,aAAexX,EAAAA,GAAYwX,EAAMA,EAAI5b,GAC/C6b,IAAU7b,GACd2Z,EAAYkC,EAHY,CAIzB,IAGH,OAAO/B,GACL,SAACnI,EAAD,CACE3R,UAAWA,EACXC,YAAaA,EACbK,OAAQA,EACRD,UAAQ,KAGV,iCACE,SAACsR,EAAD,CACE3R,UAAWA,EACXC,YAAaA,EACbC,SAAUwb,EACVpb,OAAQA,EACRH,SAAUA,EACVJ,IAAK0V,EACLlV,cAAeA,KAEjB,SAACiV,GAAD,CAAYC,QAASA,EAASlT,QAAwB,WAAfkZ,KACvC,SAAC5D,GAAD,CAAUpC,QAASA,EAASlT,QAAwB,SAAfkZ,MAG1C,EACDH,GAAY5J,YAAc,cCxI1B,S,wQCmBaoK,EAAmB,CAAC,GAAI,GAAI,GAAI,IAChC1b,EAAsC,CACjDS,KAAM,OACNC,QAAQ,EACR4M,UAAW,GACX1M,YAAa,GACbqO,MAAO,UACPqD,WAAW,EACX3R,OAAO,EACP4K,aAAa,EACboQ,UAAWD,GAGEE,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,oGACuBC,IAAAA,QAA8B,aADrD,UACM9b,EADN,8BAGIA,EAAWC,EAHf,SAIU6b,IAAAA,QAAoB,YAAa9b,GAJ3C,gCAMSA,GANT,kEASe+b,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4B/b,GAA5B,iFACQ8b,IAAAA,QAAoB,YAAa9b,GADzC,kEAIA,IAAMgc,EAAkBrc,EAAAA,cAAoB,CAC1CK,SAAUC,EACVuW,eAAiB,WAAQ,IAGpB,SAAS6E,IACd,IAAQrb,GAAaic,EAAAA,EAAAA,YAAWD,GAAxBhc,SAER,OADA0R,EAAAA,EAAAA,eAAc1R,GACPA,CACR,CAEM,SAASkc,IAEd,OAD2BD,EAAAA,EAAAA,YAAWD,GAA9BxF,cAET,CAEM,IAAM2F,EAA0C,SAAC,GAAkB,IAAhB1H,EAAe,EAAfA,SACxD,GAAgCxT,EAAAA,EAAAA,UAAShB,GAAzC,eAAOD,EAAP,KAAiBoc,EAAjB,MACAza,EAAAA,EAAAA,YAAU,YA3CL,WAYQka,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAgCXA,GAAchL,KAAKuL,EACpB,GAAE,IASH,OACE,SAACJ,EAAgBK,SAAjB,CAA0B/D,MAAO,CAAEtY,SAAAA,EAAUwW,eARxB,SAAChI,GACtB4N,GAAY,SAAChQ,GACX,IAAMkQ,GAAO,kBAAQlQ,GAASoC,GAE9B,OAvCN,SASeuN,GAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CA6BTA,CAAaO,GACNA,CACR,GACF,GAEC,SACG7H,GAGN,C,qCCjFM,SAAS3X,EAAoBuD,EAAeC,GACjD,IAAMvD,EAAS0S,SAAS8M,cAAc,UAChCvf,EAAUD,EAAOyf,WAAW,MAClC,IAAKxf,EACH,MAAM,IAAIyf,MAAM,oCAIlB,OAFA1f,EAAOsD,MAAQA,EACftD,EAAOuD,OAASA,EACT,CAAEvD,OAAAA,EAAQC,QAAAA,EAClB,CAEM,SAAS2F,EAAc5F,GAC5BA,EAAOsD,MAAQ,EACftD,EAAOuD,OAAS,EAChB,IAAMoc,EAAM3f,EAAOyf,WAAW,MAC3B,OAAHE,QAAG,IAAHA,GAAAA,EAAK3e,UAAU,EAAG,EAAG,EAAG,EACzB,C,sUCLYwY,EAGR,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,eAAgBxW,EAAe,EAAfA,SACduS,EAAqBvS,EAArBuS,UAAWrD,EAAUlP,EAAVkP,MACnB,GAAkCjO,EAAAA,EAAAA,WAAS,GAA3C,eAAO0b,EAAP,KAAkBC,EAAlB,KAEA,OACE,iBAAKvL,UAAU,YAAY,YAAWsL,EAAW,UAASpK,EAA1D,WACE,iBAAKlB,UAAU,aAAf,WACE,SAACwL,EAAD,CACErG,eAAgBA,EAChBxW,SAAUA,EACV4c,aAAcA,KAEhB,SAACE,EAAD,CAAiBC,QAASxK,EAAWiE,eAAgBA,QAEvD,SAACwG,EAAD,CACE9N,MAAOA,GAAS,GAChB2I,SAAU,SAACoF,GAAD,OAAOzG,EAAe,CAAEtH,MAAO+N,GAA/B,MAIjB,EAEYJ,EAKR,SAAC,GAKC,IAAD,IAJJrG,EAII,EAJJA,eACAxW,EAGI,EAHJA,SAGI,IAFJ4c,aAAAA,OAEI,MAFW,WAAQ,EAEnB,MADJM,MAAAA,OACI,MADI,YACJ,EACEC,EAAYnd,EAASkd,GACrBtB,EAAS,UAAG5b,EAAS4b,iBAAZ,QAAyBD,EAAAA,GAClCzM,EAAkB,cAAVgO,GAAA,UAAwBld,EAASkP,aAAjC,QAAmD,OAE3DkO,GAAS5c,EAAAA,EAAAA,UACb,kBAAMob,EAAUyB,QAAV,OAAkBF,QAAlB,IAAkBA,EAAAA,GAAc,EAAtC,GACA,CAACA,EAAWvB,IAGd,GAA8B3a,EAAAA,EAAAA,WAASqc,EAAAA,EAAAA,IAAK,EAAC,GAAO,GAAO,GAAO,KAAlE,eAAOC,EAAP,KAAgBC,EAAhB,MACA7b,EAAAA,EAAAA,YAAU,WACJ4b,EAAQE,UAAS,GAAOb,GAAa,GACpCA,GAAa,EACnB,GAAE,CAACW,EAASX,IAEb,IAAMc,EAAgB,SAACrd,GAAD,MACnB,CACC,cAAc,QAAd,OAAuB,IAAMsd,EAAAA,GAA7B,gBAA0Ctd,EAA1C,KAFkB,EAKhBmY,EAAO,CACX,CAAEF,OAAQ,EAAGG,MAAO,OADT,eAERmD,EAAUpP,KAAI,SAACnM,EAAOud,GAAR,MAAmB,CAClCtF,MAAOsF,EACPnF,OACE,SAAC,IAAD,CACErW,QAASmb,EAAQ/f,IAAIogB,GACrBC,gBAAiB,SAACC,GAAD,OAAON,GAAW,SAACpR,GAAD,OAAUA,EAAKnO,IAAI2f,EAAOE,EAA1B,GAAlB,EACjB5H,QAASkH,IAAWQ,EAAQ,CAAC,SAAW,GACxCzH,UAAU,SACVG,sBAAoB,EACpBlH,SACE,SAAC,IAAD,CACE6B,IAAK,EACLD,IAAK,IACLK,UAAU,cACV0M,aAAc1d,EACd2d,cAAe,SAACC,GACd,GAAIrC,EAAU6B,SAASQ,GAErB,OADAT,GAAW,SAACpR,GAAD,OAAUA,EAAKnO,IAAI2f,GAAO,EAA1B,IACJpH,GAAe,UAAG0G,EAAQe,IAEnC,IAAMC,EAAQtC,EAAUuC,QACxBD,EAAMN,GAASK,EACfzH,GAAe,QAAEoF,UAAWsC,GAAQhB,EAAQe,GAC7C,IApBP,UAwBE,gBAAK5M,UAAU,iBAAiBC,MAAOoM,EAAcrd,GAArD,UACE,SAAC,IAAD,CAAYgR,UAAW,gBAAkB6L,EAAOhO,MAAOA,QA5B9C,MAmCnB,OACE,SAAC,IAAD,CACEmC,UAAU,YACViH,MAAO8E,EACP5E,QAASA,EACTzY,SAAU,SAAC2M,GAAD,aAAO8J,GAAe,UAAG0G,EAAJ,UAAYtB,GAAWlP,UAAvB,QAA6B,IAAlD,GAGf,EAEKoQ,EAGD,SAAC,GAAyC,IAAD,IAAtCC,QAAAA,OAAsC,SAArBvG,EAAqB,EAArBA,eACvB,OACE,mBAAOnF,UAAU,aAAjB,WACE,kBACEwE,KAAK,WACL/P,KAAK,YACLiX,QAASA,EACThd,SAAU,SAACvB,GAAD,OAAOgY,EAAe,CAAEjE,UAAW/T,EAAE2S,OAAO4L,SAA5C,KAEZ,gBAAK1L,UAAU,YAAf,UACE,SAAC+M,EAAA,EAAD,CAAUvI,KAAK,uBAItB,EAEYmH,EAGR,SAAC,GAAD,IAAGnF,EAAH,EAAGA,SAAU3I,EAAb,EAAaA,MAAb,OACH,gBAAKmC,UAAU,eAAf,SACGuG,EAAAA,GAAAA,KAAc,SAACqF,GAAD,OACb,8BACE,kBACEF,QAAS7N,IAAU+N,EACnBpH,KAAK,QACL/P,KAAK,QACL/F,SAAU,SAACvB,GAAD,OAAOA,EAAE2S,OAAO4L,SAAWlF,EAASoF,EAApC,KAEZ,gBACE,aAAYA,EACZ5L,UAAU,SACVC,MAAO,CAAE+M,gBAAiBpB,EAAGqB,YAAarB,OAVlCA,EADC,KAFd,C","sources":["component/IconFont.tsx","component/Draw/cursor/cursor.ts","component/Draw/touch.ts","component/Draw/Draw.tsx","pages/reader/tools/DrawTools.tsx","component/PageWrapper/PageWrapper.tsx","component/PageWrapper/index.tsx","lib/draw/DrawCtrl.tsx","lib/draw/canvas.ts","pages/reader/tools/PenPanel.tsx"],"sourcesContent":["import { createFromIconfontCN } from \"@ant-design/icons\";\r\n\r\nexport default createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_3181679_yo844n7qgns.js\",\r\n});\r\n","import { createVirtualCanvas } from \"lib/draw/canvas\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport rotateImg from \"./rotate.png\";\r\n\r\nexport const getCircleCursor = (drawCtrl: DrawCtrl, ratio: number) => {\r\n  const { lineWidth, eraserWidth, mode } = drawCtrl;\r\n  const size = ratio * (mode === \"erase\" ? eraserWidth : lineWidth);\r\n  if (size < 5) return \"crosshair\";\r\n  const half = size / 2;\r\n  return `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23FFF7\" width=\"${size}\" height=\"${size}\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"5\"/></svg>') ${half} ${half}, auto`;\r\n};\r\n\r\nconst getRotateCursorImage = (() => {\r\n  const cache = new Map<number, string>();\r\n  const { canvas, context } = createVirtualCanvas(44, 44);\r\n  const image = new Image();\r\n  image.src = rotateImg;\r\n  return (angle: number) => {\r\n    angle = Math.round(angle / 10) * 10;\r\n    const cached = cache.get(angle);\r\n    if (cached) return cached;\r\n    context.translate(22, 22);\r\n    context.rotate((angle * Math.PI) / 180);\r\n    context.drawImage(image, -22, -22);\r\n    const data = canvas.toDataURL();\r\n    context.clearRect(-22, -22, 44, 44);\r\n    context.resetTransform();\r\n    cache.set(angle, data);\r\n    return data;\r\n  };\r\n})();\r\n\r\nexport const getRotateCurcor = (angle: number) => {\r\n  return `url(${getRotateCursorImage(angle)}) 22 22, auto`;\r\n};\r\n","import { PointerEvent, TouchEvent, useEffect, useRef } from \"react\";\r\n\r\ntype iOSTouch = Touch & {\r\n  force?: number;\r\n  touchType?: \"stylus\" | \"direct\";\r\n};\r\n\r\nexport function isApplePencil(e: TouchEvent) {\r\n  const touch = e.touches[0] as iOSTouch;\r\n  return touch?.touchType === \"stylus\";\r\n}\r\n\r\nexport function usePreventTouch(\r\n  allowFinger: boolean\r\n): React.HTMLAttributes<HTMLDivElement> {\r\n  const isTouch = useRef(false);\r\n  const checkPoniter = (e: PointerEvent) =>\r\n    e.isPrimary && (isTouch.current = e.pointerType === \"touch\");\r\n\r\n  const isEventValid = (e: TouchEvent) =>\r\n    !isTouch.current ||\r\n    isApplePencil(e) ||\r\n    (allowFinger && e.touches.length === 1);\r\n\r\n  const preventTouch = (e: TouchEvent) =>\r\n    isEventValid(e) || e.stopPropagation();\r\n\r\n  return {\r\n    onPointerDownCapture: checkPoniter,\r\n    onPointerMoveCapture: checkPoniter,\r\n    onTouchStartCapture: preventTouch,\r\n    onTouchMoveCapture: preventTouch,\r\n  };\r\n}\r\n\r\nexport function usePreventGesture() {\r\n  useEffect(() => {\r\n    const handler = (e: Event) => e.preventDefault();\r\n    document.addEventListener(\"gesturestart\", handler);\r\n    document.addEventListener(\"gesturechange\", handler);\r\n    document.addEventListener(\"gestureend\", handler);\r\n    return () => {\r\n      document.removeEventListener(\"gesturestart\", handler);\r\n      document.removeEventListener(\"gesturechange\", handler);\r\n      document.removeEventListener(\"gestureend\", handler);\r\n    };\r\n  }, []);\r\n}\r\n","import React, {\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  Dispatch,\r\n  useEffect,\r\n  useCallback,\r\n  useDebugValue,\r\n  SetStateAction,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport paper, {\r\n  Path,\r\n  Size,\r\n  Point,\r\n  Color,\r\n  Raster,\r\n  Layer,\r\n} from \"paper/dist/paper-core\";\r\nimport { usePinch } from \"@use-gesture/react\";\r\nimport useSize from \"@react-hook/size\";\r\nimport { DrawState, Mutation, Splitter, Stroke } from \"lib/draw/DrawState\";\r\nimport { defaultDrawCtrl, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { releaseCanvas } from \"lib/draw/canvas\";\r\nimport { getCircleCursor, getRotateCurcor } from \"./cursor\";\r\nimport { usePreventTouch, usePreventGesture } from \"./touch\";\r\n\r\nexport type ActiveToolKey = \"\" | \"select\" | \"text\";\r\nexport interface DrawRefType {\r\n  deleteSelected: () => void;\r\n  duplicateSelected: () => void;\r\n  rasterizeSelected: () => string;\r\n  mutateStyle: (updated: Partial<DrawCtrl>) => void;\r\n  submitText: (text: string, color?: string, justification?: string) => void;\r\n  cancelText: () => void;\r\n  pointText?: paper.PointText;\r\n}\r\ninterface DrawPropType {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  onChange?: Dispatch<SetStateAction<DrawState>>;\r\n  setActiveTool?: Dispatch<SetStateAction<ActiveToolKey>>;\r\n  drawCtrl?: DrawCtrl;\r\n  readonly?: boolean;\r\n  imgSrc?: string;\r\n}\r\n\r\nconst HIT_TOLERANCE = 20;\r\nconst P_ZERO = new Point(0, 0);\r\n\r\nconst DrawRaw = React.forwardRef<DrawRefType, DrawPropType>(\r\n  (\r\n    {\r\n      drawState,\r\n      otherStates,\r\n      onChange = () => {},\r\n      drawCtrl = defaultDrawCtrl,\r\n      readonly = false,\r\n      imgSrc,\r\n      setActiveTool = () => {},\r\n    },\r\n    ref\r\n  ) => {\r\n    const { width, height } = drawState;\r\n    const projSize = useMemo(() => new Size(width, height), [width, height]);\r\n    const { mode, finger, lasso, eraserWidth } = drawCtrl;\r\n\r\n    const canvasEl = useRef<HTMLCanvasElement>(null);\r\n    const scope = useRef(new paper.PaperScope());\r\n    const [group, setGroup] = useState<paper.Item[]>([]);\r\n    const [path, setPath] = usePaperItem<paper.Path>();\r\n    const [rect, setRect] = usePaperItem<paper.Path.Rectangle>();\r\n    const [rotateHandle, setRotateHandle] = usePaperItem<paper.Path>();\r\n\r\n    useEffect(() => {\r\n      const cvs = canvasEl.current;\r\n      const scp = scope.current;\r\n      if (!cvs) return;\r\n\r\n      scp.setup(cvs);\r\n      scp.settings.handleSize = 10;\r\n      scp.settings.hitTolerance = HIT_TOLERANCE;\r\n      [0, 1, 2].forEach(() => (new Layer().visible = false));\r\n      scp.project.layers[2]?.activate();\r\n      new scp.Tool();\r\n\r\n      return () => {\r\n        scp.view?.remove();\r\n        releaseCanvas(cvs);\r\n      };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      scope.current.activate();\r\n      const { layers } = scope.current.project;\r\n      const rects = paintRects(layers, projSize);\r\n      return () => rects.forEach((r) => r.remove());\r\n    }, [projSize]);\r\n\r\n    const [canvasWidth] = useSize(canvasEl);\r\n    const ratio = canvasWidth / width;\r\n    useEffect(() => {\r\n      if (!ratio) return;\r\n      const scp = scope.current;\r\n      scp.view.viewSize = projSize.multiply(ratio);\r\n      scp.view.scale(ratio, P_ZERO);\r\n      scp.project.layers.forEach((l) => (l.visible = true));\r\n      scp.view.update();\r\n\r\n      return () => scp.view?.scale(1 / ratio, P_ZERO);\r\n    }, [ratio, projSize]);\r\n\r\n    const [imgRaster, setImgRaster] = usePaperItem();\r\n    useEffect(() => {\r\n      if (!imgSrc) return;\r\n      scope.current.activate();\r\n      const raster = new Raster(imgSrc);\r\n      raster.project.layers[0]?.addChild(raster);\r\n      raster.sendToBack();\r\n      raster.onLoad = () => {\r\n        raster.view.update();\r\n        raster.fitBounds(new paper.Rectangle(0, 0, width, height));\r\n        raster.bringToFront();\r\n      };\r\n      setImgRaster(raster);\r\n    }, [imgSrc, width, height, setImgRaster]);\r\n\r\n    const mergedStrokes = useMemo(\r\n      () =>\r\n        otherStates\r\n          ? DrawState.mergeStates(drawState, ...otherStates)\r\n          : drawState.getStrokeList(),\r\n      [drawState, otherStates]\r\n    );\r\n\r\n    const renderSlow = useRef(false);\r\n    useEffect(() => {\r\n      const tempGroup: paper.Item[] = [];\r\n      const layer = scope.current.project.layers[1];\r\n      if (!layer) return;\r\n\r\n      const timeBeforeRender = Date.now();\r\n      scope.current.activate();\r\n      mergedStrokes.forEach((stroke) => {\r\n        const self = drawState.hasStroke(stroke.uid);\r\n        const item = paintStroke(stroke, layer, !self);\r\n        if (self) tempGroup.push(item);\r\n      });\r\n      setGroup(tempGroup);\r\n\r\n      scope.current.view.update();\r\n      requestAnimationFrame(() => {\r\n        const duration = Date.now() - timeBeforeRender;\r\n        renderSlow.current = duration > 32;\r\n      });\r\n\r\n      return () => void layer.removeChildren(1);\r\n    }, [mergedStrokes, drawState]);\r\n\r\n    const hitRef = useRef<paper.HitResult>();\r\n    const [selected, setSelected] = useState(false);\r\n    const paperMode = mode === \"select\" && selected ? \"selected\" : mode;\r\n    const [chosenIDs, setChosenIDs] = useState<string[]>([]);\r\n    const chosenItems = useMemo(() => {\r\n      const IDSet = new Set(chosenIDs);\r\n      return group.filter((item) => IDSet.has(item.name));\r\n    }, [group, chosenIDs]);\r\n\r\n    const resetSelect = useCallback(() => {\r\n      setSelected(false);\r\n      setPath(undefined);\r\n      setRect(undefined);\r\n      setRotateHandle(undefined);\r\n    }, [setPath, setRect, setRotateHandle]);\r\n\r\n    useEffect(() => {\r\n      if (mode === \"select\") return resetSelect;\r\n    }, [mode, resetSelect]);\r\n    useEffect(() => resetSelect, [lasso, resetSelect]);\r\n\r\n    useEffect(() => {\r\n      if (!selected) return;\r\n      return () => {\r\n        setChosenIDs([]);\r\n        setActiveTool(\"\");\r\n      };\r\n    }, [selected, setActiveTool]);\r\n\r\n    const layerRaster = useRef<paper.Raster>();\r\n    const pinching = useRef(false);\r\n    const rasterizeLayer = (clip?: paper.Path, force = false) => {\r\n      if (!renderSlow.current && !force) return;\r\n      const [l0, l1] = scope.current.project.layers;\r\n      const { view } = scope.current;\r\n      if (!l0 || !l1) return;\r\n      l1.visible = true;\r\n      if (!clip) {\r\n        clip = new Path.Rectangle(Size.min(view.size, projSize));\r\n        clip.position = view.center;\r\n      }\r\n      clip.clipMask = true;\r\n      const prevClip = l1.firstChild;\r\n      prevClip.replaceWith(clip);\r\n      imgRaster?.insertAbove(clip);\r\n\r\n      const dpi = 72 * devicePixelRatio;\r\n      const resolution = (canvasWidth / clip.bounds.width) * dpi;\r\n      let raster = layerRaster.current;\r\n      raster = layerRaster.current = l1.rasterize({ raster, resolution });\r\n      l0.addChild(raster).visible = true;\r\n\r\n      l1.visible = false;\r\n      clip.replaceWith(prevClip);\r\n      imgRaster?.insertBelow(raster);\r\n    };\r\n    const unrasterizeLayer = () => {\r\n      const [, l1] = scope.current.project.layers;\r\n      const lr = layerRaster.current;\r\n      if (pinching.current || !l1 || !lr) return;\r\n      l1.visible = true;\r\n      lr.visible = false;\r\n    };\r\n\r\n    const downPath = (e: paper.MouseEvent) => {\r\n      rasterizeLayer();\r\n      setPath(startStroke(drawCtrl, e.point, renderSlow.current));\r\n    };\r\n    const downRect = (e: paper.MouseEvent) => {\r\n      rasterizeLayer();\r\n      setRect(startRect(e.point));\r\n    };\r\n\r\n    const handleDown = {\r\n      draw: downPath,\r\n      erase: downPath,\r\n      select: lasso ? downPath : downRect,\r\n      selected(e: paper.MouseEvent) {\r\n        if (lasso) {\r\n          // if the point is outside of selection, reset selection\r\n          if (path?.contains(e.point)) return;\r\n          downPath(e);\r\n          setSelected(false);\r\n        } else {\r\n          // check if the point hit the segment point.\r\n          let hitRes =\r\n            rect?.hitTest(e.point, { segments: true }) ??\r\n            rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n          hitRef.current = hitRes;\r\n          if (hitRes) return;\r\n\r\n          // if the point is outside of selection, reset selection\r\n          if (rect?.contains(e.point)) return;\r\n          downRect(e);\r\n          setRotateHandle(undefined);\r\n          setSelected(false);\r\n        }\r\n      },\r\n      text(e: paper.MouseEvent) {\r\n        const layer = scope.current.project.layers[1];\r\n        if (!layer) return;\r\n        const t = getClickedText(layer, e.point) ?? startText(e.point);\r\n        setPointText(t);\r\n      },\r\n    }[paperMode];\r\n\r\n    const dragPath = (e: paper.MouseEvent) => {\r\n      path?.add(e.point);\r\n      path?.smooth();\r\n    };\r\n    const resizeRect = (e: paper.MouseEvent) => {\r\n      if (!rect) return;\r\n      const { x, y } = e.point;\r\n      const [, s1, s2, s3] = rect.segments;\r\n      if (!s1 || !s2 || !s3) return;\r\n      s1.point.x = x;\r\n      s2.point = e.point;\r\n      s3.point.y = y;\r\n      rect.selected = true;\r\n    };\r\n\r\n    const handleDrag = {\r\n      draw: dragPath,\r\n      erase: dragPath,\r\n      select: lasso ? dragPath : resizeRect,\r\n      selected(e: paper.MouseEvent) {\r\n        const hitRes = hitRef.current;\r\n        if (hitRes?.segment && rect && rotateHandle) {\r\n          const segment = hitRes.segment;\r\n          const rotating = segment.selected;\r\n          if (rotating) {\r\n            // rotate select items\r\n            const { center } = rect.bounds;\r\n            const axis = segment.point.subtract(center);\r\n            const line = e.point.subtract(center);\r\n            setCursor(getRotateCurcor(line.angle));\r\n            const angle = line.angle - axis.angle;\r\n            rect.rotate(angle, center);\r\n            rotateHandle.rotate(angle, center);\r\n            chosenItems.forEach((item) => item?.rotate(angle, center));\r\n          } else {\r\n            // resize selected items\r\n            const moveP = segment.point;\r\n            const baseP = segment.next.next.point;\r\n            const diagonal = moveP.subtract(baseP);\r\n            const projection = e.point.subtract(baseP).project(diagonal);\r\n            const scale = projection.x / diagonal.x;\r\n            if (scale < 0) return;\r\n\r\n            rect.scale(scale, baseP);\r\n            chosenItems.forEach((item) => {\r\n              item.scale(scale, baseP);\r\n              item.strokeWidth *= scale;\r\n            });\r\n            rotateHandle.scale(scale, baseP);\r\n            const rBaseP = rotateHandle.segments[0]?.point;\r\n            if (!rBaseP) return;\r\n            rotateHandle.scale(100 / rotateHandle.length, rBaseP);\r\n          }\r\n        } else {\r\n          // move selected items\r\n          chosenItems.forEach((item) => item.translate(e.delta));\r\n          path?.translate(e.delta);\r\n          rect?.translate(e.delta);\r\n          rotateHandle?.translate(e.delta);\r\n        }\r\n      },\r\n      text(e: paper.MouseEvent) {\r\n        if (!pointText || pointText.name) return;\r\n        const { topCenter, bottomRight } = pointText.bounds;\r\n        const diagonal = bottomRight.subtract(topCenter);\r\n        const projection = e.point.subtract(topCenter).project(diagonal);\r\n        const scale = projection.x / diagonal.x;\r\n        if (scale < 0) return;\r\n        pointText.scale(scale, topCenter);\r\n      },\r\n    }[paperMode];\r\n\r\n    useEffect(() => {\r\n      scope.current.tool.maxDistance = eraserWidth;\r\n    }, [eraserWidth]);\r\n    const erased = useRef(new Set<string>());\r\n    const replaced = useRef(new Map<string, paper.Item>());\r\n\r\n    const itemGrid = useMemo(() => {\r\n      if (paperMode !== \"erase\") return [];\r\n      const wnum = Math.ceil(width / 100);\r\n      const hnum = Math.ceil(height / 100);\r\n      const grid = Array.from({ length: wnum }, () =>\r\n        Array.from({ length: hnum }, () => new Set<paper.Item>())\r\n      );\r\n      group.forEach((item) => setGridItem(grid, item));\r\n      return grid;\r\n    }, [group, width, height, paperMode]);\r\n\r\n    const handleToolDrag = (e: paper.ToolEvent) => {\r\n      const layer = scope.current.project.layers[1];\r\n      if (paperMode !== \"erase\" || !layer) return;\r\n\r\n      const hitOption = {\r\n        class: paper.Path,\r\n        stroke: true,\r\n        tolerance: eraserWidth / 2,\r\n      };\r\n\r\n      getGridItems(itemGrid, e.point, eraserWidth).forEach((item) => {\r\n        if (erased.current.has(item.name)) return;\r\n        item.hitTestAll(e.point, hitOption)?.forEach(({ item }) => {\r\n          if (!(item instanceof paper.Path)) return;\r\n          let topItem: paper.PathItem = item;\r\n          while (topItem.parent !== layer) {\r\n            if (!(topItem.parent instanceof paper.PathItem)) break;\r\n            topItem = topItem.parent;\r\n          }\r\n          const { name } = topItem;\r\n\r\n          if (drawCtrl.pixelEraser) {\r\n            const radius = (eraserWidth + item.strokeWidth) / 2;\r\n            const circle = new Path.Circle({\r\n              center: e.point,\r\n              radius,\r\n              insert: false,\r\n            });\r\n\r\n            const sub = item.subtract(circle, { trace: false });\r\n            item.replaceWith(sub);\r\n            if (topItem === item) {\r\n              setGridItem(itemGrid, sub, item);\r\n              topItem = sub;\r\n            }\r\n            replaced.current.set(name, topItem);\r\n          } else {\r\n            topItem.opacity = 0.5;\r\n            topItem.guide = true;\r\n            erased.current.add(name);\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    const handleUp = {\r\n      draw() {\r\n        unrasterizeLayer();\r\n        if (!path || path.segments.length <= 1) return;\r\n        path.simplify();\r\n        const pathData = path.exportJSON();\r\n        setPath(undefined);\r\n        onChange((prev) => DrawState.addStroke(prev, pathData));\r\n      },\r\n      erase() {\r\n        unrasterizeLayer();\r\n        setPath(undefined);\r\n        if (drawCtrl.pixelEraser) {\r\n          const items = Array.from(replaced.current);\r\n          replaced.current.clear();\r\n          const splitters: Splitter[] = items.map(([uid, item]) => {\r\n            const paths = flattenCP(item);\r\n            return [uid, paths.map((i) => i.exportJSON())];\r\n          });\r\n          if (!splitters.length) return;\r\n          onChange((prev) => DrawState.splitStrokes(prev, splitters));\r\n        } else {\r\n          const erasedList = Array.from(erased.current);\r\n          erased.current.clear();\r\n          if (!erasedList.length) return;\r\n          onChange((prev) => DrawState.eraseStrokes(prev, erasedList));\r\n        }\r\n      },\r\n      select() {\r\n        unrasterizeLayer();\r\n        let selection: string[];\r\n        if (lasso) {\r\n          if (!path || Math.abs(path.area) < 1_000) return setPath(undefined);\r\n          path.closePath();\r\n          path.simplify();\r\n          moveDash(path);\r\n          selection = checkLasso(group, path);\r\n        } else {\r\n          if (!rect || Math.abs(rect.area) < 1_000) return setRect(undefined);\r\n          selection = checkLasso(group, rect);\r\n          const link = new Path();\r\n          const { topCenter } = rect.bounds;\r\n          link.add(topCenter, topCenter.subtract(new Point(0, 100)));\r\n          link.lastSegment.selected = true;\r\n          setRotateHandle(link);\r\n        }\r\n        setSelected(true);\r\n        setChosenIDs(selection);\r\n        setActiveTool(\"select\");\r\n      },\r\n      selected(e: paper.MouseEvent) {\r\n        updateMutation();\r\n        handleSelectedCursor(e);\r\n      },\r\n      text() {\r\n        setActiveTool(\"text\");\r\n      },\r\n    }[paperMode];\r\n\r\n    const [cursor, setCursor] = useState(\"auto\");\r\n    useEffect(() => {\r\n      if (paperMode === \"text\" || paperMode === \"select\") {\r\n        setCursor(\"crosshair\");\r\n      } else if (paperMode === \"selected\") {\r\n        setCursor(lasso ? \"crosshair\" : \"nwse-resize\");\r\n      } else if (paperMode === \"draw\" || paperMode === \"erase\") {\r\n        setCursor(getCircleCursor(drawCtrl, ratio));\r\n      }\r\n    }, [paperMode, lasso, drawCtrl, ratio]);\r\n\r\n    const handleSelectedCursor = (e: paper.MouseEvent) => {\r\n      const hitRes =\r\n        rect?.hitTest(e.point, { segments: true }) ??\r\n        rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n      if (hitRes?.segment) {\r\n        if (hitRes.segment.selected) {\r\n          const center = rect?.bounds.center;\r\n          if (!center) return;\r\n          const line = hitRes.segment.point.subtract(center);\r\n          return setCursor(getRotateCurcor(line.angle));\r\n        }\r\n        const moveP = hitRes.segment.point;\r\n        const baseP = hitRes.segment.next.next.point;\r\n        const diagonal = moveP.subtract(baseP);\r\n        const { x, y } = diagonal;\r\n        return setCursor(x * y < 0 ? \"nesw-resize\" : \"nwse-resize\");\r\n      }\r\n      if ((rect ?? path)?.contains(e.point)) return setCursor(\"move\");\r\n      setCursor(\"crosshair\");\r\n    };\r\n\r\n    const handleMove = {\r\n      selected: handleSelectedCursor,\r\n      text(e: paper.MouseEvent) {\r\n        const layer = scope.current.project.layers[1];\r\n        if (!layer) return;\r\n        if (getClickedText(layer, e.point)) setCursor(\"text\");\r\n        else setCursor(\"crosshair\");\r\n      },\r\n      ...{ select: null, draw: null, erase: null },\r\n    }[paperMode];\r\n\r\n    const handleKeyUp = (e: paper.KeyEvent) => {\r\n      if (paperMode !== \"selected\") return;\r\n      if (/^(delete|backspace)$/.test(e.key)) deleteSelected();\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (readonly) return;\r\n\r\n      type Handler<E> = ((e: E) => boolean | void) | null;\r\n      const activate = <E,>(handler: Handler<E>): Handler<E> => {\r\n        return (e) => {\r\n          scope.current.activate();\r\n          if (handler) return handler(e);\r\n        };\r\n      };\r\n      const { view, tool } = scope.current;\r\n      view.onMouseDown = activate(handleDown);\r\n      view.onMouseDrag = activate(handleDrag);\r\n      view.onMouseUp = activate(handleUp);\r\n      view.onMouseMove = activate(handleMove);\r\n      tool.onMouseDrag = activate(handleToolDrag);\r\n      tool.onKeyUp = activate(handleKeyUp);\r\n    });\r\n\r\n    const updateMutation = () => {\r\n      if (!chosenItems?.length) return;\r\n      const mutations: Mutation[] = chosenItems.map((p) => [\r\n        p.name,\r\n        p.exportJSON(),\r\n      ]);\r\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\r\n    };\r\n\r\n    const deleteSelected = () => {\r\n      resetSelect();\r\n      if (!chosenIDs.length) return;\r\n      onChange((prev) => DrawState.eraseStrokes(prev, chosenIDs));\r\n    };\r\n\r\n    const mutateStyle = (updated: Partial<DrawCtrl>) => {\r\n      scope.current.activate();\r\n      updateGroupStyle(chosenItems, updated);\r\n      updateMutation();\r\n    };\r\n\r\n    const duplicateSelected = () => {\r\n      scope.current.activate();\r\n      const size = (rect || path)?.bounds.size;\r\n      if (!size || !chosenItems.length) return;\r\n      const { width, height } = size;\r\n      const transP = new Point(width, height).divide(10);\r\n      const copies = chosenItems.map((item) => item.clone());\r\n      copies.forEach((item) => item.translate(transP));\r\n      rect?.translate(transP);\r\n      path?.translate(transP);\r\n      rotateHandle?.translate(transP);\r\n\r\n      const mutations: Mutation[] = copies.map((item) => [\r\n        DrawState.getUid(),\r\n        item.exportJSON(),\r\n      ]);\r\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\r\n      setChosenIDs(mutations.map(([uid]) => uid));\r\n    };\r\n\r\n    const rasterizeSelected = () => {\r\n      scope.current.activate();\r\n      rasterizeLayer((rect ?? path)?.clone(), true);\r\n      unrasterizeLayer();\r\n      return layerRaster.current?.toDataURL() ?? \"\";\r\n    };\r\n\r\n    const [pointText, setPointText] = usePaperItem<paper.PointText>();\r\n    const cancelText = useCallback(() => {\r\n      setPointText(undefined);\r\n      setActiveTool(\"\");\r\n    }, [setPointText, setActiveTool]);\r\n\r\n    useEffect(() => {\r\n      if (mode === \"text\") return cancelText;\r\n    }, [mode, cancelText]);\r\n\r\n    const submitText = (\r\n      text: string,\r\n      color = \"#000\",\r\n      justification = \"center\"\r\n    ) => {\r\n      if (!pointText) return;\r\n      pointText.content = text;\r\n      pointText.fillColor = new Color(color);\r\n      pointText.justification = justification;\r\n      const pathData = pointText.exportJSON();\r\n      const { name } = pointText;\r\n      cancelText();\r\n      if (!name) return onChange((prev) => DrawState.addStroke(prev, pathData));\r\n      onChange((prev) => DrawState.mutateStrokes(prev, [[name, pathData]]));\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      deleteSelected,\r\n      duplicateSelected,\r\n      rasterizeSelected,\r\n      mutateStyle,\r\n      cancelText,\r\n      submitText,\r\n      pointText,\r\n    }));\r\n\r\n    usePreventGesture();\r\n    usePinch(\r\n      ({ memo, offset: [scale], first, last, origin }) => {\r\n        scope.current.activate();\r\n        const { view } = scope.current;\r\n        const originRawP = new paper.Point(origin);\r\n\r\n        let lastScale: number;\r\n        let lastOrigin, elPos: paper.Point;\r\n        if (first || !memo) {\r\n          const { x, y } = canvasEl.current!.getBoundingClientRect();\r\n          lastScale = 1;\r\n          elPos = new Point(x, y);\r\n          lastOrigin = originRawP.subtract(elPos);\r\n          rasterizeLayer(new Path.Rectangle(P_ZERO, projSize));\r\n          pinching.current = true;\r\n        } else {\r\n          [lastScale, lastOrigin, elPos] = memo;\r\n        }\r\n\r\n        const originViewP = originRawP.subtract(elPos);\r\n        const originPorjP = view.viewToProject(originViewP);\r\n\r\n        const deltaP = originViewP.subtract(lastOrigin);\r\n        const transP = deltaP.divide(view.zoom);\r\n        view.translate(transP);\r\n\r\n        let dScale = first ? 1 : scale / lastScale;\r\n        scope.current.settings.hitTolerance /= dScale;\r\n\r\n        if (last) {\r\n          scaleView(view, originPorjP, dScale)\r\n            .then(() => putCenterBack(view, projSize))\r\n            .then(() => (pinching.current = false))\r\n            .then(unrasterizeLayer);\r\n        } else {\r\n          view.scale(dScale, originPorjP);\r\n          return [scale, originViewP, elPos];\r\n        }\r\n      },\r\n      {\r\n        scaleBounds: { max: 5, min: 1 },\r\n        rubberband: 0.5,\r\n        target: canvasEl,\r\n      }\r\n    );\r\n\r\n    const touchHandler = usePreventTouch(finger);\r\n    return (\r\n      <div\r\n        className=\"draw-wrapper\"\r\n        style={{ cursor }}\r\n        data-readonly={readonly}\r\n        {...touchHandler}\r\n      >\r\n        <canvas ref={canvasEl} className=\"draw-canvas\" />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nDrawRaw.displayName = \"Draw\";\r\nexport const Draw = React.memo(DrawRaw);\r\n\r\nfunction usePaperItem<T extends paper.Item>() {\r\n  const tuple = useState<T>();\r\n  const [item] = tuple;\r\n  useDebugValue(item);\r\n  useEffect(() => {\r\n    if (!item?.name) return () => void item?.remove();\r\n  }, [item]);\r\n  return tuple;\r\n}\r\n\r\nconst paintStroke = (() => {\r\n  const cacheMap = new WeakMap<\r\n    paper.Layer,\r\n    Map<string, { stroke: Stroke; item: paper.Item }>\r\n  >();\r\n\r\n  return (stroke: Stroke, layer: paper.Layer, readonly = false) => {\r\n    const { pathData, uid } = stroke;\r\n    const cache = cacheMap.get(layer) ?? new Map();\r\n    cacheMap.set(layer, cache);\r\n    const cached = cache.get(uid);\r\n    let item: paper.Item;\r\n    if (cached?.stroke === stroke) {\r\n      layer.addChild(cached.item);\r\n      item = cached.item;\r\n    } else {\r\n      try {\r\n        item = layer.importJSON(pathData);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n      item ??= new paper.Item();\r\n      item.name = uid;\r\n      cache.set(uid, { item, stroke });\r\n    }\r\n    item.opacity = 1;\r\n    item.guide = readonly;\r\n    return item;\r\n  };\r\n})();\r\n\r\nconst paintRects = (layers: paper.Layer[], projSize: paper.Size) => {\r\n  const [l0, l1, l2] = layers;\r\n  if (!l0 || !l1 || !l2) return [];\r\n  const bgRect = new Path.Rectangle(P_ZERO, projSize);\r\n  const clip1 = bgRect.clone();\r\n  const clip2 = bgRect.clone();\r\n  bgRect.fillColor = new Color(\"#fff\");\r\n  l0.addChild(bgRect);\r\n  l1.addChild(clip1);\r\n  l2.addChild(clip2);\r\n  l1.clipped = true;\r\n  l2.clipped = true;\r\n  return [bgRect, clip1, clip2];\r\n};\r\n\r\nconst startRect = (point: paper.Point) => {\r\n  const rect = new Path.Rectangle(point, new Size(0, 0));\r\n  rect.onFrame = () => {}; // the handle size bug\r\n  return rect;\r\n};\r\n\r\nconst startStroke = (drawCtrl: DrawCtrl, point: paper.Point, slow = false) => {\r\n  let { mode, lineWidth, eraserWidth, color, highlight } = drawCtrl;\r\n  const path = new Path();\r\n  path.add(point);\r\n  if (mode === \"erase\") {\r\n    color = \"#ccc\";\r\n    lineWidth = eraserWidth;\r\n  }\r\n  if (mode === \"select\") {\r\n    color = \"#009dec\";\r\n    lineWidth = 5;\r\n  }\r\n  const strokeColor = new Color(color);\r\n  if (highlight || (mode === \"erase\" && !slow)) {\r\n    strokeColor.alpha = 0.5;\r\n    path.blendMode = \"multiply\";\r\n  }\r\n  path.strokeColor = strokeColor;\r\n  path.strokeWidth = lineWidth;\r\n  path.strokeJoin = \"round\";\r\n  path.strokeCap = \"round\";\r\n  path.guide = true;\r\n  return path;\r\n};\r\n\r\nconst moveDash = (item: paper.Item) => {\r\n  item.dashOffset = 0;\r\n  item.dashArray = [30, 20];\r\n  item.onFrame = () => (item.dashOffset += 3);\r\n};\r\n\r\nconst scaleView = (\r\n  view: paper.View,\r\n  originPorjP: paper.Point,\r\n  dScale: number\r\n) =>\r\n  new Promise<void>((res) => {\r\n    if (Math.abs(dScale - 1) < 0.05) {\r\n      view.scale(dScale, originPorjP);\r\n      return res();\r\n    }\r\n    let aniCount = 10;\r\n    dScale = Math.pow(dScale, 1 / aniCount);\r\n    const scale = () => {\r\n      view.scale(dScale, originPorjP);\r\n      if (--aniCount > 0) requestAnimationFrame(scale);\r\n      else requestAnimationFrame(() => res());\r\n    };\r\n    scale();\r\n  });\r\n\r\nconst getCenterTranslate = (\r\n  view: paper.View,\r\n  projSize: paper.Size\r\n): [number, number] => {\r\n  const { x, y } = view.center;\r\n  const { width: viewW, height: viewH } = view.size;\r\n  const { width: projW, height: projH } = projSize;\r\n\r\n  const [minX, minY] = [Math.min(viewW, projW) / 2, Math.min(viewH, projH) / 2];\r\n  const [maxX, maxY] = [projW - minX, projH - minY];\r\n\r\n  const deltaX = x < minX ? minX - x : x > maxX ? maxX - x : 0;\r\n  const deltaY = y < minY ? minY - y : y > maxY ? maxY - y : 0;\r\n\r\n  return [deltaX, deltaY];\r\n};\r\n\r\nconst putCenterBack = (view: paper.View, projSize: paper.Size) =>\r\n  new Promise<void>((res) => {\r\n    const [deltaX, deltaY] = getCenterTranslate(view, projSize);\r\n    if (!deltaX && !deltaY) return res();\r\n    let aniCount = 10;\r\n    const dP = new Point(deltaX, deltaY).divide(-aniCount);\r\n    const move = () => {\r\n      view.translate(dP);\r\n      if (--aniCount > 0) requestAnimationFrame(move);\r\n      else requestAnimationFrame(() => res());\r\n    };\r\n    move();\r\n  });\r\n\r\nconst checkLasso = (items: paper.Item[], selection: paper.Path) => {\r\n  const isInside = (p: paper.Path) => {\r\n    const res = p.subtract(selection, { insert: false, trace: false });\r\n    res.remove();\r\n    return !res.compare(p);\r\n  };\r\n  return items\r\n    .filter((item) => {\r\n      if (!item.name) return false;\r\n      if (!item.bounds.intersects(selection.bounds)) return false;\r\n      if (item instanceof paper.Path) {\r\n        return (\r\n          (selection.segments.length === 4 &&\r\n            item.isInside(selection.bounds)) ||\r\n          isInside(item)\r\n        );\r\n      } else {\r\n        const checkedP = new Path.Rectangle(item.bounds);\r\n        checkedP.remove();\r\n        return isInside(checkedP) || selection.isInside(item.bounds);\r\n      }\r\n    })\r\n    .map(({ name }) => name);\r\n};\r\n\r\nconst updateGroupStyle = (items: paper.Item[], updated: Partial<DrawCtrl>) => {\r\n  const { lineWidth, color, highlight } = updated;\r\n  items.forEach((item) => {\r\n    if (item instanceof paper.PointText && color) {\r\n      const newColor = new Color(color);\r\n      item.fillColor = newColor;\r\n    }\r\n\r\n    if (!(item instanceof paper.Path)) return;\r\n\r\n    if (color) {\r\n      const newColor = new Color(color);\r\n      if (item.blendMode === \"multiply\") newColor.alpha = 0.5;\r\n      item.strokeColor = newColor;\r\n    }\r\n\r\n    if (lineWidth) item.strokeWidth = lineWidth;\r\n\r\n    if (!item.strokeColor || highlight === undefined) return;\r\n    item.strokeColor.alpha = highlight ? 0.5 : 1;\r\n    item.blendMode = highlight ? \"multiply\" : \"normal\";\r\n  });\r\n};\r\n\r\nconst getClickedText = (layer: paper.Layer, point: paper.Point) => {\r\n  const hitRes = layer.hitTest(point, {\r\n    class: paper.PointText,\r\n    fill: true,\r\n  });\r\n  if (hitRes?.item instanceof paper.PointText) return hitRes?.item;\r\n};\r\n\r\nconst startText = (point: paper.Point) => {\r\n  return new paper.PointText({\r\n    point: point.add(new Point(0, 50)),\r\n    content: \"Insert text...\",\r\n    fontSize: 50,\r\n    justification: \"center\",\r\n    fillColor: \"#1890ff55\",\r\n  });\r\n};\r\n\r\nconst flattenCP = (cp: paper.Item): paper.Path[] => {\r\n  if (cp instanceof paper.Path) {\r\n    return cp.isEmpty() ? [] : [cp];\r\n  }\r\n  if (cp instanceof paper.CompoundPath) {\r\n    return cp.children.map(flattenCP).flat();\r\n  }\r\n  return [];\r\n};\r\n\r\nconst getGridRange = (topLeft: paper.Point, bottomRight: paper.Point) => {\r\n  return [\r\n    Math.floor(topLeft.x / 100),\r\n    Math.ceil(bottomRight.x / 100),\r\n    Math.floor(topLeft.y / 100),\r\n    Math.ceil(bottomRight.y / 100),\r\n  ] as [number, number, number, number];\r\n};\r\n\r\nconst setGridItem = (\r\n  grid: Set<paper.Item>[][],\r\n  item: paper.Item,\r\n  replaced?: paper.Item\r\n) => {\r\n  const bounds = (replaced ?? item).strokeBounds;\r\n  const { topLeft, bottomRight } = bounds;\r\n  const [xmin, xmax, ymin, ymax] = getGridRange(topLeft, bottomRight);\r\n  for (let x = xmin; x <= xmax; x += 1) {\r\n    for (let y = ymin; y <= ymax; y += 1) {\r\n      replaced && grid[x]?.[y]?.delete(replaced);\r\n      grid[x]?.[y]?.add(item);\r\n    }\r\n  }\r\n};\r\n\r\nconst getGridItems = (\r\n  grid: Set<paper.Item>[][],\r\n  point: paper.Point,\r\n  width: number\r\n) => {\r\n  const itemSet = new Set<paper.Item>();\r\n  const [xmin, xmax, ymin, ymax] = getGridRange(\r\n    point.subtract(width / 2),\r\n    point.add(width / 2)\r\n  );\r\n  for (let x = xmin; x <= xmax; x += 1) {\r\n    for (let y = ymin; y <= ymax; y += 1) {\r\n      grid[x]?.[y]?.forEach((item) => itemSet.add(item));\r\n    }\r\n  }\r\n  return itemSet;\r\n};\r\n","import { FC, RefObject, useEffect, useState } from \"react\";\r\nimport {\r\n  CopyOutlined,\r\n  DeleteOutlined,\r\n  PictureTwoTone,\r\n  PictureOutlined,\r\n  BgColorsOutlined,\r\n  AlignLeftOutlined,\r\n  FontColorsOutlined,\r\n  AlignRightOutlined,\r\n  AlignCenterOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Button, ButtonProps, Modal, Popover, Radio } from \"antd\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { allColors } from \"lib/color\";\r\nimport { DrawRefType } from \"component/Draw\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { saveAs } from \"file-saver\";\r\nimport \"./drawTools.sass\";\r\n\r\nexport const SelectTool: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n  visible: boolean;\r\n}> = ({ drawRef, visible }) => (\r\n  <CSSTransition timeout={300} in={visible} unmountOnExit>\r\n    <SelectToolContent drawRef={drawRef} />\r\n  </CSSTransition>\r\n);\r\n\r\nexport const SelectToolContent: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n}> = ({ drawRef }) => {\r\n  const btnProps: ButtonProps = {\r\n    type: \"text\",\r\n    shape: \"round\",\r\n    size: \"small\",\r\n  };\r\n\r\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\r\n\r\n  const getRaster = () => {\r\n    if (!drawRef.current) return;\r\n    const imageData = drawRef.current.rasterizeSelected();\r\n    Modal.confirm({\r\n      title: \"Screenshot\",\r\n      content: <img className=\"raster\" src={imageData} alt=\"raster\" />,\r\n      className: \"raster-modal\",\r\n      icon: <PictureTwoTone />,\r\n      okText: \"Save\",\r\n      onOk: () => saveAs(imageData, document.title.split(\"-\")[0] + \".png\"),\r\n    });\r\n  };\r\n\r\n  return createPortal(\r\n    <div className=\"select-tool\">\r\n      <Popover\r\n        trigger=\"click\"\r\n        placement=\"bottom\"\r\n        getPopupContainer={(e) => e.parentElement!}\r\n        destroyTooltipOnHide\r\n        content={\r\n          <PenPanel\r\n            updateDrawCtrl={(updated) => {\r\n              setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\r\n              drawRef.current?.mutateStyle(updated);\r\n            }}\r\n            drawCtrl={currDrawCtrl}\r\n          />\r\n        }\r\n      >\r\n        <Button icon={<BgColorsOutlined />} {...btnProps} />\r\n      </Popover>\r\n      <Button\r\n        icon={<CopyOutlined />}\r\n        onClick={() => drawRef.current?.duplicateSelected()}\r\n        {...btnProps}\r\n      />\r\n      <Button icon={<PictureOutlined />} onClick={getRaster} {...btnProps} />\r\n      <Button\r\n        danger\r\n        icon={<DeleteOutlined />}\r\n        onClick={() => drawRef.current?.deleteSelected()}\r\n        {...btnProps}\r\n      />\r\n    </div>,\r\n    document.querySelector(\".reader.container > header\")!\r\n  );\r\n};\r\n\r\nexport const TextTool: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n  visible: boolean;\r\n}> = ({ visible, drawRef }) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [color, setColor] = useState(allColors[0]!);\r\n  const [align, setAlign] = useState(\"center\");\r\n\r\n  useEffect(() => {\r\n    const pointText = drawRef.current?.pointText;\r\n    if (!pointText || !visible) return;\r\n    const { name, content, justification, fillColor } = pointText;\r\n    setAlign(justification);\r\n    if (name) {\r\n      setText(content);\r\n      setColor(fillColor?.toCSS(true) ?? allColors[0]!);\r\n    } else {\r\n      setText(\"\");\r\n      setColor(allColors[0]!);\r\n    }\r\n  }, [visible, drawRef]);\r\n\r\n  const fontColorBtn = (\r\n    <Popover\r\n      content={<ColorSelect color={color} setColor={setColor} />}\r\n      overlayStyle={{ width: 200 }}\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n    >\r\n      <Button\r\n        size=\"small\"\r\n        icon={<FontColorsOutlined className=\"font-icon\" style={{ color }} />}\r\n      />\r\n    </Popover>\r\n  );\r\n\r\n  const alignRadio = (\r\n    <Radio.Group\r\n      size=\"small\"\r\n      optionType=\"button\"\r\n      value={align}\r\n      buttonStyle=\"solid\"\r\n      onChange={(e) => setAlign(e.target.value)}\r\n      options={[\r\n        { label: <AlignLeftOutlined />, value: \"left\" },\r\n        { label: <AlignCenterOutlined />, value: \"center\" },\r\n        { label: <AlignRightOutlined />, value: \"right\" },\r\n      ]}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      visible={visible}\r\n      title=\"Insert text\"\r\n      onCancel={() => drawRef.current?.cancelText()}\r\n      onOk={() => {\r\n        const content = text.trim();\r\n        if (!content) return drawRef.current?.cancelText();\r\n        drawRef.current?.submitText(content, color, align);\r\n      }}\r\n      bodyStyle={{ paddingTop: 0 }}\r\n      destroyOnClose\r\n    >\r\n      <div className=\"insert-option\">\r\n        {fontColorBtn}\r\n        {alignRadio}\r\n      </div>\r\n      <TextArea\r\n        size=\"large\"\r\n        rows={3}\r\n        autoFocus\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n      />\r\n    </Modal>\r\n  );\r\n};\r\n","import React, {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport { useDrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { useMemoizedFn as useEvent } from \"ahooks\";\r\nimport { Draw, ActiveToolKey, DrawRefType } from \"component/Draw\";\r\nimport { SelectTool, TextTool } from \"pages/reader/tools/DrawTools\";\r\nimport { once, range } from \"lodash\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { DrawState } from \"lib/draw/DrawState\";\r\nimport { Map, Set } from \"immutable\";\r\n\r\nconst PageWrapperRaw: FC<{\r\n  drawState: DrawState;\r\n  teamStateMap?: Map<string, DrawState>;\r\n  thumbnail?: string;\r\n  pdfIndex?: number;\r\n  noteID?: string;\r\n  updateState?: (ds: DrawState) => void;\r\n  onViewChange?: (ratio: number) => void;\r\n  preview?: boolean;\r\n  preload?: boolean;\r\n  ignores?: Set<string>;\r\n  skipInView?: boolean;\r\n}> = ({\r\n  thumbnail,\r\n  drawState,\r\n  teamStateMap,\r\n  updateState,\r\n  pdfIndex,\r\n  noteID = \"\",\r\n  preview = false,\r\n  onViewChange,\r\n  preload = false,\r\n  ignores = Set<string>(),\r\n  skipInView = false,\r\n}) => {\r\n  const threshold = onViewChange && range(0, 1.2, 0.2);\r\n  const [ref, visible, entry] = useInView({ threshold, skip: skipInView });\r\n  useEffect(() => {\r\n    if (!onViewChange) return;\r\n    if (!entry || !visible) return onViewChange(0);\r\n    onViewChange(entry.intersectionRatio);\r\n  }, [visible, entry, onViewChange]);\r\n\r\n  const [fullImg, setFullImg] = useState<string>();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const loadImage = useCallback(\r\n    once(async () => {\r\n      if (!pdfIndex || !noteID) return;\r\n      const { getNotePageImage } = await import(\"lib/note/pdfImage\");\r\n      setFullImg(await getNotePageImage(noteID, pdfIndex));\r\n    }),\r\n    [pdfIndex, noteID]\r\n  );\r\n\r\n  const show = visible || preload;\r\n  useEffect(() => {\r\n    if (!preview && show) loadImage();\r\n  }, [show, preview, loadImage]);\r\n\r\n  const otherStates = useMemo(\r\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\r\n    [teamStateMap, ignores]\r\n  );\r\n\r\n  const imageLoaded = Boolean(fullImg || !pdfIndex);\r\n  const drawShow = show && imageLoaded;\r\n\r\n  const { height, width } = drawState;\r\n  const ratio = height / width;\r\n\r\n  return (\r\n    <div ref={ref} className=\"page-wrapper\">\r\n      <svg viewBox={`0 0 100 ${ratio * 100}`} />\r\n      {drawShow && (\r\n        <DrawWrapper\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          updateState={updateState}\r\n          imgSrc={fullImg || thumbnail}\r\n          preview={preview}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nPageWrapperRaw.displayName = \"PageWrapper\";\r\nexport const PageWrapper = React.memo(PageWrapperRaw);\r\n\r\nconst DrawWrapper: FC<{\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}> = ({ drawState, updateState, otherStates, preview = false, imgSrc }) => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const [activeTool, setActiveTool] = useState<ActiveToolKey>(\"\");\r\n  const drawRef = useRef<DrawRefType>(null);\r\n\r\n  const handleChange = useEvent(\r\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\r\n      if (!updateState) return;\r\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\r\n      if (newDS === drawState) return;\r\n      updateState(newDS);\r\n    }\r\n  );\r\n\r\n  return preview ? (\r\n    <Draw\r\n      drawState={drawState}\r\n      otherStates={otherStates}\r\n      imgSrc={imgSrc}\r\n      readonly\r\n    />\r\n  ) : (\r\n    <>\r\n      <Draw\r\n        drawState={drawState}\r\n        otherStates={otherStates}\r\n        onChange={handleChange}\r\n        imgSrc={imgSrc}\r\n        drawCtrl={drawCtrl}\r\n        ref={drawRef}\r\n        setActiveTool={setActiveTool}\r\n      />\r\n      <SelectTool drawRef={drawRef} visible={activeTool === \"select\"} />\r\n      <TextTool drawRef={drawRef} visible={activeTool === \"text\"} />\r\n    </>\r\n  );\r\n};\r\nDrawWrapper.displayName = \"DrawWrapper\";\r\n","import { PageWrapper } from \"./PageWrapper\";\r\nimport \"./page-wrapper.sass\";\r\nexport default PageWrapper;\r\n","import localforage from \"localforage\";\r\nimport React, {\r\n  FC,\r\n  PropsWithChildren,\r\n  useContext,\r\n  useDebugValue,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nexport interface DrawCtrl {\r\n  mode: \"draw\" | \"erase\" | \"select\" | \"text\";\r\n  finger: boolean;\r\n  lineWidth: number;\r\n  eraserWidth: number;\r\n  color: string;\r\n  highlight: boolean;\r\n  lasso: boolean;\r\n  pixelEraser: boolean;\r\n  widthList: number[];\r\n}\r\n\r\nexport const defaultWidthList = [10, 20, 30, 50];\r\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\r\n  mode: \"draw\",\r\n  finger: true,\r\n  lineWidth: 10,\r\n  eraserWidth: 10,\r\n  color: \"#000000\",\r\n  highlight: false,\r\n  lasso: true,\r\n  pixelEraser: false,\r\n  widthList: defaultWidthList,\r\n};\r\n\r\nasync function getDrawCtrl() {\r\n  let drawCtrl = await localforage.getItem<DrawCtrl>(\"DRAW_CTRL\");\r\n  if (!drawCtrl) {\r\n    drawCtrl = defaultDrawCtrl;\r\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n  }\r\n  return drawCtrl;\r\n}\r\n\r\nasync function saveDrawCtrl(drawCtrl: DrawCtrl) {\r\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n}\r\n\r\nconst DrawCtrlContext = React.createContext({\r\n  drawCtrl: defaultDrawCtrl,\r\n  updateDrawCtrl: (() => {}) as (updated: Partial<DrawCtrl>) => void,\r\n});\r\n\r\nexport function useDrawCtrl() {\r\n  const { drawCtrl } = useContext(DrawCtrlContext);\r\n  useDebugValue(drawCtrl);\r\n  return drawCtrl;\r\n}\r\n\r\nexport function useUpdateDrawCtrl() {\r\n  const { updateDrawCtrl } = useContext(DrawCtrlContext);\r\n  return updateDrawCtrl;\r\n}\r\n\r\nexport const DrawCtrlProvider: FC<PropsWithChildren> = ({ children }) => {\r\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\r\n  useEffect(() => {\r\n    getDrawCtrl().then(setDrawCtrl);\r\n  }, []);\r\n\r\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\r\n    setDrawCtrl((prev) => {\r\n      const newCtrl = { ...prev, ...updated };\r\n      saveDrawCtrl(newCtrl);\r\n      return newCtrl;\r\n    });\r\n  };\r\n  return (\r\n    <DrawCtrlContext.Provider value={{ drawCtrl, updateDrawCtrl }}>\r\n      {children}\r\n    </DrawCtrlContext.Provider>\r\n  );\r\n};\r\n","export function createVirtualCanvas(width: number, height: number) {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const context = canvas.getContext(\"2d\");\r\n  if (!context) {\r\n    throw new Error(\"can't get virtual canvas context\");\r\n  }\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  return { canvas, context };\r\n}\r\n\r\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  const ctx = canvas.getContext('2d');\r\n  ctx?.clearRect(0, 0, 1, 1);\r\n}\r\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\r\nimport { defaultWidthList, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorCirle } from \"component/ColorCircle\";\r\nimport { WIDTH } from \"lib/draw/DrawState\";\r\nimport { Popover, Segmented, Slider } from \"antd\";\r\nimport { allColors } from \"lib/color\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport IconFont from \"component/IconFont\";\r\nimport { List } from \"immutable\";\r\nimport \"./penPanel.sass\";\r\n\r\nexport const PenPanel: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n}> = ({ updateDrawCtrl, drawCtrl }) => {\r\n  const { highlight, color } = drawCtrl;\r\n  const [panelBlur, setPanelBlur] = useState(false);\r\n\r\n  return (\r\n    <div className=\"pen-panel\" data-blur={panelBlur} data-hi={highlight}>\r\n      <div className=\"pen-status\">\r\n        <WidthSelect\r\n          updateDrawCtrl={updateDrawCtrl}\r\n          drawCtrl={drawCtrl}\r\n          setPanelBlur={setPanelBlur}\r\n        />\r\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\r\n      </div>\r\n      <ColorSelect\r\n        color={color || \"\"}\r\n        setColor={(c) => updateDrawCtrl({ color: c })}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const WidthSelect: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n  setPanelBlur?: Setter<boolean>;\r\n  field?: \"lineWidth\" | \"eraserWidth\";\r\n}> = ({\r\n  updateDrawCtrl,\r\n  drawCtrl,\r\n  setPanelBlur = () => {},\r\n  field = \"lineWidth\",\r\n}) => {\r\n  const currWidth = drawCtrl[field];\r\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\r\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\r\n\r\n  const chosen = useMemo(\r\n    () => widthList.indexOf(currWidth ?? -1),\r\n    [currWidth, widthList]\r\n  );\r\n\r\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\r\n  useEffect(() => {\r\n    if (popShow.includes(true)) setPanelBlur(true);\r\n    else setPanelBlur(false);\r\n  }, [popShow, setPanelBlur]);\r\n\r\n  const realSizeStyle = (width: number) =>\r\n    ({\r\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width})`,\r\n    } as CSSProperties);\r\n\r\n  const options = [\r\n    { value: -1, label: null },\r\n    ...widthList.map((width, index) => ({\r\n      value: index,\r\n      label: (\r\n        <Popover\r\n          visible={popShow.get(index)}\r\n          onVisibleChange={(v) => setPopShow((prev) => prev.set(index, v))}\r\n          trigger={chosen === index ? [\"click\"] : []}\r\n          placement=\"bottom\"\r\n          destroyTooltipOnHide\r\n          content={\r\n            <Slider\r\n              min={5}\r\n              max={100}\r\n              className=\"ctrl-slider\"\r\n              defaultValue={width}\r\n              onAfterChange={(w) => {\r\n                if (widthList.includes(w)) {\r\n                  setPopShow((prev) => prev.set(index, false));\r\n                  return updateDrawCtrl({ [field]: w });\r\n                }\r\n                const newWL = widthList.slice();\r\n                newWL[index] = w;\r\n                updateDrawCtrl({ widthList: newWL, [field]: w });\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          <div className=\"circle-wrapper\" style={realSizeStyle(width)}>\r\n            <ColorCirle className={\"width-circle \" + field} color={color} />\r\n          </div>\r\n        </Popover>\r\n      ),\r\n    })),\r\n  ];\r\n\r\n  return (\r\n    <Segmented\r\n      className=\"width-seg\"\r\n      value={chosen}\r\n      options={options}\r\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 10 })}\r\n    />\r\n  );\r\n};\r\n\r\nconst HighlightSwitch: FC<{\r\n  checked?: boolean;\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ checked = false, updateDrawCtrl }) => {\r\n  return (\r\n    <label className=\"hi-wrapper\">\r\n      <input\r\n        type=\"checkbox\"\r\n        name=\"highlight\"\r\n        checked={checked}\r\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\r\n      />\r\n      <div className=\"hi-switch\">\r\n        <IconFont type=\"icon-Highlight\" />\r\n      </div>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport const ColorSelect: FC<{\r\n  color: string;\r\n  setColor: (color: string) => void;\r\n}> = ({ setColor, color }) => (\r\n  <div className=\"color-select\">\r\n    {allColors.map((c) => (\r\n      <label key={c}>\r\n        <input\r\n          checked={color === c}\r\n          type=\"radio\"\r\n          name=\"color\"\r\n          onChange={(e) => e.target.checked && setColor(c)}\r\n        />\r\n        <div\r\n          data-color={c}\r\n          className=\"circle\"\r\n          style={{ backgroundColor: c, borderColor: c }}\r\n        />\r\n      </label>\r\n    ))}\r\n  </div>\r\n);\r\n"],"names":["createFromIconfontCN","scriptUrl","getRotateCursorImage","cache","Map","createVirtualCanvas","canvas","context","image","Image","src","angle","Math","round","cached","get","translate","rotate","PI","drawImage","data","toDataURL","clearRect","resetTransform","set","getRotateCurcor","usePreventTouch","allowFinger","isTouch","useRef","checkPoniter","e","isPrimary","current","pointerType","preventTouch","touch","touches","touchType","isApplePencil","length","isEventValid","stopPropagation","onPointerDownCapture","onPointerMoveCapture","onTouchStartCapture","onTouchMoveCapture","P_ZERO","Point","DrawRaw","React","ref","drawState","otherStates","onChange","drawCtrl","defaultDrawCtrl","readonly","imgSrc","setActiveTool","width","height","projSize","useMemo","Size","mode","finger","lasso","eraserWidth","canvasEl","scope","paper","useState","group","setGroup","usePaperItem","path","setPath","rect","setRect","rotateHandle","setRotateHandle","useEffect","cvs","scp","setup","settings","handleSize","hitTolerance","forEach","Layer","visible","project","layers","activate","Tool","view","remove","releaseCanvas","rects","paintRects","r","useSize","canvasWidth","ratio","viewSize","multiply","scale","l","update","imgRaster","setImgRaster","raster","Raster","addChild","sendToBack","onLoad","fitBounds","bringToFront","mergedStrokes","DrawState","getStrokeList","renderSlow","tempGroup","layer","timeBeforeRender","Date","now","stroke","self","hasStroke","uid","item","paintStroke","push","requestAnimationFrame","duration","removeChildren","hitRef","selected","setSelected","paperMode","chosenIDs","setChosenIDs","chosenItems","IDSet","Set","filter","has","name","resetSelect","useCallback","undefined","layerRaster","pinching","rasterizeLayer","clip","force","l0","l1","Path","size","position","center","clipMask","prevClip","firstChild","replaceWith","insertAbove","dpi","devicePixelRatio","resolution","bounds","rasterize","insertBelow","unrasterizeLayer","lr","downPath","startStroke","point","downRect","startRect","handleDown","draw","erase","select","contains","hitRes","hitTest","segments","text","t","getClickedText","startText","setPointText","dragPath","add","smooth","handleDrag","x","y","s1","s2","s3","segment","axis","subtract","line","setCursor","moveP","baseP","next","diagonal","strokeWidth","rBaseP","delta","pointText","topCenter","bottomRight","tool","maxDistance","erased","replaced","itemGrid","wnum","ceil","hnum","grid","Array","from","setGridItem","handleToolDrag","hitOption","class","tolerance","getGridItems","hitTestAll","topItem","parent","pixelEraser","radius","circle","insert","sub","trace","opacity","guide","handleUp","simplify","pathData","exportJSON","prev","items","clear","splitters","map","flattenCP","i","erasedList","selection","abs","area","closePath","moveDash","checkLasso","link","lastSegment","updateMutation","handleSelectedCursor","cursor","lineWidth","half","getCircleCursor","handleMove","handleKeyUp","test","key","deleteSelected","handler","onMouseDown","onMouseDrag","onMouseUp","onMouseMove","onKeyUp","mutations","p","mutateStyle","updated","updateGroupStyle","duplicateSelected","transP","divide","copies","clone","rasterizeSelected","cancelText","submitText","color","justification","content","fillColor","Color","useImperativeHandle","preventDefault","document","addEventListener","removeEventListener","usePinch","memo","offset","first","last","origin","lastScale","lastOrigin","elPos","originRawP","getBoundingClientRect","originViewP","originPorjP","viewToProject","zoom","dScale","scaleView","then","putCenterBack","scaleBounds","max","min","rubberband","target","touchHandler","className","style","displayName","Draw","tuple","useDebugValue","cacheMap","WeakMap","importJSON","console","error","l2","bgRect","clip1","clip2","clipped","onFrame","slow","highlight","strokeColor","alpha","blendMode","strokeJoin","strokeCap","dashOffset","dashArray","Promise","res","aniCount","pow","viewW","viewH","projW","projH","minX","minY","maxX","maxY","getCenterTranslate","deltaX","deltaY","dP","move","isInside","compare","intersects","checkedP","newColor","fill","fontSize","cp","isEmpty","children","flat","getGridRange","topLeft","floor","strokeBounds","xmin","xmax","ymin","ymax","delete","itemSet","SelectTool","drawRef","CSSTransition","timeout","in","unmountOnExit","SelectToolContent","btnProps","type","shape","currDrawCtrl","setCurrDrawCtrl","createPortal","trigger","placement","getPopupContainer","parentElement","destroyTooltipOnHide","PenPanel","updateDrawCtrl","icon","BgColorsOutlined","CopyOutlined","onClick","PictureOutlined","imageData","Modal","title","alt","PictureTwoTone","okText","onOk","saveAs","split","danger","DeleteOutlined","querySelector","TextTool","setText","allColors","setColor","align","setAlign","toCSS","fontColorBtn","overlayStyle","FontColorsOutlined","alignRadio","optionType","value","buttonStyle","options","label","AlignLeftOutlined","AlignCenterOutlined","AlignRightOutlined","onCancel","trim","bodyStyle","paddingTop","destroyOnClose","TextArea","rows","autoFocus","PageWrapperRaw","thumbnail","teamStateMap","updateState","pdfIndex","noteID","preview","onViewChange","preload","ignores","skipInView","threshold","range","useInView","skip","entry","intersectionRatio","fullImg","setFullImg","loadImage","once","getNotePageImage","show","deleteAll","toList","toArray","imageLoaded","Boolean","drawShow","viewBox","DrawWrapper","PageWrapper","useDrawCtrl","activeTool","handleChange","useEvent","arg","newDS","defaultWidthList","widthList","getDrawCtrl","localforage","saveDrawCtrl","DrawCtrlContext","useContext","useUpdateDrawCtrl","DrawCtrlProvider","setDrawCtrl","Provider","newCtrl","createElement","getContext","Error","ctx","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","c","field","currWidth","chosen","indexOf","List","popShow","setPopShow","includes","realSizeStyle","WIDTH","index","onVisibleChange","v","defaultValue","onAfterChange","w","newWL","slice","IconFont","backgroundColor","borderColor"],"sourceRoot":""}