{"version":3,"file":"static/js/61.d5284b51.chunk.js","mappings":"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","sources":["lib/draw/canvas.ts","lib/note/pdfImage.ts"],"sourcesContent":["export function createVirtualCanvas(width: number, height: number) {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  if (!context) {\n    throw new Error(\"can't get virtual canvas context\");\n  }\n  canvas.width = width;\n  canvas.height = height;\n  return { canvas, context };\n}\n\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\n  canvas.width = 1;\n  canvas.height = 1;\n  const ctx = canvas.getContext('2d');\n  ctx?.clearRect(0, 0, 1, 1);\n}\n","import { createVirtualCanvas, releaseCanvas } from \"lib/draw/canvas\";\nimport { createEmptyNote, Note, NotePage } from \"./note\";\nimport localforage from \"localforage\";\nimport { v4 as getUid } from \"uuid\";\nimport * as pdfjs from \"pdfjs-dist/legacy/build/pdf\";\n// @ts-ignore\nimport pdfjsWorker from \"pdfjs-dist/legacy/build/pdf.worker.entry\";\nimport { PDFDocumentProxy } from \"pdfjs-dist/types/src/display/api\";\nimport { getImageCache, setImageCache } from \"./imgCache\";\npdfjs.GlobalWorkerOptions.workerSrc = pdfjsWorker;\n\nconst getPDFDocument = async (file: Blob) => {\n  const data = new Uint8Array(await file.arrayBuffer());\n  return pdfjs.getDocument(data).promise;\n};\n\nconst parseDocPage = async (\n  doc: PDFDocumentProxy,\n  pageNum: number,\n  scale: number\n): Promise<[string, number]> => {\n  const page = await doc.getPage(pageNum);\n  const viewport = page.getViewport({ scale });\n\n  const { height, width } = viewport;\n  const ratio = height / width;\n  const { canvas, context } = createVirtualCanvas(\n    Math.floor(width * scale),\n    Math.floor(height * scale)\n  );\n\n  await page.render({\n    canvasContext: context,\n    viewport: viewport,\n    transform: [scale, 0, 0, scale, 0, 0],\n  }).promise;\n\n  const data = canvas.toDataURL();\n\n  releaseCanvas(canvas);\n\n  return [data, ratio];\n};\n\nexport async function getPDFImages(\n  file: Blob,\n  scale = 2,\n  progressCb?: (percent: number) => void\n) {\n  const doc = await getPDFDocument(file);\n  const { numPages } = doc;\n  const images: string[] = [];\n  const ratios: number[] = [];\n\n  for (let i = 1; i <= numPages; i += 1) {\n    const [data, ratio] = await parseDocPage(doc, i, scale);\n    images.push(data);\n    ratios.push(ratio);\n    if (progressCb) progressCb(Math.floor((i / numPages) * 100));\n  }\n\n  return { images, ratios };\n}\n\nexport async function getOneImage(file: Blob, index: number, scale = 2) {\n  const doc = await getPDFDocument(file);\n  const { numPages } = doc;\n  if (index > numPages) {\n    throw new Error(\"index out of range\");\n  }\n  const [data] = await parseDocPage(doc, index, scale);\n  return data;\n}\n\nexport async function getNotePageImage(noteID: string, index: number) {\n  const cached = await getImageCache(noteID, index);\n  if (cached) return cached;\n  const file = await localforage.getItem<Blob>(`PDF_${noteID}`);\n  if (!file) return;\n  const data = await getOneImage(file, index, 2);\n  setImageCache(noteID, index, data);\n  return data;\n}\n\nexport async function LoadPDF(\n  file: File,\n  progressCb?: (percent: number) => void\n): Promise<Note> {\n  const { images, ratios } = await getPDFImages(file, 0.5, progressCb);\n  const pageRec: Record<string, NotePage> = {};\n  const pageOrder: string[] = [];\n  images.forEach((image, idx) => {\n    const pageID = getUid();\n    const ratio = ratios[idx];\n    if (!ratio) return;\n    pageRec[pageID] = {\n      image,\n      ratio,\n      state: {\n        strokes: {},\n      },\n      pdfIndex: idx + 1,\n    };\n    pageOrder.push(pageID);\n  });\n  const name = file.name.replace(\".pdf\", \"\");\n  const ab = await file.arrayBuffer();\n  const pdf = new Blob([ab], { type: \"application/pdf\" });\n  return {\n    ...createEmptyNote(),\n    name,\n    withImg: true,\n    pdf,\n    pageRec,\n    pageOrder,\n  };\n}\n"],"names":["createVirtualCanvas","width","height","canvas","document","createElement","context","getContext","Error","releaseCanvas","ctx","clearRect","pdfjs","pdfjsWorker","getPDFDocument","file","Uint8Array","arrayBuffer","data","promise","parseDocPage","doc","pageNum","scale","getPage","page","viewport","getViewport","ratio","Math","floor","render","canvasContext","transform","toDataURL","getPDFImages","progressCb","numPages","images","ratios","i","push","getOneImage","index","getNotePageImage","noteID","getImageCache","cached","localforage","setImageCache","LoadPDF","pageRec","pageOrder","forEach","image","idx","pageID","getUid","state","strokes","pdfIndex","name","replace","ab","pdf","Blob","type","createEmptyNote","withImg"],"sourceRoot":""}