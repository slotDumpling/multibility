{"version":3,"file":"static/js/310.10551af5.chunk.js","mappings":"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","sources":["lib/draw/StateSet.ts","pages/reader/ReaderUtils.tsx","pages/reader/lib/scroll.ts","pages/reader/lib/array.ts","component/UserAvatar.tsx","pages/reader/PageNav/PageNav.tsx","pages/reader/header/Left.tsx","pages/reader/header/Middle.tsx","pages/reader/header/Right.tsx","pages/reader/header/index.tsx","pages/reader/Reader.tsx","lib/network/io.ts","pages/reader/Team.tsx"],"sourcesContent":["import { DrawState, Operation, Stroke } from \"./DrawState\";\r\nimport { List, Map, Record } from \"immutable\";\r\nimport { NotePage } from \"lib/note/note\";\r\n\r\ninterface StateSetRecordType {\r\n  states: Map<string, DrawState>;\r\n  editStack: List<string>;\r\n  undoStack: List<string>;\r\n}\r\n\r\nconst defaultRecord: Readonly<StateSetRecordType> = {\r\n  states: Map(),\r\n  editStack: List(),\r\n  undoStack: List(),\r\n};\r\n\r\ntype StateSetRecord = Record<StateSetRecordType>;\r\nconst defaultFactory = Record(defaultRecord);\r\n\r\nexport type SetOperation = Operation & { pageID: string };\r\n\r\nexport class StateSet {\r\n  constructor(\r\n    private immutable: StateSetRecord,\r\n    public lastOp?: SetOperation\r\n  ) {}\r\n\r\n  static createFromPages(pageRec: globalThis.Record<string, NotePage>) {\r\n    return new StateSet(\r\n      defaultFactory().set(\r\n        \"states\",\r\n        Map(pageRec).map(({ state, ratio }) =>\r\n          DrawState.loadFromFlat(state, ratio)\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  getImmutable() {\r\n    return this.immutable;\r\n  }\r\n\r\n  getStates() {\r\n    return this.getImmutable().get(\"states\");\r\n  }\r\n\r\n  getOneState(pageID: string) {\r\n    return this.getStates().get(pageID);\r\n  }\r\n\r\n  getEditStack() {\r\n    return this.getImmutable().get(\"editStack\");\r\n  }\r\n\r\n  getUndoStack() {\r\n    return this.getImmutable().get(\"undoStack\");\r\n  }\r\n\r\n  setState(pageID: string, drawState: DrawState) {\r\n    const prevDS = this.getOneState(pageID);\r\n    if (!prevDS || prevDS === drawState) return this;\r\n    let currRecord = this.getImmutable()\r\n      .update(\"states\", (s) => s.set(pageID, drawState))\r\n      .update(\"editStack\", (l) => l.push(pageID))\r\n      .delete(\"undoStack\");\r\n\r\n    const { lastOp } = drawState;\r\n    const lastSetOp = lastOp && { ...lastOp, pageID };\r\n\r\n    return new StateSet(currRecord, lastSetOp);\r\n  }\r\n\r\n  // sync with mutation.\r\n  syncStrokeTime(pageID: string, stroke: Stroke) {\r\n    const prevDS = this.getOneState(pageID);\r\n    prevDS && DrawState.syncStrokeTime(prevDS, stroke);\r\n    return this;\r\n  }\r\n\r\n  addState(pageID: string, notePage: NotePage) {\r\n    const { state, ratio } = notePage;\r\n    const newDS = DrawState.loadFromFlat(state, ratio);\r\n    const currRecord = this.getImmutable().update(\"states\", (s) =>\r\n      s.set(pageID, newDS)\r\n    );\r\n    return new StateSet(currRecord);\r\n  }\r\n\r\n  deleteState(pageID: string) {\r\n    return new StateSet(\r\n      this.getImmutable().update(\"states\", (s) => s.delete(pageID))\r\n    );\r\n  }\r\n\r\n  isUndoable() {\r\n    return this.getEditStack().size > 0;\r\n  }\r\n\r\n  isRedoable() {\r\n    return this.getUndoStack().size > 0;\r\n  }\r\n\r\n  undo() {\r\n    if (!this.isUndoable()) return this;\r\n    const lastUid = this.getEditStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.undo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"editStack\", (s) => s.pop())\r\n        .update(\"undoStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  redo() {\r\n    if (!this.isRedoable()) return this;\r\n    const lastUid = this.getUndoStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.redo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"undoStack\", (s) => s.pop())\r\n        .update(\"editStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  getLastDS(): [string, DrawState] | undefined {\r\n    const pageID = this.lastOp?.pageID;\r\n    const ds = pageID && this.getOneState(pageID);\r\n    if (ds) return [pageID, ds];\r\n  }\r\n}\r\n","import { Button, message } from \"antd\";\r\nimport { useContext } from \"react\";\r\nimport { ReaderMethodCtx } from \"./Reader\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\n\r\nexport const AddPageButton = () => {\r\n  const { addFinalPage } = useContext(ReaderMethodCtx);\r\n  return (\r\n    <div className=\"add-btn-wrapper\">\r\n      <Button\r\n        type=\"dashed\"\r\n        icon={<PlusOutlined />}\r\n        block\r\n        onClick={addFinalPage}\r\n      >\r\n        New page\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const showPageDelMsg = (onUndo: () => void) => {\r\n  message.warning({\r\n    content: (\r\n      <>\r\n        One page was deleted.\r\n        <Button\r\n          size=\"small\"\r\n          type=\"link\"\r\n          onClick={() => {\r\n            message.destroy(\"DELETE\");\r\n            onUndo();\r\n          }}\r\n        >\r\n          Undo\r\n        </Button>\r\n      </>\r\n    ),\r\n    key: \"DELETE\",\r\n    duration: 10,\r\n  });\r\n};\r\n","import { useDebugValue, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport localforage from \"localforage\";\r\nimport { Map } from \"immutable\";\r\n\r\nconst scrollForage = localforage.createInstance({ name: \"scroll\" });\r\n\r\nexport function useScrollPage(noteID: string, pageOrder = [] as string[]) {\r\n  const [refMap, setRefMap] = useState(Map<string, HTMLElement>());\r\n  const scrolled = useRef(false);\r\n  const [prevPageID, setPrevPageID] = useState(\"\");\r\n  const [inviewRatios, setInviewRatios] = useState(Map<string, number>());\r\n  const currPageID = useMemo(\r\n    () => largestKey(inviewRatios, pageOrder),\r\n    [inviewRatios, pageOrder]\r\n  );\r\n  useDebugValue(currPageID);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const stored = await scrollForage.getItem<string>(noteID);\r\n      if (!stored) return (scrolled.current = true);\r\n      setPrevPageID(stored);\r\n    })();\r\n  }, [noteID]);\r\n\r\n  useEffect(() => {\r\n    if (scrolled.current || !refMap.has(prevPageID)) return;\r\n    requestAnimationFrame(() => {\r\n      refMap.get(prevPageID)?.scrollIntoView();\r\n      scrolled.current = true;\r\n    });\r\n  }, [prevPageID, refMap]);\r\n\r\n  useEffect(() => {\r\n    if (!scrolled.current) return;\r\n    scrollForage.setItem(noteID, currPageID);\r\n  }, [noteID, currPageID]);\r\n\r\n  const sectionRef = (pageID: string) => (el: HTMLElement | null) => {\r\n    if (!el) return;\r\n    setRefMap((prev) => prev.set(pageID, el));\r\n  };\r\n\r\n  const scrollPage = (pageID: string) => {\r\n    refMap.get(pageID)?.scrollIntoView();\r\n  };\r\n\r\n  return { scrollPage, setInviewRatios, sectionRef, currPageID };\r\n}\r\n\r\nconst largestKey = (map: Map<string, number>, order: string[]) => {\r\n  let result = \"\";\r\n  let maxRatio = 0;\r\n  for (let key of order) {\r\n    const ratio = map.get(key);\r\n    if (!ratio) continue;\r\n    if (ratio === 1) return key;\r\n    if (ratio > maxRatio) {\r\n      result = key;\r\n      maxRatio = ratio;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n","export function exchange<T>(list: T[], fromIndex: number, toIndex: number) {\r\n  const result = list.slice();\r\n  const [removed] = result.splice(fromIndex, 1);\r\n  if (!removed) return list;\r\n  result.splice(toIndex, 0, removed);\r\n  return result;\r\n}\r\n\r\nexport function insertAfter<T>(list: T[], prevItem: T, newItem: T) {\r\n  const prevIndex = list.indexOf(prevItem);\r\n  const curr = list.slice();\r\n  if (prevIndex === -1) return curr;\r\n  curr.splice(prevIndex + 1, 0, newItem);\r\n  return curr;\r\n}\r\n","import { Avatar } from \"antd\";\r\nimport { AvatarSize } from \"antd/lib/avatar/SizeContext\";\r\nimport { FC, useMemo } from \"react\";\r\nimport { getHashedColor } from \"lib/color\";\r\nimport { UserInfo } from \"lib/user\";\r\n\r\nexport const UserAvatar: FC<{\r\n  userInfo: UserInfo;\r\n  size?: AvatarSize;\r\n  onClick?: () => void;\r\n  chosen?: boolean;\r\n  className?: string;\r\n}> = ({\r\n  userInfo,\r\n  size = \"default\",\r\n  onClick = () => {},\r\n  chosen = false,\r\n  className,\r\n}) => {\r\n  const color = useMemo(() => getHashedColor(userInfo.userID), [userInfo]);\r\n  if (!userInfo) return null;\r\n  const { userName } = userInfo;\r\n\r\n  return (\r\n    <Avatar\r\n      className={className}\r\n      data-chosen={chosen}\r\n      size={size}\r\n      style={{ backgroundColor: color }}\r\n    >\r\n      <div className=\"avatar-wrapper\" onClick={onClick}>\r\n        {userName?.slice(0, 3)}\r\n      </div>\r\n    </Avatar>\r\n  );\r\n};\r\n","import { FC, useRef, useMemo, useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  MenuOutlined,\r\n  MoreOutlined,\r\n  PlusOutlined,\r\n  CopyOutlined,\r\n  DeleteOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  Draggable,\r\n  Droppable,\r\n  DropResult,\r\n  DragDropContext,\r\n} from \"react-beautiful-dnd\";\r\nimport { Avatar, Button, Menu, Popover, Tabs } from \"antd\";\r\nimport { ActiveKeyProvider, Setter, useActiveKey } from \"lib/hooks\";\r\nimport { ReaderMethodCtx, ReaderStateCtx } from \"../Reader\";\r\nimport PageWrapper from \"component/PageWrapper\";\r\nimport { UserAvatar } from \"component/UserAvatar\";\r\nimport { useForceLight } from \"lib/Dark\";\r\nimport { AddPageButton } from \"../ReaderUtils\";\r\nimport { exchange } from \"../lib/array\";\r\nimport IconFont from \"component/IconFont\";\r\nimport classNames from \"classnames\";\r\nimport { TeamCtx } from \"../Team\";\r\nimport \"./preview.sass\";\r\n\r\nconst PreviewCard: FC<{ left: boolean; visible: boolean }> = ({\r\n  left,\r\n  visible,\r\n}) => {\r\n  const [forceLight] = useForceLight();\r\n\r\n  const [activeKey] = useActiveKey();\r\n  const title = {\r\n    ALL: \"All Pages\",\r\n    MARKED: \"Bookmarks\",\r\n    WRITTEN: \"Notes\",\r\n  }[activeKey];\r\n\r\n  return (\r\n    <Draggable draggableId={\"CARD\"} index={left ? 0 : 1}>\r\n      {({ innerRef, draggableProps, dragHandleProps }) => (\r\n        <div\r\n          className=\"preview-card\"\r\n          ref={innerRef}\r\n          data-force-light={forceLight}\r\n          {...draggableProps}\r\n        >\r\n          <div className=\"drag-handle\" {...dragHandleProps} />\r\n          <PreviewTabs />\r\n          <h3>{title}</h3>\r\n          <PageList visible={visible} />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nconst PageList: FC<{ visible: boolean }> = ({ visible }) => {\r\n  const { pageOrder, currPageID } = useContext(ReaderStateCtx);\r\n  const { scrollPage, saveReorder } = useContext(ReaderMethodCtx);\r\n  const refRec = useRef<Record<string, HTMLElement>>({});\r\n  const [activeKey] = useActiveKey();\r\n\r\n  const onDragEnd = ({ source, destination }: DropResult) => {\r\n    if (!destination || !pageOrder) return;\r\n    const { index: fromIndex } = source;\r\n    const { index: toIndex } = destination;\r\n    const pageID = pageOrder[fromIndex];\r\n    if (fromIndex === toIndex || !pageID) return;\r\n    const newOrder = exchange(pageOrder, fromIndex, toIndex);\r\n    saveReorder(newOrder, true);\r\n    requestAnimationFrame(() => scrollPage(pageID));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (visible) return;\r\n    refRec.current[currPageID]?.scrollIntoView();\r\n  }, [visible, currPageID]);\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Droppable droppableId=\"preview-list\">\r\n        {({ droppableProps, innerRef, placeholder }) => (\r\n          <div className=\"page-list\" ref={innerRef} {...droppableProps}>\r\n            {pageOrder?.map((uid, index) => (\r\n              <PagePreview\r\n                key={uid}\r\n                uid={uid}\r\n                pageIndex={index}\r\n                refRec={refRec.current}\r\n              />\r\n            ))}\r\n            {placeholder}\r\n            {activeKey === \"ALL\" && <AddPageButton />}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nconst PagePreview: FC<{\r\n  uid: string;\r\n  pageIndex: number;\r\n  refRec: Record<string, HTMLElement>;\r\n}> = ({ uid, pageIndex, refRec }) => {\r\n  const { stateSet, pageRec, currPageID } = useContext(ReaderStateCtx);\r\n  const { teamState, ignores } = useContext(TeamCtx);\r\n  const { scrollPage } = useContext(ReaderMethodCtx);\r\n  const [activeKey] = useActiveKey();\r\n  const [chosen, setChosen] = useState(\"\");\r\n\r\n  const page = pageRec?.get(uid);\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStateMap = teamState?.getOnePageStateMap(uid);\r\n\r\n  if (!page || !drawState) return null;\r\n  const { image, marked } = page;\r\n\r\n  if (\r\n    activeKey === \"WRITTEN\" &&\r\n    drawState.isEmpty() &&\r\n    (!teamStateMap || teamStateMap.every((ds) => ds.isEmpty()))\r\n  ) {\r\n    return null;\r\n  }\r\n  if (activeKey === \"MARKED\" && !marked) return null;\r\n  const curr = currPageID === uid;\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={uid}\r\n      index={pageIndex}\r\n      isDragDisabled={activeKey !== \"ALL\"}\r\n    >\r\n      {(\r\n        { innerRef, draggableProps, dragHandleProps },\r\n        { isDragging: dragged }\r\n      ) => (\r\n        <div\r\n          ref={(e) => {\r\n            innerRef(e);\r\n            if (e) refRec[uid] = e;\r\n          }}\r\n          className=\"page\"\r\n          data-curr={curr}\r\n          data-dragged={dragged}\r\n          onClick={() => scrollPage(uid)}\r\n          {...draggableProps}\r\n          {...dragHandleProps}\r\n        >\r\n          <PageWrapper\r\n            drawState={teamStateMap?.get(chosen) || drawState}\r\n            teamStateMap={chosen ? undefined : teamStateMap}\r\n            thumbnail={image}\r\n            ignores={ignores}\r\n            preview\r\n          />\r\n          <PreviewTools\r\n            uid={uid}\r\n            index={pageIndex}\r\n            chosen={chosen}\r\n            setChosen={setChosen}\r\n          />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nconst PreviewTools: FC<{\r\n  uid: string;\r\n  index: number;\r\n  chosen: string;\r\n  setChosen: Setter<string>;\r\n}> = ({ uid, index, chosen, setChosen }) => {\r\n  const { switchPageMarked } = useContext(ReaderMethodCtx);\r\n  const { pageRec } = useContext(ReaderStateCtx);\r\n  const { ignores, teamState } = useContext(TeamCtx);\r\n  const userIDs = useMemo(\r\n    () =>\r\n      teamState\r\n        ?.getPageValidUsers(uid)\r\n        .filter((userID) => !ignores.has(userID)) || [],\r\n    [teamState, ignores, uid]\r\n  );\r\n  const page = pageRec?.get(uid);\r\n  if (!page) return null;\r\n  const { marked } = page;\r\n\r\n  return (\r\n    <div className=\"tools\" onClick={(e) => e.stopPropagation()}>\r\n      <div\r\n        className=\"bookmark\"\r\n        data-marked={marked}\r\n        onClick={() => switchPageMarked(uid)}\r\n      />\r\n      <div className=\"index\">{index + 1}</div>\r\n      <PreviewOption uid={uid} />\r\n      <TeamAvatars userIDs={userIDs} chosen={chosen} setChosen={setChosen} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TeamAvatars: FC<{\r\n  userIDs: string[];\r\n  chosen: string;\r\n  setChosen: Setter<string>;\r\n}> = ({ userIDs, chosen, setChosen }) => {\r\n  const { userRec } = useContext(TeamCtx);\r\n  return (\r\n    <Avatar.Group\r\n      maxCount={2}\r\n      size=\"default\"\r\n      className={classNames(\"team-group\", { chosen })}\r\n      maxPopoverPlacement=\"bottom\"\r\n    >\r\n      {userIDs.map((userID) => {\r\n        const userInfo = userRec[userID];\r\n        if (!userInfo) return null;\r\n        return (\r\n          <UserAvatar\r\n            key={userID}\r\n            size=\"default\"\r\n            userInfo={userInfo}\r\n            className=\"preview-avatar\"\r\n            chosen={chosen === userID}\r\n            onClick={() => setChosen((prev) => (prev === userID ? \"\" : userID))}\r\n          />\r\n        );\r\n      })}\r\n    </Avatar.Group>\r\n  );\r\n};\r\n\r\nconst PreviewOption = ({ uid }: { uid: string }) => {\r\n  const { addPage, deletePage } = useContext(ReaderMethodCtx);\r\n\r\n  const menu = (\r\n    <Menu\r\n      onClick={({ key }) => {\r\n        if (key === \"ADD\") {\r\n          addPage(uid);\r\n        } else if (key === \"COPY\") {\r\n          addPage(uid, true);\r\n        } else if (key === \"DELETE\") {\r\n          deletePage(uid);\r\n        }\r\n      }}\r\n      items={[\r\n        { key: \"ADD\", icon: <PlusOutlined />, label: \"Add page\" },\r\n        { key: \"COPY\", icon: <CopyOutlined />, label: \"Duplicate\" },\r\n        {\r\n          key: \"DELETE\",\r\n          icon: <DeleteOutlined />,\r\n          label: \"Delete\",\r\n          danger: true,\r\n        },\r\n      ]}\r\n    ></Menu>\r\n  );\r\n  return (\r\n    <Popover\r\n      content={menu}\r\n      trigger=\"click\"\r\n      placement=\"left\"\r\n      destroyTooltipOnHide\r\n    >\r\n      <div className=\"option\">\r\n        <MoreOutlined />\r\n      </div>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst PreviewTabs = () => {\r\n  const [activeKey, setActiveKey] = useActiveKey();\r\n  const { TabPane } = Tabs;\r\n  return (\r\n    <Tabs\r\n      className=\"tabs\"\r\n      activeKey={activeKey}\r\n      onChange={setActiveKey}\r\n      tabBarGutter={10}\r\n      size=\"small\"\r\n      centered\r\n    >\r\n      <TabPane tab={<IconFont type=\"icon-uf_paper\" />} key=\"ALL\" />\r\n      <TabPane tab={<IconFont type=\"icon-bookmark2\" />} key=\"MARKED\" />\r\n      <TabPane tab={<IconFont type=\"icon-write\" />} key=\"WRITTEN\" />\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport const PageNav = () => {\r\n  const [checked, setChecked] = useState(false);\r\n  const [left, setLeft] = useState(false);\r\n\r\n  const previewBody = (\r\n    <PreviewCard left={left} visible={checked} key=\"preview-drag\" />\r\n  );\r\n\r\n  const opposite = (\r\n    <Draggable key=\"opposite\" draggableId=\"opposite\" index={left ? 1 : 0}>\r\n      {({ innerRef, draggableProps, dragHandleProps }) => (\r\n        <div\r\n          className=\"opposite\"\r\n          ref={innerRef}\r\n          {...draggableProps}\r\n          {...dragHandleProps}\r\n        />\r\n      )}\r\n    </Draggable>\r\n  );\r\n\r\n  return (\r\n    <ActiveKeyProvider initKey=\"ALL\">\r\n      <input\r\n        onChange={(e) => setChecked(e.target.checked)}\r\n        type=\"checkbox\"\r\n        name=\"preview-check\"\r\n        id=\"preview-check\"\r\n      />\r\n      <DragDropContext\r\n        onDragEnd={({ draggableId, destination }) => {\r\n          if (draggableId !== \"CARD\") return;\r\n          if (destination?.index === 0) setLeft(true);\r\n          if (destination?.index === 1) setLeft(false);\r\n        }}\r\n      >\r\n        <Droppable droppableId=\"preview-drop\" direction=\"horizontal\">\r\n          {({ droppableProps, innerRef, placeholder }) => (\r\n            <div\r\n              className=\"preview-drop\"\r\n              data-left={left}\r\n              ref={innerRef}\r\n              {...droppableProps}\r\n            >\r\n              {left ? [previewBody, opposite] : [opposite, previewBody]}\r\n              {placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </ActiveKeyProvider>\r\n  );\r\n};\r\n\r\nexport const PageNavButton = () => {\r\n  return (\r\n    <label htmlFor=\"preview-check\" className=\"preview-label\">\r\n      <Button type=\"text\" icon={<MenuOutlined />} />\r\n    </label>\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { HomeFilled, SaveOutlined } from \"@ant-design/icons\";\r\n\r\nexport const HeaderLeft: FC<{\r\n  saved: boolean;\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ saved, instantSave }) => {\r\n  const nav = useNavigate();\r\n  return (\r\n    <div className=\"left\">\r\n      <Button\r\n        type=\"text\"\r\n        onClick={async () => {\r\n          await instantSave();\r\n          nav(\"/\");\r\n        }}\r\n        icon={<HomeFilled style={{ opacity: 0.8 }} />}\r\n      />\r\n      <Button\r\n        type=\"text\"\r\n        className=\"save\"\r\n        onClick={instantSave}\r\n        disabled={saved}\r\n        icon={<SaveOutlined />}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { FC, useContext } from \"react\";\r\nimport { Button, message, Popover, ButtonProps, Segmented } from \"antd\";\r\nimport { ReaderStateCtx } from \"../Reader\";\r\nimport {\r\n  BulbFilled,\r\n  BulbOutlined,\r\n  UndoOutlined,\r\n  RedoOutlined,\r\n  GatewayOutlined,\r\n  HighlightOutlined,\r\n} from \"@ant-design/icons\";\r\nimport IconFont from \"component/IconFont\";\r\nimport { PenPanel, WidthSelect } from \"../tools/PenPanel\";\r\nimport { useForceLight } from \"lib/Dark\";\r\nimport { useDrawCtrl, useUpdateDrawCtrl } from \"lib/draw/DrawCtrl\";\r\n\r\nexport const HeaderMiddle: FC<{\r\n  handleUndo: () => void;\r\n  handleRedo: () => void;\r\n}> = ({ handleUndo, handleRedo }) => {\r\n  const { stateSet } = useContext(ReaderStateCtx);\r\n  const { mode, finger } = useDrawCtrl();\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n  const [forceLight, setForceLight] = useForceLight();\r\n\r\n  return (\r\n    <div className=\"middle\">\r\n      <Button\r\n        type=\"text\"\r\n        shape=\"circle\"\r\n        icon={<UndoOutlined />}\r\n        onClick={handleUndo}\r\n        disabled={!stateSet?.isUndoable()}\r\n      />\r\n      <Button\r\n        type=\"text\"\r\n        shape=\"circle\"\r\n        icon={<RedoOutlined />}\r\n        onClick={handleRedo}\r\n        disabled={!stateSet?.isRedoable()}\r\n      />\r\n      <Button\r\n        type={finger ? \"default\" : \"text\"}\r\n        shape=\"circle\"\r\n        onClick={() => {\r\n          updateDrawCtrl({ finger: !finger });\r\n          message.destroy(\"FINGER\");\r\n          message.open({\r\n            content: finger ? \"Pencil only\" : \"Draw with finger\",\r\n            key: \"FINGER\",\r\n          });\r\n        }}\r\n        icon={<IconFont type=\"icon-finger\" />}\r\n      />\r\n      <Button\r\n        className=\"force-light-btn\"\r\n        type=\"text\"\r\n        shape=\"circle\"\r\n        icon={forceLight ? <BulbFilled /> : <BulbOutlined />}\r\n        onClick={() => setForceLight((prev) => !prev)}\r\n      />\r\n      <PenButton />\r\n      <EraserButton />\r\n      <Button\r\n        type={mode === \"text\" ? \"default\" : \"text\"}\r\n        shape=\"circle\"\r\n        onClick={() => updateDrawCtrl({ mode: \"text\" })}\r\n        icon={<IconFont type=\"icon-text1\" />}\r\n      />\r\n      <SelectButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PenButton = () => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n\r\n  const btnProps: ButtonProps = {\r\n    shape: \"circle\",\r\n    icon: <HighlightOutlined />,\r\n  };\r\n  return drawCtrl.mode === \"draw\" ? (\r\n    <Popover\r\n      content={<PenPanel updateDrawCtrl={updateDrawCtrl} drawCtrl={drawCtrl} />}\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button type=\"default\" {...btnProps} />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      onClick={() => updateDrawCtrl({ mode: \"draw\" })}\r\n      {...btnProps}\r\n    />\r\n  );\r\n};\r\n\r\nconst EraserButton = () => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const { mode, pixelEraser } = drawCtrl;\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n\r\n  const btnProps: ButtonProps = {\r\n    shape: \"circle\",\r\n    icon: <IconFont type=\"icon-eraser\" />,\r\n  };\r\n\r\n  return mode === \"erase\" ? (\r\n    <Popover\r\n      content={\r\n        <div className=\"width-seg-wrapper\">\r\n          <Segmented\r\n            block\r\n            size=\"small\"\r\n            className=\"pixel-seg\"\r\n            options={[\"Pixel\", \"Object\"]}\r\n            value={pixelEraser ? \"Pixel\" : \"Object\"}\r\n            onChange={(value) => {\r\n              if (value === \"Pixel\") updateDrawCtrl({ pixelEraser: true });\r\n              else updateDrawCtrl({ pixelEraser: false });\r\n            }}\r\n          />\r\n          <WidthSelect\r\n            drawCtrl={drawCtrl}\r\n            updateDrawCtrl={updateDrawCtrl}\r\n            field=\"eraserWidth\"\r\n          />\r\n        </div>\r\n      }\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button type=\"default\" {...btnProps} />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      onClick={() => updateDrawCtrl({ mode: \"erase\" })}\r\n      {...btnProps}\r\n    />\r\n  );\r\n};\r\n\r\nconst SelectButton = () => {\r\n  const { lasso, mode } = useDrawCtrl();\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n\r\n  const icon = lasso ? <IconFont type=\"icon-lasso1\" /> : <GatewayOutlined />;\r\n\r\n  return mode === \"select\" ? (\r\n    <Button\r\n      type=\"default\"\r\n      shape=\"circle\"\r\n      icon={icon}\r\n      onClick={() => updateDrawCtrl({ lasso: !lasso })}\r\n    />\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      shape=\"circle\"\r\n      icon={icon}\r\n      onClick={() => updateDrawCtrl({ mode: \"select\" })}\r\n    />\r\n  );\r\n};\r\n","import { FC, useMemo, useState, useEffect, useContext } from \"react\";\r\nimport { Badge, Alert, Modal, Button, Divider, message, Popover } from \"antd\";\r\nimport Search from \"antd/lib/input/Search\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { PasscodeInput } from \"antd-mobile\";\r\nimport { ReaderStateCtx } from \"../Reader\";\r\nimport { TeamCtx } from \"../Team\";\r\nimport { getUserID, saveUserName } from \"lib/user\";\r\nimport { PageNavButton } from \"../PageNav\";\r\nimport {\r\n  EyeOutlined,\r\n  FormOutlined,\r\n  TeamOutlined,\r\n  CopyOutlined,\r\n  CheckOutlined,\r\n  ReloadOutlined,\r\n  ShareAltOutlined,\r\n  DisconnectOutlined,\r\n  EyeInvisibleOutlined,\r\n  UsergroupAddOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { editNoteData } from \"lib/note/archive\";\r\nimport { UserAvatar } from \"component/UserAvatar\";\r\nimport { putNote } from \"lib/network/http\";\r\nimport copy from \"clipboard-copy\";\r\n\r\nexport const HeaderRight: FC<{\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ instantSave }) => {\r\n  const { teamOn } = useContext(TeamCtx);\r\n  return (\r\n    <div className=\"right\">\r\n      {teamOn ? <RoomInfo /> : <JoinRoom instantSave={instantSave} />}\r\n      <PageNavButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst UserCard: FC<{ userID: string }> = ({ userID }) => {\r\n  const [renaming, setRenaming] = useState(false);\r\n  const { ignores, setIgnores, resetIO, userRec } = useContext(TeamCtx);\r\n  const userInfo = userRec[userID];\r\n  useEffect(() => setRenaming(false), [userInfo]);\r\n  if (!userInfo) return null;\r\n\r\n  const { userName, online } = userInfo;\r\n  const self = userID === getUserID();\r\n  const ignored = ignores.has(userID) && !self;\r\n\r\n  const switchIgnore = () => {\r\n    setIgnores((prev) => {\r\n      if (prev.has(userID)) return prev.delete(userID);\r\n      return prev.add(userID);\r\n    });\r\n  };\r\n\r\n  const submitRename = (value: string) => {\r\n    const name = value.trim();\r\n    if (!name || name === userName) return setRenaming(false);\r\n    saveUserName(name);\r\n    resetIO();\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-item\" data-online={online}>\r\n      <UserAvatar userInfo={userInfo} size=\"small\" className=\"room-avatar\" />\r\n      {renaming || <span className=\"user-name\">{userName}</span>}\r\n      {renaming && (\r\n        <Search\r\n          autoFocus\r\n          className=\"rename-input\"\r\n          defaultValue={userName}\r\n          onSearch={submitRename}\r\n          enterButton={<Button icon={<CheckOutlined />} />}\r\n        />\r\n      )}\r\n      {self ? (\r\n        renaming || (\r\n          <Button\r\n            type=\"text\"\r\n            icon={<FormOutlined />}\r\n            onClick={() => setRenaming(true)}\r\n          />\r\n        )\r\n      ) : (\r\n        <Button\r\n          type=\"text\"\r\n          icon={ignored ? <EyeInvisibleOutlined /> : <EyeOutlined />}\r\n          onClick={switchIgnore}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst RoomInfo: FC = () => {\r\n  const { code, userRec, connected, loadInfo, loadState, resetIO } =\r\n    useContext(TeamCtx);\r\n  const { noteInfo } = useContext(ReaderStateCtx);\r\n  const link = window.location.href;\r\n  const share = async () => {\r\n    const selfName = userRec[getUserID()]?.userName;\r\n    try {\r\n      if (!noteInfo) return;\r\n      await copy(`${noteInfo.name} - ${selfName} - Multibility\\n${link}`);\r\n      message.destroy(\"copy\");\r\n      message.success({\r\n        content: \"Link copied!\",\r\n        icon: <CopyOutlined />,\r\n        key: \"copy\",\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const userList = useMemo(() => {\r\n    const selfID = getUserID();\r\n    const { [selfID]: selfInfo, ...otherUsers } = userRec;\r\n    const list = selfInfo ? [selfInfo] : [];\r\n    const values = Object.values(otherUsers);\r\n    list.push(\r\n      ...values.filter(({ online }) => online),\r\n      ...values.filter(({ online }) => !online)\r\n    );\r\n    return list;\r\n  }, [userRec]);\r\n\r\n  const onlineNum = useMemo(\r\n    () => userList.filter(({ online }) => online).length,\r\n    [userList]\r\n  );\r\n\r\n  const teamPop = (\r\n    <div className=\"team-popover\">\r\n      {connected || (\r\n        <Alert\r\n          className=\"disconn-alert\"\r\n          message=\"Network failed.\"\r\n          icon={<DisconnectOutlined />}\r\n          type=\"error\"\r\n          showIcon\r\n          banner\r\n        />\r\n      )}\r\n      <PasscodeInput\r\n        className=\"code-display\"\r\n        value={String(code)}\r\n        length={4}\r\n        plain\r\n      />\r\n      <Button\r\n        icon={<ShareAltOutlined />}\r\n        className=\"share-btn\"\r\n        onClick={share}\r\n        block\r\n      >\r\n        Share\r\n      </Button>\r\n      <Divider />\r\n      <div className=\"user-list\">\r\n        {userList.map((u) => (\r\n          <UserCard key={u.userID} userID={u.userID} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const [reloading, setReloading] = useState(false);\r\n  const title = (\r\n    <div className=\"team-title\">\r\n      <span>Team info</span>\r\n      <Button\r\n        shape=\"circle\"\r\n        type=\"text\"\r\n        size=\"small\"\r\n        loading={reloading}\r\n        icon={<ReloadOutlined />}\r\n        onClick={async () => {\r\n          setReloading(true);\r\n          await loadInfo();\r\n          await loadState();\r\n          setReloading(false);\r\n          resetIO();\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Popover\r\n      content={teamPop}\r\n      trigger=\"click\"\r\n      placement=\"bottomRight\"\r\n      title={title}\r\n      getPopupContainer={(e) => e.parentElement!}\r\n    >\r\n      <Button\r\n        type=\"text\"\r\n        icon={\r\n          <Badge\r\n            status={connected ? \"success\" : \"error\"}\r\n            count={connected ? onlineNum : \"!\"}\r\n            size=\"small\"\r\n          >\r\n            <TeamOutlined />\r\n          </Badge>\r\n        }\r\n      />\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst JoinRoom: FC<{\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ instantSave }) => {\r\n  const { noteID } = useContext(ReaderStateCtx);\r\n  const nav = useNavigate();\r\n\r\n  const createRoom = async () => {\r\n    await instantSave();\r\n    const res = await putNote(noteID);\r\n    if (!res) return message.error(\"Can't create room.\");\r\n    await editNoteData(noteID, { team: true });\r\n    nav(\"/team/\" + noteID);\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      type=\"text\"\r\n      icon={<UsergroupAddOutlined />}\r\n      onClick={() => {\r\n        Modal.confirm({\r\n          title: \"Enable team editing\",\r\n          content: \"This will make your note public to anyone with the link.\",\r\n          icon: <TeamOutlined style={{ color: \"#555\" }} />,\r\n          onOk: createRoom,\r\n        });\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\nimport { HeaderLeft } from \"./Left\";\r\nimport { HeaderMiddle } from \"./Middle\";\r\nimport { HeaderRight } from \"./Right\";\r\nimport \"./header.sass\";\r\n\r\nexport const Header: FC<{\r\n  saved: boolean;\r\n  handleUndo: () => void;\r\n  handleRedo: () => void;\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ saved, handleUndo, handleRedo, instantSave }) => {\r\n  return (\r\n    <header>\r\n      <HeaderLeft saved={saved} instantSave={instantSave} />\r\n      <HeaderMiddle handleUndo={handleUndo} handleRedo={handleRedo} />\r\n      <HeaderRight instantSave={instantSave} />\r\n    </header>\r\n  );\r\n};\r\n","import React, {\r\n  FC,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  useCallback,\r\n} from \"react\";\r\nimport { NoteInfo, NotePage, createPage, defaultNotePage } from \"lib/note/note\";\r\nimport { DrawCtrlProvider } from \"lib/draw/DrawCtrl\";\r\nimport { NewPageInfo, ReorderInfo, SyncInfo } from \"lib/network/io\";\r\nimport { DarkModeProvider } from \"lib/Dark\";\r\nimport { useMemoizedFn as useEvent, useSafeState } from \"ahooks\";\r\nimport { SetOperation, StateSet } from \"lib/draw/StateSet\";\r\nimport { loadNote, editNoteData } from \"lib/note/archive\";\r\nimport { AddPageButton, showPageDelMsg } from \"./ReaderUtils\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport PageWrapper from \"component/PageWrapper\";\r\nimport { DrawState } from \"lib/draw/DrawState\";\r\nimport { useScrollPage } from \"./lib/scroll\";\r\nimport { debounce, last } from \"lodash-es\";\r\nimport { insertAfter } from \"./lib/array\";\r\nimport { PageNav } from \"./PageNav\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport { Header } from \"./header\";\r\nimport { TeamCtx } from \"./Team\";\r\nimport { Map } from \"immutable\";\r\nimport { message } from \"antd\";\r\nimport \"./reader.sass\";\r\n\r\nexport const ReaderStateCtx = React.createContext<{\r\n  noteID: string;\r\n  noteInfo?: NoteInfo;\r\n  stateSet?: StateSet;\r\n  pageRec?: Map<string, NotePage>;\r\n  pageOrder?: string[];\r\n  currPageID: string;\r\n}>({ noteID: \"\", currPageID: \"\" });\r\n\r\nexport const ReaderMethodCtx = React.createContext({\r\n  scrollPage: (pageID: string) => {},\r\n  switchPageMarked: (pageID: string) => {},\r\n  addPage: (prevPageID: string, copy?: boolean) => {},\r\n  addFinalPage: () => {},\r\n  deletePage: (pageID: string) => {},\r\n  saveReorder: async (order: string[], push: boolean) => {},\r\n});\r\n\r\nexport default function Reader() {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const nav = useNavigate();\r\n\r\n  const [pageRec, setPageRec] = useState<Map<string, NotePage>>();\r\n  const [noteInfo, setNoteInfo] = useState<NoteInfo>();\r\n  const [stateSet, setStateSet] = useState<StateSet>();\r\n  const [pageOrder, setPageOrder] = useState<string[]>();\r\n  const [saved, setSaved] = useSafeState(true);\r\n\r\n  const { io, teamOn, addTeamStatePage } = useContext(TeamCtx);\r\n  const { setInviewRatios, scrollPage, sectionRef, currPageID } = useScrollPage(\r\n    noteID,\r\n    pageOrder\r\n  );\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const storedNote = await loadNote(noteID);\r\n      if (!storedNote) {\r\n        message.error(\"Note not found\");\r\n        return nav(\"/\");\r\n      }\r\n      const { pageRec, pdf, pageOrder, ...noteInfo } = storedNote;\r\n      setPageRec(Map(pageRec));\r\n      setPageOrder(pageOrder);\r\n      setNoteInfo(noteInfo);\r\n      setStateSet(StateSet.createFromPages(pageRec));\r\n    })();\r\n  }, [nav, noteID, teamOn]);\r\n\r\n  useEffect(() => {\r\n    if (!noteInfo) return;\r\n    document.title = noteInfo.name + \" - Multibility\";\r\n  }, [noteInfo]);\r\n\r\n  const saver = useEvent(async () => {\r\n    const pr = pageRec?.toObject();\r\n    await editNoteData(noteID, { pageRec: pr });\r\n    setSaved(true);\r\n  });\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const debouncedSave = useCallback(debounce(saver, 2000), [saver]);\r\n  const instantSave = debouncedSave.flush;\r\n\r\n  const savePageRec = (pageID: string, cb: (prev: NotePage) => NotePage) => {\r\n    setPageRec((prev) => prev?.update(pageID, defaultNotePage, cb));\r\n    setSaved(false);\r\n    debouncedSave();\r\n  };\r\n\r\n  const saveReorder = async (pageOrder: string[], push = false) => {\r\n    setPageOrder(pageOrder);\r\n    await editNoteData(noteID, { pageOrder });\r\n    await instantSave();\r\n    push && pushReorder(pageOrder);\r\n  };\r\n\r\n  const pushReorder = (pageOrder: string[]) =>\r\n    io?.emit(\"reorder\", { pageOrder });\r\n\r\n  const handleReorder = useEvent(\r\n    ({ deleted, pageOrder, prevOrder }: ReorderInfo) => {\r\n      saveReorder(pageOrder);\r\n      if (!deleted) return;\r\n      showPageDelMsg(() => saveReorder(prevOrder, true));\r\n    }\r\n  );\r\n\r\n  const handleNewPage = useEvent(\r\n    ({ pageOrder, pageID, newPage }: NewPageInfo) => {\r\n      saveReorder(pageOrder);\r\n      savePageRec(pageID, () => newPage);\r\n      setStateSet((prev) => prev?.addState(pageID, newPage));\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    io?.on(\"reorder\", handleReorder);\r\n    io?.on(\"newPage\", handleNewPage);\r\n    return () => void io?.removeAllListeners();\r\n  }, [io, handleReorder, handleNewPage]);\r\n\r\n  const pushOperation = (operation: SetOperation) => {\r\n    const handleSync = ({ pageID, stroke }: SyncInfo) =>\r\n      setStateSet((prev) => prev?.syncStrokeTime(pageID, stroke));\r\n\r\n    io?.emit(\"push\", { operation }, handleSync);\r\n  };\r\n\r\n  const pushNewPage = (\r\n    pageOrder: string[],\r\n    pageID: string,\r\n    newPage: NotePage\r\n  ) => {\r\n    const { image, marked, ...newTeamPage } = newPage;\r\n    io?.emit(\"newPage\", { pageOrder, pageID, newPage: newTeamPage });\r\n    addTeamStatePage(pageID, newPage);\r\n  };\r\n\r\n  const updatePageRec = (pageID: string, ds: DrawState) => {\r\n    const state = DrawState.flaten(ds);\r\n    savePageRec(pageID, (prev) => ({ ...prev, state }));\r\n  };\r\n\r\n  const updateStateSet = (cb: (prevSS: StateSet) => StateSet) => {\r\n    if (!stateSet) return;\r\n    const newSS = cb(stateSet);\r\n    if (newSS === stateSet) return;\r\n    setStateSet(newSS);\r\n    const lastDS = newSS.getLastDS();\r\n    const lastOp = newSS.lastOp;\r\n    if (!lastDS || !lastOp) return;\r\n    updatePageRec(...lastDS);\r\n    pushOperation(lastOp);\r\n  };\r\n\r\n  const switchPageMarked = (pageID: string) =>\r\n    savePageRec(pageID, (prev) => ({ ...prev, marked: !prev.marked }));\r\n\r\n  const addPage = (prevPageID: string, copy = false) => {\r\n    if (!pageOrder) return;\r\n    const prevPage = copy ? pageRec?.get(prevPageID) : undefined;\r\n    const [pageID, newPage] = createPage(prevPage);\r\n    const newOrder = insertAfter(pageOrder, prevPageID, pageID);\r\n    pushNewPage(newOrder, pageID, newPage);\r\n    saveReorder(newOrder);\r\n    savePageRec(pageID, () => newPage);\r\n    setStateSet((prev) => prev?.addState(pageID, newPage));\r\n  };\r\n\r\n  const addFinalPage = () => {\r\n    const lastPageID = last(pageOrder);\r\n    lastPageID && addPage(lastPageID);\r\n  };\r\n\r\n  const deletePage = (pageID: string) => {\r\n    const newOrder = pageOrder?.filter((id) => id !== pageID);\r\n    newOrder?.length && saveReorder(newOrder, true);\r\n  };\r\n\r\n  const renderResult = (\r\n    <div className=\"reader container\">\r\n      <Header\r\n        saved={saved}\r\n        instantSave={instantSave}\r\n        handleUndo={() => updateStateSet((prev) => prev.undo())}\r\n        handleRedo={() => updateStateSet((prev) => prev.redo())}\r\n      />\r\n      <main>\r\n        {pageOrder?.map((uid) => (\r\n          <section key={uid} className=\"note-page\" ref={sectionRef(uid)}>\r\n            <PageContainer\r\n              uid={uid}\r\n              updateStateSet={updateStateSet}\r\n              setInviewRatios={setInviewRatios}\r\n            />\r\n          </section>\r\n        ))}\r\n        <AddPageButton />\r\n      </main>\r\n      <PageNav />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <DarkModeProvider>\r\n      <ReaderStateCtx.Provider\r\n        value={{\r\n          noteID,\r\n          pageRec,\r\n          noteInfo,\r\n          stateSet,\r\n          pageOrder,\r\n          currPageID,\r\n        }}\r\n      >\r\n        <ReaderMethodCtx.Provider\r\n          value={{\r\n            addPage,\r\n            scrollPage,\r\n            deletePage,\r\n            saveReorder,\r\n            addFinalPage,\r\n            switchPageMarked,\r\n          }}\r\n        >\r\n          <DrawCtrlProvider>{renderResult}</DrawCtrlProvider>\r\n        </ReaderMethodCtx.Provider>\r\n      </ReaderStateCtx.Provider>\r\n    </DarkModeProvider>\r\n  );\r\n}\r\n\r\nconst PageContainer: FC<{\r\n  uid: string;\r\n  updateStateSet: (cb: (prevSS: StateSet) => StateSet) => void;\r\n  setInviewRatios: Setter<Map<string, number>>;\r\n}> = ({ uid, updateStateSet, setInviewRatios }) => {\r\n  const { pageRec, stateSet, currPageID, pageOrder, noteID } =\r\n    useContext(ReaderStateCtx);\r\n  const { teamState, ignores } = useContext(TeamCtx);\r\n\r\n  const page = pageRec?.get(uid);\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStateMap = teamState?.getOnePageStateMap(uid);\r\n  const updateState = (ds: DrawState) => {\r\n    updateStateSet((prev) => prev.setState(uid, ds));\r\n  };\r\n\r\n  const onViewChange = (visible: boolean, ratio: number) => {\r\n    if (!visible) return setInviewRatios((prev) => prev.delete(uid));\r\n    setInviewRatios((prev) => prev.set(uid, ratio));\r\n  };\r\n\r\n  const preload = useMemo(() => {\r\n    if (!pageOrder) return false;\r\n    const currIndex = pageOrder.indexOf(currPageID);\r\n    const selfIndex = pageOrder.indexOf(uid);\r\n    return Math.abs(selfIndex - currIndex) <= 1;\r\n  }, [currPageID, uid, pageOrder]);\r\n\r\n  if (!page || !drawState) return null;\r\n  return (\r\n    <PageWrapper\r\n      drawState={drawState}\r\n      teamStateMap={teamStateMap}\r\n      updateState={updateState}\r\n      pdfIndex={page.pdfIndex}\r\n      noteID={noteID}\r\n      ignores={ignores}\r\n      onViewChange={onViewChange}\r\n      preload={preload}\r\n    />\r\n  );\r\n};\r\n","import { io } from \"socket.io-client\";\r\nimport { Stroke } from \"lib/draw/DrawState\";\r\nimport { NotePage } from \"lib/note/note\";\r\nimport { getUserID, getUserName } from \"lib/user\";\r\nimport { BASE_URL } from \"./http\";\r\n\r\nexport const IoFactory = (noteID: string) => () =>\r\n  io(BASE_URL, {\r\n    query: {\r\n      userID: getUserID(),\r\n      userName: getUserName(),\r\n      noteID,\r\n    },\r\n  });\r\n\r\nexport interface ReorderInfo {\r\n  pageOrder: string[];\r\n  prevOrder: string[];\r\n  deleted: boolean;\r\n}\r\n\r\nexport interface NewPageInfo {\r\n  pageOrder: string[];\r\n  pageID: string;\r\n  newPage: NotePage;\r\n}\r\n\r\nexport interface SyncInfo {\r\n  stroke: Stroke;\r\n  pageID: string;\r\n}\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  getTeamNoteState,\r\n  loadTeamNoteInfo,\r\n  updatePages,\r\n} from \"lib/network/http\";\r\nimport { LoginOutlined, LogoutOutlined } from \"@ant-design/icons\";\r\nimport { IoFactory, NewPageInfo } from \"lib/network/io\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { TeamState } from \"lib/draw/TeamState\";\r\nimport { getUserID, UserInfo } from \"lib/user\";\r\nimport { NotePage } from \"lib/note/note\";\r\nimport { Socket } from \"socket.io-client\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport { Loading } from \"component/Loading\";\r\nimport { message } from \"antd\";\r\nimport { Set } from \"immutable\";\r\nimport Reader from \"./Reader\";\r\n\r\nexport const TeamCtx = React.createContext({\r\n  io: undefined as Socket | undefined,\r\n  code: 0,\r\n  teamOn: false,\r\n  connected: false,\r\n  ignores: Set<string>(),\r\n  userRec: {} as Record<string, UserInfo>,\r\n  teamState: undefined as TeamState | undefined,\r\n  resetIO: () => {},\r\n  loadInfo: async () => false,\r\n  loadState: async () => false,\r\n  setIgnores: (() => {}) as Setter<Set<string>>,\r\n  addTeamStatePage: (pageID: string, newPage: NotePage) => {},\r\n});\r\n\r\nexport default function Team() {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const [teamState, setTeamState] = useState<TeamState>();\r\n  const [code, setCode] = useState(-2);\r\n  const [userRec, setUserRec] = useState<Record<string, UserInfo>>({});\r\n  const [ignores, setIgnores] = useState(Set<string>());\r\n  const [io, setIO] = useState(IoFactory(noteID));\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [connected, setConnected] = useState(false);\r\n  const nav = useNavigate();\r\n\r\n  const loadInfo = useCallback(async () => {\r\n    const info = await loadTeamNoteInfo(noteID);\r\n    if (!info) {\r\n      message.error(\"Failed loading the team note info\");\r\n      return false;\r\n    }\r\n    setCode(info.code);\r\n    return true;\r\n  }, [noteID]);\r\n\r\n  const loadState = useCallback(async () => {\r\n    const teamNote = await getTeamNoteState(noteID);\r\n    if (!teamNote) {\r\n      message.error(\"Failed loading the team note state\");\r\n      return false;\r\n    }\r\n    setTeamState(TeamState.createFromTeamPages(teamNote));\r\n    return true;\r\n  }, [noteID]);\r\n\r\n  const updateSelfState = useCallback(() => {\r\n    updatePages(noteID);\r\n  }, [noteID]);\r\n\r\n  useEffect(() => {\r\n    const roomInit = async () => {\r\n      const infoLoaded = await loadInfo();\r\n      const stateLoaded = await loadState();\r\n      if (!infoLoaded || !stateLoaded) return nav(\"/\");\r\n      setLoaded(true);\r\n      updateSelfState();\r\n    };\r\n    roomInit();\r\n    return updateSelfState;\r\n  }, [loadInfo, loadState, nav, updateSelfState]);\r\n\r\n  useEffect(() => {\r\n    io.on(\"push\", ({ operation, userID }) => {\r\n      setTeamState((prev) => prev?.pushOperation(operation, userID));\r\n    });\r\n\r\n    io.on(\"join\", ({ joined, members }) => {\r\n      const { userID, userName } = joined;\r\n      setUserRec(members);\r\n      if (userID === getUserID()) return;\r\n      showJoinMsg(userID, userName);\r\n    });\r\n\r\n    io.on(\"leave\", ({ leaved, members }) => {\r\n      const { userID, userName } = leaved;\r\n      setUserRec(members);\r\n      if (userID === getUserID()) return io.emit(\"join\");\r\n      showLeaveMsg(userID, userName);\r\n    });\r\n\r\n    io.on(\"newPage\", (info: NewPageInfo) => {\r\n      const { pageID, newPage } = info;\r\n      setTeamState((prev) => prev?.addPage(pageID, newPage));\r\n    });\r\n\r\n    io.on(\"reset\", ({ userID, pageRec }) => {\r\n      if (userID === getUserID()) return;\r\n      setTeamState((prev) => prev?.resetUser(userID, pageRec));\r\n    });\r\n\r\n    io.on(\"connect_error\", console.error);\r\n    io.on(\"connect\", () => setConnected(true));\r\n    io.on(\"disconnect\", () => setConnected(false));\r\n\r\n    return () => {\r\n      io.removeAllListeners();\r\n      io.close();\r\n    };\r\n  }, [io]);\r\n\r\n  const addTeamStatePage = (pageID: string, newPage: NotePage) => {\r\n    setTeamState((prev) => prev?.addPage(pageID, newPage));\r\n  };\r\n\r\n  const resetIO = () => setIO(IoFactory(noteID));\r\n\r\n  return (\r\n    <Loading loading={!loaded}>\r\n      <TeamCtx.Provider\r\n        value={{\r\n          io,\r\n          code,\r\n          teamOn: true,\r\n          ignores,\r\n          userRec,\r\n          connected,\r\n          teamState,\r\n          resetIO,\r\n          loadInfo,\r\n          loadState,\r\n          setIgnores,\r\n          addTeamStatePage,\r\n        }}\r\n      >\r\n        <Reader />\r\n      </TeamCtx.Provider>\r\n    </Loading>\r\n  );\r\n}\r\n\r\nconst showJoinMsg = (userID: string, userName: string) => {\r\n  message.destroy(userID);\r\n  message.success({\r\n    content: `${userName} joined room`,\r\n    icon: <LoginOutlined />,\r\n    key: userID,\r\n  });\r\n};\r\n\r\nconst showLeaveMsg = (userID: string, userName: string) => {\r\n  message.destroy(userID);\r\n  message.warning({\r\n    content: `${userName} leaved room`,\r\n    icon: <LogoutOutlined />,\r\n    key: userID,\r\n  });\r\n};\r\n"],"names":["defaultRecord","states","Map","editStack","List","undoStack","defaultFactory","Record","StateSet","immutable","lastOp","this","getImmutable","get","pageID","getStates","drawState","prevDS","getOneState","currRecord","update","s","set","l","push","delete","stroke","DrawState","notePage","state","ratio","newDS","getEditStack","size","getUndoStack","isUndoable","lastUid","last","lastSetOp","pop","isRedoable","ds","pageRec","map","AddPageButton","addFinalPage","useContext","ReaderMethodCtx","className","type","icon","PlusOutlined","block","onClick","scrollForage","localforage","name","largestKey","order","result","maxRatio","key","insertAfter","list","prevItem","newItem","prevIndex","indexOf","curr","slice","splice","UserAvatar","userInfo","chosen","color","useMemo","getHashedColor","userID","userName","style","backgroundColor","PreviewCard","left","visible","useForceLight","forceLight","useActiveKey","title","ALL","MARKED","WRITTEN","draggableId","index","innerRef","draggableProps","dragHandleProps","ref","PreviewTabs","PageList","ReaderStateCtx","pageOrder","currPageID","scrollPage","saveReorder","refRec","useRef","activeKey","useEffect","current","scrollIntoView","onDragEnd","source","destination","fromIndex","toIndex","newOrder","removed","exchange","requestAnimationFrame","droppableId","droppableProps","placeholder","uid","PagePreview","pageIndex","stateSet","TeamCtx","teamState","ignores","useState","setChosen","page","teamStateMap","getOnePageStateMap","image","marked","isEmpty","every","isDragDisabled","dragged","isDragging","e","PageWrapper","undefined","thumbnail","preview","PreviewTools","switchPageMarked","userIDs","getPageValidUsers","filter","has","stopPropagation","PreviewOption","TeamAvatars","userRec","maxCount","classNames","maxPopoverPlacement","prev","addPage","deletePage","menu","items","label","CopyOutlined","DeleteOutlined","danger","content","trigger","placement","destroyTooltipOnHide","MoreOutlined","setActiveKey","TabPane","Tabs","onChange","tabBarGutter","centered","tab","IconFont","PageNav","checked","setChecked","setLeft","previewBody","opposite","initKey","target","id","direction","PageNavButton","htmlFor","MenuOutlined","HeaderLeft","saved","instantSave","nav","useNavigate","HomeFilled","opacity","disabled","SaveOutlined","HeaderMiddle","handleUndo","handleRedo","useDrawCtrl","mode","finger","updateDrawCtrl","useUpdateDrawCtrl","setForceLight","shape","UndoOutlined","RedoOutlined","message","BulbFilled","BulbOutlined","PenButton","EraserButton","SelectButton","drawCtrl","btnProps","HighlightOutlined","PenPanel","getPopupContainer","parentElement","pixelEraser","options","value","field","lasso","GatewayOutlined","HeaderRight","teamOn","RoomInfo","JoinRoom","UserCard","renaming","setRenaming","setIgnores","resetIO","online","self","getUserID","ignored","Search","autoFocus","defaultValue","onSearch","trim","saveUserName","enterButton","CheckOutlined","FormOutlined","EyeInvisibleOutlined","EyeOutlined","add","code","connected","loadInfo","loadState","noteInfo","link","window","location","href","share","selfName","copy","console","log","userList","selfID","selfInfo","otherUsers","values","Object","onlineNum","length","teamPop","DisconnectOutlined","showIcon","banner","String","plain","ShareAltOutlined","u","reloading","setReloading","loading","ReloadOutlined","status","count","TeamOutlined","noteID","createRoom","putNote","editNoteData","team","UsergroupAddOutlined","Modal","onOk","Header","React","prevPageID","Reader","useParams","setPageRec","setNoteInfo","setStateSet","setPageOrder","useSafeState","setSaved","io","addTeamStatePage","refMap","setRefMap","scrolled","setPrevPageID","inviewRatios","setInviewRatios","useDebugValue","getItem","stored","setItem","sectionRef","el","useScrollPage","loadNote","storedNote","pdf","createFromPages","document","saver","useEvent","pr","toObject","debouncedSave","useCallback","debounce","flush","savePageRec","cb","defaultNotePage","pushReorder","emit","handleReorder","onUndo","deleted","prevOrder","duration","handleNewPage","newPage","addState","on","removeAllListeners","pushNewPage","newTeamPage","updatePageRec","updateStateSet","newSS","operation","lastDS","getLastDS","syncStrokeTime","prevPage","createPage","renderResult","undo","redo","PageContainer","Dark","Provider","lastPageID","DrawCtrl","preload","currIndex","selfIndex","Math","abs","updateState","setState","pdfIndex","onViewChange","IoFactory","BASE_URL","query","getUserName","Set","Team","setTeamState","setCode","setUserRec","setIO","loaded","setLoaded","setConnected","loadTeamNoteInfo","info","getTeamNoteState","teamNote","TeamState","updateSelfState","updatePages","roomInit","infoLoaded","stateLoaded","pushOperation","joined","members","showJoinMsg","leaved","showLeaveMsg","resetUser","error","close","Loading","LoginOutlined","LogoutOutlined"],"sourceRoot":""}