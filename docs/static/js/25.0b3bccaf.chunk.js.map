{"version":3,"file":"static/js/25.0b3bccaf.chunk.js","mappings":"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","sources":["component/IconFont.tsx","component/Draw/cursor/cursor.ts","component/Draw/touch.ts","component/Draw/Draw.tsx","pages/reader/tools/DrawTools.tsx","component/PageWrapper/PageWrapper.tsx","component/PageWrapper/index.tsx","lib/draw/DrawCtrl.tsx","lib/draw/canvas.ts","pages/reader/tools/PenPanel.tsx"],"sourcesContent":["import { createFromIconfontCN } from \"@ant-design/icons\";\r\n\r\nexport default createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_3181679_yo844n7qgns.js\",\r\n});\r\n","import { createVirtualCanvas } from \"lib/draw/canvas\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport rotateImg from \"./rotate.png\";\r\n\r\nexport const getCircleCursor = (drawCtrl: DrawCtrl, ratio: number) => {\r\n  const { lineWidth, eraserWidth, mode } = drawCtrl;\r\n  const size = ratio * (mode === \"erase\" ? eraserWidth : lineWidth);\r\n  if (size < 5) return \"crosshair\";\r\n  const half = size / 2;\r\n  return `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23FFF7\" width=\"${size}\" height=\"${size}\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"5\"/></svg>') ${half} ${half}, auto`;\r\n};\r\n\r\nconst getRotateCursorImage = (() => {\r\n  const cache = new Map<number, string>();\r\n  const { canvas, context } = createVirtualCanvas(44, 44);\r\n  const image = new Image();\r\n  image.src = rotateImg;\r\n  return (angle: number) => {\r\n    angle = Math.round(angle / 10) * 10;\r\n    const cached = cache.get(angle);\r\n    if (cached) return cached;\r\n    context.translate(22, 22);\r\n    context.rotate((angle * Math.PI) / 180);\r\n    context.drawImage(image, -22, -22);\r\n    const data = canvas.toDataURL();\r\n    context.clearRect(-22, -22, 44, 44);\r\n    context.resetTransform();\r\n    cache.set(angle, data);\r\n    return data;\r\n  };\r\n})();\r\n\r\nexport const getRotateCurcor = (angle: number) => {\r\n  return `url(${getRotateCursorImage(angle)}) 22 22, auto`;\r\n};\r\n","import { PointerEvent, TouchEvent, useEffect, useRef } from \"react\";\r\n\r\ntype iOSTouch = Touch & {\r\n  force?: number;\r\n  touchType?: \"stylus\" | \"direct\";\r\n};\r\n\r\nexport function isApplePencil(e: TouchEvent) {\r\n  const touch = e.touches[0] as iOSTouch;\r\n  return touch?.touchType === \"stylus\";\r\n}\r\n\r\nexport function usePreventTouch(\r\n  allowFinger: boolean\r\n): React.HTMLAttributes<HTMLDivElement> {\r\n  const isTouch = useRef(false);\r\n  const checkPoniter = (e: PointerEvent) =>\r\n    e.isPrimary && (isTouch.current = e.pointerType === \"touch\");\r\n\r\n  const isEventValid = (e: TouchEvent) =>\r\n    !isTouch.current ||\r\n    isApplePencil(e) ||\r\n    (allowFinger && e.touches.length === 1);\r\n\r\n  const preventTouch = (e: TouchEvent) =>\r\n    isEventValid(e) || e.stopPropagation();\r\n\r\n  return {\r\n    onPointerDownCapture: checkPoniter,\r\n    onPointerMoveCapture: checkPoniter,\r\n    onTouchStartCapture: preventTouch,\r\n    onTouchMoveCapture: preventTouch,\r\n  };\r\n}\r\n\r\nexport function usePreventGesture() {\r\n  useEffect(() => {\r\n    const handler = (e: Event) => e.preventDefault();\r\n    document.addEventListener(\"gesturestart\", handler);\r\n    document.addEventListener(\"gesturechange\", handler);\r\n    document.addEventListener(\"gestureend\", handler);\r\n    return () => {\r\n      document.removeEventListener(\"gesturestart\", handler);\r\n      document.removeEventListener(\"gesturechange\", handler);\r\n      document.removeEventListener(\"gestureend\", handler);\r\n    };\r\n  }, []);\r\n}\r\n","import React, {\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  Dispatch,\r\n  useEffect,\r\n  useCallback,\r\n  useDebugValue,\r\n  SetStateAction,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport paper from \"paper/dist/paper-core\";\r\nimport { usePinch } from \"@use-gesture/react\";\r\nimport useSize from \"@react-hook/size\";\r\nimport { DrawState, Mutation, Splitter, Stroke } from \"lib/draw/DrawState\";\r\nimport { defaultDrawCtrl, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { releaseCanvas } from \"lib/draw/canvas\";\r\nimport { getCircleCursor, getRotateCurcor } from \"./cursor\";\r\nimport { usePreventTouch, usePreventGesture } from \"./touch\";\r\n\r\nconst { Path, Size, Point, Group, Color, Raster, Layer } = paper;\r\n\r\nexport type ActiveToolKey = \"\" | \"select\" | \"text\";\r\nexport interface DrawRefType {\r\n  deleteSelected: () => void;\r\n  duplicateSelected: () => void;\r\n  mutateStyle: (updated: Partial<DrawCtrl>) => void;\r\n  rasterize: () => string;\r\n  submitText: (text: string, color?: string, justification?: string) => void;\r\n  cancelText: () => void;\r\n  pointText?: paper.PointText;\r\n}\r\ninterface DrawPropType {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  onChange?: Dispatch<SetStateAction<DrawState>>;\r\n  setActiveTool?: Dispatch<SetStateAction<ActiveToolKey>>;\r\n  drawCtrl?: DrawCtrl;\r\n  readonly?: boolean;\r\n  imgSrc?: string;\r\n}\r\n\r\nconst HIT_TOLERANCE = 20;\r\n\r\nconst DrawRaw = React.forwardRef<DrawRefType, DrawPropType>(\r\n  (\r\n    {\r\n      drawState,\r\n      otherStates,\r\n      onChange = () => {},\r\n      drawCtrl = defaultDrawCtrl,\r\n      readonly = false,\r\n      imgSrc,\r\n      setActiveTool = () => {},\r\n    },\r\n    ref\r\n  ) => {\r\n    const { width, height } = drawState;\r\n    const { mode, finger, lasso, eraserWidth } = drawCtrl;\r\n\r\n    const canvasEl = useRef<HTMLCanvasElement>(null);\r\n    const scope = useRef(new paper.PaperScope());\r\n    const [group, setGroup] = useState<paper.Item[]>([]);\r\n    const [path, setPath] = usePaperItem<paper.Path>();\r\n    const [rect, setRect] = usePaperItem<paper.Path.Rectangle>();\r\n    const [rotateHandle, setRotateHandle] = usePaperItem<paper.Path>();\r\n\r\n    useEffect(() => {\r\n      const cvs = canvasEl.current;\r\n      const scp = scope.current;\r\n      if (!cvs) return;\r\n\r\n      scp.setup(cvs);\r\n      scp.settings.handleSize = 10;\r\n      scp.settings.hitTolerance = HIT_TOLERANCE;\r\n      [0, 1, 2].forEach(() => (new Layer().visible = false));\r\n      scp.project.layers[2]?.activate();\r\n      new scp.Tool();\r\n\r\n      return () => {\r\n        scp.view?.remove();\r\n        releaseCanvas(cvs);\r\n      };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      scope.current.activate();\r\n      const { layers } = scope.current.project;\r\n      const rects = paintRects(layers, width, height);\r\n      return () => rects.forEach((r) => r.remove());\r\n    }, [width, height]);\r\n\r\n    const [canvasWidth] = useSize(canvasEl);\r\n    const ratio = canvasWidth / width;\r\n    useEffect(() => {\r\n      if (!ratio) return;\r\n      const scp = scope.current;\r\n      const zero = new Point(0, 0);\r\n      scp.view.viewSize = new Size(width, height).multiply(ratio);\r\n      scp.view.scale(ratio, zero);\r\n      scp.project.layers.forEach((l) => (l.visible = true));\r\n      scp.view.update();\r\n\r\n      return () => scp.view?.scale(1 / ratio, zero);\r\n    }, [width, height, ratio]);\r\n\r\n    useEffect(() => {\r\n      if (!imgSrc) return;\r\n      scope.current.activate();\r\n      const raster = new Raster(imgSrc);\r\n      raster.project.layers[0]?.addChild(raster);\r\n      raster.sendToBack();\r\n      raster.onLoad = () => {\r\n        raster.view.update();\r\n        raster.fitBounds(new paper.Rectangle(0, 0, width, height));\r\n        raster.bringToFront();\r\n      };\r\n\r\n      return () => void raster?.remove();\r\n    }, [imgSrc, width, height]);\r\n\r\n    const mergedStrokes = useMemo(\r\n      () =>\r\n        otherStates\r\n          ? DrawState.mergeStates(drawState, ...otherStates)\r\n          : drawState.getStrokeList(),\r\n      [drawState, otherStates]\r\n    );\r\n    useEffect(() => {\r\n      const tempGroup: paper.Item[] = [];\r\n      const layer = scope.current.project.layers[1];\r\n      if (!layer) return;\r\n\r\n      scope.current.activate();\r\n      mergedStrokes.forEach((stroke) => {\r\n        const self = drawState.hasStroke(stroke.uid);\r\n        const item = paintStroke(stroke, layer, !self);\r\n        if (self) tempGroup.push(item);\r\n      });\r\n      setGroup(tempGroup);\r\n\r\n      return () => void layer.removeChildren(1);\r\n    }, [mergedStrokes, drawState]);\r\n\r\n    const hitRef = useRef<paper.HitResult>();\r\n    const [selected, setSelected] = useState(false);\r\n    const paperMode = mode === \"select\" && selected ? \"selected\" : mode;\r\n    const [chosenIDs, setChosenIDs] = useState<string[]>([]);\r\n    const chosenItems = useMemo(() => {\r\n      const IDSet = new Set(chosenIDs);\r\n      return group.filter((item) => IDSet.has(item.name));\r\n    }, [group, chosenIDs]);\r\n\r\n    const resetSelect = useCallback(() => {\r\n      setSelected(false);\r\n      setPath(undefined);\r\n      setRect(undefined);\r\n      setRotateHandle(undefined);\r\n    }, [setPath, setRect, setRotateHandle]);\r\n\r\n    useEffect(() => {\r\n      if (mode === \"select\") return resetSelect;\r\n    }, [mode, resetSelect]);\r\n    useEffect(() => resetSelect, [lasso, resetSelect]);\r\n\r\n    useEffect(() => {\r\n      if (!selected) return;\r\n      return () => {\r\n        setChosenIDs([]);\r\n        setActiveTool(\"\");\r\n      };\r\n    }, [selected, setActiveTool]);\r\n\r\n    const downPath = () => setPath(startStroke(drawCtrl));\r\n    const downRect = (e: paper.MouseEvent) => setRect(startRect(e.point));\r\n\r\n    const handleDown = {\r\n      draw: downPath,\r\n      erase: downPath,\r\n      select: lasso ? downPath : downRect,\r\n      selected(e: paper.MouseEvent) {\r\n        if (lasso) {\r\n          // if the point is outside of selection, reset selection\r\n          if (path?.contains(e.point)) return;\r\n          downPath();\r\n          setSelected(false);\r\n        } else {\r\n          // check if the point hit the segment point.\r\n          let hitRes =\r\n            rect?.hitTest(e.point, { segments: true }) ??\r\n            rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n          hitRef.current = hitRes;\r\n          if (hitRes) return;\r\n\r\n          // if the point is outside of selection, reset selection\r\n          if (rect?.contains(e.point)) return;\r\n          downRect(e);\r\n          setRotateHandle(undefined);\r\n          setSelected(false);\r\n        }\r\n      },\r\n      text(e: paper.MouseEvent) {\r\n        const layer = scope.current.project.layers[1];\r\n        if (!layer) return;\r\n        const t = getClickedText(layer, e.point) ?? startText(e.point);\r\n        setPointText(t);\r\n      },\r\n    }[paperMode];\r\n\r\n    const dragPath = (e: paper.MouseEvent) => {\r\n      path?.add(e.point);\r\n      path?.smooth();\r\n    };\r\n    const resizeRect = (e: paper.MouseEvent) => {\r\n      if (!rect) return;\r\n      const { x, y } = e.point;\r\n      const [, s1, s2, s3] = rect.segments;\r\n      if (!s1 || !s2 || !s3) return;\r\n      s1.point.x = x;\r\n      s2.point = e.point;\r\n      s3.point.y = y;\r\n      rect.selected = true;\r\n    };\r\n\r\n    const handleDrag = {\r\n      draw: dragPath,\r\n      erase: dragPath,\r\n      select: lasso ? dragPath : resizeRect,\r\n      selected(e: paper.MouseEvent) {\r\n        const hitRes = hitRef.current;\r\n        if (hitRes?.segment && rect && rotateHandle) {\r\n          const segment = hitRes.segment;\r\n          const rotating = segment.selected;\r\n          if (rotating) {\r\n            // rotate select items\r\n            const { center } = rect.bounds;\r\n            const axis = segment.point.subtract(center);\r\n            const line = e.point.subtract(center);\r\n            setCursor(getRotateCurcor(line.angle));\r\n            const angle = line.angle - axis.angle;\r\n            rect.rotate(angle, center);\r\n            rotateHandle.rotate(angle, center);\r\n            chosenItems.forEach((item) => item?.rotate(angle, center));\r\n          } else {\r\n            // resize selected items\r\n            const moveP = segment.point;\r\n            const baseP = segment.next.next.point;\r\n            const diagonal = moveP.subtract(baseP);\r\n            const projection = e.point.subtract(baseP).project(diagonal);\r\n            const scale = projection.x / diagonal.x;\r\n            if (scale < 0) return;\r\n\r\n            rect.scale(scale, baseP);\r\n            chosenItems.forEach((item) => {\r\n              item.scale(scale, baseP);\r\n              item.strokeWidth *= scale;\r\n            });\r\n            rotateHandle.scale(scale, baseP);\r\n            const rBaseP = rotateHandle.segments[0]?.point;\r\n            if (!rBaseP) return;\r\n            rotateHandle.scale(100 / rotateHandle.length, rBaseP);\r\n          }\r\n        } else {\r\n          // move selected items\r\n          chosenItems.forEach((item) => item.translate(e.delta));\r\n          path?.translate(e.delta);\r\n          rect?.translate(e.delta);\r\n          rotateHandle?.translate(e.delta);\r\n        }\r\n      },\r\n      text(e: paper.MouseEvent) {\r\n        if (!pointText || pointText.name) return;\r\n        const { topCenter, bottomRight } = pointText.bounds;\r\n        const diagonal = bottomRight.subtract(topCenter);\r\n        const projection = e.point.subtract(topCenter).project(diagonal);\r\n        const scale = projection.x / diagonal.x;\r\n        if (scale < 0) return;\r\n        pointText.scale(scale, topCenter);\r\n      },\r\n    }[paperMode];\r\n\r\n    useEffect(() => {\r\n      scope.current.tool.maxDistance = eraserWidth;\r\n    }, [eraserWidth]);\r\n    const erased = useRef(new Set<string>());\r\n    const replaced = useRef(new Map<string, paper.Item>());\r\n\r\n    const handelToolDrag = (e: paper.ToolEvent) => {\r\n      if (paperMode !== \"erase\") return;\r\n      const layer = scope.current.project.layers[1];\r\n      const hitRes = layer?.hitTestAll(e.point, {\r\n        class: paper.Path,\r\n        stroke: true,\r\n        tolerance: eraserWidth / 2,\r\n      });\r\n\r\n      hitRes?.forEach(({ item }) => {\r\n        if (!(item instanceof paper.Path)) return;\r\n        let topItem: paper.PathItem = item;\r\n        while (topItem.parent !== layer) {\r\n          if (!(topItem.parent instanceof paper.PathItem)) break;\r\n          topItem = topItem.parent;\r\n        }\r\n        const { name } = topItem;\r\n\r\n        if (drawCtrl.pixelEraser) {\r\n          const radius = (eraserWidth + item.strokeWidth) / 2;\r\n          const circle = new Path.Circle(e.point, radius);\r\n          circle.remove();\r\n\r\n          const sub = item.subtract(circle, { trace: false });\r\n          item.replaceWith(sub);\r\n          if (topItem === item) topItem = sub;\r\n          replaced.current.set(name, topItem);\r\n        } else {\r\n          topItem.opacity = 0.5;\r\n          topItem.guide = true;\r\n          erased.current.add(name);\r\n        }\r\n      });\r\n    };\r\n\r\n    const handleUp = {\r\n      draw() {\r\n        if (!path || path.isEmpty()) return;\r\n        path.simplify();\r\n        const pathData = path.exportJSON();\r\n        setPath(undefined);\r\n        onChange((prev) => DrawState.addStroke(prev, pathData));\r\n      },\r\n      erase() {\r\n        setPath(undefined);\r\n        if (drawCtrl.pixelEraser) {\r\n          const items = Array.from(replaced.current);\r\n          replaced.current.clear();\r\n          const splitters: Splitter[] = items.map(([uid, item]) => {\r\n            const paths = flattenCP(item);\r\n            return [uid, paths.map((i) => i.exportJSON())];\r\n          });\r\n          if (!splitters.length) return;\r\n          onChange((prev) => DrawState.splitStrokes(prev, splitters));\r\n        } else {\r\n          const erasedList = Array.from(erased.current);\r\n          erased.current.clear();\r\n          if (!erasedList.length) return;\r\n          onChange((prev) => DrawState.eraseStrokes(prev, erasedList));\r\n        }\r\n      },\r\n      select() {\r\n        let selection: string[];\r\n        if (lasso) {\r\n          if (!path || Math.abs(path.area) < 1_000) return setPath(undefined);\r\n          path.closePath();\r\n          path.simplify();\r\n          moveDash(path);\r\n          selection = checkLasso(group, path);\r\n        } else {\r\n          if (!rect || Math.abs(rect.area) < 1_000) return setRect(undefined);\r\n          selection = checkLasso(group, rect);\r\n          const link = new Path();\r\n          const { topCenter } = rect.bounds;\r\n          link.add(topCenter, topCenter.subtract(new Point(0, 100)));\r\n          link.lastSegment.selected = true;\r\n          setRotateHandle(link);\r\n        }\r\n        setSelected(true);\r\n        setChosenIDs(selection);\r\n        setActiveTool(\"select\");\r\n      },\r\n      selected(e: paper.MouseEvent) {\r\n        updateMutation();\r\n        handleSelectedCursor(e);\r\n      },\r\n      text() {\r\n        setActiveTool(\"text\");\r\n      },\r\n    }[paperMode];\r\n\r\n    const [cursor, setCursor] = useState(\"auto\");\r\n    useEffect(() => {\r\n      if (paperMode === \"text\" || paperMode === \"select\") {\r\n        setCursor(\"crosshair\");\r\n      } else if (paperMode === \"selected\") {\r\n        setCursor(lasso ? \"crosshair\" : \"nwse-resize\");\r\n      } else if (paperMode === \"draw\" || paperMode === \"erase\") {\r\n        setCursor(getCircleCursor(drawCtrl, ratio));\r\n      }\r\n    }, [paperMode, lasso, drawCtrl, ratio]);\r\n\r\n    const handleSelectedCursor = (e: paper.MouseEvent) => {\r\n      const hitRes =\r\n        rect?.hitTest(e.point, { segments: true }) ??\r\n        rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n      if (hitRes?.segment) {\r\n        if (hitRes.segment.selected) {\r\n          const center = rect?.bounds.center;\r\n          if (!center) return;\r\n          const line = hitRes.segment.point.subtract(center);\r\n          return setCursor(getRotateCurcor(line.angle));\r\n        }\r\n        const moveP = hitRes.segment.point;\r\n        const baseP = hitRes.segment.next.next.point;\r\n        const diagonal = moveP.subtract(baseP);\r\n        const { x, y } = diagonal;\r\n        return setCursor(x * y < 0 ? \"nesw-resize\" : \"nwse-resize\");\r\n      }\r\n      if ((rect ?? path)?.contains(e.point)) return setCursor(\"move\");\r\n      setCursor(\"crosshair\");\r\n    };\r\n\r\n    const handleMove = {\r\n      selected: handleSelectedCursor,\r\n      text(e: paper.MouseEvent) {\r\n        const layer = scope.current.project.layers[1];\r\n        if (!layer) return;\r\n        if (getClickedText(layer, e.point)) setCursor(\"text\");\r\n        else setCursor(\"crosshair\");\r\n      },\r\n      ...{ select: null, draw: null, erase: null },\r\n    }[paperMode];\r\n\r\n    const handleKeyUp =\r\n      paperMode === \"selected\"\r\n        ? (e: paper.KeyEvent) => {\r\n            if ([\"delete\", \"backspace\"].includes(e.key)) {\r\n              deleteSelected();\r\n            }\r\n          }\r\n        : null;\r\n\r\n    useEffect(() => {\r\n      if (readonly) return;\r\n\r\n      type Handler<E> = ((e: E) => boolean | void) | null;\r\n      const activate = <E,>(handler: Handler<E>): Handler<E> => {\r\n        return (e) => {\r\n          scope.current.activate();\r\n          if (handler) return handler(e);\r\n        };\r\n      };\r\n      const { view, tool } = scope.current;\r\n      view.onMouseDown = activate(handleDown);\r\n      view.onMouseDrag = activate(handleDrag);\r\n      view.onMouseUp = activate(handleUp);\r\n      view.onMouseMove = activate(handleMove);\r\n      tool.onMouseDrag = activate(handelToolDrag);\r\n      tool.onKeyUp = activate(handleKeyUp);\r\n    });\r\n\r\n    const updateMutation = () => {\r\n      if (!chosenItems?.length) return;\r\n      const mutations: Mutation[] = chosenItems.map((p) => [\r\n        p.name,\r\n        p.exportJSON(),\r\n      ]);\r\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\r\n    };\r\n\r\n    const deleteSelected = () => {\r\n      resetSelect();\r\n      if (!chosenIDs.length) return;\r\n      onChange((prev) => DrawState.eraseStrokes(prev, chosenIDs));\r\n    };\r\n\r\n    const mutateStyle = (updated: Partial<DrawCtrl>) => {\r\n      scope.current.activate();\r\n      updateGroupStyle(chosenItems, updated);\r\n      updateMutation();\r\n    };\r\n\r\n    const duplicateSelected = () => {\r\n      scope.current.activate();\r\n      const size = (rect || path)?.bounds.size;\r\n      if (!size || !chosenItems.length) return;\r\n      const { width, height } = size;\r\n      const transP = new Point(width, height).divide(10);\r\n      const copies = chosenItems.map((item) => item.clone());\r\n      copies.forEach((item) => item.translate(transP));\r\n      rect?.translate(transP);\r\n      path?.translate(transP);\r\n      rotateHandle?.translate(transP);\r\n\r\n      const mutations: Mutation[] = copies.map((item) => [\r\n        DrawState.getUid(),\r\n        item.exportJSON(),\r\n      ]);\r\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\r\n      setChosenIDs(mutations.map(([uid]) => uid));\r\n    };\r\n\r\n    const rasterize = () => {\r\n      const g = new Group(chosenItems);\r\n      const layer = scope.current.project.layers[1];\r\n      if (!layer) return \"\";\r\n      g.addTo(layer);\r\n      return g.rasterize({ insert: false }).toDataURL();\r\n    };\r\n\r\n    const [pointText, setPointText] = usePaperItem<paper.PointText>();\r\n    const cancelText = useCallback(() => {\r\n      setPointText(undefined);\r\n      setActiveTool(\"\");\r\n    }, [setPointText, setActiveTool]);\r\n\r\n    useEffect(() => {\r\n      if (mode === \"text\") return cancelText;\r\n    }, [mode, cancelText]);\r\n\r\n    const submitText = (\r\n      text: string,\r\n      color = \"#000\",\r\n      justification = \"center\"\r\n    ) => {\r\n      if (!pointText) return;\r\n      pointText.content = text;\r\n      pointText.fillColor = new Color(color);\r\n      pointText.justification = justification;\r\n      const pathData = pointText.exportJSON();\r\n      const { name } = pointText;\r\n      cancelText();\r\n      if (!name) return onChange((prev) => DrawState.addStroke(prev, pathData));\r\n      onChange((prev) => DrawState.mutateStrokes(prev, [[name, pathData]]));\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      deleteSelected,\r\n      duplicateSelected,\r\n      cancelText,\r\n      submitText,\r\n      mutateStyle,\r\n      rasterize,\r\n      pointText,\r\n    }));\r\n\r\n    usePreventGesture();\r\n    usePinch(\r\n      ({ memo, offset: [scale], first, last, origin }) => {\r\n        scope.current.activate();\r\n        const { view } = scope.current;\r\n        const originRawP = new Point(origin);\r\n\r\n        let lastScale: number;\r\n        let lastOrigin, elPos: paper.Point;\r\n        if (first || !memo) {\r\n          const { x, y } = canvasEl.current!.getBoundingClientRect();\r\n          lastScale = 1;\r\n          elPos = new Point(x, y);\r\n          lastOrigin = originRawP.subtract(elPos);\r\n        } else {\r\n          [lastScale, lastOrigin, elPos] = memo;\r\n        }\r\n\r\n        const originViewP = originRawP.subtract(elPos);\r\n        const originPorjP = view.viewToProject(originViewP);\r\n\r\n        if (Math.abs(1 - scale) < 0.05) scale = 1;\r\n        let dScale = first ? 1 : scale / lastScale;\r\n        let aniCount = last ? 10 : 1;\r\n        dScale = Math.pow(dScale, 1 / aniCount);\r\n        const scaleView = () => {\r\n          view.scale(dScale, originPorjP);\r\n          scope.current.settings.hitTolerance /= dScale;\r\n          if (--aniCount > 0) requestAnimationFrame(scaleView);\r\n          else if (last) putCenterBack(view, new Size(width, height));\r\n        };\r\n        scaleView();\r\n\r\n        const deltaP = originViewP.subtract(lastOrigin);\r\n        const transP = deltaP.divide(view.zoom);\r\n        view.translate(transP);\r\n\r\n        if (!last) return [scale, originViewP, elPos];\r\n      },\r\n      {\r\n        scaleBounds: { max: 10, min: 0.3 },\r\n        rubberband: 0.5,\r\n        target: canvasEl,\r\n      }\r\n    );\r\n\r\n    const touchHandler = usePreventTouch(finger);\r\n    return (\r\n      <div\r\n        className=\"draw-wrapper\"\r\n        style={{ cursor }}\r\n        data-readonly={readonly}\r\n        {...touchHandler}\r\n      >\r\n        <canvas ref={canvasEl} className=\"draw-canvas\" />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nDrawRaw.displayName = \"Draw\";\r\nexport const Draw = React.memo(DrawRaw);\r\n\r\nfunction usePaperItem<T extends paper.Item>() {\r\n  const tuple = useState<T | undefined>();\r\n  const [item] = tuple;\r\n  useDebugValue(item);\r\n  useEffect(() => {\r\n    if (!item?.name) return () => void item?.remove();\r\n  }, [item]);\r\n  return tuple;\r\n}\r\n\r\nconst paintStroke = (stroke: Stroke, layer: paper.Layer, readonly = false) => {\r\n  let { pathData, uid } = stroke;\r\n  try {\r\n    const item = layer.importJSON(pathData);\r\n    if (!item) return new paper.Item();\r\n    item.name = uid;\r\n    item.guide = readonly;\r\n    return item;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return new paper.Item();\r\n  }\r\n};\r\n\r\nconst paintRects = (layers: paper.Layer[], width: number, height: number) => {\r\n  const [l0, l1, l2] = layers;\r\n  if (!l0 || !l1 || !l2) return [];\r\n  const bgRect = new Path.Rectangle(new Point(0, 0), new Point(width, height));\r\n  const clip1 = bgRect.clone();\r\n  const clip2 = clip1.clone();\r\n  bgRect.fillColor = new Color(\"#fff\");\r\n  l0.addChild(bgRect);\r\n  l1.addChild(clip1);\r\n  l2.addChild(clip2);\r\n  l1.clipped = true;\r\n  l2.clipped = true;\r\n  return [bgRect, clip1, clip2];\r\n};\r\n\r\nconst startRect = (point: paper.Point) => {\r\n  const rect = new Path.Rectangle(point, new Size(0, 0));\r\n  rect.onFrame = () => {}; // the handle size bug\r\n  return rect;\r\n};\r\n\r\nconst startStroke = (drawCtrl: DrawCtrl) => {\r\n  let { mode, lineWidth, eraserWidth, color, highlight } = drawCtrl;\r\n  const path = new Path();\r\n  if (mode === \"erase\") {\r\n    color = \"#ccc\";\r\n    lineWidth = eraserWidth;\r\n  }\r\n  if (mode === \"select\") {\r\n    color = \"#009dec\";\r\n    lineWidth = 5;\r\n  }\r\n  const strokeColor = new Color(color);\r\n  if (highlight || mode === \"erase\") {\r\n    strokeColor.alpha = 0.5;\r\n    path.blendMode = \"multiply\";\r\n  }\r\n  path.strokeColor = strokeColor;\r\n  path.strokeWidth = lineWidth;\r\n  path.strokeJoin = \"round\";\r\n  path.strokeCap = \"round\";\r\n  path.guide = true;\r\n  return path;\r\n};\r\n\r\nconst moveDash = (item: paper.Item) => {\r\n  item.dashOffset = 0;\r\n  item.dashArray = [30, 20];\r\n  item.onFrame = () => (item.dashOffset += 3);\r\n};\r\n\r\nconst getCenterTranslate = (\r\n  view: paper.View,\r\n  projSize: paper.Size\r\n): [number, number] => {\r\n  const { x, y } = view.center;\r\n  const { width: viewW, height: viewH } = view.size;\r\n  const { width: projW, height: projH } = projSize;\r\n\r\n  const [minX, minY] = [Math.min(viewW, projW) / 2, Math.min(viewH, projH) / 2];\r\n  const [maxX, maxY] = [projW - minX, projH - minY];\r\n\r\n  const deltaX = x < minX ? minX - x : x > maxX ? maxX - x : 0;\r\n  const deltaY = y < minY ? minY - y : y > maxY ? maxY - y : 0;\r\n\r\n  return [deltaX, deltaY];\r\n};\r\n\r\nconst putCenterBack = (view: paper.View, projSize: paper.Size) => {\r\n  const [deltaX, deltaY] = getCenterTranslate(view, projSize);\r\n  let aniCount = 10;\r\n  const dP = new Point(deltaX, deltaY).divide(-aniCount);\r\n  const move = () => {\r\n    view.translate(dP);\r\n    if (--aniCount > 0) requestAnimationFrame(move);\r\n  };\r\n  move();\r\n};\r\n\r\nconst checkLasso = (items: paper.Item[], selection: paper.Path) => {\r\n  const isInside = (p: paper.Path) => {\r\n    const res = p.subtract(selection, { insert: false, trace: false });\r\n    res.remove();\r\n    return !res.compare(p);\r\n  };\r\n  return items\r\n    .filter((item) => {\r\n      if (!item.name) return false;\r\n      if (!item.bounds.intersects(selection.bounds)) return false;\r\n      if (item instanceof paper.Path) {\r\n        return isInside(item);\r\n      } else {\r\n        const checkedP = new Path.Rectangle(item.bounds);\r\n        checkedP.remove();\r\n        return isInside(checkedP) || selection.isInside(item.bounds);\r\n      }\r\n    })\r\n    .map(({ name }) => name);\r\n};\r\n\r\nconst updateGroupStyle = (items: paper.Item[], updated: Partial<DrawCtrl>) => {\r\n  const { lineWidth, color, highlight } = updated;\r\n  items.forEach((item) => {\r\n    if (item instanceof paper.PointText && color) {\r\n      const newColor = new Color(color);\r\n      item.fillColor = newColor;\r\n    }\r\n\r\n    if (!(item instanceof paper.Path)) return;\r\n\r\n    if (color) {\r\n      const newColor = new Color(color);\r\n      if (item.blendMode === \"multiply\") newColor.alpha = 0.5;\r\n      item.strokeColor = newColor;\r\n    }\r\n\r\n    if (lineWidth) item.strokeWidth = lineWidth;\r\n\r\n    if (!item.strokeColor || highlight === undefined) return;\r\n    item.strokeColor.alpha = highlight ? 0.5 : 1;\r\n    item.blendMode = highlight ? \"multiply\" : \"normal\";\r\n  });\r\n};\r\n\r\nconst getClickedText = (layer: paper.Layer, point: paper.Point) => {\r\n  const hitRes = layer.hitTest(point, {\r\n    class: paper.PointText,\r\n    fill: true,\r\n  });\r\n  if (hitRes?.item instanceof paper.PointText) return hitRes?.item;\r\n};\r\n\r\nconst startText = (point: paper.Point) => {\r\n  return new paper.PointText({\r\n    point: point.add(new Point(0, 50)),\r\n    content: \"Insert text...\",\r\n    fontSize: 50,\r\n    justification: \"center\",\r\n    fillColor: \"#1890ff55\",\r\n  });\r\n};\r\n\r\nconst flattenCP = (cp: paper.Item): paper.Path[] => {\r\n  if (cp instanceof paper.Path) {\r\n    return cp.isEmpty() ? [] : [cp];\r\n  }\r\n  if (cp instanceof paper.CompoundPath) {\r\n    return cp.children.map(flattenCP).flat();\r\n  }\r\n  return [];\r\n};\r\n","import { FC, RefObject, useEffect, useState } from \"react\";\r\nimport {\r\n  CopyOutlined,\r\n  DeleteOutlined,\r\n  PictureOutlined,\r\n  BgColorsOutlined,\r\n  AlignLeftOutlined,\r\n  FontColorsOutlined,\r\n  AlignRightOutlined,\r\n  AlignCenterOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Button, ButtonProps, Modal, Popover, Radio } from \"antd\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\r\nimport { useForceLight } from \"lib/Dark\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { allColors } from \"lib/color\";\r\nimport { DrawRefType } from \"component/Draw\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { saveAs } from \"file-saver\";\r\nimport \"./drawTools.sass\";\r\n\r\nexport const SelectTool: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n  visible: boolean;\r\n}> = ({ drawRef, visible }) => (\r\n  <CSSTransition timeout={300} in={visible} unmountOnExit>\r\n    <SelectToolContent drawRef={drawRef} />\r\n  </CSSTransition>\r\n);\r\n\r\nexport const SelectToolContent: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n}> = ({ drawRef }) => {\r\n  const btnProps: ButtonProps = {\r\n    type: \"text\",\r\n    shape: \"round\",\r\n    size: \"small\",\r\n  };\r\n\r\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\r\n\r\n  const getRaster = () => {\r\n    if (!drawRef.current) return;\r\n    const imageData = drawRef.current.rasterize();\r\n    Modal.confirm({\r\n      title: \"Screenshot\",\r\n      content: <img className=\"raster\" src={imageData} alt=\"raster\" />,\r\n      className: \"raster-modal\",\r\n      icon: <PictureOutlined />,\r\n      okText: \"Save\",\r\n      onOk: () => saveAs(imageData, \"screenshot\"),\r\n    });\r\n  };\r\n\r\n  return createPortal(\r\n    <div className=\"select-tool\">\r\n      <Popover\r\n        trigger=\"click\"\r\n        placement=\"bottom\"\r\n        getPopupContainer={(e) => e.parentElement!}\r\n        destroyTooltipOnHide\r\n        content={\r\n          <PenPanel\r\n            updateDrawCtrl={(updated) => {\r\n              setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\r\n              drawRef.current?.mutateStyle(updated);\r\n            }}\r\n            drawCtrl={currDrawCtrl}\r\n          />\r\n        }\r\n      >\r\n        <Button icon={<BgColorsOutlined />} {...btnProps} />\r\n      </Popover>\r\n      <Button\r\n        icon={<CopyOutlined />}\r\n        onClick={() => drawRef.current?.duplicateSelected()}\r\n        {...btnProps}\r\n      />\r\n      <Button icon={<PictureOutlined />} onClick={getRaster} {...btnProps} />\r\n      <Button\r\n        danger\r\n        icon={<DeleteOutlined />}\r\n        onClick={() => drawRef.current?.deleteSelected()}\r\n        {...btnProps}\r\n      />\r\n    </div>,\r\n    document.querySelector(\".reader.container > header\")!\r\n  );\r\n};\r\n\r\nexport const TextTool: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n  visible: boolean;\r\n}> = ({ visible, drawRef }) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [color, setColor] = useState(allColors[0]!);\r\n  const [align, setAlign] = useState(\"center\");\r\n  const [forceLight] = useForceLight();\r\n\r\n  useEffect(() => {\r\n    const pointText = drawRef.current?.pointText;\r\n    if (!pointText || !visible) return;\r\n    const { name, content, justification, fillColor } = pointText;\r\n    setAlign(justification);\r\n    if (name) {\r\n      setText(content);\r\n      setColor(fillColor?.toCSS(true) ?? allColors[0]!);\r\n    } else {\r\n      setText(\"\");\r\n      setColor(allColors[0]!);\r\n    }\r\n  }, [visible, drawRef]);\r\n\r\n  const fontColorBtn = (\r\n    <Popover\r\n      content={<ColorSelect color={color} setColor={setColor} />}\r\n      overlayStyle={{ width: 200 }}\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n    >\r\n      <Button\r\n        size=\"small\"\r\n        icon={<FontColorsOutlined className=\"font-icon\" style={{ color }} />}\r\n      />\r\n    </Popover>\r\n  );\r\n\r\n  const alignRadio = (\r\n    <Radio.Group\r\n      size=\"small\"\r\n      optionType=\"button\"\r\n      value={align}\r\n      buttonStyle=\"solid\"\r\n      onChange={(e) => setAlign(e.target.value)}\r\n      options={[\r\n        { label: <AlignLeftOutlined />, value: \"left\" },\r\n        { label: <AlignCenterOutlined />, value: \"center\" },\r\n        { label: <AlignRightOutlined />, value: \"right\" },\r\n      ]}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      visible={visible}\r\n      title=\"Insert text\"\r\n      onCancel={() => drawRef.current?.cancelText()}\r\n      onOk={() => {\r\n        const content = text.trim();\r\n        if (!content) return drawRef.current?.cancelText();\r\n        drawRef.current?.submitText(content, color, align);\r\n      }}\r\n      bodyStyle={{ paddingTop: 0 }}\r\n      destroyOnClose\r\n    >\r\n      <div className=\"insert-option\" data-force-light={forceLight}>\r\n        {fontColorBtn}\r\n        {alignRadio}\r\n      </div>\r\n      <TextArea\r\n        size=\"large\"\r\n        rows={3}\r\n        autoFocus\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n      />\r\n    </Modal>\r\n  );\r\n};\r\n","import React, {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport { useDrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { useForceLight } from \"lib/Dark\";\r\nimport { useMemoizedFn as useEvent } from \"ahooks\";\r\nimport { Draw, ActiveToolKey, DrawRefType } from \"component/Draw\";\r\nimport { SelectTool, TextTool } from \"pages/reader/tools/DrawTools\";\r\nimport { once, range } from \"lodash-es\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { DrawState } from \"lib/draw/DrawState\";\r\nimport { Map, Set } from \"immutable\";\r\n\r\nconst PageWrapperRaw: FC<{\r\n  drawState: DrawState;\r\n  teamStateMap?: Map<string, DrawState>;\r\n  thumbnail?: string;\r\n  pdfIndex?: number;\r\n  noteID?: string;\r\n  updateState?: (ds: DrawState) => void;\r\n  onViewChange?: (ratio: number) => void;\r\n  preview?: boolean;\r\n  preload?: boolean;\r\n  ignores?: Set<string>;\r\n  skipInView?: boolean;\r\n}> = ({\r\n  thumbnail,\r\n  drawState,\r\n  teamStateMap,\r\n  updateState,\r\n  pdfIndex,\r\n  noteID = \"\",\r\n  preview = false,\r\n  onViewChange,\r\n  preload = false,\r\n  ignores = Set<string>(),\r\n  skipInView = false,\r\n}) => {\r\n  const threshold = onViewChange && range(0, 1.2, 0.2);\r\n  const [ref, visible, entry] = useInView({ threshold, skip: skipInView });\r\n  useEffect(() => {\r\n    if (!onViewChange) return;\r\n    if (!entry || !visible) return onViewChange(0);\r\n    onViewChange(entry.intersectionRatio);\r\n  }, [visible, entry, onViewChange]);\r\n\r\n  const [fullImg, setFullImg] = useState<string>();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const loadImage = useCallback(\r\n    once(async () => {\r\n      if (!pdfIndex || !noteID) return;\r\n      const { getNotePageImage } = await import(\"lib/note/pdfImage\");\r\n      setFullImg(await getNotePageImage(noteID, pdfIndex));\r\n    }),\r\n    [pdfIndex, noteID]\r\n  );\r\n\r\n  const show = visible || preload;\r\n  useEffect(() => {\r\n    if (!preview && show) loadImage();\r\n  }, [show, preview, loadImage]);\r\n\r\n  const otherStates = useMemo(\r\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\r\n    [teamStateMap, ignores]\r\n  );\r\n\r\n  const imageLoaded = Boolean(fullImg || !pdfIndex);\r\n  const drawShow = show && imageLoaded;\r\n\r\n  const { height, width } = drawState;\r\n  const ratio = height / width;\r\n  const [forceLight] = useForceLight();\r\n\r\n  return (\r\n    <div ref={ref} className=\"page-wrapper\" data-force-light={forceLight}>\r\n      <svg viewBox={`0 0 100 ${ratio * 100}`} />\r\n      {drawShow && (\r\n        <DrawWrapper\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          updateState={updateState}\r\n          imgSrc={fullImg || thumbnail}\r\n          preview={preview}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nPageWrapperRaw.displayName = \"PageWrapper\";\r\nexport const PageWrapper = React.memo(PageWrapperRaw);\r\n\r\nconst DrawWrapper: FC<{\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}> = ({ drawState, updateState, otherStates, preview = false, imgSrc }) => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const [activeTool, setActiveTool] = useState<ActiveToolKey>(\"\");\r\n  const drawRef = useRef<DrawRefType>(null);\r\n\r\n  const handleChange = useEvent(\r\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\r\n      if (!updateState) return;\r\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\r\n      if (newDS === drawState) return;\r\n      updateState(newDS);\r\n    }\r\n  );\r\n\r\n  return preview ? (\r\n    <Draw\r\n      drawState={drawState}\r\n      otherStates={otherStates}\r\n      imgSrc={imgSrc}\r\n      readonly\r\n    />\r\n  ) : (\r\n    <>\r\n      <Draw\r\n        drawState={drawState}\r\n        otherStates={otherStates}\r\n        onChange={handleChange}\r\n        imgSrc={imgSrc}\r\n        drawCtrl={drawCtrl}\r\n        ref={drawRef}\r\n        setActiveTool={setActiveTool}\r\n      />\r\n      <SelectTool drawRef={drawRef} visible={activeTool === \"select\"} />\r\n      <TextTool drawRef={drawRef} visible={activeTool === \"text\"} />\r\n    </>\r\n  );\r\n};\r\nDrawWrapper.displayName = \"DrawWrapper\";\r\n","import { PageWrapper } from \"./PageWrapper\";\r\nimport \"./page-wrapper.sass\";\r\nexport default PageWrapper;\r\n","import localforage from \"localforage\";\r\nimport React, {\r\n  FC,\r\n  PropsWithChildren,\r\n  useContext,\r\n  useDebugValue,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nexport interface DrawCtrl {\r\n  mode: \"draw\" | \"erase\" | \"select\" | \"text\";\r\n  finger: boolean;\r\n  lineWidth: number;\r\n  eraserWidth: number;\r\n  color: string;\r\n  highlight: boolean;\r\n  lasso: boolean;\r\n  pixelEraser: boolean;\r\n  widthList: number[];\r\n}\r\n\r\nexport const defaultWidthList = [10, 20, 30, 50];\r\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\r\n  mode: \"draw\",\r\n  finger: true,\r\n  lineWidth: 10,\r\n  eraserWidth: 10,\r\n  color: \"#000000\",\r\n  highlight: false,\r\n  lasso: true,\r\n  pixelEraser: false,\r\n  widthList: defaultWidthList,\r\n};\r\n\r\nasync function getDrawCtrl() {\r\n  let drawCtrl = await localforage.getItem<DrawCtrl>(\"DRAW_CTRL\");\r\n  if (!drawCtrl) {\r\n    drawCtrl = defaultDrawCtrl;\r\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n  }\r\n  return drawCtrl;\r\n}\r\n\r\nasync function saveDrawCtrl(drawCtrl: DrawCtrl) {\r\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n}\r\n\r\nconst DrawCtrlContext = React.createContext({\r\n  drawCtrl: defaultDrawCtrl,\r\n  updateDrawCtrl: (() => {}) as (updated: Partial<DrawCtrl>) => void,\r\n});\r\n\r\nexport function useDrawCtrl() {\r\n  const { drawCtrl } = useContext(DrawCtrlContext);\r\n  useDebugValue(drawCtrl);\r\n  return drawCtrl;\r\n}\r\n\r\nexport function useUpdateDrawCtrl() {\r\n  const { updateDrawCtrl } = useContext(DrawCtrlContext);\r\n  return updateDrawCtrl;\r\n}\r\n\r\nexport const DrawCtrlProvider: FC<PropsWithChildren> = ({ children }) => {\r\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\r\n  useEffect(() => {\r\n    getDrawCtrl().then(setDrawCtrl);\r\n  }, []);\r\n\r\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\r\n    setDrawCtrl((prev) => {\r\n      const newCtrl = { ...prev, ...updated };\r\n      saveDrawCtrl(newCtrl);\r\n      return newCtrl;\r\n    });\r\n  };\r\n  return (\r\n    <DrawCtrlContext.Provider value={{ drawCtrl, updateDrawCtrl }}>\r\n      {children}\r\n    </DrawCtrlContext.Provider>\r\n  );\r\n};\r\n","export function createVirtualCanvas(width: number, height: number) {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const context = canvas.getContext(\"2d\");\r\n  if (!context) {\r\n    throw new Error(\"can't get virtual canvas context\");\r\n  }\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  return { canvas, context };\r\n}\r\n\r\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  const ctx = canvas.getContext('2d');\r\n  ctx?.clearRect(0, 0, 1, 1);\r\n}\r\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\r\nimport { defaultWidthList, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorCirle } from \"component/ColorCircle\";\r\nimport { WIDTH } from \"lib/draw/DrawState\";\r\nimport { Popover, Segmented, Slider } from \"antd\";\r\nimport { allColors } from \"lib/color\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport IconFont from \"component/IconFont\";\r\nimport { List } from \"immutable\";\r\nimport \"./penPanel.sass\";\r\nimport { useForceLight } from \"lib/Dark\";\r\n\r\nexport const PenPanel: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n}> = ({ updateDrawCtrl, drawCtrl }) => {\r\n  const { highlight, color } = drawCtrl;\r\n  const [panelBlur, setPanelBlur] = useState(false);\r\n\r\n  return (\r\n    <div className=\"pen-panel\" data-blur={panelBlur} data-hi={highlight}>\r\n      <div className=\"pen-status\">\r\n        <WidthSelect\r\n          updateDrawCtrl={updateDrawCtrl}\r\n          drawCtrl={drawCtrl}\r\n          setPanelBlur={setPanelBlur}\r\n        />\r\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\r\n      </div>\r\n      <ColorSelect\r\n        color={color || \"\"}\r\n        setColor={(c) => updateDrawCtrl({ color: c })}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const WidthSelect: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n  setPanelBlur?: Setter<boolean>;\r\n  field?: \"lineWidth\" | \"eraserWidth\";\r\n}> = ({\r\n  updateDrawCtrl,\r\n  drawCtrl,\r\n  setPanelBlur = () => {},\r\n  field = \"lineWidth\",\r\n}) => {\r\n  const currWidth = drawCtrl[field];\r\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\r\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\r\n\r\n  const chosen = useMemo(\r\n    () => widthList.indexOf(currWidth ?? -1),\r\n    [currWidth, widthList]\r\n  );\r\n\r\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\r\n  useEffect(() => {\r\n    if (popShow.includes(true)) setPanelBlur(true);\r\n    else setPanelBlur(false);\r\n  }, [popShow, setPanelBlur]);\r\n\r\n  const realSizeStyle = (width: number) =>\r\n    ({\r\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width})`,\r\n    } as CSSProperties);\r\n\r\n  const [forceLight] = useForceLight();\r\n\r\n  const options = [\r\n    { value: -1, label: null },\r\n    ...widthList.map((width, index) => ({\r\n      value: index,\r\n      label: (\r\n        <Popover\r\n          visible={popShow.get(index)}\r\n          onVisibleChange={(v) => setPopShow((prev) => prev.set(index, v))}\r\n          trigger={chosen === index ? [\"click\"] : []}\r\n          placement=\"bottom\"\r\n          destroyTooltipOnHide\r\n          content={\r\n            <Slider\r\n              min={5}\r\n              max={100}\r\n              className=\"ctrl-slider\"\r\n              defaultValue={width}\r\n              onAfterChange={(w) => {\r\n                if (widthList.includes(w)) {\r\n                  setPopShow((prev) => prev.set(index, false));\r\n                  return updateDrawCtrl({ [field]: w });\r\n                }\r\n                const newWL = widthList.slice();\r\n                newWL[index] = w;\r\n                updateDrawCtrl({ widthList: newWL, [field]: w });\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          <div\r\n            className=\"circle-wrapper\"\r\n            data-force-light={forceLight}\r\n            style={realSizeStyle(width)}\r\n          >\r\n            <ColorCirle className={\"width-circle \" + field} color={color} />\r\n          </div>\r\n        </Popover>\r\n      ),\r\n    })),\r\n  ];\r\n\r\n  return (\r\n    <Segmented\r\n      className=\"width-seg\"\r\n      value={chosen}\r\n      options={options}\r\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 10 })}\r\n    />\r\n  );\r\n};\r\n\r\nconst HighlightSwitch: FC<{\r\n  checked?: boolean;\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ checked = false, updateDrawCtrl }) => {\r\n  return (\r\n    <label className=\"hi-wrapper\">\r\n      <input\r\n        type=\"checkbox\"\r\n        name=\"highlight\"\r\n        checked={checked}\r\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\r\n      />\r\n      <div className=\"hi-switch\">\r\n        <IconFont type=\"icon-Highlight\" />\r\n      </div>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport const ColorSelect: FC<{\r\n  color: string;\r\n  setColor: (color: string) => void;\r\n}> = ({ setColor, color }) => {\r\n  const [forceLight] = useForceLight();\r\n  return (\r\n    <div className=\"color-select\" data-force-light={forceLight}>\r\n      {allColors.map((c) => (\r\n        <label key={c}>\r\n          <input\r\n            checked={color === c}\r\n            type=\"radio\"\r\n            name=\"color\"\r\n            onChange={(e) => e.target.checked && setColor(c)}\r\n          />\r\n          <div\r\n            data-color={c}\r\n            className=\"circle\"\r\n            style={{ backgroundColor: c, borderColor: c }}\r\n          />\r\n        </label>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n"],"names":["createFromIconfontCN","scriptUrl","getRotateCursorImage","cache","Map","createVirtualCanvas","canvas","context","image","Image","src","angle","Math","round","cached","get","translate","rotate","PI","drawImage","data","toDataURL","clearRect","resetTransform","set","getRotateCurcor","usePreventTouch","allowFinger","isTouch","useRef","checkPoniter","e","isPrimary","current","pointerType","preventTouch","touch","touches","touchType","isApplePencil","length","isEventValid","stopPropagation","onPointerDownCapture","onPointerMoveCapture","onTouchStartCapture","onTouchMoveCapture","Path","paper","Size","Point","Group","Color","Raster","Layer","DrawRaw","React","ref","drawState","otherStates","onChange","drawCtrl","defaultDrawCtrl","readonly","imgSrc","setActiveTool","width","height","mode","finger","lasso","eraserWidth","canvasEl","scope","useState","group","setGroup","usePaperItem","path","setPath","rect","setRect","rotateHandle","setRotateHandle","useEffect","cvs","scp","setup","settings","handleSize","hitTolerance","forEach","visible","project","layers","activate","Tool","view","remove","releaseCanvas","rects","paintRects","r","useSize","ratio","zero","viewSize","multiply","scale","l","update","raster","addChild","sendToBack","onLoad","fitBounds","bringToFront","mergedStrokes","useMemo","DrawState","getStrokeList","tempGroup","layer","stroke","self","hasStroke","uid","item","paintStroke","push","removeChildren","hitRef","selected","setSelected","paperMode","chosenIDs","setChosenIDs","chosenItems","IDSet","Set","filter","has","name","resetSelect","useCallback","undefined","downPath","startStroke","downRect","startRect","point","handleDown","draw","erase","select","contains","hitRes","hitTest","segments","text","t","getClickedText","startText","setPointText","dragPath","add","smooth","handleDrag","x","y","s1","s2","s3","segment","center","bounds","axis","subtract","line","setCursor","moveP","baseP","next","diagonal","strokeWidth","rBaseP","delta","pointText","topCenter","bottomRight","tool","maxDistance","erased","replaced","handelToolDrag","hitTestAll","class","tolerance","topItem","parent","pixelEraser","radius","circle","Circle","sub","trace","replaceWith","opacity","guide","handleUp","isEmpty","simplify","pathData","exportJSON","prev","items","Array","from","clear","splitters","map","flattenCP","i","erasedList","selection","abs","area","closePath","moveDash","checkLasso","link","lastSegment","updateMutation","handleSelectedCursor","cursor","lineWidth","size","half","getCircleCursor","handleMove","handleKeyUp","includes","key","deleteSelected","handler","onMouseDown","onMouseDrag","onMouseUp","onMouseMove","onKeyUp","mutations","p","mutateStyle","updated","updateGroupStyle","duplicateSelected","transP","divide","copies","clone","rasterize","g","addTo","insert","cancelText","submitText","color","justification","content","fillColor","useImperativeHandle","preventDefault","document","addEventListener","removeEventListener","usePinch","memo","offset","first","last","origin","lastScale","lastOrigin","elPos","originRawP","getBoundingClientRect","originViewP","originPorjP","viewToProject","dScale","aniCount","pow","scaleView","requestAnimationFrame","putCenterBack","zoom","scaleBounds","max","min","rubberband","target","touchHandler","className","style","displayName","Draw","tuple","useDebugValue","importJSON","console","error","l0","l1","l2","bgRect","Rectangle","clip1","clip2","clipped","onFrame","highlight","strokeColor","alpha","blendMode","strokeJoin","strokeCap","dashOffset","dashArray","projSize","viewW","viewH","projW","projH","minX","minY","maxX","maxY","getCenterTranslate","deltaX","deltaY","dP","move","isInside","res","compare","intersects","checkedP","newColor","fill","fontSize","cp","children","flat","SelectTool","drawRef","CSSTransition","timeout","in","unmountOnExit","SelectToolContent","btnProps","type","shape","currDrawCtrl","setCurrDrawCtrl","createPortal","trigger","placement","getPopupContainer","parentElement","destroyTooltipOnHide","PenPanel","updateDrawCtrl","icon","BgColorsOutlined","CopyOutlined","onClick","PictureOutlined","imageData","Modal","title","alt","okText","onOk","saveAs","danger","DeleteOutlined","querySelector","TextTool","setText","allColors","setColor","align","setAlign","useForceLight","forceLight","toCSS","fontColorBtn","overlayStyle","FontColorsOutlined","alignRadio","optionType","value","buttonStyle","options","label","AlignLeftOutlined","AlignCenterOutlined","AlignRightOutlined","onCancel","trim","bodyStyle","paddingTop","destroyOnClose","TextArea","rows","autoFocus","PageWrapperRaw","thumbnail","teamStateMap","updateState","pdfIndex","noteID","preview","onViewChange","preload","ignores","skipInView","threshold","range","useInView","skip","entry","intersectionRatio","fullImg","setFullImg","loadImage","once","getNotePageImage","show","deleteAll","toList","toArray","imageLoaded","Boolean","drawShow","viewBox","DrawWrapper","PageWrapper","useDrawCtrl","activeTool","handleChange","useEvent","arg","newDS","defaultWidthList","widthList","getDrawCtrl","localforage","saveDrawCtrl","DrawCtrlContext","useContext","useUpdateDrawCtrl","DrawCtrlProvider","setDrawCtrl","then","Provider","newCtrl","createElement","getContext","Error","ctx","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","c","field","currWidth","chosen","indexOf","List","popShow","setPopShow","realSizeStyle","WIDTH","index","onVisibleChange","v","defaultValue","onAfterChange","w","newWL","slice","IconFont","backgroundColor","borderColor"],"sourceRoot":""}