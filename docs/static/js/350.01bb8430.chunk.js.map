{"version":3,"file":"static/js/350.01bb8430.chunk.js","mappings":"kYAYaA,EAAsC,CACjDC,QAAQ,EACRC,UAAW,GACXC,YAAa,GACbC,MAAO,UACPC,WAAW,GAGN,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACiBC,IAAAA,QAAoB,aADrC,UACDC,EADC,8BAGHA,EAAWR,EAHR,SAIGO,IAAAA,QAAoB,YAAaC,GAJpC,gCAMEA,GANF,kEASP,aAAO,OAAP,oBAAO,WAA4BA,GAA5B,iFACCD,IAAAA,QAAoB,YAAaC,GADlC,kE,kHCnBDC,EAA8C,CAClDC,QAAQC,EAAAA,EAAAA,MACRC,WAAWC,EAAAA,EAAAA,MACXC,WAAWD,EAAAA,EAAAA,OAIPE,GAAiBC,EAAAA,EAAAA,IAAOP,GAIjBQ,EAAb,WACE,WACUC,EACDC,IACN,oBAFOD,UAAAA,EAER,KADOC,OAAAA,EAHX,2CAuBE,WACE,OAAOC,KAAKF,YAxBhB,uBA2BE,WACE,OAAOE,KAAKC,eAAeC,IAAI,YA5BnC,yBA+BE,SAAYC,GACV,OAAOH,KAAKI,YAAYF,IAAIC,KAhChC,0BAmCE,WACE,OAAOH,KAAKC,eAAeC,IAAI,eApCnC,0BAuCE,WACE,OAAOF,KAAKC,eAAeC,IAAI,eAxCnC,sBA2CE,SAASC,EAAgBE,GACvB,IAAMC,EAASN,KAAKO,YAAYJ,GAChC,IAAKG,GAAUA,IAAWD,EAAW,OAAOL,KAC5C,IAAIQ,EAAaR,KAAKC,eACnBQ,OAAO,UAAU,SAACC,GAAD,OAAOA,EAAEC,IAAIR,EAAQE,MACtCI,OAAO,aAAa,SAACG,GAAD,OAAOA,EAAEC,KAAKV,MAClCW,OAAO,aAEFf,EAAWM,EAAXN,OAGR,OAAO,IAAIF,EAASW,EAFFT,IAAM,kBAASA,GAAT,IAAiBI,OAAAA,OApD7C,sBAyDE,SAASA,EAAgBY,GAAoC,IAAhBC,EAAe,uDAAPC,EAAAA,GAC3CC,EAAiBH,EAAjBG,MAAOC,EAAUJ,EAAVI,MACTC,EAAQC,EAAAA,GAAAA,aAAuBH,EAAOF,EAAOA,EAAQG,GACrDX,EAAaR,KAAKC,eAAeQ,OAAO,UAAU,SAACC,GAAD,OACtDA,EAAEC,IAAIR,EAAQiB,MAEhB,OAAO,IAAIvB,EAASW,KA/DxB,yBAkEE,SAAYL,GACV,OAAO,IAAIN,EACTG,KAAKC,eAAeQ,OAAO,UAAU,SAACC,GAAD,OAAOA,EAAEI,OAAOX,SApE3D,wBAwEE,WACE,OAAOH,KAAKsB,eAAeC,KAAO,IAzEtC,wBA4EE,WACE,OAAOvB,KAAKwB,eAAeD,KAAO,IA7EtC,kBAgFE,WACE,IAAKvB,KAAKyB,aAAc,OAAOzB,KAC/B,IAAM0B,EAAU1B,KAAKsB,eAAeK,OAC9BrB,EAASoB,GAAW1B,KAAKO,YAAYmB,GAC3C,IAAKpB,EAAQ,OAAON,KAEpB,IAAMoB,EAAQC,EAAAA,GAAAA,KAAef,GACrBP,EAAWqB,EAAXrB,OACF6B,EAAY7B,IAAM,QAAMI,OAAQuB,GAAY3B,GAElD,OAAO,IAAIF,EACTG,KAAKC,eACFQ,OAAO,aAAa,SAACC,GAAD,OAAOA,EAAEmB,SAC7BpB,OAAO,aAAa,SAACC,GAAD,OAAOA,EAAEG,KAAKa,MAClCjB,OAAO,UAAU,SAACC,GAAD,OAAOA,EAAEC,IAAIe,EAASN,MAC1CQ,KA/FN,kBAmGE,WACE,IAAK5B,KAAK8B,aAAc,OAAO9B,KAC/B,IAAM0B,EAAU1B,KAAKwB,eAAeG,OAC9BrB,EAASoB,GAAW1B,KAAKO,YAAYmB,GAC3C,IAAKpB,EAAQ,OAAON,KAEpB,IAAMoB,EAAQC,EAAAA,GAAAA,KAAef,GACrBP,EAAWqB,EAAXrB,OACF6B,EAAY7B,IAAM,QAAMI,OAAQuB,GAAY3B,GAElD,OAAO,IAAIF,EACTG,KAAKC,eACFQ,OAAO,aAAa,SAACC,GAAD,OAAOA,EAAEmB,SAC7BpB,OAAO,aAAa,SAACC,GAAD,OAAOA,EAAEG,KAAKa,MAClCjB,OAAO,UAAU,SAACC,GAAD,OAAOA,EAAEC,IAAIe,EAASN,MAC1CQ,KAlHN,uBAsHE,WAA8C,IAAD,EACrCzB,EAAM,UAAGH,KAAKD,cAAR,aAAG,EAAaI,OACtB4B,EAAK5B,GAAUH,KAAKO,YAAYJ,GACtC,OAAO4B,EAAK,CAAC5B,EAAQ4B,QAAMC,KAzH/B,6BAME,SAAsBC,GACpB,OAAO,IAAIpC,EAASF,IAAiBgB,IAAI,UAAUpB,EAAAA,EAAAA,IAAI0C,OAP3D,6BAUE,SACEC,GAEC,IADDlB,EACA,uDADQC,EAAAA,GAEFkB,EAAUC,OAAOD,QAAQD,GAC/B,OAAOrC,EAASwC,eACdF,EAAQG,KAAI,+BAAEC,EAAF,YAASrB,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,MAAhB,MAA6B,CACvCoB,EACAlB,EAAAA,GAAAA,aAAuBH,EAAOF,EAAOA,EAAQG,YAlBrD,K,SCdO,SAASqB,EAAeP,EAAWQ,EAAaC,GACrD,IAAMC,EAAYV,EAAKW,QAAQH,GACzBI,EAAOZ,EAAKa,QAClB,OAAmB,IAAfH,GACJE,EAAKE,OAAOJ,EAAY,EAAG,EAAGD,GADDG,E,yDCJlBG,EAAgB,WAC3B,IAAQC,GAAiBC,EAAAA,EAAAA,YAAWC,IAA5BF,aACAG,GAAcF,EAAAA,EAAAA,YAAWG,IAAzBD,UACFE,EAAQC,QAAQH,IAAcA,EAAUI,QAC9C,OACE,gBAAKC,UAAWC,GAAAA,CAAW,kBAAmB,CAAEJ,MAAAA,IAAhD,UACE,SAAC,IAAD,CACEK,KAAK,SACLC,MAAM,SAACC,EAAA,EAAD,IACNC,OAAK,EACLC,QAASd,EAJX,yB,4HCDS,SAASe,EAAT,GAAqD,IAA7BC,EAA4B,EAA5BA,MACrC,GAAkCC,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EATCC,OAQYL,GAAS,EAAIA,EAAQE,GAPrCI,SAAS,EAAG,KACZC,MAAM,IACNlC,KAAI,SAAC5B,GAAD,OAAO+D,OAAO/D,MAQrB,SAASgE,IACPN,EAAaO,KAAKC,MAAsB,IAAhBD,KAAKE,WAQ/B,OANAC,EAAAA,EAAAA,YAAU,WACR,IAAe,IAAXb,EAAc,OAAOG,EAAa,MACtC,IAAMW,EAAQC,WAAWN,EAAa,KACtC,OAAO,kBAAMO,aAAaF,MACzB,CAACd,KAGF,gBAAKR,UAAWC,GAAAA,CAAW,gBAAiB,CAAEwB,UAAqB,IAAXjB,IAAxD,SACGI,EAAO/B,KAAI,SAAC6C,EAAGC,GAAJ,OACV,SAACC,EAAD,CAAiBC,MAAOH,GAAZC,QAMpB,SAASC,EAAT,GAA8C,IAA7BC,EAA4B,EAA5BA,MACf,OAAMA,GAAS,GAAKA,GAAS,GAGtB,gBAAK7B,UAAU,QAAf,SAAwB6B,KAFtB,gBAAK7B,UAAU,QAAf,e,0HClCX,IAAe8B,E,SAAAA,GAAqB,CAClCC,UAAW,kD,YC8BPC,GAAiB,SAAC,GAMjB,IALLC,EAKI,EALJA,UACAC,EAII,EAJJA,aAKA,GAAmCzC,EAAAA,EAAAA,YAAWG,IAAtCD,EAAR,EAAQA,UAAWwC,EAAnB,EAAmBA,YACnB,GAAoC1C,EAAAA,EAAAA,YAAWC,IAAvC0C,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YACdC,GAASC,EAAAA,EAAAA,QAAoC,IAC7CC,GAASD,EAAAA,EAAAA,UAYTE,GAAaC,EAAAA,EAAAA,UACjB,kBAAe,OAAT/C,QAAS,IAATA,OAAA,EAAAA,EAAWgD,MAAK,SAACjG,GAAD,OAAYyF,EAAYS,IAAIlG,QAAY,KAC9D,CAACiD,EAAWwC,IAUd,OAPAd,EAAAA,EAAAA,YAAU,WAAO,IAAD,QACd,UAAAiB,EAAOO,QAAQJ,UAAf,SAA4BK,iBAC5B,IAAMC,GAAa,UAAAT,EAAOO,QAAQJ,UAAf,eAA4BO,eAAgB,EACzDC,GAAa,UAAAT,EAAOK,eAAP,eAAgBG,eAAgB,EACnD,UAAAR,EAAOK,eAAP,SAAgBK,SAAS,GAAID,EAAa,EAAIF,EAAa,KAC1D,KAGD,iBAAK/C,UAAU,oBAAf,WACE,SAACmD,GAAD,CAAalB,UAAWA,EAAWC,aAAcA,KACjD,SAAC,MAAD,CAAiBkB,UAzBH,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,YAC3B,GAAKA,GAAgB3D,EAArB,CACA,IAAe4D,EAAcF,EAArBG,MACOC,EAAYH,EAAnBE,MACF9G,EAASiD,EAAU4D,GACnBG,EJlDH,SAAqBlF,EAAW+E,EAAmBE,GACxD,IAAME,EAASnF,EAAKa,QACpB,EAAkBsE,EAAOrE,OAAOiE,EAAW,GAApCK,GAAP,eAEA,OADAD,EAAOrE,OAAOmE,EAAS,EAAGG,GACnBD,EI8CYE,CAASlE,EAAW4D,EAAWE,GAChDpB,EAAYqB,GAAU,GACtBI,uBAAsB,kBAAM1B,EAAW1F,QAkBrC,UACE,SAAC,MAAD,CAAWqH,YAAY,YAAvB,SACG,gBAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,SAAUC,EAA7B,EAA6BA,YAA7B,OACC,iCACElE,UAAU,YACVmE,IAAK,SAACC,GACJH,EAASG,GACLA,IAAG5B,EAAOK,QAAUuB,KAEtBJ,GANN,qBAQGrE,QARH,IAQGA,OARH,EAQGA,EAAWd,KAAI,SAACwF,EAAKb,GAAN,OACd,SAACc,GAAD,CAEED,IAAKA,EACLE,KAAMtC,EACNuC,UAAWhB,EACXf,WAAYA,EACZH,OAAQA,EAAOO,SALVwB,MAQRH,EACc,QAAdjC,IAAuB,SAAC1C,EAAD,iBAShC+E,GAMD,SAAC,GAAkD,IAAhDD,EAA+C,EAA/CA,IAAKG,EAA0C,EAA1CA,UAAWD,EAA+B,EAA/BA,KAAM9B,EAAyB,EAAzBA,WAAYH,EAAa,EAAbA,OACxC,GAAyC7C,EAAAA,EAAAA,YAAWG,IAA5C6E,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAAWjG,EAA7B,EAA6BA,QAC7B,GAAyCgB,EAAAA,EAAAA,YAAWC,IAA5C0C,EAAR,EAAQA,WAAYuC,EAApB,EAAoBA,iBACdC,EAAOnG,GAAWA,EAAQ4F,GAC1BzH,EAAS,OAAG6H,QAAH,IAAGA,OAAH,EAAGA,EAAU3H,YAAYuH,GAClCQ,EAAY,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAWI,gBAAgBT,GAChD,IAAKO,IAAShI,EAAW,OAAO,KAEhC,GACW,YAAT2H,GACA3H,EAAUmI,aACRF,GAAgBA,EAAaG,OAAM,SAAC1G,GAAD,OAAQA,EAAGyG,cAEhD,OAAO,KACF,GAAa,WAATR,IAAsBK,EAAKK,OACpC,OAAO,KAGT,IAAMC,EAAe,SAACd,GACpBO,EAAiBN,GACjBD,EAAEe,mBAEE/F,EAAOqD,IAAe4B,EACtBe,EAAwB,QAATb,EAErB,OACE,SAAC,MAAD,CACEc,YAAahB,EACbb,MAAOgB,EACPc,eAAgBF,EAHlB,SAKG,cAGK,IAFFnB,EAEC,EAFDA,SAAUsB,EAET,EAFSA,eAAgBC,EAEzB,EAFyBA,gBACdC,EACX,EADDC,WAEMC,EAAkBf,EAAlBe,MAAOV,EAAWL,EAAXK,OACf,OACE,yCACEd,IAAK,SAACC,GACJH,EAASG,GACLA,IAAG9B,EAAO+B,GAAOD,IAEvBpE,UAAWC,GAAAA,CAAW,OAAQ,CAAEb,KAAAA,EAAMqG,KAAAA,IACtCnF,QAAS,kBAAM8B,EAAWiC,KACtBkB,GACAC,GARN,eAUE,SAACI,GAAD,CACEvB,IAAKA,EACLzH,UAAWA,EACXiI,aAAcA,EACdgB,UAAWF,EACXG,SAAO,KAET,iBACE9F,UAAWC,GAAAA,CAAW,WAAY,CAAEgF,OAAAA,IACpCc,eAAgBb,KAElB,iBAAMlF,UAAU,QAAhB,SAAyBwE,EAAY,KACrC,SAACwB,GAAD,CAAe3B,IAAKA,YAQ1B2B,GAAgB,SAAC,GAA8B,IAA5B3B,EAA2B,EAA3BA,IACvB,GAA8B5D,EAAAA,EAAAA,WAAS,GAAvC,eAAOwF,EAAP,KAAgBC,EAAhB,KACA,GAAgCzG,EAAAA,EAAAA,YAAWC,IAAnCyG,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,WACTC,EAASC,GAAAA,EAAAA,KAEXC,GACJ,UAAC,KAAD,CACEjG,QAAS,YAAwB,IAArBxB,EAAoB,EAApBA,IAAK0H,EAAe,EAAfA,SACH,QAAR1H,EACFqH,EAAQ9B,GACS,SAARvF,EACTqH,EAAQ9B,GAAK,GACI,WAARvF,GACTsH,EAAW/B,GAEbmC,EAASrB,kBACTe,GAAW,IAVf,WAaE,SAACG,EAAD,CAAgBlG,MAAM,SAACC,EAAA,EAAD,IAAtB,qBAAU,QAGV,SAACiG,EAAD,CAAiBlG,MAAM,SAACsG,GAAA,EAAD,IAAvB,sBAAU,SAGV,SAACJ,EAAD,CAAmBK,QAAM,EAACvG,MAAM,SAACwG,GAAA,EAAD,IAAhC,mBAAU,aAKd,OACE,SAAC,IAAD,CACEC,QAASL,EACTM,QAAQ,QACRC,UAAU,OACVC,QAASd,EACTe,gBAAiBd,EACjBe,sBAAoB,EANtB,UAQE,iBACEjH,UAAU,SACV+F,eAAgB,SAAC3B,GACf8B,GAAW,SAACgB,GAAD,OAAWA,KACtB9C,EAAEe,mBAJN,UAOE,SAACgC,GAAA,EAAD,SAMFhE,GAAc,SAAC,GAMd,IALLlB,EAKI,EALJA,UACAC,EAII,EAJJA,aAKQkF,EAAYC,GAAAA,EAAAA,QACpB,OACE,UAAC,KAAD,CACErH,UAAU,OACViC,UAAWA,EACXqF,SAAUpF,EACVqF,aAAc,GACdzJ,KAAK,QACL0J,UAAQ,EANV,WAQE,SAACJ,EAAD,CAASK,KAAK,SAAC,GAAD,CAAUvH,KAAK,mBAAwB,QACrD,SAACkH,EAAD,CAASK,KAAK,SAAC,GAAD,CAAUvH,KAAK,oBAAyB,WACtD,SAACkH,EAAD,CAASK,KAAK,SAAC,GAAD,CAAUvH,KAAK,gBAAqB,eAKzC,SAASwH,KACtB,OAA0BjH,EAAAA,EAAAA,WAAS,GAAnC,eAAOkH,EAAP,KAAcC,EAAd,KACA,GAAkCnH,EAAAA,EAAAA,UAAiB,OAAnD,eAAOwB,EAAP,KAAkBC,EAAlB,KACM2F,EAAQ,CACZC,IAAK,YACLC,OAAQ,YACRC,QAAS,SACT/F,GAEF,OACE,iCACE,SAAC,IAAD,CACE/B,KAAK,OACLC,MAAM,SAAC8H,GAAA,EAAD,IACN3H,QAAS,kBAAMsH,GAAS,SAACV,GAAD,OAAWA,SAErC,SAAC,KAAD,CACEH,QAASY,EACTO,QAAS,kBAAMN,GAAS,IACxBrK,MAAO,IACPsK,MAAOA,EACPM,WAAW,SAACC,GAAA,EAAD,IACXC,UAAW,CAAEC,QAAS,EAAGC,SAAU,UACnCC,gBAAc,EAPhB,UASE,SAACxG,GAAD,CAAgBC,UAAWA,EAAWC,aAAcA,S,qLC3N7C,SAASuG,GAAT,GAQX,IAPFC,EAOC,EAPDA,WACAC,EAMC,EANDA,WACAC,EAKC,EALDA,YAMA,GACEnJ,EAAAA,EAAAA,YAAWG,IADLiJ,EAAR,EAAQA,MAAOpE,EAAf,EAAeA,SAAUqE,EAAzB,EAAyBA,OAAQvE,EAAjC,EAAiCA,KAAM5I,EAAvC,EAAuCA,SAEvC,GAAiC8D,EAAAA,EAAAA,YAAWC,IAApCqJ,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,QACb5N,EAAWO,EAAXP,OAEF6N,GAAMC,EAAAA,EAAAA,MAENC,EAAiB,SAACC,GACtBL,GAAY,SAAC7B,GAAD,eAAC,UAAeA,GAASkC,OAgBvC,OAbA/H,EAAAA,EAAAA,YAAU,WACR,GAAa,aAATkD,EAQF,OAPA8E,EAAAA,GAAAA,KAAa,CACXrJ,UAAW,iBACXG,MAAM,SAACmJ,GAAA,EAAD,CAAcC,MAAO,CAAEC,QAAS,UACtC5C,SAAS,SAAC6C,GAAD,CAAYT,QAASA,IAC9BU,SAAU,EACV5K,IAAK,aAEA,kBAAMuK,EAAAA,GAAAA,QAAgB,eAE9B,CAAC9E,KAGF,+BACE,iBAAKvE,UAAU,OAAf,WACE,SAAC,IAAD,CACEE,KAAK,OACLI,QAAS,kBAAM2I,EAAI,MACnB9I,MAAM,SAACwJ,GAAA,EAAD,CAAYJ,MAAO,CAAEK,QAAS,SAEtC,mBACA,SAAC,IAAD,CACE1J,KAAK,OACLF,UAAU,OACVM,QAASsI,EACTnH,SAAUoH,EACV1I,MAAM,SAAC0J,GAAA,EAAD,UAGV,iBAAK7J,UAAU,SAAf,WACE,SAAC,IAAD,CACEE,KAAK,OACL4J,MAAM,SACN3J,MAAM,SAAC4J,GAAA,EAAD,IACNzJ,QAASoI,EACTjH,WAAU,OAACgD,QAAD,IAACA,GAAAA,EAAUzG,iBAEvB,SAAC,IAAD,CACEgC,UAAU,OACVE,KAAK,OACL4J,MAAM,SACN3J,MAAM,SAAC6J,GAAA,EAAD,IACN1J,QAASqI,EACTlH,WAAU,OAACgD,QAAD,IAACA,GAAAA,EAAUpG,iBAEvB,mBACA,SAAC4L,GAAD,CAAWd,eAAgBA,KAC3B,SAACe,GAAD,CAAcf,eAAgBA,KAC9B,SAAC,IAAD,CACEjJ,KAAM,CAAC,SAAU,YAAYiK,SAAS5F,GAAQ,UAAY,OAC1DuF,MAAM,SACNxJ,QAAS,kBAAM0I,EAAQ,WACvB7I,MAAM,SAACiK,GAAA,EAAD,OAER,SAAC,IAAD,CACEpK,UAAU,SACVE,KAAM9E,EAAS,UAAY,OAC3BiP,MAAOjP,EACP0O,MAAM,SACNxJ,QAAS,kBAAM6I,EAAe,CAAE/N,QAASA,KACzC+E,MAAM,SAAC,GAAD,CAAUD,KAAK,sBAGzB,iBAAKF,UAAU,QAAf,UACG8I,IAAU,SAACwB,GAAD,IACVxB,IAAU,SAACyB,GAAD,CAAU3B,YAAaA,KAClC,mBACA,SAAClB,GAAD,UAMR,IAAMuC,GAAY,SAAC,GAIZ,IAHLd,EAGI,EAHJA,eAIQ5E,GAAS9E,EAAAA,EAAAA,YAAWG,IAApB2E,KACAyE,GAAYvJ,EAAAA,EAAAA,YAAWC,IAAvBsJ,QACR,MAAgB,SAATzE,GACL,SAAC,IAAD,CACEqC,SAAS,SAAC4D,GAAD,CAAUrB,eAAgBA,IACnCtC,QAAQ,QACRC,UAAU,SACV2D,kBAAmB,SAACrG,GAAD,OAAOA,GAC1B6C,sBAAoB,EALtB,UAOE,SAAC,IAAD,CAAQ/G,KAAK,UAAU4J,MAAM,SAAS3J,MAAM,SAACuK,GAAA,EAAD,SAG9C,SAAC,IAAD,CACExK,KAAK,OACL4J,MAAM,SACNxJ,QAAS,kBAAM0I,EAAQ,SACvB7I,MAAM,SAACuK,GAAA,EAAD,OAKNF,GAAW,SAAC,GAIX,IAHLrB,EAGI,EAHJA,eAIA,GAEI1J,EAAAA,EAAAA,YAAWG,IADbjE,SAAYN,EADd,EACcA,UAAWG,EADzB,EACyBA,UAEzB,GAA0CiF,EAAAA,EAAAA,UAASpF,GAAnD,eAAOsP,EAAP,KAAsBC,EAAtB,KAEA,OACE,iBAAK5K,UAAU,YAAf,WACE,iBAAKA,UAAU,aAAf,WACE,SAAC,IAAD,CACE6K,IAAK,EACLC,IAAK,IACLtK,MAAOmK,EACPrD,SAAUsD,EACVG,cAAe,SAAC1P,GAAD,OAAe8N,EAAe,CAAE9N,UAAAA,QAEjD,SAAC,IAAD,CACE6E,KAAM1E,EAAY,UAAY,OAC9B6O,MAAO7O,EACPsO,MAAM,SACN3J,MAAM,SAAC,GAAD,CAAUD,KAAK,mBACrBI,QAAS,kBAAM6I,EAAe,CAAE3N,WAAYA,WAGhD,SAACwP,GAAD,CAAa7B,eAAgBA,QAK7B6B,GAAc,SAAC,GAId,IAHL7B,EAGI,EAHJA,eAKc5N,GACVkE,EAAAA,EAAAA,YAAWG,IADbjE,SAAYJ,MAGd,OACE,gBAAKyE,UAAU,eAAf,SACGiL,EAAAA,GAAAA,KAAW,SAACC,GAAD,OACV,8BACE,kBACEC,QAAS5P,IAAU2P,EACnBhL,KAAK,QACLkL,KAAK,QACL9D,SAAU,kBAAM6B,EAAe,CAAE5N,MAAO2P,QAE1C,gBACElL,UAAU,SACVuJ,MAAO,CAAE,iBAAkB2B,OATnBA,SAiBdhB,GAAe,SAAC,GAIf,IAHLf,EAGI,EAHJA,eAIQH,GAAYvJ,EAAAA,EAAAA,YAAWC,IAAvBsJ,QACR,GAGIvJ,EAAAA,EAAAA,YAAWG,IAFb2E,EADF,EACEA,KACYjJ,EAFd,EAEEK,SAAYL,YAEd,GAA8CmF,EAAAA,EAAAA,UAASnF,GAAvD,eAAO+P,EAAP,KAAwBC,EAAxB,KAEM1E,GACJ,gBAAK5G,UAAU,YAAf,UACE,SAAC,IAAD,CACE6K,IAAK,EACLC,IAAK,IACLtK,MAAO6K,EACP/D,SAAUgE,EACVP,cAAe,SAACzP,GAAD,OAAiB6N,EAAe,CAAE7N,YAAAA,SAIvD,MAAgB,UAATiJ,GACL,SAAC,IAAD,CACEqC,QAASA,EACTC,QAAQ,QACRC,UAAU,SACV2D,kBAAmB,SAACrG,GAAD,OAAOA,GAC1B6C,sBAAoB,EALtB,UAOE,SAAC,IAAD,CACE/G,KAAK,UACL4J,MAAM,SACN3J,MAAM,SAAC,GAAD,CAAUD,KAAK,qBAIzB,SAAC,IAAD,CACEA,KAAK,OACL4J,MAAM,SACNxJ,QAAS,kBAAM0I,EAAQ,UACvB7I,MAAM,SAAC,GAAD,CAAUD,KAAK,mBAKrBuJ,GAED,SAAC,GAAiB,IAAfT,EAAc,EAAdA,QACAuC,EAA2B,CAC/BrL,KAAM,OACN4J,MAAO,SAET,OACE,iCACE,SAAC,KAAD,QAAQ3J,MAAM,SAACqL,GAAA,EAAD,KAA4BD,KAC1C,SAAC,KAAD,QAAQpL,MAAM,SAACsL,GAAA,EAAD,KAA6BF,KAC3C,SAAC,KAAD,QACE7E,QAAM,EACNvG,MAAM,SAACwG,GAAA,EAAD,IACNrG,QAAS,kBAAM0I,EAAQ,YACnBuC,QAMNG,GAAuD,SAAC,GAGvD,IAFLC,EAEI,EAFJA,SAEI,IADJC,KAAAA,OACI,SACIC,EAA6BF,EAA7BE,SAAUC,EAAmBH,EAAnBG,OAAQC,EAAWJ,EAAXI,OAC1B,GAAgCtM,EAAAA,EAAAA,YAAWuM,EAAAA,SAAnCC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,WACX3Q,GAAQmH,EAAAA,EAAAA,UAAQ,kBAAMyJ,EAAAA,EAAAA,IAAeL,KAAS,CAACA,IAC/CM,EAAUH,EAAQrJ,IAAIkJ,KAAYF,EASxC,OACE,iBAAK5L,UAAU,YAAf,WACE,SAAC,IAAD,CACEA,UAAU,SACVlC,KAAK,QACLyL,MAAO,CAAE8C,gBAAiB9Q,EAAOqO,QAASmC,EAAS,EAAI,IAHzD,SAKGF,EAASxM,MAAM,EAAG,MAErB,iBAAMW,UAAU,YAAhB,SAA6B6L,IAC5BD,GACC,SAAC,IAAD,CAAK5L,UAAU,SAAf,iBAEA,SAAC,IAAD,CACEE,KAAK,OACLC,KAAMiM,GAAU,SAACE,GAAA,EAAD,KAA2B,SAACC,GAAA,EAAD,IAC3CjM,QAvBa,WACnB4L,GAAW,SAAChF,GACV,OAAIA,EAAKtE,IAAIkJ,GAAgB5E,EAAK7J,OAAOyO,GAClC5E,EAAKsF,IAAIV,aA2BtB,SAASxB,KACP,OAA+C7K,EAAAA,EAAAA,YAAWuM,EAAAA,SAAlDS,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,UAC3BC,EAAOC,OAAOC,SAASC,KAWvBC,GAAWvK,EAAAA,EAAAA,UAAQ,WACvB,IAAMwK,EAASvO,OAAOuO,OAAOR,GACvBS,GAASC,EAAAA,EAAAA,MACTC,EAAWX,EAAQS,GACnB3O,EAAO6O,EAAW,CAACA,GAAY,GAKrC,OAJA7O,EAAKpB,KAAL,MAAAoB,GAAI,OACC0O,EAAOI,QAAO,gBAAGvB,EAAH,EAAGA,OAAQD,EAAX,EAAWA,OAAX,OAAwBC,GAAUD,IAAWqB,MAD5D,eAECD,EAAOI,QAAO,gBAAGvB,EAAH,EAAGA,OAAQD,EAAX,EAAWA,OAAX,OAAyBC,GAAUD,IAAWqB,QAE1D3O,IACN,CAACkO,IACEa,EAAYN,EAASK,QAAO,SAACE,GAAD,OAAOA,EAAEzB,UAAQhM,OAE7C6G,GACJ,iBAAK5G,UAAU,eAAf,UACG4M,IACC,SAAC,IAAD,CACE5M,UAAU,gBACVqJ,QAAQ,kBACRlJ,MAAM,SAACsN,GAAA,EAAD,IACNvN,KAAK,QACLwN,UAAQ,EACRC,QAAM,KAGV,SAACpN,EAAD,CAAcC,MAAOiM,KACrB,SAACmB,EAAA,EAAD,CACE5N,UAAU,sBACVQ,MAAOqM,EACPgB,aAAa,SAAC,IAAD,CAAQ1N,MAAM,SAACsG,GAAA,EAAD,MAC3BqH,SAxCO,WACXC,UAAUC,UAAUC,UAAUpB,GAC9BxD,EAAAA,GAAAA,QAAgB,QAChBA,EAAAA,GAAAA,QAAgB,CACdzC,QAAS,qBACTzG,MAAM,SAACsG,GAAA,EAAD,IACN3H,IAAK,aAoCL,SAAC,IAAD,KACA,gBAAKkB,UAAU,YAAf,SACGiN,EAASpO,KAAI,SAAC2O,GAAD,OACZ,SAAC9B,GAAD,CAEEC,SAAU6B,EACV5B,KAAM4B,EAAE1B,UAAWsB,EAAAA,EAAAA,OAFdI,EAAE1B,gBASXjE,GACJ,iBAAK7H,UAAU,aAAf,WACE,yCACA,SAAC,IAAD,CACE8J,MAAM,SACN5J,KAAK,OACLpC,KAAK,QACLqC,MAAM,SAAC+N,GAAA,EAAD,IACN5N,QAASqM,OAKf,OACE,SAAC,IAAD,CACE/F,QAASA,EACTC,QAAQ,QACRC,UAAU,cACVe,MAAOA,EACPsG,gBAAc,EACd1D,kBAAmB,SAACrG,GAAD,OAAOA,GAN5B,UAQE,SAAC,IAAD,CACElE,KAAK,OACLC,MACE,SAAC,IAAD,CACEiO,OAAQxB,EAAY,UAAY,QAChCyB,MAAOzB,EAAYW,EAAY,IAC/BzP,KAAK,QAHP,UAKE,SAACwQ,GAAA,EAAD,UAQZ,IAAM/D,GAAiE,SAAC,GAEjE,IADL3B,EACI,EADJA,YAEQ2F,GAAW9O,EAAAA,EAAAA,YAAWG,IAAtB2O,OACFtF,GAAMC,EAAAA,EAAAA,MACNsF,EAAU,mCAAG,8FACX5F,IADW,wBAEK6F,EAAAA,EAAAA,IAAQF,GAFb,wCAIflF,EAAAA,GAAAA,MAAc,sBAJC,4CAOXqF,EAAAA,EAAAA,IAAaH,EAAQ,CAAEI,MAAM,IAPlB,QAQjB1F,EAAI,SAAWsF,GARE,4CAAH,qDAUhB,OACE,SAAC,IAAD,CACEzH,UAAU,cACVe,MAAM,uBACN+G,UAAWJ,EACXK,OAAO,MACPC,WAAW,KALb,UAOE,SAAC,IAAD,CAAQ5O,KAAK,OAAOC,MAAM,SAAC4O,GAAA,EAAD,S,mDC9b1BC,GAAO,SAAC,GAoBP,IAnBLpS,EAmBI,EAnBJA,UAmBI,IAlBJ0K,SAAAA,OAkBI,MAlBO,aAkBP,EAjBJ2H,EAiBI,EAjBJA,YAiBI,IAhBJtT,SAAAA,OAgBI,MAhBOR,EAgBP,MAfJoJ,KAAAA,OAeI,MAfG,OAeH,MAdJyE,QAAAA,OAcI,MAdM,aAcN,MAbJkG,SAAAA,OAaI,aAZJpJ,QAAAA,OAYI,SAXJqJ,EAWI,EAXJA,OAYQ5R,EAAkBX,EAAlBW,MAAO6R,EAAWxS,EAAXwS,OACTC,GAAW9M,EAAAA,EAAAA,QAA0B,MACrC+M,GAAQ/M,EAAAA,EAAAA,QAAO,IAAIgN,KAAAA,aACnBC,GAAQjN,EAAAA,EAAAA,UACRkN,GAAOlN,EAAAA,EAAAA,UACb,GAAwB9B,EAAAA,EAAAA,YAAxB,eAAOiP,EAAP,KAAaC,EAAb,KACMC,GAAcrN,EAAAA,EAAAA,UACpB,GAA4B9B,EAAAA,EAAAA,WAASoP,EAAAA,EAAAA,OAArC,eAAOC,EAAP,KAAeC,EAAf,KACMrS,GAAQ6E,EAAAA,EAAAA,QAAO,GAEfhH,EAAqDI,EAArDJ,MAAOH,EAA8CO,EAA9CP,OAAQC,EAAsCM,EAAtCN,UAAWG,EAA2BG,EAA3BH,UAAWF,EAAgBK,EAAhBL,YAMrC0U,EAAc,WAAO,IAAD,EAClBC,EAAW,UAAGZ,EAASxM,eAAZ,aAAG,EAAkBoN,YAClCA,IAAavS,EAAMmF,QAAUtF,EAAQ0S,IAGrCC,EAAiB,SAACC,GACtB,MAAyBb,EAAMzM,QAAQuN,KAA/BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,KACVC,EAAU,IAAIhB,KAAAA,OAAYhS,EAAO6R,GACpCoB,OAAO,GACPC,SAASJ,EAAOK,SAASJ,IAG5B,OAFchB,EAAMzM,QAAQuN,KAAKO,cAAcR,GACvBO,SAAShT,EAAMmF,SACtB4N,SAASF,GAASC,OAAOF,IAoBtCM,EAAa,SAACxM,GAClB4L,IACAV,EAAMzM,QAAQgO,WACd,IAAMV,EAAQD,EAAe9L,EAAE+L,OACzBW,EAAY,IAAIvB,KAAAA,MAAAA,WAAsBY,EAAO,IAAIZ,KAAAA,MAAW,EAAG,IACrEuB,EAAUC,YAAc,IAAIxB,KAAAA,OAAY,WACxCuB,EAAUE,YAAc,EACxBF,EAAUG,WAAa,EACvBH,EAAUI,UAAY,CAAC,GAAI,IAC3BvB,EAAQmB,IAGJK,EAAa,CACjBC,KADiB,WAEfpB,IACAV,EAAMzM,QAAQgO,WACdpB,EAAK5M,QAAU,IAAIyM,EAAMzM,QAAQwO,KACjC,IAAMN,EAAc,IAAIxB,KAAAA,OAAYhU,GAChCC,IACFuV,EAAYO,OAAS,EACrB7B,EAAK5M,QAAQ0O,UAAY,YAE3B9B,EAAK5M,QAAQkO,YAAcA,EAC3BtB,EAAK5M,QAAQmO,YAAc3V,EAC3BoU,EAAK5M,QAAQ2O,WAAa,QAC1B/B,EAAK5M,QAAQ4O,UAAY,SAE3BC,MAfiB,WAgBf1B,IACAV,EAAMzM,QAAQgO,WACdpB,EAAK5M,QAAU,IAAIyM,EAAMzM,QAAQwO,KACjC,IAAMN,EAAc,IAAIxB,KAAAA,OAAY,SACpCE,EAAK5M,QAAQkO,YAAcA,EAC3BtB,EAAK5M,QAAQmO,YAAc1V,EAC3BmU,EAAK5M,QAAQ2O,WAAa,QAC1B/B,EAAK5M,QAAQ4O,UAAY,SAE3BE,OAzBiB,SAyBVvN,GACLwM,EAAWxM,IAEbwN,SA5BiB,SA4BRxN,GACPkL,EAAMzM,QAAQgO,WACd,IAAMV,EAAQD,EAAe9L,EAAE+L,OAC1BT,IACAS,EAAM0B,SAASnC,EAAKoC,gBACvBlB,EAAWxM,GACX4E,EAAQ,aAGZ3L,OArCiB,cAsCjBkH,GAEIwN,EAAa,CACjBX,KADiB,SACZhN,GACH,GAAKqL,EAAK5M,QAAV,CACAyM,EAAMzM,QAAQgO,WACd,IAAMV,EAAQD,EAAe9L,EAAE+L,OAC/BV,EAAK5M,QAAQ2J,IAAI2D,GACjBV,EAAK5M,QAAQmP,WAEfN,MARiB,SAQXtN,GAAsB,IAAD,EACnB6N,EAAaxC,EAAK5M,QACxB,GAAKoP,EAAL,CACA3C,EAAMzM,QAAQgO,WACd,IAAMV,EAAQD,EAAe9L,EAAE+L,OAC/B8B,EAAWzF,IAAI2D,GACf8B,EAAWD,SAEX,IAAME,EAAS,UAAG1C,EAAM3M,eAAT,aAAG,EACdyK,QAAO,SAAC6E,GAAD,OAAQrC,EAAOlN,IAAIuP,EAAE/G,SAC7BkC,QAAO,SAAC6E,GAAD,OAAOC,GAAWD,EAAGF,MAC5BpT,KAAI,SAACsT,GAAD,OAAOA,EAAE/G,QAChB8G,GAAanC,GAAU,SAAC7I,GAAD,OAAUA,EAAKmL,OAAOH,QAE/CP,OAtBiB,SAsBVvN,GACL,GAAKsL,EAAL,CACAJ,EAAMzM,QAAQgO,WACd,IAAMyB,EAAQlO,EAAEkO,MAAM5B,SAAShT,EAAMmF,SACrC6M,EAAK5R,KAAO4R,EAAK5R,KAAK0O,IAAI,IAAI+C,KAAAA,MAAW+C,EAAMC,EAAGD,EAAME,IACxD9C,EAAK+C,SAAW/C,EAAK+C,SAASjG,IAAI8F,EAAM9B,OAAO,MAEjDoB,SA7BiB,SA6BRxN,GACP,IAAMsO,EAAS9C,EAAY/M,QAC3B,GAAK6M,GAASgD,EAAd,CACA,IAAMJ,EAAQlO,EAAEkO,MAAM5B,SAAShT,EAAMmF,SACrC6M,EAAK+C,SAAW/C,EAAK+C,SAASjG,IAAI8F,GAClCI,EAAOD,SAAWC,EAAOD,SAASjG,IAAI8F,KAExCjV,OApCiB,cAqCjBkH,GAEIoO,EAAW,CACfjB,MADe,WAERjC,EAAK5M,UACVyM,EAAMzM,QAAQgO,WACdpB,EAAK5M,QAAQ+P,SACbtL,GAAS,SAACJ,GAAD,OAAUtJ,EAAAA,GAAAA,aAAuBsJ,EAAM4I,EAAO+C,cACvD9C,GAAUF,EAAAA,EAAAA,SAEZuB,KARe,WASb,GAAK3B,EAAK5M,SAA4C,IAAjC4M,EAAK5M,QAAQiQ,SAAS/S,SAC3C0P,EAAK5M,QAAQkQ,WACwB,IAAjCtD,EAAK5M,QAAQiQ,SAAS/S,QAA1B,CACA,IAAMiT,EAAWvD,EAAK5M,QAAQoQ,aAC9BxD,EAAK5M,QAAQ+P,SACbtL,GAAS,SAACJ,GAAD,OAAUtJ,EAAAA,GAAAA,UAAoBsJ,EAAM8L,QAE/CrB,OAhBe,WAgBL,IAAD,EACP,IAAKjC,GAAQA,EAAK5R,KAAKP,MAAQ,IAAMmS,EAAK5R,KAAKsR,OAAS,GACtD,OAAOO,OAAQpR,GAEjB+Q,EAAMzM,QAAQgO,WAEd,IAAMqC,EAASxD,EAAKoC,aACpBlC,EAAY/M,QAAU,IAAI0M,KAAAA,OAC1B,UAAAC,EAAM3M,eAAN,SAAesQ,SAAQ,SAAChB,GAEyB,IAAD,EADxCA,aAAa5C,KAAAA,QACf4C,EAAEN,SAASqB,IAAWf,EAAEiB,WAAW1D,MACrC,UAAAE,EAAY/M,eAAZ,SAAqBwQ,SAASlB,QAGlCnJ,EAAQ,aAEV4I,SAhCe,aAiCfvU,OAjCe,cAkCfkH,IAEFlD,EAAAA,EAAAA,YAAU,YAhJS,WACjB,GAAKgO,EAASxM,QAAd,CACAyM,EAAMzM,QAAQyQ,MAAMjE,EAASxM,SAE7B,IAAM0Q,EAAIzN,EA1DQ,IA0DkBvI,EAAQ,EAC5C+R,EAAMzM,QAAQuN,KAAKoD,SAASjW,MAAQA,EAAQgW,EAC5CjE,EAAMzM,QAAQuN,KAAKoD,SAASpE,OAASA,EAASmE,EAC9CjE,EAAMzM,QAAQuN,KAAKqD,MAAMF,EAAG,IAAIhE,KAAAA,OAAY,EAAG,IAC/C,IAAMmE,EAAS,IAAInE,KAAAA,MAAAA,WACjB,IAAIA,KAAAA,OAAY,EAAG,GACnB,IAAIA,KAAAA,OAAYhS,EAAO6R,IAEzBsE,EAAOC,UAAY,IAAIpE,KAAAA,OAAY,QACnCmE,EAAOtI,KAAO,aACdsI,EAAOE,cAmIPC,GACAvE,EAAMzM,QAAQgO,WACd,IAAMiD,EAAMzE,EAASxM,QACrB,OAAO,WAAYiR,IAAOC,EAAAA,GAAAA,GAAcD,MACvC,KAQHzS,EAAAA,EAAAA,YANoB,WACd6N,IACJI,EAAMzM,QAAQuN,KAAK4D,YAAc7C,EACjC7B,EAAMzM,QAAQuN,KAAK6D,YAAclC,EACjCzC,EAAMzM,QAAQuN,KAAK8D,UAAYvB,MAIjC,IAAMwB,EAAe,SAAC/P,IAlLD,SAACA,GACpB,OAAOhJ,GC9CJ,SAAkBgJ,GACvB,IAAMgQ,EAAQhQ,EAAEiQ,QAAQ,GACxB,MAA4B,YAAhB,OAALD,QAAK,IAALA,OAAA,EAAAA,EAAOE,WD4CKC,CAASnQ,IAkL1BoQ,CAAapQ,IAAMA,EAAEe,oBAGvB9D,EAAAA,EAAAA,YAAU,WACR,GAAK8N,EAAL,CACA,IAEIsF,EAFEC,EAAM,IAAIC,MAchB,OAbAD,EAAIE,IAAMzF,EAGVuF,EAAIG,OAAS,WAAO,IAAD,EACjBvF,EAAMzM,QAAQgO,YACd4D,EAAS,IAAIlF,KAAAA,QAAamF,IACnBjC,SAAWnD,EAAMzM,QAAQuN,KAAKC,OACrC,IAAIkD,EAAIhW,EAAQmX,EAAInX,MACpBkX,EAAOhB,MAAMF,GACbkB,EAAOb,aACP,UAAAa,EAAOK,OAAOC,QAAQ,CAAE3J,KAAM,sBAA9B,SAA+CwI,cAG1C,iBAAM,UAAKa,SAAL,OAAK,EAAQ7B,aACzB,CAACzD,KAEJ9N,EAAAA,EAAAA,YAAU,WAQR,OAPAiO,EAAMzM,QAAQgO,WACdrB,EAAM3M,QAAU,GAEhBjG,EAAUoY,kBAAkB7B,SAAQ,SAAC8B,GACnCC,GAAYD,EAAQzF,EAAM3M,QAASiN,MAG9B,kCAAMN,EAAM3M,eAAZ,aAAM,EAAesQ,SAAQ,SAACgC,GAAD,OAAUA,EAAKvC,eAClD,CAAChW,EAAWkT,KAEfzO,EAAAA,EAAAA,YAAU,WACRiO,EAAMzM,QAAQgO,WACd,IAAMuE,EAA2B,GAQjC,OANW,OAAXnG,QAAW,IAAXA,GAAAA,EAAakE,SAAQ,SAAC7U,GACpBA,EAAG0W,kBAAkB7B,SAAQ,SAAC8B,GAC5BC,GAAYD,EAAQG,SAIjB,kBAAMA,EAAWjC,SAAQ,SAACgC,GAAD,OAAUA,EAAKvC,eAC9C,CAAC3D,IAEJ,IAAMoG,EAAiB,WAAO,IAAD,EACrB7W,EAAI,UAAGoR,EAAY/M,eAAf,aAAG,EAAqByS,SAClC,GAAI,OAAC9W,QAAD,IAACA,GAAAA,EAAMuB,OAAX,CACA,IAAMwV,EAAgC/W,EAAKK,KAAI,SAACsT,GAAD,MAAO,CACpDA,EAAE/G,KACF+G,EAAEc,iBAEJ3L,GAAS,SAACJ,GAAD,OAAUtJ,EAAAA,GAAAA,aAAuBsJ,EAAMqO,SAUlDlU,EAAAA,EAAAA,YAAU,WACR,GAAa,WAATkD,OAEG,IAAa,aAATA,EAGT,OAFA,OAAImL,QAAJ,IAAIA,GAAAA,EAAMqB,cAAarB,EAAKqB,YAAYO,OAAS,GACjDhC,EAAMzM,QAAQgO,WACPwE,EACW,WAAT9Q,IAdU,WAAO,IAAD,EACrB/F,EAAI,UAAGoR,EAAY/M,eAAf,aAAG,EAAqByS,SAClC,GAAI,OAAC9W,QAAD,IAACA,GAAAA,EAAMuB,OAAX,CACA,IAAMyV,EAAUhX,EAAKK,KAAI,SAACsW,GAAD,OAAUA,EAAK/J,QACxC9D,GAAS,SAACJ,GAAD,OAAUtJ,EAAAA,GAAAA,aAAuBsJ,EAAMsO,OAW9CC,GACAzM,EAAQ,UACR2G,OAAQpR,IAERoR,OAAQpR,MAET,CAACgG,KAEJlD,EAAAA,EAAAA,YAAU,WACR,GAAKqO,EAAL,CACA,IAAIgG,EAAK,EAQT,OAPiB,SAAXC,IACJD,EAAK5R,uBAAsB,WACzB4L,EAAKuB,YAAc,EACnB0E,OAGJA,GACO,WACLjG,EAAKkD,SACLgD,qBAAqBF,OAEtB,CAAChG,IAEJ,IAAMmG,GAAOC,EAAAA,GAAAA,WACX,SAACrY,GACC,IAAQsY,EAAsCtY,EAAtCsY,KAAMC,EAAgCvY,EAAhCuY,OAAQ9X,EAAwBT,EAAxBS,KAAM+X,EAAkBxY,EAAlBwY,MAAOC,EAAWzY,EAAXyY,OAEnCD,GAASjG,IAET,aAAoC+F,QAApC,IAAoCA,EAAAA,EAAQ,CAAC,EAAGG,EAAO,GAAIA,EAAO,IAAlE,eAAOC,EAAP,KAAkBC,EAAlB,KAA0BC,EAA1B,KACM5C,EAAQwC,EAAQ,EAAID,EAAO,GAAKG,EAChC5C,EAAI7V,EAAMmF,QAChB,UAAiBqT,EAAjB,GAAOI,EAAP,KAAWC,EAAX,KACMC,EAAU,IAAIjH,KAAAA,OAAY+G,EAAIC,GAAI7F,SAAS6C,GACjDjE,EAAMzM,QAAQuN,KAAKqD,MAAMA,EAAO+C,GAEhC,IAAOC,EAAWH,EAAKF,EAAZM,EAAoBH,EAAKF,EAC9BM,EAAS,IAAIpH,KAAAA,OAAYkH,EAAIC,GAAIhG,SAAS6C,EAAIyC,EAAO,IAO3D,GANA1G,EAAMzM,QAAQuN,KAAKwG,UAAUD,GAEX,IAAdX,EAAO,KACT1G,EAAMzM,QAAQuN,KAAKC,OAAS,IAAId,KAAAA,OAAYhS,EAAO6R,GAAQoB,OAAO,KAG/DtS,EAAM,MAAO,CAAC8X,EAAO,GAAIE,EAAO,GAAIA,EAAO,MAElD,CACEW,YAAa,CAAE/L,IAAK,EAAGD,IAAK,KAgBhC,OAZAxJ,EAAAA,EAAAA,YAAU,WACR,IAAMyV,EAAU,SAAC1S,GAAD,OAAcA,EAAE2S,kBAIhC,OAHAC,SAASC,iBAAiB,eAAgBH,GAC1CE,SAASC,iBAAiB,gBAAiBH,GAC3CE,SAASC,iBAAiB,aAAcH,GACjC,WACLE,SAASE,oBAAoB,eAAgBJ,GAC7CE,SAASE,oBAAoB,gBAAiBJ,GAC9CE,SAASE,oBAAoB,aAAcJ,MAE5C,KAGD,2BACE3S,IAAKkL,EACLrP,UAAU,cACV,oBAAkB,EAClBmX,oBAAqBhD,EACrBiD,mBAAoBjD,GAChB0B,OAKV,GAAewB,EAAAA,KAAWrI,IAEpBkG,GAAc,SAClBD,EACAzF,EACAM,GAEA,IAAMkD,EAAkBiC,EAAlBjC,SAAU3O,EAAQ4Q,EAAR5Q,IAChB,IACE,IAAMoL,EAAO,IAAIF,KAAAA,MACjBE,EAAK6H,WAAWtE,GAChBvD,EAAKrE,KAAO/G,EACZ,OAAIyL,QAAJ,IAAIA,GAAAA,EAAQlN,IAAIyB,KAAMoL,EAAK7F,SAAW,GACjC,OAAL4F,QAAK,IAALA,GAAAA,EAAOpS,KAAKqS,GACZ,MAAOrL,GACPmT,QAAQC,MAAMpT,KAIZqT,GAAkB,WACtB,IAAMC,EAAQ,IAAIC,QAClB,OAAO,SAACC,EAAwBra,GAAmB,IAAD,EAC1Csa,EAASH,EAAMjb,IAAImb,GACzB,GAAIC,EAAQ,OAAOA,EAEnB,IAAQ1H,EAAUyH,EAAVzH,MACF2H,EAAS,UAAGF,EAAQG,gBAAX,aAAG,EAAkB5H,MACpC,IAAK2H,EAAW,MAAO,GAIvB,IAHA,IAAMxF,EAAQnC,EAAMM,SAASqH,GACvBE,EAAS1F,EAAMvS,OAASxC,EAAS,EACjC0a,EAA6B,GAC1BC,EAAI,EAAGA,EAAIF,EAAOE,GAAK,EAC9BD,EAAY7a,KAAK+S,EAAMM,SAAS6B,EAAM5B,SAASwH,EAAIF,KAGrD,OADAN,EAAMxa,IAAI0a,EAASK,GACZA,GAhBa,GAoBlB7F,GAAa,SAAC+F,EAAyBlG,GAA4B,IAAD,EAChEmG,EAAU,UAAGnG,EAAWoG,YAAYC,aAA1B,aAAG,EAA8BxG,aACjD,KACIqG,aAAuB5I,KAAAA,OACzB,OAAC6I,QAAD,IAACA,IAAAA,EAAYhF,WAAW+E,EAAYrG,cAEpC,OAAO,EAGT,GAAIG,EAAWmB,WAAW+E,GAAc,OAAO,EAE/C,IAAQnH,EAA6BiB,EAA7BjB,YAAaqH,EAAgBpG,EAAhBoG,YAErB,OADoBZ,GAAeY,EAAarH,GAC7BuH,MAAK,SAACC,GAAY,IAAD,EAC5B9W,EAAC,UAAGyW,EAAYM,gBAAgBD,UAA/B,aAAG,EAAqCE,YAAYF,GAC3D,OAAO9W,GAAKA,GAAKyW,EAAYnH,YAAcA,GAAe,M,iCEvYjDpR,IAAiB+Y,EAAAA,EAAAA,eAAc,CAC1CpK,OAAQ,GACRqK,cAAUra,EACVkG,cAAUlG,EACVmG,eAAWnG,EACXE,aAASF,EACToB,eAAWpB,EACXsK,OAAO,EACPC,QAAQ,EACR3G,aAAa0N,EAAAA,EAAAA,MACbvN,OAAQ,GACR3G,SAAUR,EACVoJ,KAAM,SAGK7E,IAAkBiZ,EAAAA,EAAAA,eAAc,CAC3CvW,WAAa,aACbyW,eAAiB,aACjBlU,iBAAmB,aACnBmU,aAAe,aACf3S,QAAU,aACV3G,aAAc,aACd4G,WAAa,aACb4C,QAAU,aACVD,YAAc,aACd1G,YAAY,WAAD,wBAAG,kHAAH,kDAAC,KAMC,SAAS0W,GAAT,GAAkD,IAAD,EAA/BjQ,EAA+B,EAA/BA,OACzByF,EAAM,WAAGyK,EAAAA,EAAAA,MAAYzK,cAAf,QAAyB,GAC/BtF,GAAMC,EAAAA,EAAAA,MAEZ,GAA8BzI,EAAAA,EAAAA,YAA9B,eAAOhC,EAAP,KAAgBwa,EAAhB,KACA,GAAgCxY,EAAAA,EAAAA,YAAhC,eAAOmY,EAAP,KAAiBM,EAAjB,KACA,GAAgCzY,EAAAA,EAAAA,YAAhC,eAAOgE,EAAP,KAAiB0U,EAAjB,KACA,GAAgC1Y,EAAAA,EAAAA,UAAStF,GAAzC,eAAOQ,EAAP,KAAiBoN,EAAjB,KACA,GAAwBtI,EAAAA,EAAAA,UAAmB,QAA3C,eAAO8D,EAAP,KAAayE,EAAb,KACA,GAA0BvI,EAAAA,EAAAA,WAAS,GAAnC,eAAOoI,EAAP,KAAcuQ,EAAd,KACA,IAAsC3Y,EAAAA,EAAAA,WAASoP,EAAAA,EAAAA,OAA/C,iBAAO1N,GAAP,MAAoB0W,GAApB,MACA,IAAkCpY,EAAAA,EAAAA,YAAlC,iBAAOd,GAAP,MAAkB0Z,GAAlB,MACA,IAA4B5Y,EAAAA,EAAAA,WAAS,GAArC,iBAAO6Y,GAAP,MAAeC,GAAf,MAEMjX,IAASC,EAAAA,EAAAA,QAAoC,IAC7CiX,GC1ED,WACL,IAAMC,GAAWlX,EAAAA,EAAAA,SAAO,GASxB,OAPAlB,EAAAA,EAAAA,YAAU,WAER,OADAoY,EAAS5W,SAAU,EACZ,WACL4W,EAAS5W,SAAU,KAEpB,IAEI4W,EDgESC,GAEhB,IACEja,EAAAA,EAAAA,YAAWuM,EAAAA,SADLtH,GAAR,GAAQA,UAAWiV,GAAnB,GAAmBA,cAAeC,GAAlC,GAAkCA,WAAYC,GAA9C,GAA8CA,YAAaC,GAA3D,GAA2DA,YAGrDC,GAAa,mCAAG,2GACKC,EAAAA,EAAAA,IAASzL,GADd,UACd0L,EADc,8BAGlB5Q,EAAAA,GAAAA,MAAc,kBAHI,kBAIXJ,EAAI,MAJO,cAMZxK,EAAyCwb,EAAzCxb,QAAyCwb,EAAhCC,IAAKva,EAA2Bsa,EAA3Bta,UAAciZ,GANhB,OAM6BqB,EAN7B,IAOpBhB,EAAWxa,GACX4a,GAAa1Z,GACbuZ,EAAYN,GACZO,EAAY/c,EAAS+d,gBAAgB1b,IAVjB,KAWpBsK,EAXoB,UAWFtN,IAXE,mCAYpB8d,IAAU,GACNzQ,IAAQsR,EAAAA,EAAAA,IAAY7L,GAbJ,4CAAH,qDAgBb8L,IAAgBC,EAAAA,EAAAA,cACpBC,EAAAA,EAAAA,UAAQ,mCAAC,WAAOC,GAAP,0FACD9L,EAAAA,EAAAA,IAAaH,EAAQ,CAAE9P,QAAS+b,IAD/B,OAEDC,EAASzD,SAAS0D,cAAc,WAChCC,EAHC,OAGMF,QAHN,IAGMA,OAHN,EAGMA,EAAQG,eACblM,EAAAA,EAAAA,IAAaH,EAAQ,CAAE1I,UAAW8U,IAC1CnB,GAAQ3W,SAAWuW,GAAS,GALrB,2CAAD,sDAML,KACH,IAEIxQ,GAAcyR,GAAcQ,OAElCC,EAAAA,EAAAA,kBAAgB,WAEd,OADAf,KACO,WAAWnR,QACjB,CAAC2F,EAAQzF,KAEZiS,EAAAA,EAAAA,GAAgBnS,KAEhBvH,EAAAA,EAAAA,YAAU,WACHuX,IACL5B,SAASnP,MAAQ+Q,EAASxN,KAAO,oBAChC,CAACwN,KAEJvX,EAAAA,EAAAA,YAAU,WACRiY,IVxGG,SAAP,2BUwGc0B,CAAarf,KACtB,CAACA,KAEJ0F,EAAAA,EAAAA,YAAU,WACJ,OAACoD,QAAD,IAACA,GAAAA,EAAUnI,QACfqd,GAAclV,EAASnI,UACtB,CAACmI,KAEJpD,EAAAA,EAAAA,YAAU,WACH5C,GAAY6a,KACjBe,GAAc5b,GACd2a,GAAS,MACR,CAAC3a,KAEJ4C,EAAAA,EAAAA,YAAU,WACR,GAAKuY,GAAL,CACA,IAAQ1Z,EAAoB0Z,GAApB1Z,KAAMP,EAAcia,GAAdja,UACd,GAAa,YAATO,EAAoB,CAGtB,GAFAmC,GAAY1C,IAEPia,GAAWpE,QAAS,OACzByF,IAAe,WACb5Y,GAAYuX,GAAWsB,WAAW,WAE/B,GAAa,YAAThb,EAAoB,CAC7BmC,GAAY1C,GACZ,IAAMjD,EAAoBkd,GAApBld,OAAQye,EAAYvB,GAAZuB,QACdlC,GAAW,SAAC/R,GAAD,OAAUA,IAAI,kBAASA,GAAT,cAAgBxK,EAASye,OAClDhC,GAAY,SAACjS,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMkU,SAAS1e,EAAQye,UAE9C,CAACvB,KAEJ,IAAMyB,GAAgB,SAAC3e,EAAgB4B,GACrC,IAAMb,EAAQG,EAAAA,GAAAA,OAAiBU,GAC/B2a,GACE,SAAC/R,GAAD,OAAUA,IAAI,kBAASA,GAAT,cAAgBxK,GAAhB,kBAA8BwK,EAAKxK,IAAnC,IAA4Ce,MAAAA,UAIxDqb,IAAewB,EAAAA,EAAAA,cAAY,SAAC5d,EAAgB4B,GAChD6a,GAAY,SAACjS,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMoU,SAAS5e,EAAQ4B,MAC7C+c,GAAc3e,EAAQ4B,KACrB,IAmCG+D,GAAW,mCAAG,WAAOqB,GAAP,0FAA2BtG,EAA3B,gCAClBic,GAAa3V,GADK,UAEZgL,EAAAA,EAAAA,IAAaH,EAAQ,CAAE5O,UAAW+D,IAFtB,uBAGZkF,KAHY,OAIlBxL,GAAQ0c,GAAYpW,GAJF,2CAAH,sDAOXyC,GAAU,SAACoV,GAAsC,IAAlBC,EAAiB,wDACpD,GAAK7b,GAAL,CACA,IAAM8b,EAAWD,EAAO/c,GAAWA,EAAQ8c,QAAchd,EACzD,GAA0Bmd,EAAAA,EAAAA,GAAWD,GAArC,eAAO/e,EAAP,KAAeye,EAAf,KACMzX,EAAW3E,EAAYY,GAAW4b,EAAY7e,GACpDmd,GAAYnW,EAAUhH,EAAQye,GAC9B9Y,GAAYqB,GACZuV,GAAW,SAAC/R,GAAD,OAAUA,IAAI,kBAASA,GAAT,cAAgBxK,EAASye,OAClDhC,GAAY,SAACjS,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMkU,SAAS1e,EAAQye,QAazCQ,IACJ,iBAAK3b,UAAU,mBAAf,WACE,SAACyI,GAAD,CACEG,YAAaA,GACbF,WAxDa,WACjByQ,GAAY,SAACjS,GACX,GAAKA,EAAL,CACA,IAAM0U,EAAQ1U,EAAK2U,OACbC,EAASF,EAAMG,YAErB,OADAD,GAAUT,GAAa,WAAb,UAAiBS,IACpBF,OAmDLjT,WA/Ca,WACjBwQ,GAAY,SAACjS,GACX,GAAKA,EAAL,CACA,IAAM0U,EAAQ1U,EAAK8U,OACbF,EAASF,EAAMG,YAErB,OADAD,GAAUT,GAAa,WAAb,UAAiBS,IACpBF,UA2CP,mCACGjc,SADH,IACGA,QADH,EACGA,GAAWd,KAAI,SAACwF,GAAD,OACd,SAAC4X,GAAD,CAAe5X,IAAKA,GAAUA,OAEhC,SAAC9E,EAAD,UAKN,OACE,SAAC,GAAe2c,SAAhB,CACE1b,MAAO,CACL+N,OAAAA,EACAqK,SAAAA,EACAnU,SAAAA,EACAC,UAAAA,GACAmE,MAAAA,EACAC,OAAAA,EACArK,QAAAA,EACAkB,UAAAA,GACAwC,YAAAA,GACAG,OAAQA,GAAOO,QACf0B,KAAAA,EACA5I,SAAAA,GAbJ,UAgBE,SAAC+D,GAAgBwc,SAAjB,CACE1b,MAAO,CACL4B,WAnEW,SAAC1F,GAAoB,IAAD,EACrC,UAAA4F,GAAOO,QAAQnG,UAAf,SAAwBoG,kBAmElB+V,eAAAA,GACAlU,iBAlGiB,SAACjI,GACxB,IAAMkI,EAAOnG,GAAWA,EAAQ/B,GAChC,GAAKkI,EAAL,CACA,IAAMK,GAAUnF,QAAQ8E,EAAKK,QAC7BgU,GACE,SAAC/R,GAAD,OAAUA,IAAI,kBAASA,GAAT,cAAgBxK,GAAhB,kBAA8BwK,EAAKxK,IAAnC,IAA4CuI,OAAAA,WA8FtD6T,aAAAA,GACA3S,QAAAA,GACA3G,aAlDa,WACnB,IAAM2c,GAAaje,EAAAA,EAAAA,MAAKyB,IACxBwc,GAAchW,GAAQgW,IAiDhB/V,WA9CW,SAAC1J,GAClB,IAAMgH,EAAQ,OAAG/D,SAAH,IAAGA,QAAH,EAAGA,GAAW2N,QAAO,SAACoI,GAAD,OAAQA,IAAOhZ,KAClDgH,GAAYrB,GAAYqB,GAAU,IA6C5BsF,QAAAA,EACAD,YAAAA,EACA1G,YAAAA,IAXJ,SAcGsZ,OAMT,IAAMV,GAAiB,SAACmB,GACtB/S,EAAAA,GAAAA,QAAgB,CACdzC,SACE,yDAEE,SAAC,IAAD,CACE9I,KAAK,QACLoC,KAAK,OACLI,QAAS,WACP+I,EAAAA,GAAAA,QAAgB,UAChB+S,KALJ,qBAYJtd,IAAK,SACL4K,SAAU,MAIRuS,GAAqC,SAAC,GAAa,IAAX5X,EAAU,EAAVA,IAC5C,GAAyC5E,EAAAA,EAAAA,YAAWG,IAA5CnB,EAAR,EAAQA,QAASgG,EAAjB,EAAiBA,SAAUC,EAA3B,EAA2BA,UACnBoU,GAAiBrZ,EAAAA,EAAAA,YAAWC,IAA5BoZ,aAEFlU,EAAOnG,GAAWA,EAAQ4F,GAC1BzH,EAAS,OAAG6H,QAAH,IAAGA,OAAH,EAAGA,EAAU3H,YAAYuH,GAClCQ,EAAY,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAWI,gBAAgBT,GAC1CgY,GAAc/B,EAAAA,EAAAA,cAClB,SAAChc,GAAD,OAAmBwa,EAAazU,EAAK/F,KACrC,CAAC+F,EAAKyU,IAER,OAAKlU,GAAShI,GAGZ,SAACgJ,GAAD,CACEhJ,UAAWA,EACXiI,aAAcA,EACdwX,YAAaA,EACbC,SAAU1X,EAAK0X,SACfjY,IAAKA,IARuB,MAarBuB,GAAc,SAAC,GAgBrB,IAfLC,EAeI,EAfJA,UACAjJ,EAcI,EAdJA,UACAiI,EAaI,EAbJA,aACAwX,EAYI,EAZJA,YACAC,EAWI,EAXJA,SAWI,IAVJxW,QAAAA,OAUI,SATJzB,EASI,EATJA,IAUQwU,GAAmBpZ,EAAAA,EAAAA,YAAWC,IAA9BmZ,eACR,GAA2BpZ,EAAAA,EAAAA,YAAWG,IAA9B0C,EAAR,EAAQA,OAAQiM,EAAhB,EAAgBA,OAChB,GAA8B9N,EAAAA,EAAAA,YAA9B,eAAO8b,EAAP,KAAgBC,EAAhB,KACA,GAA8BC,EAAAA,EAAAA,IAAU,CAAEC,MAAO,MAAjD,eAAOC,EAAP,KAAmB5V,EAAnB,KAGMrJ,EADoBd,EAAlBwS,OAAkBxS,EAAVW,MAGVqf,GAAYtC,EAAAA,EAAAA,cAChB,SAAClW,GACMA,IACLuY,EAAWvY,IACN0B,GAAWxD,IAAQA,EAAO+B,GAAOD,MAExC,CAAC9B,IAGGua,GAAYvC,EAAAA,EAAAA,aACf,WACC,IAAIwC,GAAS,EACb,wBAAO,0FACDhX,GAAYwW,IAAYQ,EADvB,wDAELA,GAAS,EAFJ,SAG6B,uDAH7B,uBAGGC,EAHH,EAGGA,gBAHH,KAILP,EAJK,UAIYO,EAAgBxO,EAAQ+N,GAJpC,+EAFR,GASD,CAACxW,EAASwW,KAGZjb,EAAAA,EAAAA,YAAU,WACJyE,IACAiB,GACF8V,IACAhE,GAAe,SAAC3R,GAAD,OAAUA,EAAKsF,IAAInI,OAElCwU,GAAe,SAAC3R,GAAD,OAAUA,EAAK7J,OAAOgH,SAEtC,CAAC0C,EAAS8V,EAAW/W,IAExB,IAAQmG,GAAYxM,EAAAA,EAAAA,YAAWuM,EAAAA,SAAvBC,QACFgD,GAAcvM,EAAAA,EAAAA,UAClB,kBAAMmC,GAAgBmY,MAAMC,KAAKpY,EAAaqY,UAAUjR,GAASiB,YACjE,CAACrI,EAAcoH,IAGXkR,EAAcZ,IAAYD,EAC1Bc,EAAWrW,GAAWoW,EACtBE,EAAWvd,QAAQgG,IAAYqX,GAErC,OACE,qBACEhZ,IAAKyY,EACL5c,UAAU,YACVuJ,MAAO,CAAE+T,WAAW,GAAD,OAAa,IAAR5f,EAAL,MAHrB,UAKG0f,IACC,SAACG,GAAD,CACE3gB,UAAWA,EACXqS,YAAaA,EACboN,YAAaA,EACblN,OAAQoN,GAAW1W,QAAatH,EAChCuH,QAASA,IAGZuX,IAAY,gBAAKrd,UAAU,aAIlC4F,GAAY4X,YAAc,cAE1B,IAAMD,GAAc,SAAC,GAYd,IAXL3gB,EAWI,EAXJA,UACAyf,EAUI,EAVJA,YACApN,EASI,EATJA,YASI,IARJnJ,QAAAA,OAQI,SAPJqJ,EAOI,EAPJA,OAQA,GAA2B1P,EAAAA,EAAAA,YAAWG,IAA9B2E,EAAR,EAAQA,KAAM5I,EAAd,EAAcA,SACNqN,GAAYvJ,EAAAA,EAAAA,YAAWC,IAAvBsJ,QAEFyU,GAAenD,EAAAA,EAAAA,cACnB,SAACoD,GACC,GAAKrB,EAAL,CACA,IAAI/d,EAAKof,aAAe9f,EAAAA,GAAY8f,EAAMA,EAAI9gB,GAC9Cyf,EAAY/d,MAEd,CAAC+d,EAAazf,IAGhB,OACE,gBAAKoD,UAAU,YAAf,SACG8F,GACC,SAAC,GAAD,CACElJ,UAAWA,EACXqS,YAAaA,EACbE,OAAQA,EACRD,UAAQ,EACRpJ,SAAO,KAGT,SAAC,GAAD,CACElJ,UAAWA,EACXqS,YAAaA,EACb3H,SAAUmW,EACVtO,OAAQA,EACRxT,SAAUA,EACV4I,KAAMA,EACNyE,QAASA,OAMnBuU,GAAYC,YAAc,e,4UEhdpB5hB,EAA+C,CACnD+hB,YAAY7hB,EAAAA,EAAAA,MACZ8hB,WAAW9hB,EAAAA,EAAAA,OAIPI,GAAiBC,EAAAA,EAAAA,IAAOP,GAEjBiiB,EAAb,WACE,WAAoBxhB,IAA6B,oBAA7BA,UAAAA,EADtB,2CAGE,WACE,OAAOE,KAAKF,YAJhB,2BAOE,WACE,OAAOE,KAAKC,eAAeC,IAAI,gBARnC,0BAWE,WACE,OAAOF,KAAKC,eAAeC,IAAI,eAZnC,yBAeE,SAAYC,EAAgBoP,GAAiB,IAAD,EAC1C,iBAAOvP,KAAKuhB,gBAAgBrhB,IAAIC,UAAhC,aAAO,EAAkCD,IAAIqP,KAhBjD,6BAmBE,SAAgBpP,GACd,OAAOH,KAAKuhB,gBAAgBrhB,IAAIC,KApBpC,0BAuBE,SAAaA,GAAiB,IAAD,EAC3B,iBAAOH,KAAKwhB,eAAethB,IAAIC,UAA/B,aAAO,EAAiCgB,QAxB5C,0BA2BE,SAAahB,GACX,OAAOH,KAAKuhB,gBAAgBlb,IAAIlG,KA5BpC,sBA+BE,SAASA,EAAgBoP,EAAgBlP,GACvC,IAAMohB,EAAUzhB,KAAKuhB,gBAAgBrhB,IAAIC,GACzC,OAAKshB,EACE,IAAIH,EACTthB,KAAKC,eAAeQ,OAAO,cAAc,SAACihB,GAAD,OACvCA,EAAE/gB,IAAIR,EAAQshB,EAAQ9gB,IAAI4O,EAAQlP,QAHjBL,OAjCzB,qBA2DE,SAAQG,EAAgBY,GACtB,IAAQI,EAAUJ,EAAVI,MACR,OAAO,IAAImgB,EACTthB,KAAKC,eACFQ,OAAO,cAAc,SAACihB,GAAD,OAAOA,EAAE/gB,IAAIR,GAAQZ,EAAAA,EAAAA,UAC1CkB,OAAO,aAAa,SAACihB,GAAD,OAAOA,EAAE/gB,IAAIR,EAAQ,CAAEgB,MAAAA,UAhEpD,2BAoEE,SAAcwgB,EAAqBpS,GAAgC,IAAhBvO,EAAe,uDAAPC,EAAAA,GACjDd,EAAkBwhB,EAAlBxhB,OAAWyhB,GAAnB,OAA0BD,EAA1B,GACMxgB,EAAQnB,KAAK6hB,aAAa1hB,GAChC,IAAKH,KAAK8hB,aAAa3hB,KAAYgB,EAAO,OAAOnB,KACjD,IAAM+hB,EACJ/hB,KAAKO,YAAYJ,EAAQoP,IACzBlO,EAAAA,GAAAA,YAAsBL,EAAOA,EAAQG,GAEjCY,EAAKV,EAAAA,GAAAA,cAAwB0gB,EAAQH,GAC3C,OAAO5hB,KAAK+e,SAAS5e,EAAQoP,EAAQxN,KA7EzC,uBAgFE,SAAUwN,EAAgBrN,GAExB,IADA,IAAI8f,EAAmBhiB,KACvB,MAAuCoC,OAAOD,QAAQD,GAAtD,eAAgE,CAA3D,sBAAK/B,EAAL,YAAee,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,MACnBb,EAAS0hB,EAAMzhB,YAAYJ,EAAQoP,GACzC,GAAKjP,EAAL,CACA,IAAQU,EAAUV,EAAVU,MACRghB,EAAQA,EAAMjD,SACZ5e,EACAoP,EACAlO,EAAAA,GAAAA,aAAuBH,EAAOF,EAAOA,EAAQG,KAGjD,OAAO6gB,KA5FX,kCAyCE,SAA2BC,GAAoC,IAAhBjhB,EAAe,uDAAPC,EAAAA,GAC7CiB,EAAY+f,EAAZ/f,QACJggB,EAASviB,IAab,OAZAyC,OAAOD,QAAQD,GAAS0U,SAAQ,YAAyB,IAAD,eAAtBzW,EAAsB,KAAdgiB,EAAc,KAC9C7iB,EAAkB6iB,EAAlB7iB,OAAQ6B,EAAUghB,EAAVhhB,MACVsgB,GAAUliB,EAAAA,EAAAA,IACd6C,OAAOD,QAAQ7C,GAAQgD,KAAI,+BAAEiN,EAAF,KAAU6S,EAAV,WAAyB,CAClD7S,EACAlO,EAAAA,GAAAA,aAAuB+gB,EAAWphB,EAAOA,EAAQG,QAGrD+gB,EAASA,EACNzhB,OAAO,cAAc,SAACihB,GAAD,OAAOA,EAAE/gB,IAAIR,EAAQshB,MAC1ChhB,OAAO,aAAa,SAACihB,GAAD,OAAOA,EAAE/gB,IAAIR,EAAQ,CAAEgB,MAAAA,UAEzC,IAAImgB,EAAUY,OAxDzB,K,gCCCazS,GAAU2M,EAAAA,EAAAA,eAAc,CACnClM,MAAO,EACPC,QAAS,GACTT,SAAS4D,EAAAA,EAAAA,MACT3D,WAAa,aACbS,SAAW,aACXjI,eAAWnG,EACXob,cAAgB,aAChBC,gBAAYrb,EACZub,YAAc,aACdD,YAAc,aAKdjN,WAAW,IAuBE,SAASgS,IAAQ,IAAD,EACvBrQ,EAAM,WAAGyK,EAAAA,EAAAA,MAAYzK,cAAf,QAAyB,GACrC,GAAkC9N,EAAAA,EAAAA,YAAlC,eAAOiE,EAAP,KAAkBma,EAAlB,KACA,GAAwBpe,EAAAA,EAAAA,WAAU,GAAlC,eAAOgM,EAAP,KAAaqS,EAAb,KACA,GAA8Bre,EAAAA,EAAAA,UAAmC,IAAjE,eAAOiM,EAAP,KAAgBqS,EAAhB,KACA,GAA8Bte,EAAAA,EAAAA,WAASoP,EAAAA,EAAAA,OAAvC,eAAO5D,EAAP,KAAgBC,EAAhB,KACA,GAAazL,EAAAA,EAAAA,UC3DU,SAAC8N,GACxB,OAAO,kBACLyQ,EAAAA,EAAAA,IAAGC,EAAAA,GAAU,CACXC,aAAa,EACbC,MAAO,CACLrT,QAAQsB,EAAAA,EAAAA,MACRvB,UAAUuT,EAAAA,EAAAA,MACV7Q,OAAAA,MDoDgB8Q,CAAU9Q,IAAzB+Q,GAAP,eACA,GAAoC7e,EAAAA,EAAAA,YAApC,eAAOmZ,EAAP,KAAmB2F,EAAnB,KACA,GAA4B9e,EAAAA,EAAAA,WAAS,GAArC,eAAO6Y,EAAP,KAAeC,EAAf,KACA,GAAkC9Y,EAAAA,EAAAA,WAAS,GAA3C,eAAOmM,EAAP,KAAkB4S,EAAlB,KACMvW,GAAMC,EAAAA,EAAAA,MAENuW,EAAS,mCAAG,qGACOC,EAAAA,EAAAA,IAAiBnR,GADxB,UACViQ,EADU,8BAGdnV,EAAAA,GAAAA,MAAc,sCAHA,mBAIP,GAJO,cAMhBwV,EAAahB,EAAU8B,oBAAoBnB,IAN3B,mBAOT,GAPS,2CAAH,qDAUT7R,EAAQ,mCAAG,qGACIiT,EAAAA,EAAAA,IAAiBrR,GADrB,UACTsR,EADS,8BAGbxW,EAAAA,GAAAA,MAAc,qCAHD,mBAIN,GAJM,cAMfyV,EAAQe,EAAKpT,MANE,mBAOR,GAPQ,2CAAH,qDAURqT,GAAQ,mCAAG,qFACfzW,EAAAA,GAAAA,QAAgB,CACdzC,QAAS,uBACT8C,SAAU,EACV5K,IAAK,iBAJQ,SAMF6N,IANE,4DAMoB8S,IANpB,0DAObpW,EAAAA,GAAAA,QAAgB,gBAPH,kBAQNJ,EAAI,MARE,QAUfI,EAAAA,GAAAA,QAAgB,gBAChBkQ,GAAU,GACV+F,EAAGS,GAAG,QAAQ,YAA4B,IAAzBC,EAAwB,EAAxBA,UAAWlU,EAAa,EAAbA,OAC1B+S,GAAa,SAAC3X,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMyS,cAAcqG,EAAWlU,SAGxDwT,EAAGS,GAAG,UAAU,YAA0B,IAAvBE,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACjBpU,EAAqBmU,EAArBnU,OAAQD,EAAaoU,EAAbpU,SAChBkT,EAAWmB,GACPpU,KAAWsB,EAAAA,EAAAA,QACf/D,EAAAA,GAAAA,QAAgByC,GAChBzC,EAAAA,GAAAA,QAAgB,CACdlJ,MAAM,SAACggB,EAAA,EAAD,IACNvZ,QAAQ,GAAD,OAAKiF,EAAL,gBACP/M,IAAKgN,QAITwT,EAAGS,GAAG,UAAU,YAA0B,IAAvBK,EAAsB,EAAtBA,OAAQF,EAAc,EAAdA,QACjBpU,EAAqBsU,EAArBtU,OAAQD,EAAauU,EAAbvU,SAChBkT,EAAWmB,GACPpU,KAAWsB,EAAAA,EAAAA,QACf/D,EAAAA,GAAAA,QAAgByC,GAChBzC,EAAAA,GAAAA,QAAgB,CACdlJ,MAAM,SAACkgB,EAAA,EAAD,IACNzZ,QAAQ,GAAD,OAAKiF,EAAL,gBACP/M,IAAKgN,QAITwT,EAAGS,GAAG,WAAW,SAACF,GAChBN,GAAc,QAAErf,KAAM,WAAc2f,OAGtCP,EAAGS,GAAG,WAAW,SAACF,GAChB,IAAQnjB,EAAoBmjB,EAApBnjB,OAAQye,EAAY0E,EAAZ1E,QAChB0D,GAAa,SAAC3X,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMf,QAAQzJ,EAAQye,MAC7CoE,GAAc,QAAErf,KAAM,WAAc2f,OAGtCP,EAAGS,GAAG,SAAS,YAA0B,IAAvBjU,EAAsB,EAAtBA,OAAQrN,EAAc,EAAdA,QACpBqN,KAAWsB,EAAAA,EAAAA,OACfyR,GAAa,SAAC3X,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMoZ,UAAUxU,EAAQrN,SAGjD6gB,EAAGS,GAAG,WAAW,kBAAMP,GAAa,MACpCF,EAAGS,GAAG,cAAc,kBAAMP,GAAa,MAEvCF,EAAGiB,UA1DY,4CAAH,qDA6DRC,GAAc,WAClBlB,EAAGmB,qBACHnB,EAAGoB,aACHrX,EAAAA,GAAAA,QAAgB,kBAGlBhI,EAAAA,EAAAA,YAAU,WAER,OADAye,KACOU,KACN,CAACjS,IAoBJ,OAAK+K,GAEH,SAACtN,EAAQkQ,SAAT,CACE1b,MAAO,CACLiM,KAAAA,EACAR,QAAAA,EACAS,QAAAA,EACAC,SAAAA,EACAC,UAAAA,EACAlI,UAAAA,EACAwH,WAAAA,EACA0N,WAAAA,EACAD,cA9BgB,SAACqG,GACrBV,EAAGqB,KAAK,OAAQ,CAAEX,UAAAA,KA8BdlG,YA3Bc,SAACna,GACnB2f,EAAGqB,KAAK,UAAW,CAAEhhB,UAAAA,KA2BjBka,YAxBc,SAClBla,EACAjD,EACAye,GAEA0D,GAAa,SAAC3X,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMf,QAAQzJ,EAAQye,MACHA,EAAlCxV,MAAkCwV,EAA3BlW,OAAf,IAA0B2b,GAA1B,OAA0CzF,EAA1C,GACAmE,EAAGqB,KAAK,UAAW,CAAEhhB,UAAAA,EAAWjD,OAAAA,EAAQye,QAASyF,MAKjD,UAeE,SAAC7H,EAAA,QAAD,CAAQjQ,QAAM,MAjBE,O,mCEnLf,SAAS+X,EAAoBtjB,EAAe6R,GACjD,IAAMqL,EAASzD,SAAS8J,cAAc,UAChCC,EAAUtG,EAAOuG,WAAW,MAClC,IAAKD,EACH,MAAM,IAAIE,MAAM,oCAIlB,OAFAxG,EAAOld,MAAQA,EACfkd,EAAOrL,OAASA,EACT,CAAEqL,OAAAA,EAAQsG,QAAAA,GAGZ,SAAShN,EAAc0G,GAC5BA,EAAOld,MAAQ,EACfkd,EAAOrL,OAAS,EAChB,IAAM8R,EAAMzG,EAAOuG,WAAW,MAC3B,OAAHE,QAAG,IAAHA,GAAAA,EAAKC,UAAU,EAAG,EAAG,EAAG,G","sources":["lib/draw/drawCtrl.ts","lib/draw/StateSet.ts","lib/array.ts","component/reader/ReaderTools.tsx","component/ui/DigitDisplay.tsx","component/ui/IconFont.tsx","component/reader/PageNav.tsx","component/reader/DrawTools.tsx","component/draw/Draw.tsx","lib/touch/touch.ts","component/reader/Reader.tsx","lib/hooks.ts","lib/draw/TeamState.ts","component/reader/Team.tsx","lib/network/io.ts","lib/draw/drawer.ts"],"sourcesContent":["import localforage from \"localforage\";\r\n\r\nexport type CtrlMode = \"draw\" | \"erase\" | \"select\" | \"selected\" | \"delete\";\r\n\r\nexport interface DrawCtrl {\r\n  finger: boolean;\r\n  lineWidth: number;\r\n  eraserWidth: number;\r\n  color: string;\r\n  highlight: boolean;\r\n}\r\n\r\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\r\n  finger: false,\r\n  lineWidth: 10,\r\n  eraserWidth: 10,\r\n  color: \"#000000\",\r\n  highlight: false,\r\n};\r\n\r\nexport async function getDrawCtrl() {\r\n  let drawCtrl = (await localforage.getItem(\"DRAW_CTRL\")) as DrawCtrl | null;\r\n  if (!drawCtrl) {\r\n    drawCtrl = defaultDrawCtrl;\r\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n  }\r\n  return drawCtrl;\r\n}\r\n\r\nexport async function saveDrawCtrl(drawCtrl: DrawCtrl) {\r\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n}\r\n","import { List, Map, Record } from \"immutable\";\r\nimport { DrawState, Operation, WIDTH } from \"./DrawState\";\r\nimport { NotePage } from \"../note/note\";\r\n\r\ninterface StateSetRecordType {\r\n  states: Map<string, DrawState>;\r\n  editStack: List<string>;\r\n  undoStack: List<string>;\r\n}\r\n\r\nconst defaultRecord: Readonly<StateSetRecordType> = {\r\n  states: Map(),\r\n  editStack: List(),\r\n  undoStack: List(),\r\n};\r\n\r\ntype StateSetRecord = Record<StateSetRecordType>;\r\nconst defaultFactory = Record(defaultRecord);\r\n\r\nexport type SetOperation = Operation & { pageID: string };\r\n\r\nexport class StateSet {\r\n  constructor(\r\n    private immutable: StateSetRecord,\r\n    public lastOp?: SetOperation\r\n  ) {}\r\n\r\n  static createFromList(list: [string, DrawState][]) {\r\n    return new StateSet(defaultFactory().set(\"states\", Map(list)));\r\n  }\r\n\r\n  static createFromPages(\r\n    pageRec: globalThis.Record<string, NotePage>,\r\n    width = WIDTH\r\n  ) {\r\n    const entries = Object.entries(pageRec);\r\n    return StateSet.createFromList(\r\n      entries.map(([key, { state, ratio }]) => [\r\n        key,\r\n        DrawState.loadFromFlat(state, width, width * ratio),\r\n      ])\r\n    );\r\n  }\r\n\r\n  getImmutable() {\r\n    return this.immutable;\r\n  }\r\n\r\n  getStates() {\r\n    return this.getImmutable().get(\"states\");\r\n  }\r\n\r\n  getOneState(pageID: string) {\r\n    return this.getStates().get(pageID);\r\n  }\r\n\r\n  getEditStack() {\r\n    return this.getImmutable().get(\"editStack\");\r\n  }\r\n\r\n  getUndoStack() {\r\n    return this.getImmutable().get(\"undoStack\");\r\n  }\r\n\r\n  setState(pageID: string, drawState: DrawState) {\r\n    const prevDS = this.getOneState(pageID);\r\n    if (!prevDS || prevDS === drawState) return this;\r\n    let currRecord = this.getImmutable()\r\n      .update(\"states\", (s) => s.set(pageID, drawState))\r\n      .update(\"editStack\", (l) => l.push(pageID))\r\n      .delete(\"undoStack\");\r\n\r\n    const { lastOp } = drawState;\r\n    const lastSetOp = lastOp && { ...lastOp, pageID };\r\n\r\n    return new StateSet(currRecord, lastSetOp);\r\n  }\r\n\r\n  addState(pageID: string, notePage: NotePage, width = WIDTH) {\r\n    const { state, ratio } = notePage;\r\n    const newDS = DrawState.loadFromFlat(state, width, width * ratio);\r\n    const currRecord = this.getImmutable().update(\"states\", (s) =>\r\n      s.set(pageID, newDS)\r\n    );\r\n    return new StateSet(currRecord);\r\n  }\r\n\r\n  deleteState(pageID: string) {\r\n    return new StateSet(\r\n      this.getImmutable().update(\"states\", (s) => s.delete(pageID))\r\n    );\r\n  }\r\n\r\n  isUndoable() {\r\n    return this.getEditStack().size > 0;\r\n  }\r\n\r\n  isRedoable() {\r\n    return this.getUndoStack().size > 0;\r\n  }\r\n\r\n  undo() {\r\n    if (!this.isUndoable()) return this;\r\n    const lastUid = this.getEditStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.undo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"editStack\", (s) => s.pop())\r\n        .update(\"undoStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  redo() {\r\n    if (!this.isRedoable()) return this;\r\n    const lastUid = this.getUndoStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.redo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"undoStack\", (s) => s.pop())\r\n        .update(\"editStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  getLastDS(): [string, DrawState] | undefined {\r\n    const pageID = this.lastOp?.pageID;\r\n    const ds = pageID && this.getOneState(pageID);\r\n    return ds ? [pageID, ds] : undefined;\r\n  }\r\n}\r\n","export function exchange<T>(list: T[], fromIndex: number, toIndex: number) {\r\n  const result = list.slice();\r\n  const [removed] = result.splice(fromIndex, 1);\r\n  result.splice(toIndex, 0, removed);\r\n  return result;\r\n}\r\n\r\nexport function insertAfter<T>(list: T[], prevItem: T, newItem: T) {\r\n  const prevIndex = list.indexOf(prevItem);\r\n  const curr = list.slice();\r\n  if (prevIndex === -1) return curr;\r\n  curr.splice(prevIndex + 1, 0, newItem);\r\n  return curr;\r\n}\r\n","import { Button, Input } from \"antd\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { ReaderMethodCtx, ReaderStateCtx } from \"./Reader\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport classNames from \"classnames\";\r\n\r\nexport const AddPageButton = () => {\r\n  const { addFinalPage } = useContext(ReaderMethodCtx);\r\n  const { pageOrder } = useContext(ReaderStateCtx);\r\n  const empty = Boolean(pageOrder && !pageOrder.length);\r\n  return (\r\n    <div className={classNames(\"add-btn-wrapper\", { empty })}>\r\n      <Button\r\n        type=\"dashed\"\r\n        icon={<PlusOutlined />}\r\n        block\r\n        onClick={addFinalPage}\r\n      >\r\n        Add page\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const NoteHeader = () => {\r\n  const { noteInfo } = useContext(ReaderStateCtx);\r\n  const [noteName, setNoteName] = useState(\"\");\r\n  useEffect(() => {\r\n    if (!noteInfo) return;\r\n    setNoteName(noteInfo?.name);\r\n  }, [noteInfo]);\r\n\r\n  if (!noteInfo) return null;\r\n\r\n  return (\r\n    <div className=\"note-header\">\r\n      <Input value={noteName} bordered={false} />\r\n    </div>\r\n  );\r\n};\r\n","import classNames from \"classnames\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./digitDisplay.sass\";\r\n\r\nfunction num2digits(num: number): number[] {\r\n  return String(num)\r\n    .padStart(4, \"0\")\r\n    .split(\"\")\r\n    .map((s) => Number(s));\r\n}\r\n\r\nexport default function DigitDisplay({ value }: { value: number }) {\r\n  const [randomNum, setRandomNum] = useState(9999);\r\n  const displayNum = value >= 0 ? value : randomNum;\r\n  const digits = num2digits(displayNum);\r\n\r\n  function resetRandom() {\r\n    setRandomNum(Math.floor(Math.random() * 10000));\r\n  }\r\n  useEffect(() => {\r\n    if (value !== -1) return setRandomNum(9999);\r\n    const timer = setTimeout(resetRandom, 100);\r\n    return () => clearTimeout(timer);\r\n  }, [value]);\r\n\r\n  return (\r\n    <div className={classNames(\"digit-display\", { disabled: value === -2 })}>\r\n      {digits.map((d, idx) => (\r\n        <Digit key={idx} digit={d} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Digit({ digit }: { digit: number }) {\r\n  if (!(digit <= 9 && digit >= 0)) {\r\n    return <div className=\"digit\">*</div>;\r\n  }\r\n  return <div className=\"digit\">{digit}</div>;\r\n}\r\n","import { createFromIconfontCN } from \"@ant-design/icons\";\r\n\r\nexport default createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_3181679_eb02zt96p4p.js\",\r\n});\r\n","import { Button, Drawer, Menu, Popover, Tabs } from \"antd\";\r\nimport React, {\r\n  FC,\r\n  useMemo,\r\n  Dispatch,\r\n  useState,\r\n  useContext,\r\n  MouseEvent,\r\n  SetStateAction,\r\n  useEffect,\r\n  useRef,\r\n} from \"react\";\r\nimport { PageWrapper, ReaderMethodCtx, ReaderStateCtx } from \"./Reader\";\r\nimport {\r\n  MoreOutlined,\r\n  PlusOutlined,\r\n  CopyOutlined,\r\n  DeleteOutlined,\r\n  MenuFoldOutlined,\r\n  MenuUnfoldOutlined,\r\n} from \"@ant-design/icons\";\r\nimport IconFont from \"../ui/IconFont\";\r\nimport {\r\n  Draggable,\r\n  Droppable,\r\n  DropResult,\r\n  DragDropContext,\r\n} from \"react-beautiful-dnd\";\r\nimport { AddPageButton } from \"./ReaderTools\";\r\nimport { exchange } from \"../../lib/array\";\r\nimport classNames from \"classnames\";\r\nimport \"./preview.sass\";\r\n\r\nconst PageNavContent = ({\r\n  activeKey,\r\n  setActiveKey,\r\n}: {\r\n  activeKey: string;\r\n  setActiveKey: Dispatch<SetStateAction<string>>;\r\n}) => {\r\n  const { pageOrder, inviewPages } = useContext(ReaderStateCtx);\r\n  const { scrollPage, saveReorder } = useContext(ReaderMethodCtx);\r\n  const refRec = useRef<Record<string, HTMLElement>>({});\r\n  const listEl = useRef<HTMLDivElement>();\r\n\r\n  const onDragEnd = ({ source, destination }: DropResult) => {\r\n    if (!destination || !pageOrder) return;\r\n    const { index: fromIndex } = source;\r\n    const { index: toIndex } = destination;\r\n    const pageID = pageOrder[fromIndex];\r\n    const newOrder = exchange(pageOrder, fromIndex, toIndex);\r\n    saveReorder(newOrder, true);\r\n    requestAnimationFrame(() => scrollPage(pageID));\r\n  };\r\n\r\n  const currpageID = useMemo(\r\n    () => pageOrder?.find((pageID) => inviewPages.has(pageID)) || \"\",\r\n    [pageOrder, inviewPages]\r\n  );\r\n\r\n  useEffect(() => {\r\n    refRec.current[currpageID]?.scrollIntoView();\r\n    const itemHeight = refRec.current[currpageID]?.clientHeight || 0;\r\n    const listHeight = listEl.current?.clientHeight || 0;\r\n    listEl.current?.scrollBy(0, -listHeight / 2 + itemHeight / 2);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"preview-container\">\r\n      <PreviewTabs activeKey={activeKey} setActiveKey={setActiveKey} />\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"droppable\">\r\n          {({ droppableProps, innerRef, placeholder }) => (\r\n            <div\r\n              className=\"page-list\"\r\n              ref={(e) => {\r\n                innerRef(e);\r\n                if (e) listEl.current = e;\r\n              }}\r\n              {...droppableProps}\r\n            >\r\n              {pageOrder?.map((uid, index) => (\r\n                <PagePreview\r\n                  key={uid}\r\n                  uid={uid}\r\n                  mode={activeKey}\r\n                  pageIndex={index}\r\n                  currpageID={currpageID}\r\n                  refRec={refRec.current}\r\n                />\r\n              ))}\r\n              {placeholder}\r\n              {activeKey === \"ALL\" && <AddPageButton />}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PagePreview: FC<{\r\n  uid: string;\r\n  mode: string;\r\n  pageIndex: number;\r\n  currpageID: string;\r\n  refRec: Record<string, HTMLElement>;\r\n}> = ({ uid, pageIndex, mode, currpageID, refRec }) => {\r\n  const { stateSet, teamState, pageRec } = useContext(ReaderStateCtx);\r\n  const { scrollPage, switchPageMarked } = useContext(ReaderMethodCtx);\r\n  const page = pageRec && pageRec[uid];\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStateMap = teamState?.getOnePageState(uid);\r\n  if (!page || !drawState) return null;\r\n\r\n  if (\r\n    mode === \"WRITTEN\" &&\r\n    drawState.isEmpty() &&\r\n    (!teamStateMap || teamStateMap.every((ds) => ds.isEmpty()))\r\n  ) {\r\n    return null;\r\n  } else if (mode === \"MARKED\" && !page.marked) {\r\n    return null;\r\n  }\r\n\r\n  const switchMarked = (e: MouseEvent<HTMLSpanElement>) => {\r\n    switchPageMarked(uid);\r\n    e.stopPropagation();\r\n  };\r\n  const curr = currpageID === uid;\r\n  const dragDisabled = mode !== \"ALL\";\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={uid}\r\n      index={pageIndex}\r\n      isDragDisabled={dragDisabled}\r\n    >\r\n      {(\r\n        { innerRef, draggableProps, dragHandleProps },\r\n        { isDragging: drag }\r\n      ) => {\r\n        const { image, marked } = page;\r\n        return (\r\n          <div\r\n            ref={(e) => {\r\n              innerRef(e);\r\n              if (e) refRec[uid] = e;\r\n            }}\r\n            className={classNames(\"page\", { curr, drag })}\r\n            onClick={() => scrollPage(uid)}\r\n            {...draggableProps}\r\n            {...dragHandleProps}\r\n          >\r\n            <PageWrapper\r\n              uid={uid}\r\n              drawState={drawState}\r\n              teamStateMap={teamStateMap}\r\n              thumbnail={image}\r\n              preview\r\n            />\r\n            <span\r\n              className={classNames(\"bookmark\", { marked })}\r\n              onClickCapture={switchMarked}\r\n            />\r\n            <span className=\"index\">{pageIndex + 1}</span>\r\n            <PreviewOption uid={uid} />\r\n          </div>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nconst PreviewOption = ({ uid }: { uid: string }) => {\r\n  const [popShow, setPopShow] = useState(false);\r\n  const { addPage, deletePage } = useContext(ReaderMethodCtx);\r\n  const { Item } = Menu;\r\n\r\n  const menu = (\r\n    <Menu\r\n      onClick={({ key, domEvent }) => {\r\n        if (key === \"ADD\") {\r\n          addPage(uid);\r\n        } else if (key === \"COPY\") {\r\n          addPage(uid, true);\r\n        } else if (key === \"DELETE\") {\r\n          deletePage(uid);\r\n        }\r\n        domEvent.stopPropagation();\r\n        setPopShow(false);\r\n      }}\r\n    >\r\n      <Item key=\"ADD\" icon={<PlusOutlined />}>\r\n        Add page\r\n      </Item>\r\n      <Item key=\"COPY\" icon={<CopyOutlined />}>\r\n        Duplicate\r\n      </Item>\r\n      <Item key=\"DELETE\" danger icon={<DeleteOutlined />}>\r\n        Delete\r\n      </Item>\r\n    </Menu>\r\n  );\r\n  return (\r\n    <Popover\r\n      content={menu}\r\n      trigger=\"click\"\r\n      placement=\"left\"\r\n      visible={popShow}\r\n      onVisibleChange={setPopShow}\r\n      destroyTooltipOnHide\r\n    >\r\n      <span\r\n        className=\"option\"\r\n        onClickCapture={(e) => {\r\n          setPopShow((prev) => !prev);\r\n          e.stopPropagation();\r\n        }}\r\n      >\r\n        <MoreOutlined />\r\n      </span>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst PreviewTabs = ({\r\n  activeKey,\r\n  setActiveKey,\r\n}: {\r\n  activeKey: string;\r\n  setActiveKey: (key: string) => void;\r\n}) => {\r\n  const { TabPane } = Tabs;\r\n  return (\r\n    <Tabs\r\n      className=\"tabs\"\r\n      activeKey={activeKey}\r\n      onChange={setActiveKey}\r\n      tabBarGutter={10}\r\n      size=\"small\"\r\n      centered\r\n    >\r\n      <TabPane tab={<IconFont type=\"icon-uf_paper\" />} key=\"ALL\" />\r\n      <TabPane tab={<IconFont type=\"icon-bookmark2\" />} key=\"MARKED\" />\r\n      <TabPane tab={<IconFont type=\"icon-write\" />} key=\"WRITTEN\" />\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport default function PageNav() {\r\n  const [navOn, setNavOn] = useState(false);\r\n  const [activeKey, setActiveKey] = useState<string>(\"ALL\");\r\n  const title = {\r\n    ALL: \"All Pages\",\r\n    MARKED: \"Bookmarks\",\r\n    WRITTEN: \"Notes\",\r\n  }[activeKey];\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        type=\"text\"\r\n        icon={<MenuFoldOutlined />}\r\n        onClick={() => setNavOn((prev) => !prev)}\r\n      />\r\n      <Drawer\r\n        visible={navOn}\r\n        onClose={() => setNavOn(false)}\r\n        width={200}\r\n        title={title}\r\n        closeIcon={<MenuUnfoldOutlined />}\r\n        bodyStyle={{ padding: 0, overflow: \"hidden\" }}\r\n        destroyOnClose\r\n      >\r\n        <PageNavContent activeKey={activeKey} setActiveKey={setActiveKey} />\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n","import React, {\r\n  FC,\r\n  useMemo,\r\n  useState,\r\n  Dispatch,\r\n  useEffect,\r\n  useContext,\r\n  CSSProperties,\r\n  SetStateAction,\r\n} from \"react\";\r\nimport {\r\n  Badge,\r\n  Avatar,\r\n  Button,\r\n  Slider,\r\n  Divider,\r\n  message,\r\n  Popover,\r\n  Popconfirm,\r\n  ButtonProps,\r\n  Tag,\r\n  Alert,\r\n} from \"antd\";\r\nimport Search from \"antd/lib/input/Search\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { ReaderMethodCtx, ReaderStateCtx } from \"./Reader\";\r\nimport { TeamCtx } from \"./Team\";\r\nimport DigitDisplay from \"../ui/DigitDisplay\";\r\nimport { colors, getHashedColor } from \"../../lib/color\";\r\nimport { getUserID, UserInfo } from \"../../lib/user\";\r\nimport { CtrlMode, DrawCtrl } from \"../../lib/draw/drawCtrl\";\r\nimport PageNav from \"./PageNav\";\r\nimport {\r\n  HomeFilled,\r\n  EyeOutlined,\r\n  UndoOutlined,\r\n  RedoOutlined,\r\n  SaveOutlined,\r\n  TeamOutlined,\r\n  CopyOutlined,\r\n  DragOutlined,\r\n  ExpandOutlined,\r\n  ReloadOutlined,\r\n  DeleteOutlined,\r\n  HighlightOutlined,\r\n  DisconnectOutlined,\r\n  RotateLeftOutlined,\r\n  RotateRightOutlined,\r\n  EyeInvisibleOutlined,\r\n  UsergroupAddOutlined,\r\n} from \"@ant-design/icons\";\r\nimport IconFont from \"../ui/IconFont\";\r\nimport \"./drawTools.sass\";\r\nimport { putNote } from \"../../lib/network/http\";\r\nimport { editNoteData } from \"../../lib/note/archive\";\r\n\r\nexport default function DrawTools({\r\n  handleUndo,\r\n  handleRedo,\r\n  instantSave,\r\n}: {\r\n  handleUndo: () => void;\r\n  handleRedo: () => void;\r\n  instantSave: () => Promise<void> | undefined;\r\n}) {\r\n  const { saved, stateSet, teamOn, mode, drawCtrl } =\r\n    useContext(ReaderStateCtx);\r\n  const { setDrawCtrl, setMode } = useContext(ReaderMethodCtx);\r\n  const { finger } = drawCtrl;\r\n\r\n  const nav = useNavigate();\r\n\r\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\r\n    setDrawCtrl((prev) => ({ ...prev, ...updated }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (mode === \"selected\") {\r\n      message.info({\r\n        className: \"select-message\",\r\n        icon: <DragOutlined style={{ display: \"none\" }} />,\r\n        content: <SelectMenu setMode={setMode} />,\r\n        duration: 0,\r\n        key: \"selected\",\r\n      });\r\n      return () => message.destroy(\"selected\");\r\n    }\r\n  }, [mode]);\r\n\r\n  return (\r\n    <header>\r\n      <div className=\"left\">\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => nav(\"/\")}\r\n          icon={<HomeFilled style={{ opacity: 0.8 }} />}\r\n        />\r\n        <br />\r\n        <Button\r\n          type=\"text\"\r\n          className=\"save\"\r\n          onClick={instantSave}\r\n          disabled={saved}\r\n          icon={<SaveOutlined />}\r\n        />\r\n      </div>\r\n      <div className=\"middle\">\r\n        <Button\r\n          type=\"text\"\r\n          shape=\"circle\"\r\n          icon={<UndoOutlined />}\r\n          onClick={handleUndo}\r\n          disabled={!stateSet?.isUndoable()}\r\n        />\r\n        <Button\r\n          className=\"redo\"\r\n          type=\"text\"\r\n          shape=\"circle\"\r\n          icon={<RedoOutlined />}\r\n          onClick={handleRedo}\r\n          disabled={!stateSet?.isRedoable()}\r\n        />\r\n        <br />\r\n        <PenButton updateDrawCtrl={updateDrawCtrl} />\r\n        <EraserButton updateDrawCtrl={updateDrawCtrl} />\r\n        <Button\r\n          type={[\"select\", \"selected\"].includes(mode) ? \"default\" : \"text\"}\r\n          shape=\"circle\"\r\n          onClick={() => setMode(\"select\")}\r\n          icon={<ExpandOutlined />}\r\n        />\r\n        <Button\r\n          className=\"finger\"\r\n          type={finger ? \"primary\" : \"text\"}\r\n          ghost={finger}\r\n          shape=\"circle\"\r\n          onClick={() => updateDrawCtrl({ finger: !finger })}\r\n          icon={<IconFont type=\"icon-finger\" />}\r\n        />\r\n      </div>\r\n      <div className=\"right\">\r\n        {teamOn && <RoomInfo />}\r\n        {teamOn || <JoinRoom instantSave={instantSave} />}\r\n        <br />\r\n        <PageNav />\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nconst PenButton = ({\r\n  updateDrawCtrl,\r\n}: {\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}) => {\r\n  const { mode } = useContext(ReaderStateCtx);\r\n  const { setMode } = useContext(ReaderMethodCtx);\r\n  return mode === \"draw\" ? (\r\n    <Popover\r\n      content={<PenPanel updateDrawCtrl={updateDrawCtrl} />}\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button type=\"default\" shape=\"circle\" icon={<HighlightOutlined />} />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      shape=\"circle\"\r\n      onClick={() => setMode(\"draw\")}\r\n      icon={<HighlightOutlined />}\r\n    />\r\n  );\r\n};\r\n\r\nconst PenPanel = ({\r\n  updateDrawCtrl,\r\n}: {\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}) => {\r\n  const {\r\n    drawCtrl: { lineWidth, highlight },\r\n  } = useContext(ReaderStateCtx);\r\n  const [tempLineWidth, setTempLineWidth] = useState(lineWidth);\r\n\r\n  return (\r\n    <div className=\"pen-panel\">\r\n      <div className=\"pen-status\">\r\n        <Slider\r\n          min={5}\r\n          max={100}\r\n          value={tempLineWidth}\r\n          onChange={setTempLineWidth}\r\n          onAfterChange={(lineWidth) => updateDrawCtrl({ lineWidth })}\r\n        />\r\n        <Button\r\n          type={highlight ? \"primary\" : \"text\"}\r\n          ghost={highlight}\r\n          shape=\"circle\"\r\n          icon={<IconFont type=\"icon-Highlight\" />}\r\n          onClick={() => updateDrawCtrl({ highlight: !highlight })}\r\n        />\r\n      </div>\r\n      <ColorSelect updateDrawCtrl={updateDrawCtrl} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ColorSelect = ({\r\n  updateDrawCtrl,\r\n}: {\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}) => {\r\n  const {\r\n    drawCtrl: { color },\r\n  } = useContext(ReaderStateCtx);\r\n\r\n  return (\r\n    <div className=\"color-select\">\r\n      {colors.map((c) => (\r\n        <label key={c}>\r\n          <input\r\n            checked={color === c}\r\n            type=\"radio\"\r\n            name=\"color\"\r\n            onChange={() => updateDrawCtrl({ color: c })}\r\n          />\r\n          <div\r\n            className=\"circle\"\r\n            style={{ \"--circle-color\": c } as CSSProperties}\r\n          ></div>\r\n        </label>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst EraserButton = ({\r\n  updateDrawCtrl,\r\n}: {\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}) => {\r\n  const { setMode } = useContext(ReaderMethodCtx);\r\n  const {\r\n    mode,\r\n    drawCtrl: { eraserWidth },\r\n  } = useContext(ReaderStateCtx);\r\n  const [tempEraserWidth, setTempEraserWidth] = useState(eraserWidth);\r\n\r\n  const content = (\r\n    <div className=\"pen-panel\">\r\n      <Slider\r\n        min={5}\r\n        max={100}\r\n        value={tempEraserWidth}\r\n        onChange={setTempEraserWidth}\r\n        onAfterChange={(eraserWidth) => updateDrawCtrl({ eraserWidth })}\r\n      />\r\n    </div>\r\n  );\r\n  return mode === \"erase\" ? (\r\n    <Popover\r\n      content={content}\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button\r\n        type=\"default\"\r\n        shape=\"circle\"\r\n        icon={<IconFont type=\"icon-eraser\" />}\r\n      />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      shape=\"circle\"\r\n      onClick={() => setMode(\"erase\")}\r\n      icon={<IconFont type=\"icon-eraser\" />}\r\n    />\r\n  );\r\n};\r\n\r\nconst SelectMenu: FC<{\r\n  setMode: Dispatch<SetStateAction<CtrlMode>>;\r\n}> = ({ setMode }) => {\r\n  const buttonProps: ButtonProps = {\r\n    type: \"text\",\r\n    shape: \"round\",\r\n  };\r\n  return (\r\n    <>\r\n      <Button icon={<RotateLeftOutlined />} {...buttonProps} />\r\n      <Button icon={<RotateRightOutlined />} {...buttonProps} />\r\n      <Button\r\n        danger\r\n        icon={<DeleteOutlined />}\r\n        onClick={() => setMode(\"delete\")}\r\n        {...buttonProps}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst UserCard: FC<{ userInfo: UserInfo; self?: boolean }> = ({\r\n  userInfo,\r\n  self = false,\r\n}) => {\r\n  const { userName, userID, online } = userInfo;\r\n  const { ignores, setIgnores } = useContext(TeamCtx);\r\n  const color = useMemo(() => getHashedColor(userID), [userID]);\r\n  const ignored = ignores.has(userID) && !self;\r\n\r\n  const switchIgnore = () => {\r\n    setIgnores((prev) => {\r\n      if (prev.has(userID)) return prev.delete(userID);\r\n      return prev.add(userID);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-item\">\r\n      <Avatar\r\n        className=\"avatar\"\r\n        size=\"small\"\r\n        style={{ backgroundColor: color, opacity: online ? 1 : 0.5 }}\r\n      >\r\n        {userName.slice(0, 4)}\r\n      </Avatar>\r\n      <span className=\"user-name\">{userName}</span>\r\n      {self ? (\r\n        <Tag className=\"me-tag\">Me</Tag>\r\n      ) : (\r\n        <Button\r\n          type=\"text\"\r\n          icon={ignored ? <EyeInvisibleOutlined /> : <EyeOutlined />}\r\n          onClick={switchIgnore}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction RoomInfo() {\r\n  const { code, userRec, loadInfo, connected } = useContext(TeamCtx);\r\n  const link = window.location.href;\r\n  const copy = () => {\r\n    navigator.clipboard.writeText(link);\r\n    message.destroy(\"copy\");\r\n    message.success({\r\n      content: \"Share link copied!\",\r\n      icon: <CopyOutlined />,\r\n      key: \"copy\",\r\n    });\r\n  };\r\n\r\n  const userList = useMemo(() => {\r\n    const values = Object.values(userRec);\r\n    const selfID = getUserID();\r\n    const selfInfo = userRec[selfID];\r\n    const list = selfInfo ? [selfInfo] : [];\r\n    list.push(\r\n      ...values.filter(({ online, userID }) => online && userID !== selfID),\r\n      ...values.filter(({ online, userID }) => !online && userID !== selfID)\r\n    );\r\n    return list;\r\n  }, [userRec]);\r\n  const onlineNum = userList.filter((u) => u.online).length;\r\n\r\n  const content = (\r\n    <div className=\"team-popover\">\r\n      {connected || (\r\n        <Alert\r\n          className=\"disconn-alert\"\r\n          message=\"Network failed.\"\r\n          icon={<DisconnectOutlined />}\r\n          type=\"error\"\r\n          showIcon\r\n          banner\r\n        />\r\n      )}\r\n      <DigitDisplay value={code} />\r\n      <Search\r\n        className=\"copy-link code-font\"\r\n        value={link}\r\n        enterButton={<Button icon={<CopyOutlined />} />}\r\n        onSearch={copy}\r\n      />\r\n      <Divider />\r\n      <div className=\"user-list\">\r\n        {userList.map((u) => (\r\n          <UserCard\r\n            key={u.userID}\r\n            userInfo={u}\r\n            self={u.userID === getUserID()}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const title = (\r\n    <div className=\"team-title\">\r\n      <span>Team info</span>\r\n      <Button\r\n        shape=\"circle\"\r\n        type=\"text\"\r\n        size=\"small\"\r\n        icon={<ReloadOutlined />}\r\n        onClick={loadInfo}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Popover\r\n      content={content}\r\n      trigger=\"click\"\r\n      placement=\"bottomRight\"\r\n      title={title}\r\n      defaultVisible\r\n      getPopupContainer={(e) => e}\r\n    >\r\n      <Button\r\n        type=\"text\"\r\n        icon={\r\n          <Badge\r\n            status={connected ? \"success\" : \"error\"}\r\n            count={connected ? onlineNum : \"!\"}\r\n            size=\"small\"\r\n          >\r\n            <TeamOutlined />\r\n          </Badge>\r\n        }\r\n      />\r\n    </Popover>\r\n  );\r\n}\r\n\r\nconst JoinRoom: FC<{ instantSave: () => Promise<void> | undefined }> = ({\r\n  instantSave,\r\n}) => {\r\n  const { noteID } = useContext(ReaderStateCtx);\r\n  const nav = useNavigate();\r\n  const createRoom = async () => {\r\n    await instantSave();\r\n    const resCode = await putNote(noteID);\r\n    if (!resCode) {\r\n      message.error(\"Can't create room.\");\r\n      return;\r\n    }\r\n    await editNoteData(noteID, { team: true });\r\n    nav(\"/team/\" + noteID);\r\n  };\r\n  return (\r\n    <Popconfirm\r\n      placement=\"bottomRight\"\r\n      title=\"Enable team editing?\"\r\n      onConfirm={createRoom}\r\n      okText=\"Yes\"\r\n      cancelText=\"No\"\r\n    >\r\n      <Button type=\"text\" icon={<UsergroupAddOutlined />} />\r\n    </Popconfirm>\r\n  );\r\n};\r\n","import React, {\r\n  useRef,\r\n  Dispatch,\r\n  useState,\r\n  useEffect,\r\n  TouchEvent,\r\n  SetStateAction,\r\n} from \"react\";\r\nimport { CtrlMode, defaultDrawCtrl, DrawCtrl } from \"../../lib/draw/drawCtrl\";\r\nimport { DrawState, SetDrawState, Stroke } from \"../../lib/draw/DrawState\";\r\nimport { releaseCanvas } from \"../../lib/draw/drawer\";\r\nimport { isStylus } from \"../../lib/touch/touch\";\r\nimport { usePinch } from \"@use-gesture/react\";\r\nimport { Set } from \"immutable\";\r\nimport paper from \"paper\";\r\nimport \"./draw.sass\";\r\n\r\nconst PREVIEW_WIDTH = 200;\r\n\r\nconst Draw = ({\r\n  drawState,\r\n  onChange = () => {},\r\n  otherStates,\r\n  drawCtrl = defaultDrawCtrl,\r\n  mode = \"draw\",\r\n  setMode = () => {},\r\n  readonly = false,\r\n  preview = false,\r\n  imgSrc,\r\n}: {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  onChange?: SetDrawState;\r\n  drawCtrl?: DrawCtrl;\r\n  mode?: CtrlMode;\r\n  setMode?: Dispatch<SetStateAction<CtrlMode>>;\r\n  readonly?: boolean;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}) => {\r\n  const { width, height } = drawState;\r\n  const canvasEl = useRef<HTMLCanvasElement>(null);\r\n  const scope = useRef(new paper.PaperScope());\r\n  const group = useRef<paper.Path[]>();\r\n  const path = useRef<paper.Path>();\r\n  const [rect, setRect] = useState<paper.Shape.Rectangle>();\r\n  const selectGroup = useRef<paper.Group>();\r\n  const [erased, setErased] = useState(Set<string>());\r\n  const ratio = useRef(1);\r\n\r\n  let { color, finger, lineWidth, highlight, eraserWidth } = drawCtrl;\r\n\r\n  const isEventValid = (e: TouchEvent<HTMLCanvasElement>) => {\r\n    return finger || isStylus(e);\r\n  };\r\n\r\n  const updateRatio = () => {\r\n    const clientWidth = canvasEl.current?.clientWidth;\r\n    if (clientWidth) ratio.current = width / clientWidth;\r\n  };\r\n\r\n  const transformPoint = (point: paper.Point) => {\r\n    const { center, zoom } = scope.current.view;\r\n    const offsetP = new paper.Point(width, height)\r\n      .divide(2)\r\n      .subtract(center.multiply(zoom));\r\n    const projP = scope.current.view.projectToView(point);\r\n    const absoluteP = projP.multiply(ratio.current);\r\n    return absoluteP.subtract(offsetP).divide(zoom);\r\n  };\r\n\r\n  const setupPaper = () => {\r\n    if (!canvasEl.current) return;\r\n    scope.current.setup(canvasEl.current);\r\n\r\n    const r = preview ? PREVIEW_WIDTH / width : 1;\r\n    scope.current.view.viewSize.width = width * r;\r\n    scope.current.view.viewSize.height = height * r;\r\n    scope.current.view.scale(r, new paper.Point(0, 0));\r\n    const bgRect = new paper.Shape.Rectangle(\r\n      new paper.Point(0, 0),\r\n      new paper.Point(width, height)\r\n    );\r\n    bgRect.fillColor = new paper.Color(\"#fff\");\r\n    bgRect.name = \"BACKGROUND\";\r\n    bgRect.sendToBack();\r\n  };\r\n\r\n  const setNewRect = (e: paper.MouseEvent) => {\r\n    updateRatio();\r\n    scope.current.activate();\r\n    const point = transformPoint(e.point);\r\n    const rectangle = new paper.Shape.Rectangle(point, new paper.Size(0, 0));\r\n    rectangle.strokeColor = new paper.Color(\"#1890ff\");\r\n    rectangle.strokeWidth = 3;\r\n    rectangle.dashOffset = 0;\r\n    rectangle.dashArray = [30, 20];\r\n    setRect(rectangle);\r\n  };\r\n\r\n  const handleDown = {\r\n    draw() {\r\n      updateRatio();\r\n      scope.current.activate();\r\n      path.current = new scope.current.Path();\r\n      const strokeColor = new paper.Color(color);\r\n      if (highlight) {\r\n        strokeColor.alpha /= 2;\r\n        path.current.blendMode = \"multiply\";\r\n      }\r\n      path.current.strokeColor = strokeColor;\r\n      path.current.strokeWidth = lineWidth;\r\n      path.current.strokeJoin = \"round\";\r\n      path.current.strokeCap = \"round\";\r\n    },\r\n    erase() {\r\n      updateRatio();\r\n      scope.current.activate();\r\n      path.current = new scope.current.Path();\r\n      const strokeColor = new paper.Color(\"#0003\");\r\n      path.current.strokeColor = strokeColor;\r\n      path.current.strokeWidth = eraserWidth;\r\n      path.current.strokeJoin = \"round\";\r\n      path.current.strokeCap = \"round\";\r\n    },\r\n    select(e: paper.MouseEvent) {\r\n      setNewRect(e);\r\n    },\r\n    selected(e: paper.MouseEvent) {\r\n      scope.current.activate();\r\n      const point = transformPoint(e.point);\r\n      if (!rect) return;\r\n      if (!point.isInside(rect.strokeBounds)) {\r\n        setNewRect(e);\r\n        setMode(\"select\");\r\n      }\r\n    },\r\n    delete() {},\r\n  }[mode];\r\n\r\n  const handleDrag = {\r\n    draw(e: paper.MouseEvent) {\r\n      if (!path.current) return;\r\n      scope.current.activate();\r\n      const point = transformPoint(e.point);\r\n      path.current.add(point);\r\n      path.current.smooth();\r\n    },\r\n    erase(e: paper.MouseEvent) {\r\n      const eraserPath = path.current;\r\n      if (!eraserPath) return;\r\n      scope.current.activate();\r\n      const point = transformPoint(e.point);\r\n      eraserPath.add(point);\r\n      eraserPath.smooth();\r\n\r\n      const newErased = group.current\r\n        ?.filter((p) => !erased.has(p.name))\r\n        .filter((p) => checkErase(p, eraserPath))\r\n        .map((p) => p.name);\r\n      newErased && setErased((prev) => prev.concat(newErased));\r\n    },\r\n    select(e: paper.MouseEvent) {\r\n      if (!rect) return;\r\n      scope.current.activate();\r\n      const delta = e.delta.multiply(ratio.current);\r\n      rect.size = rect.size.add(new paper.Size(delta.x, delta.y));\r\n      rect.position = rect.position.add(delta.divide(2));\r\n    },\r\n    selected(e: paper.MouseEvent) {\r\n      const sGroup = selectGroup.current;\r\n      if (!rect || !sGroup) return;\r\n      const delta = e.delta.multiply(ratio.current);\r\n      rect.position = rect.position.add(delta);\r\n      sGroup.position = sGroup.position.add(delta);\r\n    },\r\n    delete() {},\r\n  }[mode];\r\n\r\n  const handleUp = {\r\n    erase() {\r\n      if (!path.current) return;\r\n      scope.current.activate();\r\n      path.current.remove();\r\n      onChange((prev) => DrawState.eraseStrokes(prev, erased.toArray()));\r\n      setErased(Set());\r\n    },\r\n    draw() {\r\n      if (!path.current || path.current.segments.length === 0) return;\r\n      path.current.simplify();\r\n      if (path.current.segments.length === 0) return;\r\n      const pathData = path.current.exportJSON();\r\n      path.current.remove();\r\n      onChange((prev) => DrawState.addStroke(prev, pathData));\r\n    },\r\n    select() {\r\n      if (!rect || rect.size.width < 10 || rect.size.height < 10) {\r\n        return setRect(undefined);\r\n      }\r\n      scope.current.activate();\r\n\r\n      const bounds = rect.strokeBounds;\r\n      selectGroup.current = new paper.Group();\r\n      group.current?.forEach((p) => {\r\n        if (!(p instanceof paper.Path)) return;\r\n        if (p.isInside(bounds) || p.intersects(rect)) {\r\n          selectGroup.current?.addChild(p);\r\n        }\r\n      });\r\n      setMode(\"selected\");\r\n    },\r\n    selected() {},\r\n    delete() {},\r\n  }[mode];\r\n\r\n  useEffect(() => {\r\n    setupPaper();\r\n    scope.current.activate();\r\n    const cvs = canvasEl.current;\r\n    return () => void (cvs && releaseCanvas(cvs));\r\n  }, []);\r\n\r\n  const handlePaper = () => {\r\n    if (readonly) return;\r\n    scope.current.view.onMouseDown = handleDown;\r\n    scope.current.view.onMouseDrag = handleDrag;\r\n    scope.current.view.onMouseUp = handleUp;\r\n  };\r\n  useEffect(handlePaper);\r\n\r\n  const preventTouch = (e: TouchEvent<HTMLCanvasElement>) => {\r\n    isEventValid(e) || e.stopPropagation();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!imgSrc) return;\r\n    const img = new Image();\r\n    img.src = imgSrc;\r\n    let raster: paper.Raster;\r\n\r\n    img.onload = () => {\r\n      scope.current.activate();\r\n      raster = new paper.Raster(img);\r\n      raster.position = scope.current.view.center;\r\n      let r = width / img.width;\r\n      raster.scale(r);\r\n      raster.sendToBack();\r\n      raster.parent.getItem({ name: \"BACKGROUND\" })?.sendToBack();\r\n    };\r\n\r\n    return () => void raster?.remove();\r\n  }, [imgSrc]);\r\n\r\n  useEffect(() => {\r\n    scope.current.activate();\r\n    group.current = [];\r\n\r\n    drawState.getValidStrokes().forEach((stroke) => {\r\n      paintStroke(stroke, group.current, erased);\r\n    });\r\n\r\n    return () => group.current?.forEach((item) => item.remove());\r\n  }, [drawState, erased]);\r\n\r\n  useEffect(() => {\r\n    scope.current.activate();\r\n    const otherGroup: paper.Path[] = [];\r\n\r\n    otherStates?.forEach((ds) => {\r\n      ds.getValidStrokes().forEach((stroke) => {\r\n        paintStroke(stroke, otherGroup);\r\n      });\r\n    });\r\n\r\n    return () => otherGroup.forEach((item) => item.remove());\r\n  }, [otherStates]);\r\n\r\n  const updateMutation = () => {\r\n    const list = selectGroup.current?.children;\r\n    if (!list?.length) return;\r\n    const mutations: [string, string][] = list.map((p) => [\r\n      p.name,\r\n      p.exportJSON(),\r\n    ]);\r\n    onChange((prev) => DrawState.mutateStroke(prev, mutations));\r\n  };\r\n\r\n  const deleteSelected = () => {\r\n    const list = selectGroup.current?.children;\r\n    if (!list?.length) return;\r\n    const deleted = list.map((item) => item.name);\r\n    onChange((prev) => DrawState.eraseStrokes(prev, deleted));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (mode === \"select\") {\r\n      //\r\n    } else if (mode === \"selected\") {\r\n      if (rect?.strokeColor) rect.strokeColor.alpha /= 2;\r\n      scope.current.activate();\r\n      return updateMutation;\r\n    } else if (mode === \"delete\") {\r\n      deleteSelected();\r\n      setMode(\"select\");\r\n      setRect(undefined);\r\n    } else {\r\n      setRect(undefined);\r\n    }\r\n  }, [mode]);\r\n\r\n  useEffect(() => {\r\n    if (!rect) return;\r\n    let id = 0;\r\n    const moveDash = () => {\r\n      id = requestAnimationFrame(() => {\r\n        rect.dashOffset += 3;\r\n        moveDash();\r\n      });\r\n    };\r\n    moveDash();\r\n    return () => {\r\n      rect.remove();\r\n      cancelAnimationFrame(id);\r\n    };\r\n  }, [rect]);\r\n\r\n  const bind = usePinch(\r\n    (state) => {\r\n      const { memo, offset, last, first, origin } = state;\r\n\r\n      first && updateRatio();\r\n\r\n      const [lastScale, lastOX, lastOY] = memo ?? [1, origin[0], origin[1]];\r\n      const scale = first ? 1 : offset[0] / lastScale;\r\n      const r = ratio.current;\r\n      const [oX, oY] = origin;\r\n      const originP = new paper.Point(oX, oY).multiply(r);\r\n      scope.current.view.scale(scale, originP);\r\n      \r\n      const [dX, dY] = [oX - lastOX, oY - lastOY];\r\n      const transP = new paper.Point(dX, dY).multiply(r / offset[0]);\r\n      scope.current.view.translate(transP);\r\n      \r\n      if (offset[0] === 1) {\r\n        scope.current.view.center = new paper.Point(width, height).divide(2);\r\n      }\r\n      \r\n      if (!last) return [offset[0], origin[0], origin[1]];\r\n    },\r\n    {\r\n      scaleBounds: { max: 3, min: 1 },\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handler = (e: Event) => e.preventDefault();\r\n    document.addEventListener(\"gesturestart\", handler);\r\n    document.addEventListener(\"gesturechange\", handler);\r\n    document.addEventListener(\"gestureend\", handler);\r\n    return () => {\r\n      document.removeEventListener(\"gesturestart\", handler);\r\n      document.removeEventListener(\"gesturechange\", handler);\r\n      document.removeEventListener(\"gestureend\", handler);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasEl}\r\n      className=\"draw-canvas\"\r\n      data-paper-hidpi={false}\r\n      onTouchStartCapture={preventTouch}\r\n      onTouchMoveCapture={preventTouch}\r\n      {...bind()}\r\n    />\r\n  );\r\n};\r\n\r\nexport default React.memo(Draw);\r\n\r\nconst paintStroke = (\r\n  stroke: Stroke,\r\n  group?: paper.Path[],\r\n  erased?: Set<string>\r\n) => {\r\n  let { pathData, uid } = stroke;\r\n  try {\r\n    const path = new paper.Path();\r\n    path.importJSON(pathData);\r\n    path.name = uid;\r\n    if (erased?.has(uid)) path.opacity /= 2;\r\n    group?.push(path);\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n\r\nconst getCheckPoints = (() => {\r\n  const cache = new WeakMap<paper.Segment, paper.Point[]>();\r\n  return (segment: paper.Segment, width: number) => {\r\n    const cached = cache.get(segment);\r\n    if (cached) return cached;\r\n\r\n    const { point } = segment;\r\n    const prevPoint = segment.previous?.point;\r\n    if (!prevPoint) return [];\r\n    const delta = point.subtract(prevPoint);\r\n    const times = (delta.length / width) * 2;\r\n    const checkPoints: paper.Point[] = [];\r\n    for (let i = 0; i < times; i += 1) {\r\n      checkPoints.push(point.subtract(delta.multiply(i / times)));\r\n    }\r\n    cache.set(segment, checkPoints);\r\n    return checkPoints;\r\n  };\r\n})();\r\n\r\nconst checkErase = (checkedPath: paper.Path, eraserPath: paper.Path) => {\r\n  const curveBound = eraserPath.lastSegment.curve?.strokeBounds;\r\n  if (\r\n    !(checkedPath instanceof paper.Path) ||\r\n    !curveBound?.intersects(checkedPath.strokeBounds)\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  if (eraserPath.intersects(checkedPath)) return true;\r\n\r\n  const { strokeWidth, lastSegment } = eraserPath;\r\n  const checkPoints = getCheckPoints(lastSegment, strokeWidth);\r\n  return checkPoints.some((cPoint) => {\r\n    const d = checkedPath.getNearestPoint(cPoint)?.getDistance(cPoint);\r\n    return d && d < (checkedPath.strokeWidth + strokeWidth) / 2;\r\n  });\r\n};\r\n","import { TouchEvent } from \"react\";\r\n\r\nexport type iOSTouch = Touch & {\r\n  force?: number;\r\n  touchType?: \"stylus\" | \"direct\";\r\n};\r\n\r\nexport function isStylus(e: TouchEvent<HTMLCanvasElement> | globalThis.TouchEvent) {\r\n  const touch = e.touches[0] as iOSTouch;\r\n  return touch?.touchType === \"stylus\";\r\n}\r\n","import React, {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  Dispatch,\r\n  useEffect,\r\n  useContext,\r\n  useCallback,\r\n  createContext,\r\n  SetStateAction,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport {\r\n  DrawCtrl,\r\n  CtrlMode,\r\n  getDrawCtrl,\r\n  saveDrawCtrl,\r\n  defaultDrawCtrl,\r\n} from \"../../lib/draw/drawCtrl\";\r\nimport { createPage, NoteInfo, NotePage } from \"../../lib/note/note\";\r\nimport { loadNote, editNoteData } from \"../../lib/note/archive\";\r\nimport { updatePages } from \"../../lib/network/http\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { useBeforeunload } from \"react-beforeunload\";\r\nimport { TeamState } from \"../../lib/draw/TeamState\";\r\nimport { DrawState } from \"../../lib/draw/DrawState\";\r\nimport { StateSet } from \"../../lib/draw/StateSet\";\r\nimport { debounce, last } from \"lodash\";\r\nimport { insertAfter } from \"../../lib/array\";\r\nimport { AddPageButton } from \"./ReaderTools\";\r\nimport { useMounted } from \"../../lib/hooks\";\r\nimport { Map, Set } from \"immutable\";\r\nimport DrawTools from \"./DrawTools\";\r\nimport { TeamCtx } from \"./Team\";\r\nimport Draw from \"../draw/Draw\";\r\nimport { Button, message } from \"antd\";\r\nimport \"./reader.sass\";\r\n\r\n\r\nexport const ReaderStateCtx = createContext({\r\n  noteID: \"\",\r\n  noteInfo: undefined as NoteInfo | undefined,\r\n  stateSet: undefined as StateSet | undefined,\r\n  teamState: undefined as TeamState | undefined,\r\n  pageRec: undefined as Record<string, NotePage> | undefined,\r\n  pageOrder: undefined as string[] | undefined,\r\n  saved: true,\r\n  teamOn: false,\r\n  inviewPages: Set<string>(),\r\n  refRec: {} as Record<string, HTMLElement>,\r\n  drawCtrl: defaultDrawCtrl,\r\n  mode: \"draw\" as CtrlMode,\r\n});\r\n\r\nexport const ReaderMethodCtx = createContext({\r\n  scrollPage: (() => {}) as (pageID: string) => void,\r\n  setInviewPages: (() => {}) as Dispatch<SetStateAction<Set<string>>>,\r\n  switchPageMarked: (() => {}) as (pageID: string) => void,\r\n  setPageState: (() => {}) as (uid: string, ds: DrawState) => void,\r\n  addPage: (() => {}) as (prevpageID: string, copy?: boolean) => void,\r\n  addFinalPage: () => {},\r\n  deletePage: (() => {}) as (pageID: string) => void,\r\n  setMode: (() => {}) as Dispatch<SetStateAction<CtrlMode>>,\r\n  setDrawCtrl: (() => {}) as Dispatch<SetStateAction<DrawCtrl>>,\r\n  saveReorder: (async () => {}) as (\r\n    order: string[],\r\n    push: boolean\r\n  ) => Promise<void>,\r\n});\r\n\r\nexport default function Reader({ teamOn }: { teamOn: boolean }) {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const nav = useNavigate();\r\n\r\n  const [pageRec, setPageRec] = useState<Record<string, NotePage>>();\r\n  const [noteInfo, setNoteInfo] = useState<NoteInfo>();\r\n  const [stateSet, setStateSet] = useState<StateSet>();\r\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\r\n  const [mode, setMode] = useState<CtrlMode>(\"draw\");\r\n  const [saved, setSaved] = useState(true);\r\n  const [inviewPages, setInviewPages] = useState(Set<string>());\r\n  const [pageOrder, setPageOrder] = useState<string[]>();\r\n  const [loaded, setLoaded] = useState(false);\r\n  \r\n  const refRec = useRef<Record<string, HTMLElement>>({});\r\n  const mounted = useMounted();\r\n\r\n  const { teamState, pushOperation, teamUpdate, pushNewPage, pushReorder } =\r\n    useContext(TeamCtx);\r\n\r\n  const loadNotePages = async () => {\r\n    const storedNote = await loadNote(noteID);\r\n    if (!storedNote) {\r\n      message.error(\"Note not found\");\r\n      return nav(\"/\");\r\n    }\r\n    const { pageRec, pdf, pageOrder, ...noteInfo } = storedNote;\r\n    setPageRec(pageRec);\r\n    setPageOrder(pageOrder);\r\n    setNoteInfo(noteInfo);\r\n    setStateSet(StateSet.createFromPages(pageRec));\r\n    setDrawCtrl(await getDrawCtrl());\r\n    setLoaded(true);\r\n    if (teamOn) updatePages(noteID);\r\n  };\r\n\r\n  const debouncedSave = useCallback(\r\n    debounce(async (pr: Record<string, NotePage>) => {\r\n      await editNoteData(noteID, { pageRec: pr });\r\n      const canvas = document.querySelector(\"canvas\");\r\n      const data = canvas?.toDataURL();\r\n      data && editNoteData(noteID, { thumbnail: data });\r\n      mounted.current && setSaved(true);\r\n    }, 3000),\r\n    []\r\n  );\r\n  const instantSave = debouncedSave.flush;\r\n\r\n  useLayoutEffect(() => {\r\n    loadNotePages();\r\n    return () => void instantSave();\r\n  }, [noteID, teamOn]);\r\n\r\n  useBeforeunload(instantSave);\r\n\r\n  useEffect(() => {\r\n    if (!noteInfo) return;\r\n    document.title = noteInfo.name + \" - Multibility\";\r\n  }, [noteInfo]);\r\n\r\n  useEffect(() => {\r\n    loaded && saveDrawCtrl(drawCtrl);\r\n  }, [drawCtrl]);\r\n\r\n  useEffect(() => {\r\n    if (!stateSet?.lastOp) return;\r\n    pushOperation(stateSet.lastOp);\r\n  }, [stateSet]);\r\n\r\n  useEffect(() => {\r\n    if (!pageRec || !loaded) return;\r\n    debouncedSave(pageRec);\r\n    setSaved(false);\r\n  }, [pageRec]);\r\n\r\n  useEffect(() => {\r\n    if (!teamUpdate) return;\r\n    const { type, pageOrder } = teamUpdate;\r\n    if (type === \"reorder\") {\r\n      saveReorder(pageOrder);\r\n\r\n      if (!teamUpdate.deleted) return;\r\n      showPageDelMsg(() => {\r\n        saveReorder(teamUpdate.prevOrder, true);\r\n      });\r\n    } else if (type === \"newPage\") {\r\n      saveReorder(pageOrder);\r\n      let { pageID, newPage } = teamUpdate;\r\n      setPageRec((prev) => prev && { ...prev, [pageID]: newPage });\r\n      setStateSet((prev) => prev?.addState(pageID, newPage));\r\n    }\r\n  }, [teamUpdate]);\r\n\r\n  const updatePageRec = (pageID: string, ds: DrawState) => {\r\n    const state = DrawState.flaten(ds);\r\n    setPageRec(\r\n      (prev) => prev && { ...prev, [pageID]: { ...prev[pageID], state } }\r\n    );\r\n  };\r\n\r\n  const setPageState = useCallback((pageID: string, ds: DrawState) => {\r\n    setStateSet((prev) => prev?.setState(pageID, ds));\r\n    updatePageRec(pageID, ds);\r\n  }, []);\r\n\r\n  const switchPageMarked = (pageID: string) => {\r\n    const page = pageRec && pageRec[pageID];\r\n    if (!page) return;\r\n    const marked = !Boolean(page.marked);\r\n    setPageRec(\r\n      (prev) => prev && { ...prev, [pageID]: { ...prev[pageID], marked } }\r\n    );\r\n  };\r\n\r\n  const handleUndo = () => {\r\n    setStateSet((prev) => {\r\n      if (!prev) return;\r\n      const newSS = prev.undo();\r\n      const lastDS = newSS.getLastDS();\r\n      lastDS && updatePageRec(...lastDS);\r\n      return newSS;\r\n    });\r\n  };\r\n\r\n  const handleRedo = () => {\r\n    setStateSet((prev) => {\r\n      if (!prev) return;\r\n      const newSS = prev.redo();\r\n      const lastDS = newSS.getLastDS();\r\n      lastDS && updatePageRec(...lastDS);\r\n      return newSS;\r\n    });\r\n  };\r\n\r\n  const scrollPage = (pageID: string) => {\r\n    refRec.current[pageID]?.scrollIntoView();\r\n  };\r\n\r\n  const saveReorder = async (newOrder: string[], push = false) => {\r\n    setPageOrder(newOrder);\r\n    await editNoteData(noteID, { pageOrder: newOrder });\r\n    await instantSave();\r\n    push && pushReorder(newOrder);\r\n  };\r\n\r\n  const addPage = (prevpageID: string, copy = false) => {\r\n    if (!pageOrder) return;\r\n    const prevPage = copy ? pageRec && pageRec[prevpageID] : undefined;\r\n    const [pageID, newPage] = createPage(prevPage);\r\n    const newOrder = insertAfter(pageOrder, prevpageID, pageID);\r\n    pushNewPage(newOrder, pageID, newPage);\r\n    saveReorder(newOrder);\r\n    setPageRec((prev) => prev && { ...prev, [pageID]: newPage });\r\n    setStateSet((prev) => prev?.addState(pageID, newPage));\r\n  };\r\n\r\n  const addFinalPage = () => {\r\n    const lastpageID = last(pageOrder);\r\n    lastpageID && addPage(lastpageID);\r\n  };\r\n\r\n  const deletePage = (pageID: string) => {\r\n    const newOrder = pageOrder?.filter((id) => id !== pageID);\r\n    newOrder && saveReorder(newOrder, true);\r\n  };\r\n\r\n  const renderResult = (\r\n    <div className=\"reader container\">\r\n      <DrawTools\r\n        instantSave={instantSave}\r\n        handleUndo={handleUndo}\r\n        handleRedo={handleRedo}\r\n      />\r\n      <main>\r\n        {pageOrder?.map((uid) => (\r\n          <PageContainer uid={uid} key={uid} />\r\n        ))}\r\n        <AddPageButton />\r\n      </main>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <ReaderStateCtx.Provider\r\n      value={{\r\n        noteID,\r\n        noteInfo,\r\n        stateSet,\r\n        teamState,\r\n        saved,\r\n        teamOn,\r\n        pageRec,\r\n        pageOrder,\r\n        inviewPages,\r\n        refRec: refRec.current,\r\n        mode,\r\n        drawCtrl,\r\n      }}\r\n    >\r\n      <ReaderMethodCtx.Provider\r\n        value={{\r\n          scrollPage,\r\n          setInviewPages,\r\n          switchPageMarked,\r\n          setPageState,\r\n          addPage,\r\n          addFinalPage,\r\n          deletePage,\r\n          setMode,\r\n          setDrawCtrl,\r\n          saveReorder,\r\n        }}\r\n      >\r\n        {renderResult}\r\n      </ReaderMethodCtx.Provider>\r\n    </ReaderStateCtx.Provider>\r\n  );\r\n}\r\n\r\nconst showPageDelMsg = (onUndo: () => void) => {\r\n  message.warning({\r\n    content: (\r\n      <>\r\n        One page was deleted.\r\n        <Button\r\n          size=\"small\"\r\n          type=\"link\"\r\n          onClick={() => {\r\n            message.destroy(\"DELETE\");\r\n            onUndo();\r\n          }}\r\n        >\r\n          Undo\r\n        </Button>\r\n      </>\r\n    ),\r\n    key: \"DELETE\",\r\n    duration: 10,\r\n  });\r\n};\r\n\r\nconst PageContainer: FC<{ uid: string }> = ({ uid }) => {\r\n  const { pageRec, stateSet, teamState } = useContext(ReaderStateCtx);\r\n  const { setPageState } = useContext(ReaderMethodCtx);\r\n\r\n  const page = pageRec && pageRec[uid];\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStateMap = teamState?.getOnePageState(uid);\r\n  const updateState = useCallback(\r\n    (ds: DrawState) => setPageState(uid, ds),\r\n    [uid, setPageState]\r\n  );\r\n  if (!page || !drawState) return null;\r\n\r\n  return (\r\n    <PageWrapper\r\n      drawState={drawState}\r\n      teamStateMap={teamStateMap}\r\n      updateState={updateState}\r\n      pdfIndex={page.pdfIndex}\r\n      uid={uid}\r\n    />\r\n  );\r\n};\r\n\r\nexport const PageWrapper = ({\r\n  thumbnail,\r\n  drawState,\r\n  teamStateMap,\r\n  updateState,\r\n  pdfIndex,\r\n  preview = false,\r\n  uid,\r\n}: {\r\n  uid: string;\r\n  drawState: DrawState;\r\n  teamStateMap?: Map<string, DrawState>;\r\n  thumbnail?: string;\r\n  pdfIndex?: number;\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n}) => {\r\n  const { setInviewPages } = useContext(ReaderMethodCtx);\r\n  const { refRec, noteID } = useContext(ReaderStateCtx);\r\n  const [fullImg, setFullImg] = useState<string>();\r\n  const [visibleRef, visible] = useInView({ delay: 100 });\r\n\r\n  const { height, width } = drawState;\r\n  const ratio = height / width;\r\n\r\n  const handleRef = useCallback(\r\n    (e: HTMLDivElement | null) => {\r\n      if (!e) return;\r\n      visibleRef(e);\r\n      if (!preview && refRec) refRec[uid] = e;\r\n    },\r\n    [refRec]\r\n  );\r\n\r\n  const loadImage = useCallback(\r\n    (() => {\r\n      let called = false;\r\n      return async () => {\r\n        if (preview || !pdfIndex || called) return;\r\n        called = true;\r\n        const { getOnePageImage } = await import(\"../../lib/note/pdfImage\");\r\n        setFullImg(await getOnePageImage(noteID, pdfIndex));\r\n      };\r\n    })(),\r\n    [preview, pdfIndex]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (preview) return;\r\n    if (visible) {\r\n      loadImage();\r\n      setInviewPages((prev) => prev.add(uid));\r\n    } else {\r\n      setInviewPages((prev) => prev.delete(uid));\r\n    }\r\n  }, [visible, loadImage, preview]);\r\n\r\n  const { ignores } = useContext(TeamCtx);\r\n  const otherStates = useMemo(\r\n    () => teamStateMap && Array.from(teamStateMap.deleteAll(ignores).values()),\r\n    [teamStateMap, ignores]\r\n  );\r\n\r\n  const imageLoaded = fullImg || !pdfIndex;\r\n  const drawShow = visible && imageLoaded;\r\n  const maskShow = Boolean(preview || !imageLoaded);\r\n\r\n  return (\r\n    <section\r\n      ref={handleRef}\r\n      className=\"note-page\"\r\n      style={{ paddingTop: `${ratio * 100}%` }}\r\n    >\r\n      {drawShow && (\r\n        <DrawWrapper\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          updateState={updateState}\r\n          imgSrc={fullImg || thumbnail || undefined}\r\n          preview={preview}\r\n        />\r\n      )}\r\n      {maskShow && <div className=\"mask\" />}\r\n    </section>\r\n  );\r\n};\r\nPageWrapper.displayName = \"PageWrapper\";\r\n\r\nconst DrawWrapper = ({\r\n  drawState,\r\n  updateState,\r\n  otherStates,\r\n  preview = false,\r\n  imgSrc,\r\n}: {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}) => {\r\n  const { mode, drawCtrl } = useContext(ReaderStateCtx);\r\n  const { setMode } = useContext(ReaderMethodCtx);\r\n\r\n  const handleChange = useCallback(\r\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\r\n      if (!updateState) return;\r\n      let ds = arg instanceof DrawState ? arg : arg(drawState);\r\n      updateState(ds);\r\n    },\r\n    [updateState, drawState]\r\n  );\r\n\r\n  return (\r\n    <div className=\"page-draw\">\r\n      {preview ? (\r\n        <Draw\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          imgSrc={imgSrc}\r\n          readonly\r\n          preview\r\n        />\r\n      ) : (\r\n        <Draw\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          onChange={handleChange}\r\n          imgSrc={imgSrc}\r\n          drawCtrl={drawCtrl}\r\n          mode={mode}\r\n          setMode={setMode}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nDrawWrapper.displayName = \"DrawWrapper\";\r\n","import { useEffect, useMemo, useRef } from \"react\";\r\n\r\nexport function useObjectUrl(obj: Blob | MediaSource | undefined) {\r\n  const url = useMemo(() => (obj ? URL.createObjectURL(obj) : undefined), [obj]);\r\n\r\n  useEffect(() => {\r\n    const prevUrl = url || \"\";\r\n    return () => URL.revokeObjectURL(prevUrl);\r\n  }, [url]);\r\n\r\n  return url;\r\n}\r\n\r\nexport function useMounted() {\r\n  const _mounted = useRef(false);\r\n\r\n  useEffect(() => {\r\n    _mounted.current = true;\r\n    return () => {\r\n      _mounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  return _mounted;\r\n}\r\n","import { Map, Record } from \"immutable\";\nimport { NotePage, TeamNote, TeamPageInfo } from \"../note/note\";\nimport { DrawState, WIDTH } from \"./DrawState\";\nimport { SetOperation } from \"./StateSet\";\n\ninterface TeamStateRecordType {\n  pageStates: Map<string, Map<string, DrawState>>;\n  pageInfos: Map<string, TeamPageInfo>;\n}\n\nconst defaultRecord: Readonly<TeamStateRecordType> = {\n  pageStates: Map(),\n  pageInfos: Map(),\n};\n\ntype TeamStateRecord = Record<TeamStateRecordType>;\nconst defaultFactory = Record(defaultRecord);\n\nexport class TeamState {\n  constructor(private immutable: TeamStateRecord) {}\n\n  getImmutable() {\n    return this.immutable;\n  }\n\n  getPageStates() {\n    return this.getImmutable().get(\"pageStates\");\n  }\n\n  getPageInfos() {\n    return this.getImmutable().get(\"pageInfos\");\n  }\n\n  getOneState(pageID: string, userID: string) {\n    return this.getPageStates().get(pageID)?.get(userID);\n  }\n\n  getOnePageState(pageID: string) {\n    return this.getPageStates().get(pageID);\n  }\n\n  getPageRatio(pageID: string) {\n    return this.getPageInfos().get(pageID)?.ratio;\n  }\n\n  includesPage(pageID: string) {\n    return this.getPageStates().has(pageID);\n  }\n\n  setState(pageID: string, userID: string, drawState: DrawState) {\n    const pageMap = this.getPageStates().get(pageID);\n    if (!pageMap) return this;\n    return new TeamState(\n      this.getImmutable().update(\"pageStates\", (m) =>\n        m.set(pageID, pageMap.set(userID, drawState))\n      )\n    );\n  }\n\n  static createFromTeamPages(teamNote: TeamNote, width = WIDTH) {\n    const { pageRec } = teamNote;\n    let record = defaultFactory();\n    Object.entries(pageRec).forEach(([pageID, teamPage]) => {\n      const { states, ratio } = teamPage;\n      const pageMap = Map(\n        Object.entries(states).map(([userID, flatState]) => [\n          userID,\n          DrawState.loadFromFlat(flatState, width, width * ratio),\n        ])\n      );\n      record = record\n        .update(\"pageStates\", (m) => m.set(pageID, pageMap))\n        .update(\"pageInfos\", (m) => m.set(pageID, { ratio }));\n    });\n    return new TeamState(record);\n  }\n\n  addPage(pageID: string, notePage: NotePage) {\n    const { ratio } = notePage;\n    return new TeamState(\n      this.getImmutable()\n        .update(\"pageStates\", (m) => m.set(pageID, Map()))\n        .update(\"pageInfos\", (m) => m.set(pageID, { ratio }))\n    );\n  }\n\n  pushOperation(setOp: SetOperation, userID: string, width = WIDTH) {\n    const { pageID, ...op } = setOp;\n    const ratio = this.getPageRatio(pageID);\n    if (!this.includesPage(pageID) || !ratio) return this;\n    const prevDs =\n      this.getOneState(pageID, userID) ||\n      DrawState.createEmpty(width, width * ratio);\n\n    const ds = DrawState.pushOperation(prevDs, op);\n    return this.setState(pageID, userID, ds);\n  }\n\n  resetUser(userID: string, pageRec: globalThis.Record<string, NotePage>) {\n    let newTS: TeamState = this;\n    for (let [pageID, { state, ratio }] of Object.entries(pageRec)) {\n      const prevDS = newTS.getOneState(pageID, userID);\n      if (!prevDS) continue;\n      const { width } = prevDS;\n      newTS = newTS.setState(\n        pageID,\n        userID,\n        DrawState.loadFromFlat(state, width, width * ratio)\n      );\n    }\n    return newTS;\n  }\n}\n","import { message } from \"antd\";\r\nimport React, {\r\n  useState,\r\n  Dispatch,\r\n  useEffect,\r\n  createContext,\r\n  SetStateAction,\r\n} from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { SetOperation } from \"../../lib/draw/StateSet\";\r\nimport { getTeamNoteState, loadTeamNoteInfo } from \"../../lib/network/http\";\r\nimport { IoFactory } from \"../../lib/network/io\";\r\nimport Reader from \"./Reader\";\r\nimport { getUserID, UserInfo } from \"../../lib/user\";\r\nimport { LoginOutlined, LogoutOutlined } from \"@ant-design/icons\";\r\nimport { NotePage } from \"../../lib/note/note\";\r\nimport { TeamState } from \"../../lib/draw/TeamState\";\r\nimport { Set } from \"immutable\";\r\n\r\nexport const TeamCtx = createContext({\r\n  code: -2,\r\n  userRec: {} as Record<string, UserInfo>,\r\n  ignores: Set<string>(),\r\n  setIgnores: (() => {}) as Dispatch<SetStateAction<Set<string>>>,\r\n  loadInfo: (() => {}) as () => Promise<boolean>,\r\n  teamState: undefined as TeamState | undefined,\r\n  pushOperation: (() => {}) as (op: SetOperation) => void,\r\n  teamUpdate: undefined as undefined | TeamUpdate,\r\n  pushReorder: (() => {}) as (pageOrder: string[]) => void,\r\n  pushNewPage: (() => {}) as (\r\n    pageOrder: string[],\r\n    pageID: string,\r\n    newPage: NotePage\r\n  ) => void,\r\n  connected: false,\r\n});\r\n\r\ninterface ReorderInfo {\r\n  pageOrder: string[];\r\n  deleted: boolean;\r\n  prevOrder: string[];\r\n}\r\n\r\ninterface NewPageInfo {\r\n  pageOrder: string[];\r\n  pageID: string;\r\n  newPage: NotePage;\r\n}\r\n\r\ntype TeamUpdate =\r\n  | ({\r\n      type: \"reorder\";\r\n    } & ReorderInfo)\r\n  | ({\r\n      type: \"newPage\";\r\n    } & NewPageInfo);\r\n\r\nexport default function Team() {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const [teamState, setTeamState] = useState<TeamState>();\r\n  const [code, setCode] = useState(-2);\r\n  const [userRec, setUserRec] = useState<Record<string, UserInfo>>({});\r\n  const [ignores, setIgnores] = useState(Set<string>());\r\n  const [ws] = useState(IoFactory(noteID));\r\n  const [teamUpdate, setTeamUpdate] = useState<TeamUpdate>();\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [connected, setConnected] = useState(true);\r\n  const nav = useNavigate();\r\n\r\n  const loadState = async () => {\r\n    const teamNote = await getTeamNoteState(noteID);\r\n    if (!teamNote) {\r\n      message.error(\"Failed loading the team note state\");\r\n      return false;\r\n    }\r\n    setTeamState(TeamState.createFromTeamPages(teamNote));\r\n    return true;\r\n  };\r\n\r\n  const loadInfo = async () => {\r\n    const info = await loadTeamNoteInfo(noteID);\r\n    if (!info) {\r\n      message.error(\"Failed loading the team note info\");\r\n      return false;\r\n    }\r\n    setCode(info.code);\r\n    return true;\r\n  };\r\n\r\n  const roomInit = async () => {\r\n    message.loading({\r\n      content: \"Loading team note...\",\r\n      duration: 0,\r\n      key: \"TEAM_LOADING\",\r\n    });\r\n    if (!((await loadInfo()) && (await loadState()))) {\r\n      message.destroy(\"TEAM_LOADING\");\r\n      return nav(\"/\");\r\n    }\r\n    message.destroy(\"TEAM_LOADING\");\r\n    setLoaded(true);\r\n    ws.on(\"push\", ({ operation, userID }) => {\r\n      setTeamState((prev) => prev?.pushOperation(operation, userID));\r\n    });\r\n\r\n    ws.on(\"joined\", ({ joined, members }) => {\r\n      const { userID, userName } = joined;\r\n      setUserRec(members);\r\n      if (userID === getUserID()) return;\r\n      message.destroy(userID);\r\n      message.success({\r\n        icon: <LoginOutlined />,\r\n        content: `${userName} joined room`,\r\n        key: userID,\r\n      });\r\n    });\r\n\r\n    ws.on(\"leaved\", ({ leaved, members }) => {\r\n      const { userID, userName } = leaved;\r\n      setUserRec(members);\r\n      if (userID === getUserID()) return;\r\n      message.destroy(userID);\r\n      message.warning({\r\n        icon: <LogoutOutlined />,\r\n        content: `${userName} leaved room`,\r\n        key: userID,\r\n      });\r\n    });\r\n\r\n    ws.on(\"reorder\", (info: ReorderInfo) => {\r\n      setTeamUpdate({ type: \"reorder\", ...info });\r\n    });\r\n\r\n    ws.on(\"newPage\", (info: NewPageInfo) => {\r\n      const { pageID, newPage } = info;\r\n      setTeamState((prev) => prev?.addPage(pageID, newPage));\r\n      setTeamUpdate({ type: \"newPage\", ...info });\r\n    });\r\n\r\n    ws.on(\"reset\", ({ userID, pageRec }) => {\r\n      if (userID === getUserID()) return;\r\n      setTeamState((prev) => prev?.resetUser(userID, pageRec));\r\n    });\r\n\r\n    ws.on(\"connect\", () => setConnected(true));\r\n    ws.on(\"disconnect\", () => setConnected(false));\r\n\r\n    ws.connect();\r\n  };\r\n\r\n  const roomDestroy = () => {\r\n    ws.removeAllListeners();\r\n    ws.disconnect();\r\n    message.destroy(\"TEAM_LOADING\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    roomInit();\r\n    return roomDestroy;\r\n  }, [noteID]);\r\n\r\n  const pushOperation = (operation: SetOperation) => {\r\n    ws.emit(\"push\", { operation });\r\n  };\r\n\r\n  const pushReorder = (pageOrder: string[]) => {\r\n    ws.emit(\"reorder\", { pageOrder });\r\n  };\r\n\r\n  const pushNewPage = (\r\n    pageOrder: string[],\r\n    pageID: string,\r\n    newPage: NotePage\r\n  ) => {\r\n    setTeamState((prev) => prev?.addPage(pageID, newPage));\r\n    const { image, marked, ...newTeamPage } = newPage;\r\n    ws.emit(\"newPage\", { pageOrder, pageID, newPage: newTeamPage });\r\n  };\r\n\r\n  if (!loaded) return null;\r\n  return (\r\n    <TeamCtx.Provider\r\n      value={{\r\n        code,\r\n        ignores,\r\n        userRec,\r\n        loadInfo,\r\n        connected,\r\n        teamState,\r\n        setIgnores,\r\n        teamUpdate,\r\n        pushOperation,\r\n        pushReorder,\r\n        pushNewPage,\r\n      }}\r\n    >\r\n      <Reader teamOn />\r\n    </TeamCtx.Provider>\r\n  );\r\n}\r\n","import { io } from \"socket.io-client\";\r\nimport { getUserID, getUserName } from \"../user\";\r\nimport { BASE_URL } from \"./http\";\r\n\r\nexport const IoFactory = (noteID: string) => {\r\n  return () =>\r\n    io(BASE_URL, {\r\n      autoConnect: false,\r\n      query: {\r\n        userID: getUserID(),\r\n        userName: getUserName(),\r\n        noteID,\r\n      },\r\n    });\r\n};\r\n","export function createVirtualCanvas(width: number, height: number) {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const context = canvas.getContext(\"2d\");\r\n  if (!context) {\r\n    throw new Error(\"can't get virtual canvas context\");\r\n  }\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  return { canvas, context };\r\n}\r\n\r\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  const ctx = canvas.getContext('2d');\r\n  ctx?.clearRect(0, 0, 1, 1);\r\n}\r\n"],"names":["defaultDrawCtrl","finger","lineWidth","eraserWidth","color","highlight","getDrawCtrl","localforage","drawCtrl","defaultRecord","states","Map","editStack","List","undoStack","defaultFactory","Record","StateSet","immutable","lastOp","this","getImmutable","get","pageID","getStates","drawState","prevDS","getOneState","currRecord","update","s","set","l","push","delete","notePage","width","WIDTH","state","ratio","newDS","DrawState","getEditStack","size","getUndoStack","isUndoable","lastUid","last","lastSetOp","pop","isRedoable","ds","undefined","list","pageRec","entries","Object","createFromList","map","key","insertAfter","prevItem","newItem","prevIndex","indexOf","curr","slice","splice","AddPageButton","addFinalPage","useContext","ReaderMethodCtx","pageOrder","ReaderStateCtx","empty","Boolean","length","className","classNames","type","icon","PlusOutlined","block","onClick","DigitDisplay","value","useState","randomNum","setRandomNum","digits","String","padStart","split","Number","resetRandom","Math","floor","random","useEffect","timer","setTimeout","clearTimeout","disabled","d","idx","Digit","digit","createFromIconfontCN","scriptUrl","PageNavContent","activeKey","setActiveKey","inviewPages","scrollPage","saveReorder","refRec","useRef","listEl","currpageID","useMemo","find","has","current","scrollIntoView","itemHeight","clientHeight","listHeight","scrollBy","PreviewTabs","onDragEnd","source","destination","fromIndex","index","toIndex","newOrder","result","removed","exchange","requestAnimationFrame","droppableId","droppableProps","innerRef","placeholder","ref","e","uid","PagePreview","mode","pageIndex","stateSet","teamState","switchPageMarked","page","teamStateMap","getOnePageState","isEmpty","every","marked","switchMarked","stopPropagation","dragDisabled","draggableId","isDragDisabled","draggableProps","dragHandleProps","drag","isDragging","image","PageWrapper","thumbnail","preview","onClickCapture","PreviewOption","popShow","setPopShow","addPage","deletePage","Item","Menu","menu","domEvent","CopyOutlined","danger","DeleteOutlined","content","trigger","placement","visible","onVisibleChange","destroyTooltipOnHide","prev","MoreOutlined","TabPane","Tabs","onChange","tabBarGutter","centered","tab","PageNav","navOn","setNavOn","title","ALL","MARKED","WRITTEN","MenuFoldOutlined","onClose","closeIcon","MenuUnfoldOutlined","bodyStyle","padding","overflow","destroyOnClose","DrawTools","handleUndo","handleRedo","instantSave","saved","teamOn","setDrawCtrl","setMode","nav","useNavigate","updateDrawCtrl","updated","message","DragOutlined","style","display","SelectMenu","duration","HomeFilled","opacity","SaveOutlined","shape","UndoOutlined","RedoOutlined","PenButton","EraserButton","includes","ExpandOutlined","ghost","RoomInfo","JoinRoom","PenPanel","getPopupContainer","HighlightOutlined","tempLineWidth","setTempLineWidth","min","max","onAfterChange","ColorSelect","colors","c","checked","name","tempEraserWidth","setTempEraserWidth","buttonProps","RotateLeftOutlined","RotateRightOutlined","UserCard","userInfo","self","userName","userID","online","TeamCtx","ignores","setIgnores","getHashedColor","ignored","backgroundColor","EyeInvisibleOutlined","EyeOutlined","add","code","userRec","loadInfo","connected","link","window","location","href","userList","values","selfID","getUserID","selfInfo","filter","onlineNum","u","DisconnectOutlined","showIcon","banner","Search","enterButton","onSearch","navigator","clipboard","writeText","ReloadOutlined","defaultVisible","status","count","TeamOutlined","noteID","createRoom","putNote","editNoteData","team","onConfirm","okText","cancelText","UsergroupAddOutlined","Draw","otherStates","readonly","imgSrc","height","canvasEl","scope","paper","group","path","rect","setRect","selectGroup","Set","erased","setErased","updateRatio","clientWidth","transformPoint","point","view","center","zoom","offsetP","divide","subtract","multiply","projectToView","setNewRect","activate","rectangle","strokeColor","strokeWidth","dashOffset","dashArray","handleDown","draw","Path","alpha","blendMode","strokeJoin","strokeCap","erase","select","selected","isInside","strokeBounds","handleDrag","smooth","eraserPath","newErased","p","checkErase","concat","delta","x","y","position","sGroup","handleUp","remove","toArray","segments","simplify","pathData","exportJSON","bounds","forEach","intersects","addChild","setup","r","viewSize","scale","bgRect","fillColor","sendToBack","setupPaper","cvs","releaseCanvas","onMouseDown","onMouseDrag","onMouseUp","preventTouch","touch","touches","touchType","isStylus","isEventValid","raster","img","Image","src","onload","parent","getItem","getValidStrokes","stroke","paintStroke","item","otherGroup","updateMutation","children","mutations","deleted","deleteSelected","id","moveDash","cancelAnimationFrame","bind","usePinch","memo","offset","first","origin","lastScale","lastOX","lastOY","oX","oY","originP","dX","dY","transP","translate","scaleBounds","handler","preventDefault","document","addEventListener","removeEventListener","onTouchStartCapture","onTouchMoveCapture","React","importJSON","console","error","getCheckPoints","cache","WeakMap","segment","cached","prevPoint","previous","times","checkPoints","i","checkedPath","curveBound","lastSegment","curve","some","cPoint","getNearestPoint","getDistance","createContext","noteInfo","setInviewPages","setPageState","Reader","useParams","setPageRec","setNoteInfo","setStateSet","setSaved","setPageOrder","loaded","setLoaded","mounted","_mounted","useMounted","pushOperation","teamUpdate","pushNewPage","pushReorder","loadNotePages","loadNote","storedNote","pdf","createFromPages","updatePages","debouncedSave","useCallback","debounce","pr","canvas","querySelector","data","toDataURL","flush","useLayoutEffect","useBeforeunload","saveDrawCtrl","showPageDelMsg","prevOrder","newPage","addState","updatePageRec","setState","prevpageID","copy","prevPage","createPage","renderResult","newSS","undo","lastDS","getLastDS","redo","PageContainer","Provider","lastpageID","onUndo","updateState","pdfIndex","fullImg","setFullImg","useInView","delay","visibleRef","handleRef","loadImage","called","getOnePageImage","Array","from","deleteAll","imageLoaded","drawShow","maskShow","paddingTop","DrawWrapper","displayName","handleChange","arg","pageStates","pageInfos","TeamState","getPageStates","getPageInfos","pageMap","m","setOp","op","getPageRatio","includesPage","prevDs","newTS","teamNote","record","teamPage","flatState","Team","setTeamState","setCode","setUserRec","io","BASE_URL","autoConnect","query","getUserName","IoFactory","ws","setTeamUpdate","setConnected","loadState","getTeamNoteState","createFromTeamPages","loadTeamNoteInfo","info","roomInit","on","operation","joined","members","LoginOutlined","leaved","LogoutOutlined","resetUser","connect","roomDestroy","removeAllListeners","disconnect","emit","newTeamPage","createVirtualCanvas","createElement","context","getContext","Error","ctx","clearRect"],"sourceRoot":""}