{"version":3,"file":"static/js/28.4fbfeab3.chunk.js","mappings":"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","sources":["component/IconFont.tsx","component/Draw/cursor/cursor.ts","component/Draw/touch.ts","component/Draw/grid.tsx","component/Draw/Draw.tsx","pages/reader/tools/DrawTools.tsx","component/PageWrapper/PageWrapper.tsx","component/PageWrapper/index.tsx","lib/draw/DrawCtrl.tsx","lib/draw/canvas.ts","pages/reader/tools/PenPanel.tsx"],"sourcesContent":["import { createFromIconfontCN } from \"@ant-design/icons\";\n\nexport default createFromIconfontCN({\n  scriptUrl: \"//at.alicdn.com/t/c/font_3181679_61bmx4utsp.js\",\n});\n","import { createVirtualCanvas } from \"lib/draw/canvas\";\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport rotateImg2x from \"./rotate2x.png\";\nimport rotateImg1x from \"./rotate1x.png\";\n\nexport const getCircleCursor = (drawCtrl: DrawCtrl, ratio: number) => {\n  const { lineWidth, eraserWidth, mode } = drawCtrl;\n  const size = ratio * (mode === \"erase\" ? eraserWidth : lineWidth);\n  if (size < 5) return \"crosshair\";\n  const half = size / 2;\n  const double = size * 2;\n\n  const getSvg = (size: number) =>\n    `data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23DDD7\" width=\"${size}\" height=\"${size}\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"5\"/></svg>`;\n\n  const img1x = getSvg(size);\n  const img2x = getSvg(double);\n\n  return `-webkit-image-set(url('${img1x}')1x, url('${img2x}')2x) ${half} ${half}, crosshair`;\n};\n\nconst rotateCursorFactory = (src: string, size: number) => {\n  const cache = new Map<number, string>();\n  const half = size / 2;\n  const { canvas, context } = createVirtualCanvas(size, size);\n  const image = new Image();\n  image.src = src;\n  return (angle: number) => {\n    angle = Math.round(angle / 10) * 10;\n    const cached = cache.get(angle);\n    if (cached) return cached;\n    context.translate(half, half);\n    context.rotate((angle * Math.PI) / 180);\n    context.drawImage(image, -half, -half);\n    const data = canvas.toDataURL();\n    context.clearRect(-half, -half, size, size);\n    context.resetTransform();\n    cache.set(angle, data);\n    return data;\n  };\n};\n\nconst getRotateCursor1x = rotateCursorFactory(rotateImg1x, 32);\nconst getRotateCursor2x = rotateCursorFactory(rotateImg2x, 64);\n\nexport const getRotateCurcor = (angle: number) => {\n  const data1x = getRotateCursor1x(angle);\n  const data2x = getRotateCursor2x(angle);\n  return `-webkit-image-set(url(${data1x})1x, url(${data2x})2x) 16 16, auto`;\n};\n","import { PointerEvent, TouchEvent, useEffect, useRef } from \"react\";\n\ntype iOSTouch = Touch & {\n  force?: number;\n  touchType?: \"stylus\" | \"direct\";\n};\n\nexport function isApplePencil(e: TouchEvent) {\n  const touch = e.touches[0] as iOSTouch;\n  return touch?.touchType === \"stylus\";\n}\n\nexport function usePreventTouch(\n  allowFinger: boolean\n): React.HTMLAttributes<HTMLDivElement> {\n  const isTouch = useRef(false);\n  const checkPoniter = (e: PointerEvent) =>\n    e.isPrimary && (isTouch.current = e.pointerType === \"touch\");\n\n  const isEventValid = (e: TouchEvent) =>\n    !isTouch.current ||\n    isApplePencil(e) ||\n    (allowFinger && e.touches.length === 1);\n\n  const preventTouch = (e: TouchEvent) =>\n    isEventValid(e) || e.stopPropagation();\n\n  return {\n    onPointerDownCapture: checkPoniter,\n    onPointerMoveCapture: checkPoniter,\n    onTouchStartCapture: preventTouch,\n    onTouchMoveCapture: preventTouch,\n  };\n}\n\nexport function usePreventGesture() {\n  useEffect(() => {\n    const handler = (e: Event) => e.preventDefault();\n    document.addEventListener(\"gesturestart\", handler);\n    document.addEventListener(\"gesturechange\", handler);\n    document.addEventListener(\"gestureend\", handler);\n    return () => {\n      document.removeEventListener(\"gesturestart\", handler);\n      document.removeEventListener(\"gesturechange\", handler);\n      document.removeEventListener(\"gestureend\", handler);\n    };\n  }, []);\n}\n","export const gernerateGrid = (\n  group: paper.Item[],\n  width: number,\n  height: number\n) => {\n  const wnum = Math.ceil(width / 100);\n  const hnum = Math.ceil(height / 100);\n  const grid = Array.from({ length: wnum }, () =>\n    Array.from({ length: hnum }, () => new Set<paper.Item>())\n  );\n  group.forEach((item) => setGridItem(grid, item));\n  return grid;\n};\n\nconst getGridRange = (bounds: paper.Rectangle) => {\n  const { topLeft, bottomRight } = bounds;\n  return [\n    Math.floor(topLeft.x / 100),\n    Math.ceil(bottomRight.x / 100),\n    Math.floor(topLeft.y / 100),\n    Math.ceil(bottomRight.y / 100),\n  ] as [number, number, number, number];\n};\nexport const setGridItem = (\n  grid: Set<paper.Item>[][],\n  item: paper.Item,\n  replaced?: paper.Item\n) => {\n  const bounds = (replaced ?? item).strokeBounds;\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\n  for (let x = xmin; x <= xmax; x += 1) {\n    for (let y = ymin; y <= ymax; y += 1) {\n      replaced && grid[x]?.[y]?.delete(replaced);\n      grid[x]?.[y]?.add(item);\n    }\n  }\n};\nexport const getGridItems = (\n  grid: Set<paper.Item>[][],\n  bounds: paper.Rectangle\n) => {\n  const itemSet = new Set<paper.Item>();\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\n  for (let x = xmin; x <= xmax; x += 1) {\n    for (let y = ymin; y <= ymax; y += 1) {\n      grid[x]?.[y]?.forEach((item) => itemSet.add(item));\n    }\n  }\n  return Array.from(itemSet);\n};\n","import React, {\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useDebugValue,\n  useImperativeHandle,\n  useLayoutEffect,\n} from \"react\";\nimport paper, {\n  Path,\n  Size,\n  Point,\n  Color,\n  Raster,\n  Layer,\n  Rectangle,\n} from \"paper/dist/paper-core\";\nimport { usePinch } from \"@use-gesture/react\";\nimport useSize from \"@react-hook/size\";\nimport { useMemoizedFn as useEvent } from \"ahooks\";\nimport { DrawState, Mutation, Splitter, Stroke } from \"lib/draw/DrawState\";\nimport { defaultDrawCtrl, DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { releaseCanvas } from \"lib/draw/canvas\";\nimport { getCircleCursor, getRotateCurcor } from \"./cursor\";\nimport { usePreventTouch, usePreventGesture } from \"./touch\";\nimport { Setter } from \"lib/hooks\";\nimport { setGridItem, getGridItems, gernerateGrid } from \"./grid\";\n\nexport interface DrawRefType {\n  deleteSelected: () => void;\n  duplicateSelected: () => void;\n  rasterizeSelected: () => string;\n  mutateStyle: (updated: Partial<DrawCtrl>) => void;\n  mutatePointText: (cb: (prev: paper.PointText) => void) => void;\n}\ninterface DrawPropType {\n  drawState: DrawState;\n  otherStates?: DrawState[];\n  onChange?: Setter<DrawState>;\n  toggleSelectTool?: (active: boolean, clickPoint?: paper.Point) => void;\n  toggleTextTool?: (pt: paper.PointText | undefined, slow: boolean) => void;\n  drawCtrl?: DrawCtrl;\n  readonly?: boolean;\n  imgSrc?: string;\n}\n\nconst HIT_TOLERANCE = 20;\nexport const P_ZERO = new Point(0, 0);\n\nconst DrawRaw = React.forwardRef<DrawRefType, DrawPropType>(\n  (\n    {\n      drawState,\n      otherStates,\n      onChange = () => {},\n      drawCtrl = defaultDrawCtrl,\n      readonly = false,\n      imgSrc,\n      toggleSelectTool = () => {},\n      toggleTextTool = () => {},\n    },\n    ref\n  ) => {\n    const { width, height } = drawState;\n    const projSize = useMemo(() => new Size(width, height), [width, height]);\n    const { mode, finger, lasso, eraserWidth } = drawCtrl;\n\n    const canvasEl = useRef<HTMLCanvasElement>(null);\n    const scope = useRef(new paper.PaperScope());\n    const [group, setGroup] = useState<paper.Item[]>([]);\n    const [teamGroup, setTeamGroup] = useState<paper.Item[]>([]);\n    const [path, setPath] = usePaperItem<paper.Path>();\n    const [rotateHandle, setRotateHandle] = usePaperItem<paper.Path>();\n\n    toggleSelectTool = useEvent(toggleSelectTool);\n    toggleTextTool = useEvent(toggleTextTool);\n    const showSelectTool = () => {\n      if (!path) return;\n      const bc = path.bounds.bottomCenter;\n      const { view } = scope.current;\n      toggleSelectTool(true, view.projectToView(bc));\n    };\n\n    useLayoutEffect(() => {\n      const cvs = canvasEl.current;\n      const scp = scope.current;\n      if (!cvs) return;\n\n      scp.setup(cvs);\n      scp.settings.handleSize = 10;\n      scp.settings.hitTolerance = HIT_TOLERANCE;\n      [0, 1, 2].forEach(() => (new Layer().visible = false));\n      scp.project.layers[2]?.activate();\n      new scp.Tool();\n\n      return () => {\n        scp.view?.remove();\n        releaseCanvas(cvs);\n      };\n    }, []);\n\n    useEffect(() => {\n      scope.current.activate();\n      const { layers } = scope.current.project;\n      const rects = paintRects(layers, projSize);\n\n      return () => rects.forEach((r) => r.remove());\n    }, [projSize]);\n\n    const [canvasWidth] = useSize(canvasEl);\n    const ratio = canvasWidth / width;\n    useEffect(() => {\n      if (!ratio) return;\n      const scp = scope.current;\n      scp.view.viewSize = projSize.multiply(ratio);\n      scp.view.scale(ratio, P_ZERO);\n      scp.project.layers.forEach((l) => (l.visible = true));\n      scp.view.update();\n\n      return () => scp.view?.scale(1 / ratio, P_ZERO);\n    }, [ratio, projSize]);\n\n    const [imgRaster, setImgRaster] = usePaperItem();\n    useEffect(() => {\n      if (!imgSrc) return;\n      scope.current.activate();\n      const raster = new Raster(imgSrc);\n      raster.project.layers[0]?.addChild(raster);\n      raster.sendToBack();\n      raster.onLoad = () => {\n        raster.view.update();\n        raster.fitBounds(new Rectangle(projSize));\n        raster.bringToFront();\n      };\n      setImgRaster(raster);\n    }, [imgSrc, projSize, setImgRaster]);\n\n    const mergedStrokes = useMemo(\n      () =>\n        otherStates\n          ? DrawState.mergeStates(drawState, ...otherStates)\n          : drawState.getStrokeList(),\n      [drawState, otherStates]\n    );\n\n    const renderSlow = useRef(false);\n    const deferTimerID = useRef(0);\n    const deferRender = useRef(false);\n    const setDefer = () => (deferRender.current = renderSlow.current);\n    if (readonly) setDefer();\n\n    useEffect(() => {\n      const [, l1] = scope.current.project.layers;\n      if (!l1) return;\n      const render = () => {\n        const tempGroup: paper.Item[] = [];\n        const tempTeamGroup: paper.Item[] = [];\n        const timeBeforeRender = performance.now();\n        scope.current.activate();\n        // clean-up layer_1 except the clip mask.\n        l1.removeChildren(1);\n        mergedStrokes.forEach((stroke) => {\n          const self = drawState.hasStroke(stroke.uid);\n          const item = paintStroke(stroke, l1);\n          if (self && item) tempGroup.push(item);\n          if (item) tempTeamGroup.push(item);\n        });\n        setGroup(tempGroup);\n        setTeamGroup(tempTeamGroup);\n\n        unrasterizeCanvas();\n        deferRender.current = false;\n        pathClones.current.forEach((c) => c.remove());\n        pathClones.current = [];\n\n        scope.current.view.update();\n        const duration = performance.now() - timeBeforeRender;\n        renderSlow.current = duration > 16;\n      };\n\n      if (deferRender.current) {\n        deferTimerID.current = window.setTimeout(render, 1000);\n      } else render();\n\n      // cancel previous render timer.\n      return () => window.clearTimeout(deferTimerID.current);\n    }, [mergedStrokes, drawState]);\n\n    const hitRef = useRef<paper.HitResult>();\n    const [selected, setSelected] = useState(false);\n    const paperMode = mode === \"select\" && selected ? \"selected\" : mode;\n    const [chosenIDs, setChosenIDs] = useState<string[]>([]);\n    const chosenItems = useMemo(() => {\n      const IDSet = new Set(chosenIDs);\n      return group.filter((item) => IDSet.has(item.name));\n    }, [group, chosenIDs]);\n\n    const resetSelect = useEvent(() => {\n      setSelected(false);\n      setPath(undefined);\n      setRotateHandle(undefined);\n      setChosenIDs([]);\n      toggleSelectTool(false);\n    });\n\n    useEffect(() => {\n      if (mode === \"select\") return resetSelect;\n    }, [mode, resetSelect]);\n    useEffect(() => resetSelect, [lasso, resetSelect]);\n\n    // reset selection after redo/undo\n    useEffect(() => {\n      const type = drawState.lastOp?.type ?? \"\";\n      if (/^redo|undo$/.test(type)) resetSelect();\n    }, [drawState, resetSelect]);\n\n    useEffect(() => {\n      toggleSelectTool(false);\n      if (pointText.current) {\n        const ptProxy = new Proxy(pointText.current, {});\n        toggleTextTool(ptProxy, renderSlow.current);\n      }\n    }, [canvasWidth, toggleSelectTool, toggleTextTool]);\n\n    const layerRaster = useRef<paper.Raster>();\n    const rasterizeLayer = (clip: paper.Path, force = false) => {\n      if (!renderSlow.current && !force) return;\n      const [l0, l1] = scope.current.project.layers;\n      if (!l0 || !l1) return;\n      l1.visible = true;\n      clip.clipMask = true;\n      const prevClip = l1.firstChild;\n      prevClip.replaceWith(clip);\n      imgRaster?.insertAbove(clip);\n\n      const dpi = 72 * devicePixelRatio;\n      const resolution = (canvasWidth / clip.bounds.width) * dpi;\n      let raster = layerRaster.current;\n      raster = layerRaster.current = l1.rasterize({ raster, resolution });\n      raster.visible = true;\n\n      l1.visible = false;\n      clip.replaceWith(prevClip);\n      imgRaster?.addTo(l0);\n    };\n    const unrasterizeLayer = () => {\n      scope.current.activate();\n      const [, l1] = scope.current.project.layers;\n      const lr = layerRaster.current;\n      if (!l1 || !lr) return;\n      l1.visible = true;\n      lr.visible = false;\n    };\n\n    const canvasRaster = useRef<paper.Raster>();\n    // raster changes with the size of canvas element\n    useEffect(\n      () => () => {\n        canvasRaster.current?.remove();\n        canvasRaster.current = undefined;\n      },\n      [canvasWidth]\n    );\n    const rasterizeCanvas = () => {\n      if (!renderSlow.current) return;\n      // rasterize the canvas only once\n      if (canvasRaster.current?.visible === true) return;\n      scope.current.activate();\n      const { view } = scope.current;\n      // create a raster of the canvas element's size only once.\n      const raster = (canvasRaster.current ??= new Raster(\n        view.viewSize.multiply(devicePixelRatio)\n      ));\n      raster.drawImage(view.element, P_ZERO);\n      raster.fitBounds(view.bounds);\n      raster.visible = true;\n      raster.opacity = process.env.NODE_ENV === \"production\" ? 1 : 0.8;\n      const [, l1] = scope.current.project.layers;\n      l1 && (l1.visible = false);\n    };\n    const unrasterizeCanvas = () => {\n      scope.current.activate();\n      const [, l1] = scope.current.project.layers;\n      const cr = canvasRaster.current;\n      const lr = layerRaster.current;\n      if (!l1 || !cr) return;\n      cr.visible = false;\n      // keep layer_1 hidden unless all 2 raster is hidden.\n      if (lr?.visible !== true) l1.visible = true;\n    };\n\n    const downPath = (e: paper.MouseEvent) => {\n      rasterizeCanvas();\n      setPath(startStroke(drawCtrl, e.point, renderSlow.current));\n    };\n    const downRect = (e: paper.MouseEvent) => {\n      rasterizeCanvas();\n      setPath(startRect(e.point));\n    };\n\n    const selectionDragged = useRef(false);\n    const handleDown = {\n      draw(e: paper.MouseEvent) {\n        setDefer();\n        downPath(e);\n      },\n      erase: downPath,\n      select: lasso ? downPath : downRect,\n      selected(e: paper.MouseEvent) {\n        selectionDragged.current = false;\n        if (!path) return;\n        if (!lasso) {\n          // check if the point hit the segment point.\n          let hitRes =\n            path.hitTest(e.point, { segments: true }) ??\n            rotateHandle?.hitTest(e.point, { segments: true, selected: true });\n          hitRef.current = hitRes;\n          if (hitRes) return;\n        }\n\n        // if click outside, reset the selection.\n        if (!path.contains(e.point)) {\n          resetSelect();\n          setRotateHandle(undefined);\n          lasso ? downPath(e) : downRect(e);\n        }\n      },\n      text: null,\n    }[paperMode];\n\n    const dragPath = (e: paper.MouseEvent) => {\n      // cancel previous render timer.\n      window.clearTimeout(deferTimerID.current);\n      path?.add(e.point);\n      path?.smooth();\n    };\n    const resizeRect = (e: paper.MouseEvent) => {\n      if (!path) return;\n      const { x, y } = e.point;\n      const [, s1, s2, s3] = path.segments;\n      if (!s1 || !s2 || !s3) return;\n      s1.point.x = x;\n      s2.point = e.point;\n      s3.point.y = y;\n      path.selected = true;\n    };\n    const moveSelected = (delta: paper.Point) => {\n      chosenItems.forEach((item) => item.translate(delta));\n      path?.translate(delta);\n      rotateHandle?.translate(delta);\n    };\n\n    const handleDrag = {\n      draw: dragPath,\n      erase: dragPath,\n      select: lasso ? dragPath : resizeRect,\n      selected(e: paper.MouseEvent) {\n        const hitRes = hitRef.current;\n        if (!path) return;\n        toggleSelectTool(false);\n        selectionDragged.current = true;\n        if (hitRes?.segment) {\n          const segment = hitRes.segment;\n          const rotating = segment.selected;\n          if (rotating) {\n            // rotate select items\n            const { center } = path.bounds;\n            const axis = segment.point.subtract(center);\n            const line = e.point.subtract(center);\n            setCursor(getRotateCurcor(line.angle));\n            const angle = line.angle - axis.angle;\n            path.rotate(angle, center);\n            rotateHandle?.rotate(angle, center);\n            chosenItems.forEach((item) => item?.rotate(angle, center));\n          } else {\n            // resize selected items\n            const moveP = segment.point;\n            const baseP = segment.next.next.point;\n            const diagonal = moveP.subtract(baseP);\n            const projection = e.point.subtract(baseP).project(diagonal);\n            const scale = projection.x / diagonal.x;\n            if (scale < 0) return;\n\n            path.scale(scale, baseP);\n            chosenItems.forEach((item) => {\n              item.scale(scale, baseP);\n              item.strokeWidth *= scale;\n            });\n\n            // reposition the rotate handle.\n            if (!rotateHandle) return;\n            rotateHandle.scale(scale, baseP);\n            const rBaseP = rotateHandle.segments[0]?.point;\n            if (!rBaseP) return;\n            rotateHandle.scale(100 / rotateHandle.length, rBaseP);\n          }\n        } else {\n          moveSelected(e.delta);\n        }\n      },\n      text: null,\n    }[paperMode];\n\n    useEffect(() => {\n      scope.current.tool.maxDistance = eraserWidth;\n    }, [eraserWidth]);\n    const erased = useRef(new Set<string>());\n    const replaced = useRef(new Map<string, paper.Item>());\n\n    const { globalEraser, pixelEraser } = drawCtrl;\n    const itemGrid = useMemo(() => {\n      if (!/^(erase|select)$/.test(mode)) return [];\n      const items =\n        globalEraser && mode === \"erase\" && !pixelEraser ? teamGroup : group;\n      return gernerateGrid(items, width, height);\n    }, [group, width, height, mode, teamGroup, globalEraser, pixelEraser]);\n\n    const handleToolDrag = (e: paper.ToolEvent) => {\n      const layer = scope.current.project.layers[1];\n      if (paperMode !== \"erase\" || !layer) return;\n      const ew = eraserWidth;\n\n      const hitOption = { class: paper.Path, stroke: true, tolerance: ew / 2 };\n      const bounds = new Rectangle(e.point.subtract(ew), new Size(ew, ew));\n\n      getGridItems(itemGrid, bounds).forEach((item) => {\n        if (erased.current.has(item.name)) return;\n        if (!item.parent) return;\n        item.hitTestAll(e.point, hitOption)?.forEach(({ item }) => {\n          if (!(item instanceof paper.Path)) return;\n          let topItem: paper.PathItem = item;\n          while (topItem.parent !== layer) {\n            if (!(topItem.parent instanceof paper.PathItem)) break;\n            topItem = topItem.parent;\n          }\n          const { name } = topItem;\n\n          if (pixelEraser) {\n            const radius = (ew + item.strokeWidth) / 2;\n            const circle = new Path.Circle({\n              center: e.point,\n              radius,\n              insert: false,\n            });\n\n            const sub = item.subtract(circle, { trace: false });\n            item.replaceWith(sub);\n            if (topItem === item) {\n              setGridItem(itemGrid, sub, item);\n              topItem = sub;\n            }\n            replaced.current.set(name, topItem);\n          } else {\n            topItem.opacity = 0.5;\n            topItem.guide = true;\n            erased.current.add(name);\n          }\n        });\n      });\n    };\n\n    const pathClones = useRef<paper.Path[]>([]);\n    const handleUp = {\n      draw() {\n        if (!path || path.segments.length <= 1) {\n          // if canvas is clicked without any path in queue.\n          if (!pathClones.current.length) unrasterizeCanvas();\n          return;\n        }\n        path.simplify();\n        if (renderSlow.current) pathClones.current.push(path.clone());\n        const pathData = path.exportJSON();\n        onChange((prev) => DrawState.addStroke(prev, pathData));\n        setPath(undefined);\n      },\n      erase() {\n        unrasterizeCanvas();\n        setPath(undefined);\n        if (drawCtrl.pixelEraser) {\n          const items = Array.from(replaced.current);\n          replaced.current.clear();\n          const splitters: Splitter[] = items.map(([uid, item]) => {\n            const paths = flattenCP(item);\n            paths.forEach((p) => (p.name = \"\"));\n            return [uid, paths.map((p) => p.exportJSON())];\n          });\n          if (!splitters.length) return;\n          onChange((prev) => DrawState.splitStrokes(prev, splitters));\n        } else {\n          const erasedList = Array.from(erased.current);\n          erased.current.clear();\n          if (!erasedList.length) return;\n          onChange((prev) => DrawState.eraseStrokes(prev, erasedList));\n        }\n      },\n      select() {\n        unrasterizeCanvas();\n        if (!path) return;\n        if (Math.abs(path.area) < 1_000) return setPath(undefined);\n\n        let selection: string[];\n        if (lasso) {\n          path.closePath();\n          path.simplify();\n          if (!renderSlow.current) moveDash(path);\n          const items = getGridItems(itemGrid, path.bounds);\n          selection = checkLasso(items, path);\n        } else {\n          const items = getGridItems(itemGrid, path.bounds);\n          selection = checkLasso(items, path);\n          const link = new Path();\n          const { topCenter } = path.bounds;\n          link.add(topCenter, topCenter.subtract(new Point(0, 100)));\n          link.lastSegment.selected = true;\n          setRotateHandle(link);\n        }\n        setSelected(true);\n        setChosenIDs(selection);\n        showSelectTool();\n      },\n      selected(e: paper.MouseEvent) {\n        handleSelectedCursor(e);\n        if (!path || !selectionDragged.current) return;\n        showSelectTool();\n        updateMutation();\n      },\n      text(e: paper.MouseEvent) {\n        if (pointText.current) {\n          submitText();\n          return handleTextCursor(e);\n        }\n        const [, l1] = scope.current.project.layers;\n        if (!l1) return;\n\n        const item = getClickedText(l1, e.point);\n        const t = item && isSelfItem(item) ? item : startText(e.point);\n        t.justification = \"left\";\n        pointText.current = t;\n        prevTextData.current = t.exportJSON();\n        rasterizeCanvas();\n        toggleTextTool(t, renderSlow.current);\n      },\n    }[paperMode];\n\n    const [cursor, setCursor] = useState(\"auto\");\n    useEffect(() => {\n      if (paperMode === \"text\" || paperMode === \"select\") {\n        setCursor(\"crosshair\");\n      } else if (paperMode === \"selected\") {\n        setCursor(lasso ? \"crosshair\" : \"nwse-resize\");\n      } else if (paperMode === \"draw\" || paperMode === \"erase\") {\n        setCursor(getCircleCursor(drawCtrl, ratio));\n      }\n    }, [paperMode, lasso, drawCtrl, ratio]);\n\n    const handleSelectedCursor = (e: paper.MouseEvent) => {\n      if (!path) return;\n      const hitRes =\n        path.hitTest(e.point, { segments: true }) ??\n        rotateHandle?.hitTest(e.point, { segments: true, selected: true });\n      if (hitRes?.segment) {\n        if (hitRes.segment.selected) {\n          const center = path.bounds.center;\n          if (!center) return;\n          const line = hitRes.segment.point.subtract(center);\n          return setCursor(getRotateCurcor(line.angle));\n        }\n        const moveP = hitRes.segment.point;\n        const baseP = hitRes.segment.next.next.point;\n        const diagonal = moveP.subtract(baseP);\n        const { x, y } = diagonal;\n        return setCursor(x * y < 0 ? \"nesw-resize\" : \"nwse-resize\");\n      }\n      if (path.contains(e.point)) return setCursor(\"move\");\n      setCursor(\"crosshair\");\n    };\n\n    const isSelfItem = (item: paper.Item) => {\n      return drawState.getStrokeMap().has(item.name);\n    };\n\n    const handleTextCursor = (e: paper.MouseEvent) => {\n      if (pointText.current) return setCursor(\"auto\");\n      const layer = scope.current.project.layers[1];\n      if (!layer) return;\n      const item = getClickedText(layer, e.point);\n      if (item && isSelfItem(item)) setCursor(\"text\");\n      else setCursor(\"crosshair\");\n    };\n\n    const handleMove = {\n      selected: handleSelectedCursor,\n      text: handleTextCursor,\n      ...{ select: null, draw: null, erase: null },\n    }[paperMode];\n\n    const handleKeyDown = (e: paper.KeyEvent) => {\n      if (paperMode !== \"selected\") return;\n      const delta = {\n        up: new Point(0, -10),\n        down: new Point(0, 10),\n        left: new Point(-10, 0),\n        right: new Point(10, 0),\n      }[e.key];\n      if (!delta) return;\n      e.preventDefault();\n      delta && moveSelected(delta);\n      toggleSelectTool(false);\n    };\n\n    const handleKeyUp = {\n      selected(e: paper.KeyEvent) {\n        if (/^(delete|backspace)$/.test(e.key)) deleteSelected();\n        if (/^(up|down|left|right)$/.test(e.key)) updateMutation();\n        if (/escape/.test(e.key)) resetSelect();\n      },\n      text(e: paper.KeyEvent) {\n        if (/escape/.test(e.key)) submitText();\n      },\n      ...{ select: null, draw: null, erase: null },\n    }[paperMode];\n\n    useEffect(() => {\n      if (readonly) return;\n\n      type Handler<E> = ((e: E) => boolean | void) | null;\n      const activate = <E,>(handler: Handler<E>): Handler<E> => {\n        return (e) => {\n          scope.current.activate();\n          if (handler) return handler(e);\n        };\n      };\n      const { view, tool } = scope.current;\n      view.onMouseDown = activate(handleDown);\n      view.onMouseDrag = activate(handleDrag);\n      view.onMouseUp = activate(handleUp);\n      view.onMouseMove = activate(handleMove);\n      tool.onMouseDrag = activate(handleToolDrag);\n      tool.onKeyDown = activate(handleKeyDown);\n      tool.onKeyUp = activate(handleKeyUp);\n    });\n\n    const updateMutation = () => {\n      if (!chosenItems?.length) return;\n      const mutations: Mutation[] = chosenItems.map((p) => {\n        const { name } = p;\n        p.name = \"\";\n        return [name, p.exportJSON()];\n      });\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\n    };\n\n    const deleteSelected = () => {\n      resetSelect();\n      if (!chosenIDs.length) return;\n      onChange((prev) => DrawState.eraseStrokes(prev, chosenIDs));\n    };\n\n    const mutateStyle = (updated: Partial<DrawCtrl>) => {\n      scope.current.activate();\n      updateGroupStyle(chosenItems, updated);\n      updateMutation();\n    };\n\n    const duplicateSelected = () => {\n      scope.current.activate();\n      if (!path || !chosenItems.length) return;\n      const size = path.bounds.size;\n      const { width, height } = size;\n      const transP = new Point(width, height).divide(10);\n      const copies = chosenItems.map((item) => item.clone());\n      copies.forEach((item) => item.translate(transP));\n      path.translate(transP);\n      rotateHandle?.translate(transP);\n\n      copies.forEach((p) => (p.name = \"\"));\n      const pathDataList = copies.map((item) => item.exportJSON());\n      const IDs: string[] = [];\n      onChange((prev) => DrawState.addStrokes(prev, pathDataList, IDs));\n      setChosenIDs(IDs);\n      showSelectTool();\n    };\n\n    const rasterizeSelected = () => {\n      scope.current.activate();\n      const clip = path?.clone();\n      clip && rasterizeLayer(clip, true);\n      unrasterizeLayer();\n      return layerRaster.current?.toDataURL() ?? \"\";\n    };\n\n    const pointText = useRef<paper.PointText>();\n    const prevTextData = useRef(\"\");\n    const cancelText = useEvent(() => {\n      unrasterizeCanvas();\n      if (!pointText.current?.name) {\n        pointText.current?.remove();\n      }\n      pointText.current = undefined;\n      toggleTextTool(undefined, renderSlow.current);\n    });\n\n    const submitText = useEvent(() => {\n      const t = pointText.current;\n      if (!t) return;\n      cancelText();\n      if (t.exportJSON() === prevTextData.current) return;\n      const { content, name } = t;\n      t.name = \"\";\n      // if text content empty\n      if (!content) {\n        // erase existing text item\n        if (name) onChange((prev) => DrawState.eraseStrokes(prev, [name]));\n        return;\n      }\n      const pathData = t.exportJSON();\n      if (!name) {\n        // add new text item\n        onChange((prev) => DrawState.addStroke(prev, pathData));\n      } else {\n        // mutate existing text item\n        onChange((prev) => DrawState.mutateStrokes(prev, [[name, pathData]]));\n      }\n    });\n    const mutatePointText = (cb: (prev: paper.PointText) => void) => {\n      const pt = pointText.current;\n      if (!pt) return;\n      scope.current.activate();\n      cb(pt);\n      toggleTextTool(new Proxy(pt, {}), renderSlow.current);\n    };\n\n    useEffect(() => {\n      if (mode === \"text\") return submitText;\n    }, [mode, submitText]);\n\n    useImperativeHandle(ref, () => ({\n      deleteSelected,\n      duplicateSelected,\n      rasterizeSelected,\n      mutateStyle,\n      mutatePointText,\n    }));\n\n    const prevScale = useRef(1);\n    usePreventGesture();\n    usePinch(\n      ({ memo, offset: [scale], first, last, origin }) => {\n        scope.current.activate();\n        const { view } = scope.current;\n        const originRawP = new paper.Point(origin);\n\n        let lastOrigin, elPos: paper.Point;\n        if (first || !memo) {\n          const { x, y } = view.element.getBoundingClientRect();\n          // lastScale = prevScale.current;\n          elPos = new Point(x, y);\n          lastOrigin = originRawP.subtract(elPos);\n          toggleSelectTool(false);\n          cancelText();\n          rasterizeLayer(new Path.Rectangle(P_ZERO, projSize));\n          unrasterizeCanvas();\n        } else {\n          [lastOrigin, elPos] = memo;\n        }\n\n        const originViewP = originRawP.subtract(elPos);\n        const originPorjP = view.viewToProject(originViewP);\n\n        const deltaP = originViewP.subtract(lastOrigin);\n        const transP = deltaP.divide(view.zoom);\n        view.translate(transP);\n\n        let dScale = scale / prevScale.current;\n        prevScale.current = scale;\n        scope.current.settings.hitTolerance /= dScale;\n        view.scale(dScale, originPorjP);\n\n        if (last) {\n          Promise.all([\n            putCenterBack(view, projSize),\n            scaleView(view, originPorjP, dScale),\n          ]).then(unrasterizeLayer);\n          view.scale(1 / dScale, originPorjP);\n        } else {\n          return [originViewP, elPos];\n        }\n      },\n      {\n        scaleBounds: { max: 5, min: 1 },\n        rubberband: 0.5,\n        target: canvasEl,\n      }\n    );\n\n    const touchHandler = usePreventTouch(finger);\n    return (\n      <div\n        className=\"draw-wrapper\"\n        style={{ cursor }}\n        data-readonly={readonly}\n        {...touchHandler}\n      >\n        <canvas ref={canvasEl} className=\"draw-canvas\" />\n      </div>\n    );\n  }\n);\n\nDrawRaw.displayName = \"Draw\";\nexport const Draw = React.memo(DrawRaw);\n\nfunction usePaperItem<T extends paper.Item>() {\n  const tuple = useState<T>();\n  const [item] = tuple;\n  useDebugValue(item);\n  useEffect(() => () => void item?.remove(), [item]);\n  return tuple;\n}\n\nconst paintStroke = (() => {\n  const cacheMap = new WeakMap<\n    paper.Layer,\n    Map<string, { stroke: Stroke; item: paper.Item }>\n  >();\n\n  return (stroke: Stroke, layer: paper.Layer) => {\n    const { pathData, uid } = stroke;\n    let item: paper.Item;\n\n    const cache = cacheMap.get(layer) ?? new Map();\n    cacheMap.set(layer, cache);\n    const cached = cache.get(uid);\n\n    if (cached?.stroke === stroke) {\n      layer.addChild(cached.item);\n      item = cached.item;\n    } else {\n      try {\n        item = layer.importJSON(pathData);\n      } catch (e) {\n        console.error(e);\n      }\n      item ??= new paper.Item();\n      item.name = uid;\n      cache.set(uid, { item, stroke });\n    }\n    item.opacity = 1;\n    item.guide = false;\n    return item;\n  };\n})();\n\nconst paintRects = (layers: paper.Layer[], projSize: paper.Size) => {\n  const [l0, l1, l2] = layers;\n  if (!l0 || !l1 || !l2) return [];\n  const bgRect = new Path.Rectangle(P_ZERO, projSize);\n  const clip1 = bgRect.clone();\n  const clip2 = bgRect.clone();\n  bgRect.fillColor = new Color(\"#fff\");\n  l0.addChild(bgRect);\n  l1.addChild(clip1);\n  l2.addChild(clip2);\n  l1.clipped = true;\n  l2.clipped = true;\n  return [bgRect, clip1, clip2];\n};\n\nconst startRect = (point: paper.Point) => {\n  const rect = new Path.Rectangle(point, new Size(0, 0));\n  rect.onFrame = () => {}; // the handle size bug\n  return rect;\n};\n\nconst startStroke = (drawCtrl: DrawCtrl, point: paper.Point, slow = false) => {\n  let { mode, lineWidth, eraserWidth, color, highlight } = drawCtrl;\n  const path = new Path();\n  path.add(point);\n  if (mode === \"erase\") {\n    color = \"#ccc\";\n    lineWidth = eraserWidth;\n  }\n  if (mode === \"select\") {\n    color = \"#009dec\";\n    lineWidth = 5;\n  }\n  const strokeColor = new Color(color);\n  if ((mode === \"draw\" && highlight) || (mode === \"erase\" && !slow)) {\n    strokeColor.alpha = 0.5;\n    path.blendMode = \"multiply\";\n  }\n  path.strokeColor = strokeColor;\n  path.strokeWidth = lineWidth;\n  path.strokeJoin = \"round\";\n  path.strokeCap = \"round\";\n  path.guide = true;\n  return path;\n};\n\nconst moveDash = (item: paper.Item) => {\n  item.dashOffset = 0;\n  item.dashArray = [30, 20];\n  item.onFrame = () => (item.dashOffset += 3);\n};\n\nconst scaleView = (\n  view: paper.View,\n  originPorjP: paper.Point,\n  dScale: number\n) =>\n  new Promise<void>((resolve) => {\n    if (Math.abs(dScale - 1) < 0.05) {\n      view.scale(dScale, originPorjP);\n      return resolve();\n    }\n    let aniCount = 10;\n    dScale = Math.pow(dScale, 1 / aniCount);\n    const scale = () => {\n      view.scale(dScale, originPorjP);\n      if (--aniCount > 0) requestAnimationFrame(scale);\n      else requestAnimationFrame(() => resolve());\n    };\n    scale();\n  });\n\nconst getTargetCenter = (view: paper.View, projSize: paper.Size) => {\n  const { x, y } = view.center;\n  const minSize = Size.min(view.size, projSize).divide(2);\n  const { width: minX, height: minY } = minSize;\n  const { width: maxX, height: maxY } = projSize.subtract(minSize);\n\n  const targetX = x < minX ? minX : x > maxX ? maxX : x;\n  const targetY = y < minY ? minY : y > maxY ? maxY : y;\n  return new Point(targetX, targetY);\n};\n\nconst putCenterBack = (view: paper.View, projSize: paper.Size) =>\n  new Promise<void>((resolve) => {\n    const targetCenter = getTargetCenter(view, projSize);\n    if (view.center.equals(targetCenter)) return resolve();\n    let aniCount = 10;\n    const move = () => {\n      const delta = view.center.subtract(targetCenter);\n      view.translate(delta.divide(aniCount));\n      if (--aniCount > 0) requestAnimationFrame(move);\n      else requestAnimationFrame(() => resolve());\n    };\n    requestAnimationFrame(move);\n  });\n\nconst checkLasso = (items: paper.Item[], selection: paper.Path) => {\n  const isInside = (p: paper.Path) => {\n    if (selection.segments.length === 4 && p.isInside(selection.bounds)) {\n      return true;\n    }\n    return !p.subtract(selection, { insert: false, trace: false }).compare(p);\n  };\n  return items\n    .filter((item) => {\n      if (!item.name) return false;\n      if (!item.bounds.intersects(selection.bounds)) return false;\n      if (item instanceof paper.Path) {\n        return isInside(item);\n      } else {\n        const checkedP = new Path.Rectangle(item.bounds);\n        checkedP.remove();\n        return isInside(checkedP) || selection.isInside(item.bounds);\n      }\n    })\n    .map(({ name }) => name);\n};\n\nconst updateGroupStyle = (items: paper.Item[], updated: Partial<DrawCtrl>) => {\n  const { lineWidth, color, highlight } = updated;\n  items.forEach((item) => {\n    if (item instanceof paper.PointText && color) {\n      const newColor = new Color(color);\n      item.fillColor = newColor;\n    }\n\n    if (!(item instanceof paper.Path)) return;\n\n    if (color) {\n      const newColor = new Color(color);\n      if (item.blendMode === \"multiply\") newColor.alpha = 0.5;\n      item.strokeColor = newColor;\n    }\n\n    if (lineWidth) item.strokeWidth = lineWidth;\n\n    if (!item.strokeColor || highlight === undefined) return;\n    item.strokeColor.alpha = highlight ? 0.5 : 1;\n    item.blendMode = highlight ? \"multiply\" : \"normal\";\n  });\n};\n\nconst getClickedText = (layer: paper.Layer, point: paper.Point) => {\n  const hitRes = layer.hitTest(point, { class: paper.PointText, fill: true });\n  if (hitRes?.item instanceof paper.PointText) return hitRes?.item;\n};\n\nconst startText = (point: paper.Point) => {\n  return new paper.PointText({\n    point: point.add(new Point(0, 50)),\n    content: \"\",\n    fontSize: 50,\n    fontFamily: \"Arial, sans-serif\",\n  });\n};\n\nconst flattenCP = (cp: paper.Item): paper.Path[] => {\n  if (cp instanceof paper.Path) {\n    return cp.isEmpty() ? [] : [cp];\n  }\n  if (cp instanceof paper.CompoundPath) {\n    return cp.children.map(flattenCP).flat();\n  }\n  return [];\n};\n","import { CSSProperties, FC, RefObject, useMemo, useState } from \"react\";\nimport {\n  CopyOutlined,\n  BoldOutlined,\n  DeleteOutlined,\n  PictureTwoTone,\n  PictureOutlined,\n  BgColorsOutlined,\n  ItalicOutlined,\n} from \"@ant-design/icons\";\nimport { Button, ButtonProps, Modal, Popover, Select } from \"antd\";\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\nimport { allColors } from \"lib/color\";\nimport { DrawRefType } from \"component/Draw\";\nimport { saveAs } from \"file-saver\";\nimport { Color } from \"paper/dist/paper-core\";\nimport IconFont from \"component/IconFont\";\nimport \"./draw-tools.sass\";\n\nconst btnProps: ButtonProps = {\n  type: \"text\",\n  shape: \"round\",\n  size: \"small\",\n};\n\nconst getPosVars = (x: number, y: number) => {\n  return { \"--pos-x\": x + \"px\", \"--pos-y\": y + \"px\" } as CSSProperties;\n};\nconst getObjVars = (obj: Record<string, string | number>, unit?: string) => {\n  const result: Record<string, string | number> = {};\n  Object.entries(obj).forEach(([key, value]) => {\n    if (unit) value += unit;\n    result[\"--\" + key] = value;\n  });\n  return result as CSSProperties;\n};\n\nexport const SelectTool: FC<{\n  drawRef: RefObject<DrawRefType>;\n  visible: boolean;\n  clickPoint: paper.Point;\n}> = ({ drawRef, visible, clickPoint }) => {\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\n\n  const getRaster = () => {\n    if (!drawRef.current) return;\n    const imageData = drawRef.current.rasterizeSelected();\n    Modal.confirm({\n      title: \"Screenshot\",\n      content: <img className=\"raster\" src={imageData} alt=\"raster\" />,\n      className: \"raster-modal\",\n      icon: <PictureTwoTone />,\n      okText: \"Save\",\n      onOk: () => saveAs(imageData, document.title.split(\" - \")[0] + \".png\"),\n    });\n  };\n\n  const { x, y } = clickPoint;\n  return (\n    <div\n      className=\"select-tool tool-options\"\n      data-visible={visible}\n      style={getPosVars(x, y)}\n    >\n      <Popover\n        trigger=\"click\"\n        placement=\"bottom\"\n        overlayClassName=\"style-pop\"\n        getPopupContainer={(e) => e.parentElement!}\n        destroyTooltipOnHide\n        content={\n          <PenPanel\n            updateDrawCtrl={(updated) => {\n              setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\n              drawRef.current?.mutateStyle(updated);\n            }}\n            drawCtrl={currDrawCtrl}\n          />\n        }\n      >\n        <Button icon={<BgColorsOutlined />} {...btnProps} />\n      </Popover>\n      <Button\n        icon={<CopyOutlined />}\n        onClick={() => drawRef.current?.duplicateSelected()}\n        {...btnProps}\n      />\n      <Button icon={<PictureOutlined />} onClick={getRaster} {...btnProps} />\n      <Button\n        danger\n        icon={<DeleteOutlined />}\n        onClick={() => drawRef.current?.deleteSelected()}\n        {...btnProps}\n      />\n    </div>\n  );\n};\n\nexport const TextTool: FC<{\n  pointText: paper.PointText;\n  drawRef: RefObject<DrawRefType>;\n  renderSlow: boolean;\n}> = ({ pointText, drawRef, renderSlow }) => {\n  const { view, position, leading, content, rotation } = pointText;\n  const { fontFamily, fontWeight, fontSize } = pointText;\n\n  const { x, y } = view.projectToView(position);\n  const { topLeft, bottomLeft } = pointText.bounds;\n  const { x: bx, y: by } = view.projectToView(topLeft);\n  const { x: bbx, y: bby } = view.projectToView(bottomLeft);\n  const optionAtBottom = by < 90;\n\n  const scale = pointText.viewMatrix.scaling.x;\n  const { width, height } = pointText.internalBounds;\n\n  const lineHeight = +leading / +fontSize ?? 1.2;\n\n  const color = pointText.fillColor?.toCSS(true) ?? allColors[0]!;\n  const fontColorBtn = (\n    <Popover\n      content={\n        <ColorSelect\n          color={color}\n          setColor={(c) =>\n            drawRef.current?.mutatePointText((prev) => {\n              prev.fillColor = new Color(c);\n            })\n          }\n        />\n      }\n      trigger=\"click\"\n      overlayStyle={{ width: 200 }}\n      placement=\"bottom\"\n      getPopupContainer={(e) => e.parentElement!}\n    >\n      <Button\n        {...btnProps}\n        icon={\n          <IconFont\n            type=\"icon-circle\"\n            className=\"text-color-icon\"\n            style={{ color }}\n          />\n        }\n      />\n    </Popover>\n  );\n\n  const { isItalic, isBold } = parseFontStyle(fontWeight);\n  const fontStyleCSS = {\n    fontWeight: isBold ? \"bold\" : \"normal\",\n    fontStyle: isItalic ? \"italic\" : \"normal\",\n  };\n\n  const fontFamilySelect = (\n    <Select\n      className=\"font-select\"\n      popupClassName=\"font-drop\"\n      value={fontFamily}\n      onChange={(v) => {\n        drawRef.current?.mutatePointText((prev) => {\n          prev.fontFamily = v;\n        });\n      }}\n      size=\"small\"\n      bordered={false}\n      virtual={false}\n      getPopupContainer={(e) => e.parentElement.parentElement!}\n      dropdownMatchSelectWidth={100}\n      options={[\n        { value: \"Arial, sans-serif\", name: \"Arial\" },\n        { value: \"'Times New Roman', serif\", name: \"Times\" },\n        { value: \"Georgia, serif\", name: \"Georgia\" },\n        { value: \"'Courier New', monospace\", name: \"Courier\" },\n      ].map(({ value, name }) => ({\n        value,\n        label: (\n          <span style={{ fontFamily: value, fontWeight: \"normal\" }}>\n            {name}\n          </span>\n        ),\n      }))}\n    />\n  );\n\n  const offset = useMemo(\n    // paperjs sets all baseline ratio to 0.75.\n    () => 0.75 - getBaselineRatio(fontFamily, lineHeight),\n    [fontFamily, lineHeight]\n  );\n\n  return (\n    <div\n      className=\"text-tool\"\n      style={{\n        ...getObjVars({ scale, color }),\n        ...getObjVars({ rotation }, \"deg\"),\n        ...getObjVars({ width, height }, \"px\"),\n        ...getObjVars({ offset }, \"em\"),\n        ...getPosVars(x, y),\n      }}\n    >\n      <div\n        className=\"textarea-wrapper\"\n        data-slow={renderSlow}\n        data-empty={!content}\n        style={{ fontSize, fontFamily, lineHeight, ...fontStyleCSS }}\n      >\n        <textarea\n          autoFocus={!content}\n          placeholder=\"Text\"\n          value={content}\n          onChange={(e) => {\n            drawRef.current?.mutatePointText((prev) => {\n              prev.content = e.target.value;\n            });\n          }}\n        />\n      </div>\n      <div\n        className=\"tool-options text-options\"\n        data-bottom={optionAtBottom}\n        style={{\n          ...(optionAtBottom ? getPosVars(bbx, bby) : getPosVars(bx, by)),\n        }}\n      >\n        <div className=\"row\">\n          {fontFamilySelect}\n          {fontColorBtn}\n        </div>\n        <div className=\"row\">\n          <Button\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                prev.fontWeight = toggleBold(prev.fontWeight);\n              });\n            }}\n            {...btnProps}\n            type={isBold ? \"link\" : \"text\"}\n            icon={<BoldOutlined />}\n          />\n          <Button\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                prev.fontWeight = toggleItalic(prev.fontWeight);\n              });\n            }}\n            {...btnProps}\n            type={isItalic ? \"link\" : \"text\"}\n            icon={<ItalicOutlined />}\n          />\n          <Button\n            {...btnProps}\n            icon={<IconFont type=\"icon-font_size_down\" />}\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                const { topLeft } = prev.bounds;\n                prev.scale(0.9, topLeft);\n              });\n            }}\n          />\n          <Button\n            {...btnProps}\n            icon={<IconFont type=\"icon-font_size_up\" />}\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                const { topLeft } = prev.bounds;\n                prev.scale(1.1, topLeft);\n              });\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst parseFontStyle = (fontStyle: string | number) => {\n  fontStyle = fontStyle + \"\";\n  const isItalic = /italic/g.test(fontStyle);\n  const isBold = /bold/g.test(fontStyle);\n  return { isItalic, isBold };\n};\n\nconst toggleItalic = (fontStyle: string | number) => {\n  const { isItalic, isBold } = parseFontStyle(fontStyle);\n  const boldText = isBold ? \"bold\" : \"normal\";\n  return (isItalic ? \"\" : \"italic \") + boldText;\n};\n\nconst toggleBold = (fontStyle: string | number) => {\n  const { isItalic, isBold } = parseFontStyle(fontStyle);\n  const italicText = isItalic ? \"italic \" : \"\";\n  return italicText + (isBold ? \"normal\" : \"bold\");\n};\n\nconst getBaselineRatio = (fontFamily: string, lineHeight: number) => {\n  const div = document.createElement(\"div\");\n  div.innerText = \"p\";\n  Object.assign(div.style, { fontSize: \"100px\", fontFamily, lineHeight });\n  document.body.appendChild(div);\n\n  const span = document.createElement(\"span\");\n  span.style.display = \"inline-block\";\n  div.appendChild(span);\n\n  const r0 = div.getBoundingClientRect();\n  const r1 = span.getBoundingClientRect();\n  const ratio = (r1.y - r0.y) / r0.height;\n  document.body.removeChild(div);\n  return Math.max(-1, Math.min(ratio, 1));\n};\n","import React, {\n  FC,\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport { useDrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { useMemoizedFn as useEvent } from \"ahooks\";\nimport { Draw, DrawRefType } from \"component/Draw\";\nimport { SelectTool, TextTool } from \"pages/reader/tools/DrawTools\";\nimport { once, range } from \"lodash\";\nimport { useInView } from \"react-intersection-observer\";\nimport { DrawState } from \"lib/draw/DrawState\";\nimport { Map, Set } from \"immutable\";\nimport { P_ZERO } from \"component/Draw/Draw\";\n\nconst PageWrapperRaw: FC<{\n  drawState: DrawState;\n  teamStateMap?: Map<string, DrawState>;\n  thumbnail?: string;\n  pdfIndex?: number;\n  noteID?: string;\n  updateState?: (ds: DrawState) => void;\n  onViewChange?: (ratio: number) => void;\n  preview?: boolean;\n  preload?: boolean;\n  ignores?: Set<string>;\n  skipInView?: boolean;\n}> = ({\n  thumbnail,\n  drawState,\n  teamStateMap,\n  updateState,\n  pdfIndex,\n  noteID = \"\",\n  preview = false,\n  onViewChange,\n  preload = false,\n  ignores = Set<string>(),\n  skipInView = false,\n}) => {\n  const threshold = onViewChange && range(0, 1.2, 0.2);\n  const [ref, visible, entry] = useInView({ threshold, skip: skipInView });\n  useEffect(() => {\n    if (!onViewChange) return;\n    if (!entry || !visible) return onViewChange(0);\n    onViewChange(entry.intersectionRatio);\n  }, [visible, entry, onViewChange]);\n\n  const [fullImg, setFullImg] = useState<string>();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const loadImage = useCallback(\n    once(async () => {\n      if (!pdfIndex || !noteID) return;\n      const { getNotePageImage } = await import(\"lib/note/pdfImage\");\n      setFullImg(await getNotePageImage(noteID, pdfIndex));\n    }),\n    [pdfIndex, noteID]\n  );\n\n  const show = visible || preload;\n  useEffect(() => {\n    if (!preview && show) loadImage();\n  }, [show, preview, loadImage]);\n\n  const otherStates = useMemo(\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\n    [teamStateMap, ignores]\n  );\n\n  const imageLoaded = Boolean(fullImg || !pdfIndex);\n  const drawShow = show && imageLoaded;\n\n  const { height, width } = drawState;\n  const ratio = height / width;\n\n  return (\n    <div ref={ref} className=\"page-wrapper\">\n      <svg className=\"size-holder\" viewBox={`0 0 100 ${ratio * 100}`} />\n      {drawShow && (\n        <DrawWrapper\n          drawState={drawState}\n          otherStates={otherStates}\n          updateState={updateState}\n          imgSrc={fullImg || thumbnail}\n          preview={preview}\n        />\n      )}\n    </div>\n  );\n};\nPageWrapperRaw.displayName = \"PageWrapper\";\nexport const PageWrapper = React.memo(PageWrapperRaw);\n\nconst DrawWrapper: FC<{\n  drawState: DrawState;\n  otherStates?: DrawState[];\n  updateState?: (ds: DrawState) => void;\n  preview?: boolean;\n  imgSrc?: string;\n}> = ({ drawState, updateState, otherStates, preview = false, imgSrc }) => {\n  const drawCtrl = useDrawCtrl();\n  const drawRef = useRef<DrawRefType>(null);\n  const [selectShow, setSelectShow] = useState(false);\n  const [clickPoint, setClickPoint] = useState<paper.Point>(P_ZERO);\n  const [pointText, setPointText] = useState<paper.PointText>();\n  const [renderSlow, setRenderSlow] = useState(false);\n\n  const handleChange = useEvent(\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\n      if (!updateState) return;\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\n      if (newDS === drawState) return;\n      updateState(newDS);\n    }\n  );\n\n  const toggleSelectTool = (active: boolean, clickPoint?: paper.Point) => {\n    setClickPoint((p) => clickPoint ?? p);\n    setSelectShow(active);\n  };\n\n  const toggleTextTool = (\n    pointText: paper.PointText | undefined,\n    slow: boolean\n  ) => {\n    setPointText(pointText);\n    setRenderSlow(slow);\n  };\n\n  return preview ? (\n    <Draw\n      drawState={drawState}\n      otherStates={otherStates}\n      imgSrc={imgSrc}\n      readonly\n    />\n  ) : (\n    <>\n      <Draw\n        drawState={drawState}\n        otherStates={otherStates}\n        onChange={handleChange}\n        imgSrc={imgSrc}\n        drawCtrl={drawCtrl}\n        ref={drawRef}\n        toggleTextTool={toggleTextTool}\n        toggleSelectTool={toggleSelectTool}\n      />\n      <SelectTool\n        drawRef={drawRef}\n        visible={selectShow}\n        clickPoint={clickPoint}\n      />\n      {pointText && (\n        <TextTool\n          drawRef={drawRef}\n          pointText={pointText}\n          renderSlow={renderSlow}\n        />\n      )}\n    </>\n  );\n};\n","import { PageWrapper } from \"./PageWrapper\";\nimport \"./page-wrapper.sass\";\nexport default PageWrapper;\n","import React, {\n  FC,\n  PropsWithChildren,\n  useContext,\n  useDebugValue,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Button, message } from \"antd\";\nimport { EditOutlined, EyeInvisibleOutlined } from \"@ant-design/icons\";\nimport localforage from \"localforage\";\nimport { once } from \"lodash\";\nimport \"./draw-ctrl.sass\";\n\nexport interface DrawCtrl {\n  mode: \"draw\" | \"erase\" | \"select\" | \"text\";\n  finger: boolean;\n  lineWidth: number;\n  eraserWidth: number;\n  color: string;\n  highlight: boolean;\n  lasso: boolean;\n  pixelEraser: boolean;\n  globalEraser: boolean;\n  widthList: number[];\n}\n\nexport const defaultWidthList = [10, 20, 30, 50];\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\n  mode: \"draw\",\n  finger: true,\n  lineWidth: 10,\n  eraserWidth: 10,\n  color: \"#000000\",\n  highlight: false,\n  lasso: false,\n  pixelEraser: false,\n  globalEraser: false,\n  widthList: defaultWidthList,\n};\n\nasync function getDrawCtrl() {\n  let drawCtrl = await localforage.getItem<DrawCtrl>(\"DRAW_CTRL\");\n  if (!drawCtrl) {\n    drawCtrl = defaultDrawCtrl;\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\n  }\n  return drawCtrl;\n}\n\nasync function saveDrawCtrl(drawCtrl: DrawCtrl) {\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\n}\n\nconst DrawCtrlContext = React.createContext({\n  drawCtrl: defaultDrawCtrl,\n  updateDrawCtrl: (() => {}) as (updated: Partial<DrawCtrl>) => void,\n});\n\nexport function useDrawCtrl() {\n  const { drawCtrl } = useContext(DrawCtrlContext);\n  useDebugValue(drawCtrl);\n  return drawCtrl;\n}\n\nexport function useUpdateDrawCtrl() {\n  const { updateDrawCtrl } = useContext(DrawCtrlContext);\n  return updateDrawCtrl;\n}\n\nexport const DrawCtrlProvider: FC<PropsWithChildren> = ({ children }) => {\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\n  useEffect(() => {\n    getDrawCtrl().then(setDrawCtrl);\n  }, []);\n\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\n    setDrawCtrl((prev) => {\n      const newCtrl = { ...prev, ...updated };\n      saveDrawCtrl(newCtrl);\n      return newCtrl;\n    });\n  };\n\n  const { finger } = drawCtrl;\n  useEffect(() => {\n    const detectPen = (e: PointerEvent) => {\n      const isPen = e.isPrimary && e.pointerType === \"pen\";\n      if (!isPen || !finger) return;\n      showPencilMsg(() => updateDrawCtrl({ finger: false }));\n    };\n    document.addEventListener(\"pointerup\", detectPen);\n    return () => document.removeEventListener(\"pointerup\", detectPen);\n  }, [finger]);\n\n  return (\n    <DrawCtrlContext.Provider value={{ drawCtrl, updateDrawCtrl }}>\n      {children}\n    </DrawCtrlContext.Provider>\n  );\n};\n\nconst showPencilMsg = once(async (cb: () => void) => {\n  const hide = () => {\n    message.destroy(\"DETECT_PENCIL\");\n    localforage.setItem(\"SKIP_PENCIL_MSG\", true);\n  };\n  if (await localforage.getItem(\"SKIP_PENCIL_MSG\")) return;\n  message.info({\n    content: (\n      <>\n        Your device supports\n        <Button\n          shape=\"round\"\n          size=\"small\"\n          icon={<EditOutlined />}\n          onClick={() => {\n            cb();\n            hide();\n          }}\n        >\n          Pencil only\n        </Button>\n        <Button\n          size=\"small\"\n          type=\"text\"\n          shape=\"circle\"\n          icon={<EyeInvisibleOutlined style={{ color: \"#999\" }} />}\n          onClick={hide}\n        />\n      </>\n    ),\n    key: \"DETECT_PENCIL\",\n    className: \"pencil-msg\",\n  });\n});\n","export function createVirtualCanvas(width: number, height: number) {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  if (!context) {\n    throw new Error(\"can't get virtual canvas context\");\n  }\n  canvas.width = width;\n  canvas.height = height;\n  return { canvas, context };\n}\n\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\n  canvas.width = 1;\n  canvas.height = 1;\n  const ctx = canvas.getContext('2d');\n  ctx?.clearRect(0, 0, 1, 1);\n}\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\nimport { defaultWidthList, DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { ColorCirle } from \"component/ColorCircle\";\nimport { WIDTH } from \"lib/draw/DrawState\";\nimport { Popover, Segmented, Slider } from \"antd\";\nimport { allColors } from \"lib/color\";\nimport { Setter } from \"lib/hooks\";\nimport IconFont from \"component/IconFont\";\nimport { List } from \"immutable\";\nimport \"./pen-panel.sass\";\n\nexport const PenPanel: FC<{\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n  drawCtrl: Partial<DrawCtrl>;\n}> = ({ updateDrawCtrl, drawCtrl }) => {\n  const { highlight, color } = drawCtrl;\n  const [panelBlur, setPanelBlur] = useState(false);\n\n  return (\n    <div className=\"pen-panel\" data-blur={panelBlur} data-hi={highlight}>\n      <div className=\"pen-status\">\n        <WidthSelect\n          updateDrawCtrl={updateDrawCtrl}\n          drawCtrl={drawCtrl}\n          setPanelBlur={setPanelBlur}\n        />\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\n      </div>\n      <ColorSelect\n        color={color || \"\"}\n        setColor={(c) => updateDrawCtrl({ color: c })}\n      />\n    </div>\n  );\n};\n\nexport const WidthSelect: FC<{\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n  drawCtrl: Partial<DrawCtrl>;\n  setPanelBlur?: Setter<boolean>;\n  field?: \"lineWidth\" | \"eraserWidth\";\n}> = ({\n  updateDrawCtrl,\n  drawCtrl,\n  setPanelBlur = () => {},\n  field = \"lineWidth\",\n}) => {\n  const currWidth = drawCtrl[field];\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\n\n  const chosen = useMemo(\n    () => widthList.indexOf(currWidth ?? -1),\n    [currWidth, widthList]\n  );\n\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\n  useEffect(() => {\n    if (popShow.includes(true)) setPanelBlur(true);\n    else setPanelBlur(false);\n  }, [popShow, setPanelBlur]);\n\n  const realSizeStyle = (width: number) =>\n    ({\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width})`,\n    } as CSSProperties);\n\n  const options = [\n    { value: -1, label: null },\n    ...widthList.map((width, index) => ({\n      value: index,\n      label: (\n        <Popover\n          open={popShow.get(index)}\n          onOpenChange={(v) => setPopShow((prev) => prev.set(index, v))}\n          trigger={chosen === index ? [\"click\"] : []}\n          placement=\"bottom\"\n          destroyTooltipOnHide\n          content={\n            <Slider\n              min={5}\n              max={100}\n              className=\"ctrl-slider\"\n              defaultValue={width}\n              onAfterChange={(w) => {\n                if (widthList.includes(w)) {\n                  setPopShow((prev) => prev.set(index, false));\n                  return updateDrawCtrl({ [field]: w });\n                }\n                const newWL = widthList.slice();\n                newWL[index] = w;\n                updateDrawCtrl({ widthList: newWL, [field]: w });\n              }}\n            />\n          }\n        >\n          <div className=\"circle-wrapper\" style={realSizeStyle(width)}>\n            <ColorCirle className={\"width-circle \" + field} color={color} />\n          </div>\n        </Popover>\n      ),\n    })),\n  ];\n\n  return (\n    <Segmented\n      className=\"width-seg\"\n      value={chosen}\n      options={options}\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 10 })}\n    />\n  );\n};\n\nconst HighlightSwitch: FC<{\n  checked?: boolean;\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n}> = ({ checked = false, updateDrawCtrl }) => {\n  return (\n    <label className=\"hi-wrapper\">\n      <input\n        type=\"checkbox\"\n        name=\"highlight\"\n        checked={checked}\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\n      />\n      <div className=\"hi-switch\">\n        <IconFont type=\"icon-Highlight\" />\n      </div>\n    </label>\n  );\n};\n\nexport const ColorSelect: FC<{\n  color: string;\n  setColor: (color: string) => void;\n}> = ({ setColor, color }) => (\n  <div className=\"color-select\">\n    {allColors.map((c) => (\n      <label key={c}>\n        <input\n          checked={color === c}\n          type=\"radio\"\n          name=\"color\"\n          onChange={(e) => e.target.checked && setColor(c)}\n        />\n        <div\n          data-color={c}\n          className=\"circle\"\n          style={{ backgroundColor: c, borderColor: c }}\n        />\n      </label>\n    ))}\n  </div>\n);\n"],"names":["createFromIconfontCN","scriptUrl","rotateCursorFactory","src","size","cache","Map","half","createVirtualCanvas","canvas","context","image","Image","angle","Math","round","cached","get","translate","rotate","PI","drawImage","data","toDataURL","clearRect","resetTransform","set","getRotateCursor1x","getRotateCursor2x","getRotateCurcor","data1x","data2x","usePreventTouch","allowFinger","isTouch","useRef","checkPoniter","e","isPrimary","current","pointerType","preventTouch","touch","touches","touchType","isApplePencil","length","isEventValid","stopPropagation","onPointerDownCapture","onPointerMoveCapture","onTouchStartCapture","onTouchMoveCapture","getGridRange","bounds","topLeft","bottomRight","floor","x","ceil","y","setGridItem","grid","item","replaced","strokeBounds","xmin","xmax","ymin","ymax","delete","add","getGridItems","itemSet","Set","forEach","Array","from","P_ZERO","Point","DrawRaw","React","ref","drawState","otherStates","onChange","drawCtrl","defaultDrawCtrl","readonly","imgSrc","toggleSelectTool","toggleTextTool","width","height","projSize","useMemo","Size","mode","finger","lasso","eraserWidth","canvasEl","scope","paper","useState","group","setGroup","teamGroup","setTeamGroup","usePaperItem","path","setPath","rotateHandle","setRotateHandle","useEvent","showSelectTool","bc","bottomCenter","view","projectToView","useLayoutEffect","cvs","scp","setup","settings","handleSize","hitTolerance","Layer","visible","project","layers","activate","Tool","remove","releaseCanvas","useEffect","rects","paintRects","r","useSize","canvasWidth","ratio","viewSize","multiply","scale","l","update","imgRaster","setImgRaster","raster","Raster","addChild","sendToBack","onLoad","fitBounds","Rectangle","bringToFront","mergedStrokes","DrawState","getStrokeList","renderSlow","deferTimerID","deferRender","setDefer","l1","render","tempGroup","tempTeamGroup","timeBeforeRender","performance","now","removeChildren","stroke","self","hasStroke","uid","paintStroke","push","unrasterizeCanvas","pathClones","c","duration","window","setTimeout","clearTimeout","hitRef","selected","setSelected","paperMode","chosenIDs","setChosenIDs","chosenItems","IDSet","filter","has","name","resetSelect","undefined","type","lastOp","test","pointText","ptProxy","Proxy","layerRaster","rasterizeLayer","clip","force","l0","clipMask","prevClip","firstChild","replaceWith","insertAbove","dpi","devicePixelRatio","resolution","rasterize","addTo","unrasterizeLayer","lr","canvasRaster","rasterizeCanvas","element","opacity","cr","downPath","startStroke","point","downRect","startRect","selectionDragged","handleDown","draw","erase","select","hitRes","hitTest","segments","contains","text","dragPath","smooth","moveSelected","delta","handleDrag","s1","s2","s3","segment","center","axis","subtract","line","setCursor","moveP","baseP","next","diagonal","strokeWidth","rBaseP","tool","maxDistance","erased","globalEraser","pixelEraser","itemGrid","wnum","hnum","gernerateGrid","handleToolDrag","layer","ew","hitOption","class","tolerance","parent","hitTestAll","topItem","radius","circle","Path","insert","sub","trace","guide","handleUp","simplify","clone","pathData","exportJSON","prev","items","clear","splitters","map","paths","flattenCP","p","erasedList","abs","area","selection","closePath","moveDash","checkLasso","link","topCenter","lastSegment","handleSelectedCursor","updateMutation","submitText","handleTextCursor","getClickedText","t","isSelfItem","startText","justification","prevTextData","cursor","lineWidth","double","getSvg","img1x","img2x","getCircleCursor","getStrokeMap","handleMove","handleKeyDown","up","down","left","right","key","preventDefault","handleKeyUp","deleteSelected","handler","onMouseDown","onMouseDrag","onMouseUp","onMouseMove","onKeyDown","onKeyUp","mutations","mutateStyle","updated","updateGroupStyle","duplicateSelected","transP","divide","copies","pathDataList","IDs","rasterizeSelected","cancelText","content","mutatePointText","cb","pt","useImperativeHandle","prevScale","document","addEventListener","removeEventListener","usePinch","memo","offset","first","last","origin","lastOrigin","elPos","originRawP","getBoundingClientRect","originViewP","originPorjP","viewToProject","zoom","dScale","Promise","all","putCenterBack","scaleView","then","scaleBounds","max","min","rubberband","target","touchHandler","className","style","displayName","Draw","tuple","useDebugValue","cacheMap","WeakMap","importJSON","console","error","l2","bgRect","clip1","clip2","fillColor","Color","clipped","rect","onFrame","slow","color","highlight","strokeColor","alpha","blendMode","strokeJoin","strokeCap","dashOffset","dashArray","resolve","aniCount","pow","requestAnimationFrame","targetCenter","minSize","minX","minY","maxX","maxY","targetX","targetY","getTargetCenter","equals","move","isInside","compare","intersects","checkedP","newColor","fill","fontSize","fontFamily","cp","isEmpty","children","flat","btnProps","shape","getPosVars","getObjVars","obj","unit","result","Object","entries","value","SelectTool","drawRef","clickPoint","currDrawCtrl","setCurrDrawCtrl","trigger","placement","overlayClassName","getPopupContainer","parentElement","destroyTooltipOnHide","PenPanel","updateDrawCtrl","icon","BgColorsOutlined","CopyOutlined","onClick","PictureOutlined","imageData","Modal","title","alt","PictureTwoTone","okText","onOk","saveAs","split","danger","DeleteOutlined","TextTool","position","leading","rotation","fontWeight","bottomLeft","bx","by","bbx","bby","optionAtBottom","viewMatrix","scaling","internalBounds","lineHeight","toCSS","allColors","fontColorBtn","setColor","overlayStyle","IconFont","parseFontStyle","isItalic","isBold","fontStyleCSS","fontStyle","fontFamilySelect","popupClassName","v","bordered","virtual","dropdownMatchSelectWidth","options","label","getBaselineRatio","autoFocus","placeholder","toggleBold","BoldOutlined","toggleItalic","ItalicOutlined","div","createElement","innerText","assign","body","appendChild","span","display","r0","removeChild","PageWrapperRaw","thumbnail","teamStateMap","updateState","pdfIndex","noteID","preview","onViewChange","preload","ignores","skipInView","threshold","range","useInView","skip","entry","intersectionRatio","fullImg","setFullImg","loadImage","useCallback","once","getNotePageImage","show","deleteAll","toList","toArray","imageLoaded","Boolean","drawShow","viewBox","DrawWrapper","useDrawCtrl","selectShow","setSelectShow","setClickPoint","setPointText","setRenderSlow","handleChange","arg","newDS","active","defaultWidthList","widthList","getDrawCtrl","localforage","saveDrawCtrl","DrawCtrlContext","useContext","useUpdateDrawCtrl","DrawCtrlProvider","setDrawCtrl","newCtrl","detectPen","showPencilMsg","Provider","hide","message","EditOutlined","EyeInvisibleOutlined","getContext","Error","ctx","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","field","currWidth","chosen","indexOf","List","popShow","setPopShow","includes","realSizeStyle","WIDTH","index","open","onOpenChange","defaultValue","onAfterChange","w","newWL","slice","i","backgroundColor","borderColor"],"sourceRoot":""}