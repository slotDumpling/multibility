{"version":3,"file":"static/js/478.40ababf1.chunk.js","mappings":"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","sources":["component/IconFont.tsx","component/Draw/cursor/cursor.ts","component/Draw/touch.ts","component/Draw/grid.tsx","component/Draw/Draw.tsx","pages/reader/tools/DrawTools.tsx","component/PageWrapper/PageWrapper.tsx","component/PageWrapper/index.tsx","lib/draw/DrawCtrl.tsx","lib/draw/canvas.ts","pages/reader/tools/PenPanel.tsx"],"sourcesContent":["import { createFromIconfontCN } from \"@ant-design/icons\";\r\n\r\nexport default createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_3181679_yo844n7qgns.js\",\r\n});\r\n","import { createVirtualCanvas } from \"lib/draw/canvas\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport rotateImg from \"./rotate.png\";\r\n\r\nexport const getCircleCursor = (drawCtrl: DrawCtrl, ratio: number) => {\r\n  const { lineWidth, eraserWidth, mode } = drawCtrl;\r\n  const size = ratio * (mode === \"erase\" ? eraserWidth : lineWidth);\r\n  if (size < 5) return \"crosshair\";\r\n  const half = size / 2;\r\n  return `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23FFF7\" width=\"${size}\" height=\"${size}\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"5\"/></svg>') ${half} ${half}, auto`;\r\n};\r\n\r\nconst getRotateCursorImage = (() => {\r\n  const cache = new Map<number, string>();\r\n  const { canvas, context } = createVirtualCanvas(44, 44);\r\n  const image = new Image();\r\n  image.src = rotateImg;\r\n  return (angle: number) => {\r\n    angle = Math.round(angle / 10) * 10;\r\n    const cached = cache.get(angle);\r\n    if (cached) return cached;\r\n    context.translate(22, 22);\r\n    context.rotate((angle * Math.PI) / 180);\r\n    context.drawImage(image, -22, -22);\r\n    const data = canvas.toDataURL();\r\n    context.clearRect(-22, -22, 44, 44);\r\n    context.resetTransform();\r\n    cache.set(angle, data);\r\n    return data;\r\n  };\r\n})();\r\n\r\nexport const getRotateCurcor = (angle: number) => {\r\n  return `url(${getRotateCursorImage(angle)}) 22 22, auto`;\r\n};\r\n","import { PointerEvent, TouchEvent, useEffect, useRef } from \"react\";\r\n\r\ntype iOSTouch = Touch & {\r\n  force?: number;\r\n  touchType?: \"stylus\" | \"direct\";\r\n};\r\n\r\nexport function isApplePencil(e: TouchEvent) {\r\n  const touch = e.touches[0] as iOSTouch;\r\n  return touch?.touchType === \"stylus\";\r\n}\r\n\r\nexport function usePreventTouch(\r\n  allowFinger: boolean\r\n): React.HTMLAttributes<HTMLDivElement> {\r\n  const isTouch = useRef(false);\r\n  const checkPoniter = (e: PointerEvent) =>\r\n    e.isPrimary && (isTouch.current = e.pointerType === \"touch\");\r\n\r\n  const isEventValid = (e: TouchEvent) =>\r\n    !isTouch.current ||\r\n    isApplePencil(e) ||\r\n    (allowFinger && e.touches.length === 1);\r\n\r\n  const preventTouch = (e: TouchEvent) =>\r\n    isEventValid(e) || e.stopPropagation();\r\n\r\n  return {\r\n    onPointerDownCapture: checkPoniter,\r\n    onPointerMoveCapture: checkPoniter,\r\n    onTouchStartCapture: preventTouch,\r\n    onTouchMoveCapture: preventTouch,\r\n  };\r\n}\r\n\r\nexport function usePreventGesture() {\r\n  useEffect(() => {\r\n    const handler = (e: Event) => e.preventDefault();\r\n    document.addEventListener(\"gesturestart\", handler);\r\n    document.addEventListener(\"gesturechange\", handler);\r\n    document.addEventListener(\"gestureend\", handler);\r\n    return () => {\r\n      document.removeEventListener(\"gesturestart\", handler);\r\n      document.removeEventListener(\"gesturechange\", handler);\r\n      document.removeEventListener(\"gestureend\", handler);\r\n    };\r\n  }, []);\r\n}\r\n","export const gernerateGrid = (\r\n  group: paper.Item[],\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const wnum = Math.ceil(width / 100);\r\n  const hnum = Math.ceil(height / 100);\r\n  const grid = Array.from({ length: wnum }, () =>\r\n    Array.from({ length: hnum }, () => new Set<paper.Item>())\r\n  );\r\n  group.forEach((item) => setGridItem(grid, item));\r\n  return grid;\r\n};\r\n\r\nconst getGridRange = (bounds: paper.Rectangle) => {\r\n  const { topLeft, bottomRight } = bounds;\r\n  return [\r\n    Math.floor(topLeft.x / 100),\r\n    Math.ceil(bottomRight.x / 100),\r\n    Math.floor(topLeft.y / 100),\r\n    Math.ceil(bottomRight.y / 100),\r\n  ] as [number, number, number, number];\r\n};\r\nexport const setGridItem = (\r\n  grid: Set<paper.Item>[][],\r\n  item: paper.Item,\r\n  replaced?: paper.Item\r\n) => {\r\n  const bounds = (replaced ?? item).strokeBounds;\r\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\r\n  for (let x = xmin; x <= xmax; x += 1) {\r\n    for (let y = ymin; y <= ymax; y += 1) {\r\n      replaced && grid[x]?.[y]?.delete(replaced);\r\n      grid[x]?.[y]?.add(item);\r\n    }\r\n  }\r\n};\r\nexport const getGridItems = (\r\n  grid: Set<paper.Item>[][],\r\n  bounds: paper.Rectangle\r\n) => {\r\n  const itemSet = new Set<paper.Item>();\r\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\r\n  for (let x = xmin; x <= xmax; x += 1) {\r\n    for (let y = ymin; y <= ymax; y += 1) {\r\n      grid[x]?.[y]?.forEach((item) => itemSet.add(item));\r\n    }\r\n  }\r\n  return Array.from(itemSet);\r\n};\r\n","import React, {\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n  useDebugValue,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport paper, {\r\n  Path,\r\n  Size,\r\n  Point,\r\n  Color,\r\n  Raster,\r\n  Layer,\r\n  Rectangle,\r\n} from \"paper/dist/paper-core\";\r\nimport { usePinch } from \"@use-gesture/react\";\r\nimport useSize from \"@react-hook/size\";\r\nimport { DrawState, Mutation, Splitter, Stroke } from \"lib/draw/DrawState\";\r\nimport { defaultDrawCtrl, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { releaseCanvas } from \"lib/draw/canvas\";\r\nimport { getCircleCursor, getRotateCurcor } from \"./cursor\";\r\nimport { usePreventTouch, usePreventGesture } from \"./touch\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport { setGridItem, getGridItems, gernerateGrid } from \"./grid\";\r\n\r\nexport interface DrawRefType {\r\n  deleteSelected: () => void;\r\n  duplicateSelected: () => void;\r\n  rasterizeSelected: () => string;\r\n  mutateStyle: (updated: Partial<DrawCtrl>) => void;\r\n  mutatePointText: (cb: (prev: paper.PointText) => void) => void;\r\n}\r\ninterface DrawPropType {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  onChange?: Setter<DrawState>;\r\n  toggleSelectTool?: (active: boolean, clickPoint?: paper.Point) => void;\r\n  toggleTextTool?: (active: boolean, pointText?: paper.PointText) => void;\r\n  drawCtrl?: DrawCtrl;\r\n  readonly?: boolean;\r\n  imgSrc?: string;\r\n}\r\n\r\nconst HIT_TOLERANCE = 20;\r\nexport const P_ZERO = new Point(0, 0);\r\n\r\nconst DrawRaw = React.forwardRef<DrawRefType, DrawPropType>(\r\n  (\r\n    {\r\n      drawState,\r\n      otherStates,\r\n      onChange = () => {},\r\n      drawCtrl = defaultDrawCtrl,\r\n      readonly = false,\r\n      imgSrc,\r\n      toggleSelectTool = () => {},\r\n      toggleTextTool = () => {},\r\n    },\r\n    ref\r\n  ) => {\r\n    const { width, height } = drawState;\r\n    const projSize = useMemo(() => new Size(width, height), [width, height]);\r\n    const { mode, finger, lasso, eraserWidth } = drawCtrl;\r\n\r\n    const canvasEl = useRef<HTMLCanvasElement>(null);\r\n    const scope = useRef(new paper.PaperScope());\r\n    const [group, setGroup] = useState<paper.Item[]>([]);\r\n    const [path, setPath] = usePaperItem<paper.Path>();\r\n    const [rect, setRect] = usePaperItem<paper.Path.Rectangle>();\r\n    const [rotateHandle, setRotateHandle] = usePaperItem<paper.Path>();\r\n\r\n    useEffect(() => {\r\n      const cvs = canvasEl.current;\r\n      const scp = scope.current;\r\n      if (!cvs) return;\r\n\r\n      scp.setup(cvs);\r\n      scp.settings.handleSize = 10;\r\n      scp.settings.hitTolerance = HIT_TOLERANCE;\r\n      [0, 1, 2].forEach(() => (new Layer().visible = false));\r\n      scp.project.layers[2]?.activate();\r\n      new scp.Tool();\r\n\r\n      return () => {\r\n        scp.view?.remove();\r\n        releaseCanvas(cvs);\r\n      };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      scope.current.activate();\r\n      const { layers } = scope.current.project;\r\n      const rects = paintRects(layers, projSize);\r\n      return () => rects.forEach((r) => r.remove());\r\n    }, [projSize]);\r\n\r\n    const [canvasWidth] = useSize(canvasEl);\r\n    const ratio = canvasWidth / width;\r\n    useEffect(() => {\r\n      if (!ratio) return;\r\n      const scp = scope.current;\r\n      scp.view.viewSize = projSize.multiply(ratio);\r\n      scp.view.scale(ratio, P_ZERO);\r\n      scp.project.layers.forEach((l) => (l.visible = true));\r\n      scp.view.update();\r\n\r\n      return () => scp.view?.scale(1 / ratio, P_ZERO);\r\n    }, [ratio, projSize]);\r\n\r\n    const [imgRaster, setImgRaster] = usePaperItem();\r\n    useEffect(() => {\r\n      if (!imgSrc) return;\r\n      scope.current.activate();\r\n      const raster = new Raster(imgSrc);\r\n      raster.project.layers[0]?.addChild(raster);\r\n      raster.sendToBack();\r\n      raster.onLoad = () => {\r\n        raster.view.update();\r\n        raster.fitBounds(new Rectangle(projSize));\r\n        raster.bringToFront();\r\n      };\r\n      setImgRaster(raster);\r\n    }, [imgSrc, projSize, setImgRaster]);\r\n\r\n    const mergedStrokes = useMemo(\r\n      () =>\r\n        otherStates\r\n          ? DrawState.mergeStates(drawState, ...otherStates)\r\n          : drawState.getStrokeList(),\r\n      [drawState, otherStates]\r\n    );\r\n\r\n    const renderSlow = useRef(false);\r\n    const deferRender = useRef(false);\r\n    const deferTimerID = useRef(0);\r\n\r\n    useEffect(() => {\r\n      const [, l1] = scope.current.project.layers;\r\n      if (!l1) return;\r\n      const render = () => {\r\n        const tempGroup: paper.Item[] = [];\r\n        const timeBeforeRender = performance.now();\r\n        scope.current.activate();\r\n        // clean-up layer_1 except the clip mask.\r\n        l1.removeChildren(1);\r\n        mergedStrokes.forEach((stroke) => {\r\n          const self = drawState.hasStroke(stroke.uid);\r\n          const item = paintStroke(stroke, l1, !self);\r\n          if (self) tempGroup.push(item);\r\n        });\r\n        setGroup(tempGroup);\r\n\r\n        unrasterizeCanvas();\r\n        pathClones.current.forEach((c) => c.remove());\r\n        pathClones.current = [];\r\n\r\n        scope.current.view.update();\r\n        const duration = performance.now() - timeBeforeRender;\r\n        renderSlow.current = duration > 16;\r\n      };\r\n\r\n      if (deferRender.current) {\r\n        deferTimerID.current = window.setTimeout(render, 1000);\r\n      } else render();\r\n\r\n      // cancel previous render timer.\r\n      return () => window.clearTimeout(deferTimerID.current);\r\n    }, [mergedStrokes, drawState]);\r\n    useEffect(() => void (deferRender.current = false), [drawState]);\r\n\r\n    const hitRef = useRef<paper.HitResult>();\r\n    const [selected, setSelected] = useState(false);\r\n    const paperMode = mode === \"select\" && selected ? \"selected\" : mode;\r\n    const [chosenIDs, setChosenIDs] = useState<string[]>([]);\r\n    const chosenItems = useMemo(() => {\r\n      const IDSet = new Set(chosenIDs);\r\n      return group.filter((item) => IDSet.has(item.name));\r\n    }, [group, chosenIDs]);\r\n\r\n    const resetSelect = useCallback(() => {\r\n      setSelected(false);\r\n      setPath(undefined);\r\n      setRect(undefined);\r\n      setRotateHandle(undefined);\r\n    }, [setPath, setRect, setRotateHandle]);\r\n\r\n    useEffect(() => {\r\n      if (mode === \"select\") return resetSelect;\r\n    }, [mode, resetSelect]);\r\n    useEffect(() => resetSelect, [lasso, resetSelect]);\r\n\r\n    useEffect(() => {\r\n      if (!selected) return;\r\n      return () => {\r\n        setChosenIDs([]);\r\n        toggleSelectTool(false);\r\n      };\r\n    }, [selected, toggleSelectTool]);\r\n    useEffect(() => {\r\n      toggleSelectTool(false);\r\n      if (pointText.current) {\r\n        toggleTextTool(true, new Proxy(pointText.current, {}));\r\n      }\r\n    }, [canvasWidth, toggleSelectTool, toggleTextTool]);\r\n\r\n    const layerRaster = useRef<paper.Raster>();\r\n    const rasterizeLayer = (clip: paper.Path, force = false) => {\r\n      if (!renderSlow.current && !force) return;\r\n      const [l0, l1] = scope.current.project.layers;\r\n      if (!l0 || !l1) return;\r\n      l1.visible = true;\r\n      clip.clipMask = true;\r\n      const prevClip = l1.firstChild;\r\n      prevClip.replaceWith(clip);\r\n      imgRaster?.insertAbove(clip);\r\n\r\n      const dpi = 72 * devicePixelRatio;\r\n      const resolution = (canvasWidth / clip.bounds.width) * dpi;\r\n      let raster = layerRaster.current;\r\n      raster = layerRaster.current = l1.rasterize({ raster, resolution });\r\n      raster.visible = true;\r\n\r\n      l1.visible = false;\r\n      clip.replaceWith(prevClip);\r\n      imgRaster?.addTo(l0);\r\n    };\r\n    const unrasterizeLayer = () => {\r\n      scope.current.activate();\r\n      const [, l1] = scope.current.project.layers;\r\n      const lr = layerRaster.current;\r\n      if (!l1 || !lr) return;\r\n      l1.visible = true;\r\n      lr.visible = false;\r\n    };\r\n\r\n    const canvasRaster = useRef<paper.Raster>();\r\n    // raster changes with the size of canvas element\r\n    useEffect(\r\n      () => () => {\r\n        canvasRaster.current?.remove();\r\n        canvasRaster.current = undefined;\r\n      },\r\n      [canvasWidth]\r\n    );\r\n    const rasterizeCanvas = () => {\r\n      if (!renderSlow.current) return;\r\n      // rasterize the canvas only once\r\n      if (canvasRaster.current?.visible === true) return;\r\n      scope.current.activate();\r\n      const { view } = scope.current;\r\n      // create a raster of the canvas element's size only once.\r\n      const raster = (canvasRaster.current ??= new Raster(\r\n        view.viewSize.multiply(window.devicePixelRatio)\r\n      ));\r\n      raster.drawImage(view.element, P_ZERO);\r\n      raster.fitBounds(view.bounds);\r\n      raster.visible = true;\r\n      raster.opacity = process.env.NODE_ENV === \"production\" ? 1 : 0.8;\r\n      const [, l1] = scope.current.project.layers;\r\n      l1 && (l1.visible = false);\r\n    };\r\n    const unrasterizeCanvas = () => {\r\n      scope.current.activate();\r\n      deferRender.current = false;\r\n      const [, l1] = scope.current.project.layers;\r\n      const cr = canvasRaster.current;\r\n      const lr = layerRaster.current;\r\n      if (!l1 || !cr) return;\r\n      cr.visible = false;\r\n      // keep layer_1 hidden unless all 2 raster is hidden.\r\n      if (lr?.visible !== true) l1.visible = true;\r\n    };\r\n\r\n    const downPath = (e: paper.MouseEvent) => {\r\n      rasterizeCanvas();\r\n      setPath(startStroke(drawCtrl, e.point, renderSlow.current));\r\n    };\r\n    const downRect = (e: paper.MouseEvent) => {\r\n      rasterizeCanvas();\r\n      setRect(startRect(e.point));\r\n    };\r\n    const pointBeforeDrag = useRef(P_ZERO);\r\n\r\n    const handleDown = {\r\n      draw(e: paper.MouseEvent) {\r\n        deferRender.current = renderSlow.current;\r\n        downPath(e);\r\n      },\r\n      erase: downPath,\r\n      select: lasso ? downPath : downRect,\r\n      selected(e: paper.MouseEvent) {\r\n        toggleSelectTool(false);\r\n        pointBeforeDrag.current = e.point;\r\n        if (lasso) {\r\n          // if the point is outside of selection, reset selection\r\n          if (path?.contains(e.point)) return;\r\n          setSelected(false);\r\n          downPath(e);\r\n        } else {\r\n          // check if the point hit the segment point.\r\n          let hitRes =\r\n            rect?.hitTest(e.point, { segments: true }) ??\r\n            rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n          hitRef.current = hitRes;\r\n          if (hitRes) return;\r\n\r\n          // if the point is outside of selection, reset selection\r\n          if (rect?.contains(e.point)) return;\r\n          setRotateHandle(undefined);\r\n          setSelected(false);\r\n          downRect(e);\r\n        }\r\n      },\r\n      text: null,\r\n    }[paperMode];\r\n\r\n    const dragPath = (e: paper.MouseEvent) => {\r\n      // cancel previous render timer.\r\n      window.clearTimeout(deferTimerID.current);\r\n      path?.add(e.point);\r\n      path?.smooth();\r\n    };\r\n    const resizeRect = (e: paper.MouseEvent) => {\r\n      if (!rect) return;\r\n      const { x, y } = e.point;\r\n      const [, s1, s2, s3] = rect.segments;\r\n      if (!s1 || !s2 || !s3) return;\r\n      s1.point.x = x;\r\n      s2.point = e.point;\r\n      s3.point.y = y;\r\n      rect.selected = true;\r\n    };\r\n    const moveSelected = (delta: paper.Point) => {\r\n      chosenItems.forEach((item) => item.translate(delta));\r\n      path?.translate(delta);\r\n      rect?.translate(delta);\r\n      rotateHandle?.translate(delta);\r\n    };\r\n\r\n    const handleDrag = {\r\n      draw: dragPath,\r\n      erase: dragPath,\r\n      select: lasso ? dragPath : resizeRect,\r\n      selected(e: paper.MouseEvent) {\r\n        const hitRes = hitRef.current;\r\n        if (hitRes?.segment && rect && rotateHandle) {\r\n          const segment = hitRes.segment;\r\n          const rotating = segment.selected;\r\n          if (rotating) {\r\n            // rotate select items\r\n            const { center } = rect.bounds;\r\n            const axis = segment.point.subtract(center);\r\n            const line = e.point.subtract(center);\r\n            setCursor(getRotateCurcor(line.angle));\r\n            const angle = line.angle - axis.angle;\r\n            rect.rotate(angle, center);\r\n            rotateHandle.rotate(angle, center);\r\n            chosenItems.forEach((item) => item?.rotate(angle, center));\r\n          } else {\r\n            // resize selected items\r\n            const moveP = segment.point;\r\n            const baseP = segment.next.next.point;\r\n            const diagonal = moveP.subtract(baseP);\r\n            const projection = e.point.subtract(baseP).project(diagonal);\r\n            const scale = projection.x / diagonal.x;\r\n            if (scale < 0) return;\r\n\r\n            rect.scale(scale, baseP);\r\n            chosenItems.forEach((item) => {\r\n              item.scale(scale, baseP);\r\n              item.strokeWidth *= scale;\r\n            });\r\n            rotateHandle.scale(scale, baseP);\r\n            const rBaseP = rotateHandle.segments[0]?.point;\r\n            if (!rBaseP) return;\r\n            rotateHandle.scale(100 / rotateHandle.length, rBaseP);\r\n          }\r\n        } else {\r\n          moveSelected(e.delta);\r\n        }\r\n      },\r\n      text: null,\r\n    }[paperMode];\r\n\r\n    useEffect(() => {\r\n      scope.current.tool.maxDistance = eraserWidth;\r\n    }, [eraserWidth]);\r\n    const erased = useRef(new Set<string>());\r\n    const replaced = useRef(new Map<string, paper.Item>());\r\n\r\n    const itemGrid = useMemo(() => {\r\n      if (!/^(erase|select)$/.test(mode)) return [];\r\n      return gernerateGrid(group, width, height);\r\n    }, [group, width, height, mode]);\r\n\r\n    const handleToolDrag = (e: paper.ToolEvent) => {\r\n      const layer = scope.current.project.layers[1];\r\n      if (paperMode !== \"erase\" || !layer) return;\r\n      const ew = eraserWidth;\r\n\r\n      const hitOption = { class: paper.Path, stroke: true, tolerance: ew / 2 };\r\n      const bounds = new Rectangle(e.point.subtract(ew), new Size(ew, ew));\r\n\r\n      getGridItems(itemGrid, bounds).forEach((item) => {\r\n        if (erased.current.has(item.name)) return;\r\n        item.hitTestAll(e.point, hitOption)?.forEach(({ item }) => {\r\n          if (!(item instanceof paper.Path)) return;\r\n          let topItem: paper.PathItem = item;\r\n          while (topItem.parent !== layer) {\r\n            if (!(topItem.parent instanceof paper.PathItem)) break;\r\n            topItem = topItem.parent;\r\n          }\r\n          const { name } = topItem;\r\n\r\n          if (drawCtrl.pixelEraser) {\r\n            const radius = (ew + item.strokeWidth) / 2;\r\n            const circle = new Path.Circle({\r\n              center: e.point,\r\n              radius,\r\n              insert: false,\r\n            });\r\n\r\n            const sub = item.subtract(circle, { trace: false });\r\n            item.replaceWith(sub);\r\n            if (topItem === item) {\r\n              setGridItem(itemGrid, sub, item);\r\n              topItem = sub;\r\n            }\r\n            replaced.current.set(name, topItem);\r\n          } else {\r\n            topItem.opacity = 0.5;\r\n            topItem.guide = true;\r\n            erased.current.add(name);\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    const pathClones = useRef<paper.Path[]>([]);\r\n    const handleUp = {\r\n      draw() {\r\n        if (!path || path.segments.length <= 1) {\r\n          // if canvas is clicked without any path in queue.\r\n          if (!pathClones.current.length) unrasterizeCanvas();\r\n          return;\r\n        }\r\n        path.simplify();\r\n        if (renderSlow.current) pathClones.current.push(path.clone());\r\n        const pathData = path.exportJSON();\r\n        onChange((prev) => DrawState.addStroke(prev, pathData));\r\n        setPath(undefined);\r\n      },\r\n      erase() {\r\n        unrasterizeCanvas();\r\n        setPath(undefined);\r\n        if (drawCtrl.pixelEraser) {\r\n          const items = Array.from(replaced.current);\r\n          replaced.current.clear();\r\n          const splitters: Splitter[] = items.map(([uid, item]) => {\r\n            const paths = flattenCP(item);\r\n            return [uid, paths.map((i) => i.exportJSON())];\r\n          });\r\n          if (!splitters.length) return;\r\n          onChange((prev) => DrawState.splitStrokes(prev, splitters));\r\n        } else {\r\n          const erasedList = Array.from(erased.current);\r\n          erased.current.clear();\r\n          if (!erasedList.length) return;\r\n          onChange((prev) => DrawState.eraseStrokes(prev, erasedList));\r\n        }\r\n      },\r\n      select() {\r\n        unrasterizeCanvas();\r\n        let selection: string[];\r\n        const { view } = scope.current;\r\n        if (lasso) {\r\n          if (!path || Math.abs(path.area) < 1_000) return setPath(undefined);\r\n          path.closePath();\r\n          path.simplify();\r\n          if (!renderSlow.current) moveDash(path);\r\n          const items = getGridItems(itemGrid, path.bounds);\r\n          selection = checkLasso(items, path);\r\n        } else {\r\n          if (!rect || Math.abs(rect.area) < 1_000) return setRect(undefined);\r\n          const items = getGridItems(itemGrid, rect.bounds);\r\n          selection = checkLasso(items, rect);\r\n          const link = new Path();\r\n          const { topCenter } = rect.bounds;\r\n          link.add(topCenter, topCenter.subtract(new Point(0, 100)));\r\n          link.lastSegment.selected = true;\r\n          setRotateHandle(link);\r\n        }\r\n        setSelected(true);\r\n        setChosenIDs(selection);\r\n        const bc = (rect ?? path)?.bounds.bottomCenter;\r\n        bc && toggleSelectTool(true, view.projectToView(bc));\r\n      },\r\n      selected(e: paper.MouseEvent) {\r\n        handleSelectedCursor(e);\r\n        if (paperMode !== \"selected\") return;\r\n        const { view } = scope.current;\r\n        const clickPoint = view.projectToView(e.point);\r\n        toggleSelectTool(true, clickPoint);\r\n        if (pointBeforeDrag.current.equals(e.point)) return;\r\n        updateMutation();\r\n      },\r\n      text(e: paper.MouseEvent) {\r\n        if (pointText.current) {\r\n          submitText();\r\n          return handleTextCursor(e);\r\n        }\r\n        const [, l1] = scope.current.project.layers;\r\n        if (!l1) return;\r\n        const t = getClickedText(l1, e.point) ?? startText(e.point);\r\n        t.justification = \"left\";\r\n        pointText.current = t;\r\n        toggleTextTool(true, t);\r\n      },\r\n    }[paperMode];\r\n\r\n    const [cursor, setCursor] = useState(\"auto\");\r\n    useEffect(() => {\r\n      if (paperMode === \"text\" || paperMode === \"select\") {\r\n        setCursor(\"crosshair\");\r\n      } else if (paperMode === \"selected\") {\r\n        setCursor(lasso ? \"crosshair\" : \"nwse-resize\");\r\n      } else if (paperMode === \"draw\" || paperMode === \"erase\") {\r\n        setCursor(getCircleCursor(drawCtrl, ratio));\r\n      }\r\n    }, [paperMode, lasso, drawCtrl, ratio]);\r\n\r\n    const handleSelectedCursor = (e: paper.MouseEvent) => {\r\n      const hitRes =\r\n        rect?.hitTest(e.point, { segments: true }) ??\r\n        rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n      if (hitRes?.segment) {\r\n        if (hitRes.segment.selected) {\r\n          const center = rect?.bounds.center;\r\n          if (!center) return;\r\n          const line = hitRes.segment.point.subtract(center);\r\n          return setCursor(getRotateCurcor(line.angle));\r\n        }\r\n        const moveP = hitRes.segment.point;\r\n        const baseP = hitRes.segment.next.next.point;\r\n        const diagonal = moveP.subtract(baseP);\r\n        const { x, y } = diagonal;\r\n        return setCursor(x * y < 0 ? \"nesw-resize\" : \"nwse-resize\");\r\n      }\r\n      if ((rect ?? path)?.contains(e.point)) return setCursor(\"pointer\");\r\n      setCursor(\"crosshair\");\r\n    };\r\n    const handleTextCursor = (e: paper.MouseEvent) => {\r\n      if (pointText.current) return setCursor(\"auto\");\r\n      const layer = scope.current.project.layers[1];\r\n      if (!layer) return;\r\n      if (getClickedText(layer, e.point)) setCursor(\"text\");\r\n      else setCursor(\"crosshair\");\r\n    };\r\n\r\n    const handleMove = {\r\n      selected: handleSelectedCursor,\r\n      text: handleTextCursor,\r\n      ...{ select: null, draw: null, erase: null },\r\n    }[paperMode];\r\n\r\n    const handleKeyDown = (e: paper.KeyEvent) => {\r\n      if (paperMode !== \"selected\") return;\r\n      const delta = {\r\n        up: new Point(0, -10),\r\n        down: new Point(0, 10),\r\n        left: new Point(-10, 0),\r\n        right: new Point(10, 0),\r\n      }[e.key];\r\n      if (!delta) return;\r\n      e.preventDefault();\r\n      delta && moveSelected(delta);\r\n      toggleSelectTool(false);\r\n    };\r\n\r\n    const handleKeyUp = {\r\n      selected(e: paper.KeyEvent) {\r\n        if (/^(delete|backspace)$/.test(e.key)) deleteSelected();\r\n        if (/^(up|down|left|right)$/.test(e.key)) updateMutation();\r\n        if (e.key === \"escape\") resetSelect();\r\n      },\r\n      text(e: paper.KeyEvent) {\r\n        if (e.key === \"escape\") submitText();\r\n      },\r\n      ...{ select: null, draw: null, erase: null },\r\n    }[paperMode];\r\n\r\n    useEffect(() => {\r\n      if (readonly) return;\r\n\r\n      type Handler<E> = ((e: E) => boolean | void) | null;\r\n      const activate = <E,>(handler: Handler<E>): Handler<E> => {\r\n        return (e) => {\r\n          scope.current.activate();\r\n          if (handler) return handler(e);\r\n        };\r\n      };\r\n      const { view, tool } = scope.current;\r\n      view.onMouseDown = activate(handleDown);\r\n      view.onMouseDrag = activate(handleDrag);\r\n      view.onMouseUp = activate(handleUp);\r\n      view.onMouseMove = activate(handleMove);\r\n      tool.onMouseDrag = activate(handleToolDrag);\r\n      tool.onKeyDown = activate(handleKeyDown);\r\n      tool.onKeyUp = activate(handleKeyUp);\r\n    });\r\n\r\n    const updateMutation = () => {\r\n      if (!chosenItems?.length) return;\r\n      const mutations: Mutation[] = chosenItems.map((p) => [\r\n        p.name,\r\n        p.exportJSON(),\r\n      ]);\r\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\r\n    };\r\n\r\n    const deleteSelected = () => {\r\n      resetSelect();\r\n      if (!chosenIDs.length) return;\r\n      onChange((prev) => DrawState.eraseStrokes(prev, chosenIDs));\r\n    };\r\n\r\n    const mutateStyle = (updated: Partial<DrawCtrl>) => {\r\n      scope.current.activate();\r\n      updateGroupStyle(chosenItems, updated);\r\n      updateMutation();\r\n    };\r\n\r\n    const duplicateSelected = () => {\r\n      scope.current.activate();\r\n      const size = (rect || path)?.bounds.size;\r\n      if (!size || !chosenItems.length) return;\r\n      const { width, height } = size;\r\n      const transP = new Point(width, height).divide(10);\r\n      const copies = chosenItems.map((item) => item.clone());\r\n      copies.forEach((item) => item.translate(transP));\r\n      rect?.translate(transP);\r\n      path?.translate(transP);\r\n      rotateHandle?.translate(transP);\r\n\r\n      const pathDataList = copies.map((item) => item.exportJSON());\r\n      const IDs: string[] = [];\r\n      onChange((prev) => DrawState.addStrokes(prev, pathDataList, IDs));\r\n      setChosenIDs(IDs);\r\n      toggleSelectTool(false);\r\n    };\r\n\r\n    const rasterizeSelected = () => {\r\n      scope.current.activate();\r\n      const clip = (rect ?? path)?.clone();\r\n      clip && rasterizeLayer(clip, true);\r\n      unrasterizeLayer();\r\n      return layerRaster.current?.toDataURL() ?? \"\";\r\n    };\r\n\r\n    const pointText = useRef<paper.PointText>();\r\n    const cancelText = useCallback(() => {\r\n      if (!pointText.current?.name) {\r\n        pointText.current?.remove();\r\n      }\r\n      pointText.current = undefined;\r\n      toggleTextTool(false);\r\n    }, [toggleTextTool]);\r\n\r\n    const submitText = useCallback(() => {\r\n      const t = pointText.current;\r\n      if (!t) return;\r\n      cancelText();\r\n      if (!t.content) {\r\n        if (!t.name) return;\r\n        return onChange((prev) => DrawState.eraseStrokes(prev, [t.name]));\r\n      }\r\n      const pathData = t.exportJSON();\r\n      if (!t.name) {\r\n        return onChange((prev) => DrawState.addStroke(prev, pathData));\r\n      }\r\n      onChange((prev) => DrawState.mutateStrokes(prev, [[t.name, pathData]]));\r\n    }, [cancelText, onChange]);\r\n    const mutatePointText = (cb: (prev: paper.PointText) => void) => {\r\n      const pt = pointText.current;\r\n      if (!pt) return;\r\n      scope.current.activate();\r\n      cb(pt);\r\n      toggleTextTool(true, new Proxy(pt, {}));\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (mode === \"text\") return submitText;\r\n    }, [mode, submitText]);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      deleteSelected,\r\n      duplicateSelected,\r\n      rasterizeSelected,\r\n      mutateStyle,\r\n      mutatePointText,\r\n    }));\r\n\r\n    usePreventGesture();\r\n    usePinch(\r\n      ({ memo, offset: [scale], first, last, origin }) => {\r\n        scope.current.activate();\r\n        const { view } = scope.current;\r\n        const originRawP = new paper.Point(origin);\r\n\r\n        let lastScale: number;\r\n        let lastOrigin, elPos: paper.Point;\r\n        if (first || !memo) {\r\n          const { x, y } = view.element.getBoundingClientRect();\r\n          lastScale = 1;\r\n          elPos = new Point(x, y);\r\n          lastOrigin = originRawP.subtract(elPos);\r\n          toggleSelectTool(false);\r\n          cancelText();\r\n          rasterizeLayer(new Path.Rectangle(P_ZERO, projSize));\r\n          unrasterizeCanvas();\r\n        } else {\r\n          [lastScale, lastOrigin, elPos] = memo;\r\n        }\r\n\r\n        const originViewP = originRawP.subtract(elPos);\r\n        const originPorjP = view.viewToProject(originViewP);\r\n\r\n        const deltaP = originViewP.subtract(lastOrigin);\r\n        const transP = deltaP.divide(view.zoom);\r\n        view.translate(transP);\r\n\r\n        let dScale = first ? 1 : scale / lastScale;\r\n        scope.current.settings.hitTolerance /= dScale;\r\n        view.scale(dScale, originPorjP);\r\n\r\n        if (last) {\r\n          Promise.all([\r\n            putCenterBack(view, projSize),\r\n            scaleView(view, originPorjP, dScale),\r\n          ]).then(unrasterizeLayer);\r\n          view.scale(1 / dScale, originPorjP);\r\n        } else {\r\n          return [scale, originViewP, elPos];\r\n        }\r\n      },\r\n      {\r\n        scaleBounds: { max: 5, min: 1 },\r\n        rubberband: 0.5,\r\n        target: canvasEl,\r\n      }\r\n    );\r\n\r\n    const touchHandler = usePreventTouch(finger);\r\n    return (\r\n      <div\r\n        className=\"draw-wrapper\"\r\n        style={{ cursor }}\r\n        data-readonly={readonly}\r\n        {...touchHandler}\r\n      >\r\n        <canvas ref={canvasEl} className=\"draw-canvas\" />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nDrawRaw.displayName = \"Draw\";\r\nexport const Draw = React.memo(DrawRaw);\r\n\r\nfunction usePaperItem<T extends paper.Item>() {\r\n  const tuple = useState<T>();\r\n  const [item] = tuple;\r\n  useDebugValue(item);\r\n  useEffect(() => () => void item?.remove(), [item]);\r\n  return tuple;\r\n}\r\n\r\nconst paintStroke = (() => {\r\n  const cacheMap = new WeakMap<\r\n    paper.Layer,\r\n    Map<string, { stroke: Stroke; item: paper.Item }>\r\n  >();\r\n\r\n  return (stroke: Stroke, layer: paper.Layer, readonly = false) => {\r\n    const { pathData, uid } = stroke;\r\n    const cache = cacheMap.get(layer) ?? new Map();\r\n    cacheMap.set(layer, cache);\r\n    const cached = cache.get(uid);\r\n    let item: paper.Item;\r\n    if (cached?.stroke === stroke) {\r\n      layer.addChild(cached.item);\r\n      item = cached.item;\r\n    } else {\r\n      try {\r\n        item = layer.importJSON(pathData);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n      item ??= new paper.Item();\r\n      item.name = uid;\r\n      cache.set(uid, { item, stroke });\r\n    }\r\n    item.opacity = 1;\r\n    item.guide = readonly;\r\n    return item;\r\n  };\r\n})();\r\n\r\nconst paintRects = (layers: paper.Layer[], projSize: paper.Size) => {\r\n  const [l0, l1, l2] = layers;\r\n  if (!l0 || !l1 || !l2) return [];\r\n  const bgRect = new Path.Rectangle(P_ZERO, projSize);\r\n  const clip1 = bgRect.clone();\r\n  const clip2 = bgRect.clone();\r\n  bgRect.fillColor = new Color(\"#fff\");\r\n  l0.addChild(bgRect);\r\n  l1.addChild(clip1);\r\n  l2.addChild(clip2);\r\n  l1.clipped = true;\r\n  l2.clipped = true;\r\n  return [bgRect, clip1, clip2];\r\n};\r\n\r\nconst startRect = (point: paper.Point) => {\r\n  const rect = new Path.Rectangle(point, new Size(0, 0));\r\n  rect.onFrame = () => {}; // the handle size bug\r\n  return rect;\r\n};\r\n\r\nconst startStroke = (drawCtrl: DrawCtrl, point: paper.Point, slow = false) => {\r\n  let { mode, lineWidth, eraserWidth, color, highlight } = drawCtrl;\r\n  const path = new Path();\r\n  path.add(point);\r\n  if (mode === \"erase\") {\r\n    color = \"#ccc\";\r\n    lineWidth = eraserWidth;\r\n  }\r\n  if (mode === \"select\") {\r\n    color = \"#009dec\";\r\n    lineWidth = 5;\r\n  }\r\n  const strokeColor = new Color(color);\r\n  if ((mode === \"draw\" && highlight) || (mode === \"erase\" && !slow)) {\r\n    strokeColor.alpha = 0.5;\r\n    path.blendMode = \"multiply\";\r\n  }\r\n  path.strokeColor = strokeColor;\r\n  path.strokeWidth = lineWidth;\r\n  path.strokeJoin = \"round\";\r\n  path.strokeCap = \"round\";\r\n  path.guide = true;\r\n  return path;\r\n};\r\n\r\nconst moveDash = (item: paper.Item) => {\r\n  item.dashOffset = 0;\r\n  item.dashArray = [30, 20];\r\n  item.onFrame = () => (item.dashOffset += 3);\r\n};\r\n\r\nconst scaleView = (\r\n  view: paper.View,\r\n  originPorjP: paper.Point,\r\n  dScale: number\r\n) =>\r\n  new Promise<void>((resolve) => {\r\n    if (Math.abs(dScale - 1) < 0.05) {\r\n      view.scale(dScale, originPorjP);\r\n      return resolve();\r\n    }\r\n    let aniCount = 10;\r\n    dScale = Math.pow(dScale, 1 / aniCount);\r\n    const scale = () => {\r\n      view.scale(dScale, originPorjP);\r\n      if (--aniCount > 0) requestAnimationFrame(scale);\r\n      else requestAnimationFrame(() => resolve());\r\n    };\r\n    scale();\r\n  });\r\n\r\nconst getTargetCenter = (view: paper.View, projSize: paper.Size) => {\r\n  const { x, y } = view.center;\r\n  const minSize = Size.min(view.size, projSize).divide(2);\r\n  const { width: minX, height: minY } = minSize;\r\n  const { width: maxX, height: maxY } = projSize.subtract(minSize);\r\n\r\n  const targetX = x < minX ? minX : x > maxX ? maxX : x;\r\n  const targetY = y < minY ? minY : y > maxY ? maxY : y;\r\n  return new Point(targetX, targetY);\r\n};\r\n\r\nconst putCenterBack = (view: paper.View, projSize: paper.Size) =>\r\n  new Promise<void>((resolve) => {\r\n    const targetCenter = getTargetCenter(view, projSize);\r\n    if (view.center.equals(targetCenter)) return resolve();\r\n    let aniCount = 10;\r\n    const move = () => {\r\n      const delta = view.center.subtract(targetCenter);\r\n      view.translate(delta.divide(aniCount));\r\n      if (--aniCount > 0) requestAnimationFrame(move);\r\n      else requestAnimationFrame(() => resolve());\r\n    };\r\n    requestAnimationFrame(move);\r\n  });\r\n\r\nconst checkLasso = (items: paper.Item[], selection: paper.Path) => {\r\n  const isInside = (p: paper.Path) => {\r\n    if (selection.segments.length === 4 && p.isInside(selection.bounds)) {\r\n      return true;\r\n    }\r\n    return !p.subtract(selection, { insert: false, trace: false }).compare(p);\r\n  };\r\n  return items\r\n    .filter((item) => {\r\n      if (!item.name) return false;\r\n      if (!item.bounds.intersects(selection.bounds)) return false;\r\n      if (item instanceof paper.Path) {\r\n        return isInside(item);\r\n      } else {\r\n        const checkedP = new Path.Rectangle(item.bounds);\r\n        checkedP.remove();\r\n        return isInside(checkedP) || selection.isInside(item.bounds);\r\n      }\r\n    })\r\n    .map(({ name }) => name);\r\n};\r\n\r\nconst updateGroupStyle = (items: paper.Item[], updated: Partial<DrawCtrl>) => {\r\n  const { lineWidth, color, highlight } = updated;\r\n  items.forEach((item) => {\r\n    if (item instanceof paper.PointText && color) {\r\n      const newColor = new Color(color);\r\n      item.fillColor = newColor;\r\n    }\r\n\r\n    if (!(item instanceof paper.Path)) return;\r\n\r\n    if (color) {\r\n      const newColor = new Color(color);\r\n      if (item.blendMode === \"multiply\") newColor.alpha = 0.5;\r\n      item.strokeColor = newColor;\r\n    }\r\n\r\n    if (lineWidth) item.strokeWidth = lineWidth;\r\n\r\n    if (!item.strokeColor || highlight === undefined) return;\r\n    item.strokeColor.alpha = highlight ? 0.5 : 1;\r\n    item.blendMode = highlight ? \"multiply\" : \"normal\";\r\n  });\r\n};\r\n\r\nconst getClickedText = (layer: paper.Layer, point: paper.Point) => {\r\n  const hitRes = layer.hitTest(point, { class: paper.PointText, fill: true });\r\n  if (hitRes?.item instanceof paper.PointText) return hitRes?.item;\r\n};\r\n\r\nconst startText = (point: paper.Point) => {\r\n  return new paper.PointText({\r\n    point: point.add(new Point(0, 50)),\r\n    content: \"\",\r\n    fontSize: 50,\r\n  });\r\n};\r\n\r\nconst flattenCP = (cp: paper.Item): paper.Path[] => {\r\n  if (cp instanceof paper.Path) {\r\n    return cp.isEmpty() ? [] : [cp];\r\n  }\r\n  if (cp instanceof paper.CompoundPath) {\r\n    return cp.children.map(flattenCP).flat();\r\n  }\r\n  return [];\r\n};\r\n","import { CSSProperties, FC, RefObject, useState } from \"react\";\r\nimport {\r\n  CopyOutlined,\r\n  BoldOutlined,\r\n  DeleteOutlined,\r\n  PictureTwoTone,\r\n  PictureOutlined,\r\n  BgColorsOutlined,\r\n  ZoomOutOutlined,\r\n  ZoomInOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Button, ButtonProps, Modal, Popover } from \"antd\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\r\nimport { allColors } from \"lib/color\";\r\nimport { DrawRefType } from \"component/Draw\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { Color } from \"paper/dist/paper-core\";\r\nimport \"./draw-tools.sass\";\r\n\r\nconst btnProps: ButtonProps = {\r\n  type: \"text\",\r\n  shape: \"round\",\r\n  size: \"small\",\r\n};\r\n\r\nconst getPosVars = (x: number, y: number) => {\r\n  return { \"--pos-x\": x + \"px\", \"--pos-y\": y + \"px\" } as CSSProperties;\r\n};\r\nconst getObjVars = (obj: Record<string, string | number>) => {\r\n  const result: Record<string, string | number> = {};\r\n  Object.entries(obj).forEach(([key, value]) => {\r\n    result[\"--\" + key] = value;\r\n  });\r\n  return result as CSSProperties;\r\n};\r\n\r\nexport const SelectTool: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n  visible: boolean;\r\n  clickPoint: paper.Point;\r\n}> = ({ drawRef, visible, clickPoint }) => {\r\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\r\n\r\n  const getRaster = () => {\r\n    if (!drawRef.current) return;\r\n    const imageData = drawRef.current.rasterizeSelected();\r\n    Modal.confirm({\r\n      title: \"Screenshot\",\r\n      content: <img className=\"raster\" src={imageData} alt=\"raster\" />,\r\n      className: \"raster-modal\",\r\n      icon: <PictureTwoTone />,\r\n      okText: \"Save\",\r\n      onOk: () => saveAs(imageData, document.title.split(\" - \")[0] + \".png\"),\r\n    });\r\n  };\r\n\r\n  const { x, y } = clickPoint;\r\n  return (\r\n    <div\r\n      className=\"select-tool tool-options\"\r\n      data-visible={visible}\r\n      style={getPosVars(x, y)}\r\n    >\r\n      <Popover\r\n        trigger=\"click\"\r\n        placement=\"bottom\"\r\n        overlayClassName=\"style-pop\"\r\n        getPopupContainer={(e) => e.parentElement!}\r\n        destroyTooltipOnHide\r\n        content={\r\n          <PenPanel\r\n            updateDrawCtrl={(updated) => {\r\n              setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\r\n              drawRef.current?.mutateStyle(updated);\r\n            }}\r\n            drawCtrl={currDrawCtrl}\r\n          />\r\n        }\r\n      >\r\n        <Button icon={<BgColorsOutlined />} {...btnProps} />\r\n      </Popover>\r\n      <Button\r\n        icon={<CopyOutlined />}\r\n        onClick={() => drawRef.current?.duplicateSelected()}\r\n        {...btnProps}\r\n      />\r\n      <Button icon={<PictureOutlined />} onClick={getRaster} {...btnProps} />\r\n      <Button\r\n        danger\r\n        icon={<DeleteOutlined />}\r\n        onClick={() => drawRef.current?.deleteSelected()}\r\n        {...btnProps}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const TextTool: FC<{\r\n  pointText: paper.PointText;\r\n  drawRef: RefObject<DrawRefType>;\r\n}> = ({ pointText, drawRef }) => {\r\n  const { topLeft } = pointText.bounds;\r\n  const { x, y } = pointText.view.projectToView(topLeft);\r\n\r\n  const scale = pointText.viewMatrix.a;\r\n  const fontSize = +pointText.fontSize;\r\n  const size = pointText.bounds.size.divide(pointText.matrix.a);\r\n  const width = pointText.content ? size.width + \"px\" : \"4em\";\r\n  const height = size.height + \"px\";\r\n\r\n  const text = pointText.content;\r\n  const { fontWeight } = pointText;\r\n\r\n  const color = pointText.fillColor?.toCSS(true) ?? allColors[0]!;\r\n  const fontColorBtn = (\r\n    <Popover\r\n      content={\r\n        <ColorSelect\r\n          color={color}\r\n          setColor={(c) =>\r\n            drawRef.current?.mutatePointText((prev) => {\r\n              prev.fillColor = new Color(c);\r\n            })\r\n          }\r\n        />\r\n      }\r\n      trigger=\"click\"\r\n      overlayStyle={{ width: 200 }}\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n    >\r\n      <Button {...btnProps} icon={<BgColorsOutlined />} />\r\n    </Popover>\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className=\"text-tool\"\r\n      style={{\r\n        ...getObjVars({ scale, width, height, color }),\r\n        ...getPosVars(x, y),\r\n      }}\r\n    >\r\n      <div className=\"textarea-wrapper\" style={{ fontSize, fontWeight }}>\r\n        <textarea\r\n          autoFocus={!text}\r\n          placeholder=\"Text...\"\r\n          value={text}\r\n          onChange={(e) => {\r\n            drawRef.current?.mutatePointText((prev) => {\r\n              prev.content = e.target.value;\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"tool-options text-options\" data-bottom={y < 60}>\r\n        {fontColorBtn}\r\n        <Button\r\n          onClick={() => {\r\n            drawRef.current?.mutatePointText((prev) => {\r\n              const bold = prev.fontWeight === \"bold\";\r\n              prev.fontWeight = bold ? \"normal\" : \"bold\";\r\n            });\r\n          }}\r\n          {...btnProps}\r\n          type={fontWeight === \"bold\" ? \"link\" : \"text\"}\r\n          icon={<BoldOutlined />}\r\n        />\r\n        <Button\r\n          {...btnProps}\r\n          icon={<ZoomOutOutlined />}\r\n          onClick={() => {\r\n            drawRef.current?.mutatePointText((prev) => {\r\n              const { topLeft } = prev.bounds;\r\n              prev.scale(0.9, topLeft);\r\n            });\r\n          }}\r\n        />\r\n        <Button\r\n          {...btnProps}\r\n          icon={<ZoomInOutlined />}\r\n          onClick={() => {\r\n            drawRef.current?.mutatePointText((prev) => {\r\n              const { topLeft } = prev.bounds;\r\n              prev.scale(1.1, topLeft);\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport { useDrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { useMemoizedFn as useEvent } from \"ahooks\";\r\nimport { Draw, DrawRefType } from \"component/Draw\";\r\nimport { SelectTool, TextTool } from \"pages/reader/tools/DrawTools\";\r\nimport { once, range } from \"lodash\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { DrawState } from \"lib/draw/DrawState\";\r\nimport { Map, Set } from \"immutable\";\r\nimport { P_ZERO } from \"component/Draw/Draw\";\r\n\r\nconst PageWrapperRaw: FC<{\r\n  drawState: DrawState;\r\n  teamStateMap?: Map<string, DrawState>;\r\n  thumbnail?: string;\r\n  pdfIndex?: number;\r\n  noteID?: string;\r\n  updateState?: (ds: DrawState) => void;\r\n  onViewChange?: (ratio: number) => void;\r\n  preview?: boolean;\r\n  preload?: boolean;\r\n  ignores?: Set<string>;\r\n  skipInView?: boolean;\r\n}> = ({\r\n  thumbnail,\r\n  drawState,\r\n  teamStateMap,\r\n  updateState,\r\n  pdfIndex,\r\n  noteID = \"\",\r\n  preview = false,\r\n  onViewChange,\r\n  preload = false,\r\n  ignores = Set<string>(),\r\n  skipInView = false,\r\n}) => {\r\n  const threshold = onViewChange && range(0, 1.2, 0.2);\r\n  const [ref, visible, entry] = useInView({ threshold, skip: skipInView });\r\n  useEffect(() => {\r\n    if (!onViewChange) return;\r\n    if (!entry || !visible) return onViewChange(0);\r\n    onViewChange(entry.intersectionRatio);\r\n  }, [visible, entry, onViewChange]);\r\n\r\n  const [fullImg, setFullImg] = useState<string>();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const loadImage = useCallback(\r\n    once(async () => {\r\n      if (!pdfIndex || !noteID) return;\r\n      const { getNotePageImage } = await import(\"lib/note/pdfImage\");\r\n      setFullImg(await getNotePageImage(noteID, pdfIndex));\r\n    }),\r\n    [pdfIndex, noteID]\r\n  );\r\n\r\n  const show = visible || preload;\r\n  useEffect(() => {\r\n    if (!preview && show) loadImage();\r\n  }, [show, preview, loadImage]);\r\n\r\n  const otherStates = useMemo(\r\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\r\n    [teamStateMap, ignores]\r\n  );\r\n\r\n  const imageLoaded = Boolean(fullImg || !pdfIndex);\r\n  const drawShow = show && imageLoaded;\r\n\r\n  const { height, width } = drawState;\r\n  const ratio = height / width;\r\n\r\n  return (\r\n    <div ref={ref} className=\"page-wrapper\">\r\n      <svg className=\"size-holder\" viewBox={`0 0 100 ${ratio * 100}`} />\r\n      {drawShow && (\r\n        <DrawWrapper\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          updateState={updateState}\r\n          imgSrc={fullImg || thumbnail}\r\n          preview={preview}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nPageWrapperRaw.displayName = \"PageWrapper\";\r\nexport const PageWrapper = React.memo(PageWrapperRaw);\r\n\r\nconst DrawWrapper: FC<{\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}> = ({ drawState, updateState, otherStates, preview = false, imgSrc }) => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const drawRef = useRef<DrawRefType>(null);\r\n  const [textShow, setTextShow] = useState(false);\r\n  const [selectShow, setSelectShow] = useState(false);\r\n  const [pointText, setPointText] = useState<paper.PointText>();\r\n  const [clickPoint, setClickPoint] = useState<paper.Point>(P_ZERO);\r\n\r\n  const handleChange = useEvent(\r\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\r\n      if (!updateState) return;\r\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\r\n      if (newDS === drawState) return;\r\n      updateState(newDS);\r\n    }\r\n  );\r\n\r\n  const toggleSelectTool = useEvent(\r\n    (active: boolean, clickPoint?: paper.Point) => {\r\n      setClickPoint((p) => clickPoint ?? p);\r\n      setSelectShow(active);\r\n    }\r\n  );\r\n  const toggleTextTool = useEvent(\r\n    (active: boolean, pointText?: paper.PointText) => {\r\n      setPointText(pointText);\r\n      setTextShow(active);\r\n    }\r\n  );\r\n\r\n  return preview ? (\r\n    <Draw\r\n      drawState={drawState}\r\n      otherStates={otherStates}\r\n      imgSrc={imgSrc}\r\n      readonly\r\n    />\r\n  ) : (\r\n    <>\r\n      <Draw\r\n        drawState={drawState}\r\n        otherStates={otherStates}\r\n        onChange={handleChange}\r\n        imgSrc={imgSrc}\r\n        drawCtrl={drawCtrl}\r\n        ref={drawRef}\r\n        toggleTextTool={toggleTextTool}\r\n        toggleSelectTool={toggleSelectTool}\r\n      />\r\n      <SelectTool\r\n        drawRef={drawRef}\r\n        visible={selectShow}\r\n        clickPoint={clickPoint}\r\n      />\r\n      {textShow && pointText && (\r\n        <TextTool drawRef={drawRef} pointText={pointText} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { PageWrapper } from \"./PageWrapper\";\r\nimport \"./page-wrapper.sass\";\r\nexport default PageWrapper;\r\n","import localforage from \"localforage\";\r\nimport React, {\r\n  FC,\r\n  PropsWithChildren,\r\n  useContext,\r\n  useDebugValue,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nexport interface DrawCtrl {\r\n  mode: \"draw\" | \"erase\" | \"select\" | \"text\";\r\n  finger: boolean;\r\n  lineWidth: number;\r\n  eraserWidth: number;\r\n  color: string;\r\n  highlight: boolean;\r\n  lasso: boolean;\r\n  pixelEraser: boolean;\r\n  widthList: number[];\r\n}\r\n\r\nexport const defaultWidthList = [10, 20, 30, 50];\r\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\r\n  mode: \"draw\",\r\n  finger: true,\r\n  lineWidth: 10,\r\n  eraserWidth: 10,\r\n  color: \"#000000\",\r\n  highlight: false,\r\n  lasso: true,\r\n  pixelEraser: false,\r\n  widthList: defaultWidthList,\r\n};\r\n\r\nasync function getDrawCtrl() {\r\n  let drawCtrl = await localforage.getItem<DrawCtrl>(\"DRAW_CTRL\");\r\n  if (!drawCtrl) {\r\n    drawCtrl = defaultDrawCtrl;\r\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n  }\r\n  return drawCtrl;\r\n}\r\n\r\nasync function saveDrawCtrl(drawCtrl: DrawCtrl) {\r\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n}\r\n\r\nconst DrawCtrlContext = React.createContext({\r\n  drawCtrl: defaultDrawCtrl,\r\n  updateDrawCtrl: (() => {}) as (updated: Partial<DrawCtrl>) => void,\r\n});\r\n\r\nexport function useDrawCtrl() {\r\n  const { drawCtrl } = useContext(DrawCtrlContext);\r\n  useDebugValue(drawCtrl);\r\n  return drawCtrl;\r\n}\r\n\r\nexport function useUpdateDrawCtrl() {\r\n  const { updateDrawCtrl } = useContext(DrawCtrlContext);\r\n  return updateDrawCtrl;\r\n}\r\n\r\nexport const DrawCtrlProvider: FC<PropsWithChildren> = ({ children }) => {\r\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\r\n  useEffect(() => {\r\n    getDrawCtrl().then(setDrawCtrl);\r\n  }, []);\r\n\r\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\r\n    setDrawCtrl((prev) => {\r\n      const newCtrl = { ...prev, ...updated };\r\n      saveDrawCtrl(newCtrl);\r\n      return newCtrl;\r\n    });\r\n  };\r\n  return (\r\n    <DrawCtrlContext.Provider value={{ drawCtrl, updateDrawCtrl }}>\r\n      {children}\r\n    </DrawCtrlContext.Provider>\r\n  );\r\n};\r\n","export function createVirtualCanvas(width: number, height: number) {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const context = canvas.getContext(\"2d\");\r\n  if (!context) {\r\n    throw new Error(\"can't get virtual canvas context\");\r\n  }\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  return { canvas, context };\r\n}\r\n\r\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  const ctx = canvas.getContext('2d');\r\n  ctx?.clearRect(0, 0, 1, 1);\r\n}\r\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\r\nimport { defaultWidthList, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorCirle } from \"component/ColorCircle\";\r\nimport { WIDTH } from \"lib/draw/DrawState\";\r\nimport { Popover, Segmented, Slider } from \"antd\";\r\nimport { allColors } from \"lib/color\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport IconFont from \"component/IconFont\";\r\nimport { List } from \"immutable\";\r\nimport \"./pen-panel.sass\";\r\n\r\nexport const PenPanel: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n}> = ({ updateDrawCtrl, drawCtrl }) => {\r\n  const { highlight, color } = drawCtrl;\r\n  const [panelBlur, setPanelBlur] = useState(false);\r\n\r\n  return (\r\n    <div className=\"pen-panel\" data-blur={panelBlur} data-hi={highlight}>\r\n      <div className=\"pen-status\">\r\n        <WidthSelect\r\n          updateDrawCtrl={updateDrawCtrl}\r\n          drawCtrl={drawCtrl}\r\n          setPanelBlur={setPanelBlur}\r\n        />\r\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\r\n      </div>\r\n      <ColorSelect\r\n        color={color || \"\"}\r\n        setColor={(c) => updateDrawCtrl({ color: c })}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const WidthSelect: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n  setPanelBlur?: Setter<boolean>;\r\n  field?: \"lineWidth\" | \"eraserWidth\";\r\n}> = ({\r\n  updateDrawCtrl,\r\n  drawCtrl,\r\n  setPanelBlur = () => {},\r\n  field = \"lineWidth\",\r\n}) => {\r\n  const currWidth = drawCtrl[field];\r\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\r\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\r\n\r\n  const chosen = useMemo(\r\n    () => widthList.indexOf(currWidth ?? -1),\r\n    [currWidth, widthList]\r\n  );\r\n\r\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\r\n  useEffect(() => {\r\n    if (popShow.includes(true)) setPanelBlur(true);\r\n    else setPanelBlur(false);\r\n  }, [popShow, setPanelBlur]);\r\n\r\n  const realSizeStyle = (width: number) =>\r\n    ({\r\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width})`,\r\n    } as CSSProperties);\r\n\r\n  const options = [\r\n    { value: -1, label: null },\r\n    ...widthList.map((width, index) => ({\r\n      value: index,\r\n      label: (\r\n        <Popover\r\n          visible={popShow.get(index)}\r\n          onVisibleChange={(v) => setPopShow((prev) => prev.set(index, v))}\r\n          trigger={chosen === index ? [\"click\"] : []}\r\n          placement=\"bottom\"\r\n          destroyTooltipOnHide\r\n          content={\r\n            <Slider\r\n              min={5}\r\n              max={100}\r\n              className=\"ctrl-slider\"\r\n              defaultValue={width}\r\n              onAfterChange={(w) => {\r\n                if (widthList.includes(w)) {\r\n                  setPopShow((prev) => prev.set(index, false));\r\n                  return updateDrawCtrl({ [field]: w });\r\n                }\r\n                const newWL = widthList.slice();\r\n                newWL[index] = w;\r\n                updateDrawCtrl({ widthList: newWL, [field]: w });\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          <div className=\"circle-wrapper\" style={realSizeStyle(width)}>\r\n            <ColorCirle className={\"width-circle \" + field} color={color} />\r\n          </div>\r\n        </Popover>\r\n      ),\r\n    })),\r\n  ];\r\n\r\n  return (\r\n    <Segmented\r\n      className=\"width-seg\"\r\n      value={chosen}\r\n      options={options}\r\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 10 })}\r\n    />\r\n  );\r\n};\r\n\r\nconst HighlightSwitch: FC<{\r\n  checked?: boolean;\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ checked = false, updateDrawCtrl }) => {\r\n  return (\r\n    <label className=\"hi-wrapper\">\r\n      <input\r\n        type=\"checkbox\"\r\n        name=\"highlight\"\r\n        checked={checked}\r\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\r\n      />\r\n      <div className=\"hi-switch\">\r\n        <IconFont type=\"icon-Highlight\" />\r\n      </div>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport const ColorSelect: FC<{\r\n  color: string;\r\n  setColor: (color: string) => void;\r\n}> = ({ setColor, color }) => (\r\n  <div className=\"color-select\">\r\n    {allColors.map((c) => (\r\n      <label key={c}>\r\n        <input\r\n          checked={color === c}\r\n          type=\"radio\"\r\n          name=\"color\"\r\n          onChange={(e) => e.target.checked && setColor(c)}\r\n        />\r\n        <div\r\n          data-color={c}\r\n          className=\"circle\"\r\n          style={{ backgroundColor: c, borderColor: c }}\r\n        />\r\n      </label>\r\n    ))}\r\n  </div>\r\n);\r\n"],"names":["createFromIconfontCN","scriptUrl","getRotateCursorImage","cache","Map","createVirtualCanvas","canvas","context","image","Image","src","angle","Math","round","cached","get","translate","rotate","PI","drawImage","data","toDataURL","clearRect","resetTransform","set","getRotateCurcor","usePreventTouch","allowFinger","isTouch","useRef","checkPoniter","e","isPrimary","current","pointerType","preventTouch","touch","touches","touchType","isApplePencil","length","isEventValid","stopPropagation","onPointerDownCapture","onPointerMoveCapture","onTouchStartCapture","onTouchMoveCapture","getGridRange","bounds","topLeft","bottomRight","floor","x","ceil","y","setGridItem","grid","item","replaced","strokeBounds","xmin","xmax","ymin","ymax","delete","add","getGridItems","itemSet","Set","forEach","Array","from","P_ZERO","Point","DrawRaw","React","ref","drawState","otherStates","onChange","drawCtrl","defaultDrawCtrl","readonly","imgSrc","toggleSelectTool","toggleTextTool","width","height","projSize","useMemo","Size","mode","finger","lasso","eraserWidth","canvasEl","scope","paper","useState","group","setGroup","usePaperItem","path","setPath","rect","setRect","rotateHandle","setRotateHandle","useEffect","cvs","scp","setup","settings","handleSize","hitTolerance","Layer","visible","project","layers","activate","Tool","view","remove","releaseCanvas","rects","paintRects","r","useSize","canvasWidth","ratio","viewSize","multiply","scale","l","update","imgRaster","setImgRaster","raster","Raster","addChild","sendToBack","onLoad","fitBounds","Rectangle","bringToFront","mergedStrokes","DrawState","getStrokeList","renderSlow","deferRender","deferTimerID","l1","render","tempGroup","timeBeforeRender","performance","now","removeChildren","stroke","self","hasStroke","uid","paintStroke","push","unrasterizeCanvas","pathClones","c","duration","window","setTimeout","clearTimeout","hitRef","selected","setSelected","paperMode","chosenIDs","setChosenIDs","chosenItems","IDSet","filter","has","name","resetSelect","useCallback","undefined","pointText","Proxy","layerRaster","rasterizeLayer","clip","force","l0","clipMask","prevClip","firstChild","replaceWith","insertAbove","dpi","devicePixelRatio","resolution","rasterize","addTo","unrasterizeLayer","lr","canvasRaster","rasterizeCanvas","element","opacity","cr","downPath","startStroke","point","downRect","startRect","pointBeforeDrag","handleDown","draw","erase","select","contains","hitRes","hitTest","segments","text","dragPath","smooth","moveSelected","delta","handleDrag","s1","s2","s3","segment","center","axis","subtract","line","setCursor","moveP","baseP","next","diagonal","strokeWidth","rBaseP","tool","maxDistance","erased","itemGrid","test","wnum","hnum","gernerateGrid","handleToolDrag","layer","ew","hitOption","class","tolerance","hitTestAll","topItem","parent","pixelEraser","radius","circle","Path","insert","sub","trace","guide","handleUp","simplify","clone","pathData","exportJSON","prev","items","clear","splitters","map","flattenCP","i","erasedList","selection","abs","area","closePath","moveDash","checkLasso","link","topCenter","lastSegment","bc","bottomCenter","projectToView","handleSelectedCursor","clickPoint","equals","updateMutation","submitText","handleTextCursor","t","getClickedText","startText","justification","cursor","lineWidth","size","half","getCircleCursor","handleMove","handleKeyDown","up","down","left","right","key","preventDefault","handleKeyUp","deleteSelected","handler","onMouseDown","onMouseDrag","onMouseUp","onMouseMove","onKeyDown","onKeyUp","mutations","p","mutateStyle","updated","updateGroupStyle","duplicateSelected","transP","divide","copies","pathDataList","IDs","rasterizeSelected","cancelText","content","mutatePointText","cb","pt","useImperativeHandle","document","addEventListener","removeEventListener","usePinch","memo","offset","first","last","origin","lastScale","lastOrigin","elPos","originRawP","getBoundingClientRect","originViewP","originPorjP","viewToProject","zoom","dScale","Promise","all","putCenterBack","scaleView","then","scaleBounds","max","min","rubberband","target","touchHandler","className","style","displayName","Draw","tuple","useDebugValue","cacheMap","WeakMap","importJSON","console","error","l2","bgRect","clip1","clip2","fillColor","Color","clipped","onFrame","slow","color","highlight","strokeColor","alpha","blendMode","strokeJoin","strokeCap","dashOffset","dashArray","resolve","aniCount","pow","requestAnimationFrame","targetCenter","minSize","minX","minY","maxX","maxY","targetX","targetY","getTargetCenter","move","isInside","compare","intersects","checkedP","newColor","fill","fontSize","cp","isEmpty","children","flat","btnProps","type","shape","getPosVars","getObjVars","obj","result","Object","entries","value","SelectTool","drawRef","currDrawCtrl","setCurrDrawCtrl","trigger","placement","overlayClassName","getPopupContainer","parentElement","destroyTooltipOnHide","PenPanel","updateDrawCtrl","icon","BgColorsOutlined","CopyOutlined","onClick","PictureOutlined","imageData","Modal","title","alt","PictureTwoTone","okText","onOk","saveAs","split","danger","DeleteOutlined","TextTool","viewMatrix","a","matrix","fontWeight","toCSS","allColors","fontColorBtn","setColor","overlayStyle","autoFocus","placeholder","bold","BoldOutlined","ZoomOutOutlined","Z","ZoomInOutlined","PageWrapperRaw","thumbnail","teamStateMap","updateState","pdfIndex","noteID","preview","onViewChange","preload","ignores","skipInView","threshold","range","useInView","skip","entry","intersectionRatio","fullImg","setFullImg","loadImage","once","getNotePageImage","show","deleteAll","toList","toArray","imageLoaded","Boolean","drawShow","viewBox","DrawWrapper","useDrawCtrl","textShow","setTextShow","selectShow","setSelectShow","setPointText","setClickPoint","handleChange","useEvent","arg","newDS","active","defaultWidthList","widthList","getDrawCtrl","localforage","saveDrawCtrl","DrawCtrlContext","useContext","useUpdateDrawCtrl","DrawCtrlProvider","setDrawCtrl","Provider","newCtrl","createElement","getContext","Error","ctx","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","field","currWidth","chosen","indexOf","List","popShow","setPopShow","includes","realSizeStyle","WIDTH","options","label","index","onVisibleChange","v","defaultValue","onAfterChange","w","newWL","slice","IconFont","backgroundColor","borderColor"],"sourceRoot":""}