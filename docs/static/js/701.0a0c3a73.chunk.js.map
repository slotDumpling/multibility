{"version":3,"file":"static/js/701.0a0c3a73.chunk.js","mappings":"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","sources":["lib/note/pdfImage.ts"],"sourcesContent":["import localforage from \"localforage\";\r\nimport * as pdfjs from \"pdfjs-dist/legacy/build/pdf\";\r\n// @ts-ignore\r\nimport pdfjsWorker from \"pdfjs-dist/legacy/build/pdf.worker.entry\";\r\nimport { PDFDocumentProxy } from \"pdfjs-dist/types/src/display/api\";\r\nimport { v4 as getUid } from \"uuid\";\r\nimport { createVirtualCanvas, releaseCanvas } from \"../draw/drawer\";\r\nimport { createEmptyNote, Note, NotePage } from \"./note\";\r\npdfjs.GlobalWorkerOptions.workerSrc = pdfjsWorker;\r\n\r\nconst getPDFDocument = async (file: Blob) => {\r\n  const data = new Uint8Array(await file.arrayBuffer());\r\n  return pdfjs.getDocument(data).promise;\r\n};\r\n\r\nconst getPageImage = async (\r\n  doc: PDFDocumentProxy,\r\n  pageNum: number,\r\n  scale: number\r\n): Promise<[string, number]> => {\r\n  const page = await doc.getPage(pageNum);\r\n  const viewport = page.getViewport({ scale });\r\n  console.log({ viewport });\r\n\r\n  const { height, width } = viewport;\r\n  const ratio = height / width;\r\n  const { canvas, context } = createVirtualCanvas(\r\n    Math.floor(width * scale),\r\n    Math.floor(height * scale)\r\n  );\r\n\r\n  await page.render({\r\n    canvasContext: context,\r\n    viewport: viewport,\r\n    transform: [scale, 0, 0, scale, 0, 0],\r\n  }).promise;\r\n\r\n  const data = canvas.toDataURL();\r\n\r\n  releaseCanvas(canvas);\r\n\r\n  return [data, ratio];\r\n};\r\n\r\nexport async function getPDFImages(\r\n  file: Blob,\r\n  scale = 2,\r\n  progressCb?: (percent: number) => void\r\n) {\r\n  const doc = await getPDFDocument(file);\r\n  const { numPages } = doc;\r\n  const images: string[] = [];\r\n  const ratios: number[] = [];\r\n\r\n  for (let i = 1; i <= numPages; i += 1) {\r\n    const [data, ratio] = await getPageImage(doc, i, scale);\r\n    images.push(data);\r\n    ratios.push(ratio);\r\n    if (progressCb) progressCb(Math.floor((i / numPages) * 100));\r\n  }\r\n\r\n  return { images, ratios };\r\n}\r\n\r\nexport async function getOneImage(file: Blob, index: number, scale = 2) {\r\n  const doc = await getPDFDocument(file);\r\n  const { numPages } = doc;\r\n  if (index > numPages) {\r\n    throw new Error(\"index out of range\");\r\n  }\r\n  const [data] = await getPageImage(doc, index, scale);\r\n  return data;\r\n}\r\n\r\nconst IMAGE_CACHE_NUMBER = 10;\r\nconst getImageCache = async (noteID: string, index: number) => {\r\n  let cacheList = ((await localforage.getItem(\"IMAGE_CACHE\")) ||\r\n    []) as string[];\r\n  const key = `IMAGE_${noteID}_${index}`;\r\n  if (!cacheList.includes(key)) return;\r\n  cacheList = [key, ...cacheList.filter((id) => id !== key)];\r\n  await localforage.setItem(\"IMAGE_CACHE\", cacheList);\r\n  return (await localforage.getItem(key)) as string;\r\n};\r\n\r\nconst setImageCache = async (noteID: string, index: number, data: string) => {\r\n  let cacheList = ((await localforage.getItem(\"IMAGE_CACHE\")) ||\r\n    []) as string[];\r\n  const key = `IMAGE_${noteID}_${index}`;\r\n  cacheList = [key, ...cacheList.filter((id) => id !== key)];\r\n  if (cacheList.length > IMAGE_CACHE_NUMBER) {\r\n    const deleteList = cacheList.slice(IMAGE_CACHE_NUMBER);\r\n    cacheList = cacheList.slice(0, IMAGE_CACHE_NUMBER);\r\n    for (let id of deleteList) {\r\n      await localforage.removeItem(id);\r\n    }\r\n  }\r\n  await localforage.setItem(\"IMAGE_CACHE\", cacheList);\r\n  await localforage.setItem(key, data);\r\n};\r\n\r\nexport async function getOnePageImage(noteID: string, index: number) {\r\n  const cached = await getImageCache(noteID, index);\r\n  if (cached) return cached;\r\n  const file = (await localforage.getItem(`PDF_${noteID}`)) as Blob | undefined;\r\n  const data = file && (await getOneImage(file, index, 2));\r\n  if (data) setImageCache(noteID, index, data);\r\n  return data;\r\n}\r\n\r\nexport async function LoadPDF(\r\n  file: File,\r\n  progressCb?: (percent: number) => void\r\n): Promise<Note> {\r\n  const { images, ratios } = await getPDFImages(file, 0.5, progressCb);\r\n  const pageRec: Record<string, NotePage> = {};\r\n  const pageOrder: string[] = [];\r\n  images.forEach((image, idx) => {\r\n    const pageID = getUid();\r\n    pageRec[pageID] = {\r\n      image,\r\n      ratio: ratios[idx],\r\n      state: {\r\n        strokes: {},\r\n      },\r\n      pdfIndex: idx + 1,\r\n    };\r\n    pageOrder.push(pageID);\r\n  });\r\n  const name = file.name.replace(\".pdf\", \"\");\r\n  const ab = await file.arrayBuffer();\r\n  const pdf = new Blob([ab], { type: \"application/pdf\" });\r\n  return {\r\n    ...createEmptyNote(),\r\n    name,\r\n    withImg: true,\r\n    pdf,\r\n    thumbnail: images[0],\r\n    pageRec,\r\n    pageOrder,\r\n  };\r\n}\r\n"],"names":["pdfjs","pdfjsWorker","getPDFDocument","file","Uint8Array","arrayBuffer","data","promise","getPageImage","doc","pageNum","scale","getPage","page","viewport","getViewport","console","log","height","width","ratio","createVirtualCanvas","Math","floor","canvas","context","render","canvasContext","transform","toDataURL","releaseCanvas","getPDFImages","progressCb","numPages","images","ratios","i","push","getOneImage","index","Error","getImageCache","noteID","localforage","cacheList","key","includes","filter","id","setImageCache","length","deleteList","slice","getOnePageImage","cached","LoadPDF","pageRec","pageOrder","forEach","image","idx","pageID","getUid","state","strokes","pdfIndex","name","replace","ab","pdf","Blob","type","createEmptyNote","withImg","thumbnail"],"sourceRoot":""}