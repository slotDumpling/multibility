{"version":3,"file":"static/js/28.4f9fab7c.chunk.js","mappings":"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","sources":["component/IconFont.tsx","component/Draw/cursor/cursor.ts","component/Draw/touch.ts","component/Draw/grid.tsx","component/Draw/Draw.tsx","pages/reader/tools/DrawTools.tsx","component/PageWrapper/PageWrapper.tsx","component/PageWrapper/index.tsx","lib/draw/DrawCtrl.tsx","lib/draw/canvas.ts","pages/reader/tools/PenPanel.tsx"],"sourcesContent":["import { createFromIconfontCN } from \"@ant-design/icons\";\n\nexport default createFromIconfontCN({\n  scriptUrl: \"//at.alicdn.com/t/c/font_3181679_61bmx4utsp.js\",\n});\n","import { createVirtualCanvas } from \"lib/draw/canvas\";\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport rotateImg2x from \"./rotate2x.png\";\nimport rotateImg1x from \"./rotate1x.png\";\n\nexport const getCircleCursor = (drawCtrl: DrawCtrl, ratio: number) => {\n  const { lineWidth, eraserWidth, mode } = drawCtrl;\n  const size = ratio * (mode === \"erase\" ? eraserWidth : lineWidth);\n  if (size < 5) return \"crosshair\";\n  const half = size / 2;\n  const double = size * 2;\n\n  const getSvg = (size: number) =>\n    `data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23DDD7\" width=\"${size}\" height=\"${size}\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"5\"/></svg>`;\n\n  const img1x = getSvg(size);\n  const img2x = getSvg(double);\n\n  return `-webkit-image-set(url('${img1x}')1x, url('${img2x}')2x) ${half} ${half}, crosshair`;\n};\n\nconst rotateCursorFactory = (src: string, size: number) => {\n  const cache = new Map<number, string>();\n  const half = size / 2;\n  const { canvas, context } = createVirtualCanvas(size, size);\n  const image = new Image();\n  image.src = src;\n  return (angle: number) => {\n    angle = Math.round(angle / 10) * 10;\n    const cached = cache.get(angle);\n    if (cached) return cached;\n    context.translate(half, half);\n    context.rotate((angle * Math.PI) / 180);\n    context.drawImage(image, -half, -half);\n    const data = canvas.toDataURL();\n    context.clearRect(-half, -half, size, size);\n    context.resetTransform();\n    cache.set(angle, data);\n    return data;\n  };\n};\n\nconst getRotateCursor1x = rotateCursorFactory(rotateImg1x, 32);\nconst getRotateCursor2x = rotateCursorFactory(rotateImg2x, 64);\n\nexport const getRotateCurcor = (angle: number) => {\n  const data1x = getRotateCursor1x(angle);\n  const data2x = getRotateCursor2x(angle);\n  return `-webkit-image-set(url(${data1x})1x, url(${data2x})2x) 16 16, auto`;\n};\n","import { PointerEvent, TouchEvent, useEffect, useRef } from \"react\";\n\ntype iOSTouch = Touch & {\n  force?: number;\n  touchType?: \"stylus\" | \"direct\";\n};\n\nexport function isApplePencil(e: TouchEvent) {\n  const touch = e.touches[0] as iOSTouch;\n  return touch?.touchType === \"stylus\";\n}\n\nexport function usePreventTouch(\n  allowFinger: boolean\n): React.HTMLAttributes<HTMLDivElement> {\n  const isTouch = useRef(false);\n  const checkPoniter = (e: PointerEvent) =>\n    e.isPrimary && (isTouch.current = e.pointerType === \"touch\");\n\n  const isEventValid = (e: TouchEvent) =>\n    !isTouch.current ||\n    isApplePencil(e) ||\n    (allowFinger && e.touches.length === 1);\n\n  const preventTouch = (e: TouchEvent) =>\n    isEventValid(e) || e.stopPropagation();\n\n  return {\n    onPointerDownCapture: checkPoniter,\n    onPointerMoveCapture: checkPoniter,\n    onTouchStartCapture: preventTouch,\n    onTouchMoveCapture: preventTouch,\n  };\n}\n\nexport function usePreventGesture() {\n  useEffect(() => {\n    const handler = (e: Event) => e.preventDefault();\n    document.addEventListener(\"gesturestart\", handler);\n    document.addEventListener(\"gesturechange\", handler);\n    document.addEventListener(\"gestureend\", handler);\n    return () => {\n      document.removeEventListener(\"gesturestart\", handler);\n      document.removeEventListener(\"gesturechange\", handler);\n      document.removeEventListener(\"gestureend\", handler);\n    };\n  }, []);\n}\n","export const gernerateGrid = (\n  group: paper.Item[],\n  width: number,\n  height: number\n) => {\n  const wnum = Math.ceil(width / 100);\n  const hnum = Math.ceil(height / 100);\n  const grid = Array.from({ length: wnum }, () =>\n    Array.from({ length: hnum }, () => new Set<paper.Item>())\n  );\n  group.forEach((item) => setGridItem(grid, item));\n  return grid;\n};\n\nconst getGridRange = (bounds: paper.Rectangle) => {\n  const { topLeft, bottomRight } = bounds;\n  return [\n    Math.floor(topLeft.x / 100),\n    Math.ceil(bottomRight.x / 100),\n    Math.floor(topLeft.y / 100),\n    Math.ceil(bottomRight.y / 100),\n  ] as [number, number, number, number];\n};\nexport const setGridItem = (\n  grid: Set<paper.Item>[][],\n  item: paper.Item,\n  replaced?: paper.Item\n) => {\n  const bounds = (replaced ?? item).strokeBounds;\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\n  for (let x = xmin; x <= xmax; x += 1) {\n    for (let y = ymin; y <= ymax; y += 1) {\n      replaced && grid[x]?.[y]?.delete(replaced);\n      grid[x]?.[y]?.add(item);\n    }\n  }\n};\nexport const getGridItems = (\n  grid: Set<paper.Item>[][],\n  bounds: paper.Rectangle\n) => {\n  const itemSet = new Set<paper.Item>();\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\n  for (let x = xmin; x <= xmax; x += 1) {\n    for (let y = ymin; y <= ymax; y += 1) {\n      grid[x]?.[y]?.forEach((item) => itemSet.add(item));\n    }\n  }\n  return Array.from(itemSet);\n};\n","import React, {\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useDebugValue,\n  useImperativeHandle,\n} from \"react\";\nimport paper, {\n  Path,\n  Size,\n  Point,\n  Color,\n  Raster,\n  Layer,\n  Rectangle,\n} from \"paper/dist/paper-core\";\nimport { usePinch } from \"@use-gesture/react\";\nimport useSize from \"@react-hook/size\";\nimport { useMemoizedFn as useEvent } from \"ahooks\";\nimport { DrawState, Mutation, Splitter, Stroke } from \"lib/draw/DrawState\";\nimport { defaultDrawCtrl, DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { releaseCanvas } from \"lib/draw/canvas\";\nimport { getCircleCursor, getRotateCurcor } from \"./cursor\";\nimport { usePreventTouch, usePreventGesture } from \"./touch\";\nimport { Setter } from \"lib/hooks\";\nimport { setGridItem, getGridItems, gernerateGrid } from \"./grid\";\n\nexport interface DrawRefType {\n  deleteSelected: () => void;\n  duplicateSelected: () => void;\n  rasterizeSelected: () => string;\n  mutateStyle: (updated: Partial<DrawCtrl>) => void;\n  mutatePointText: (cb: (prev: paper.PointText) => void) => void;\n}\ninterface DrawPropType {\n  drawState: DrawState;\n  otherStates?: DrawState[];\n  onChange?: Setter<DrawState>;\n  toggleSelectTool?: (active: boolean, clickPoint?: paper.Point) => void;\n  toggleTextTool?: (pt: paper.PointText | undefined, slow: boolean) => void;\n  drawCtrl?: DrawCtrl;\n  readonly?: boolean;\n  imgSrc?: string;\n}\n\nconst HIT_TOLERANCE = 20;\nexport const P_ZERO = new Point(0, 0);\n\nconst DrawRaw = React.forwardRef<DrawRefType, DrawPropType>(\n  (\n    {\n      drawState,\n      otherStates,\n      onChange = () => {},\n      drawCtrl = defaultDrawCtrl,\n      readonly = false,\n      imgSrc,\n      toggleSelectTool = () => {},\n      toggleTextTool = () => {},\n    },\n    ref\n  ) => {\n    const { width, height } = drawState;\n    const projSize = useMemo(() => new Size(width, height), [width, height]);\n    const { mode, finger, lasso, eraserWidth } = drawCtrl;\n\n    const canvasEl = useRef<HTMLCanvasElement>(null);\n    const scope = useRef(new paper.PaperScope());\n    const [group, setGroup] = useState<paper.Item[]>([]);\n    const [path, setPath] = usePaperItem<paper.Path>();\n    const [rotateHandle, setRotateHandle] = usePaperItem<paper.Path>();\n\n    toggleSelectTool = useEvent(toggleSelectTool);\n    toggleTextTool = useEvent(toggleTextTool);\n\n    useEffect(() => {\n      const cvs = canvasEl.current;\n      const scp = scope.current;\n      if (!cvs) return;\n\n      scp.setup(cvs);\n      scp.settings.handleSize = 10;\n      scp.settings.hitTolerance = HIT_TOLERANCE;\n      [0, 1, 2].forEach(() => (new Layer().visible = false));\n      scp.project.layers[2]?.activate();\n      new scp.Tool();\n\n      return () => {\n        scp.view?.remove();\n        releaseCanvas(cvs);\n      };\n    }, []);\n\n    useEffect(() => {\n      scope.current.activate();\n      const { layers } = scope.current.project;\n      const rects = paintRects(layers, projSize);\n\n      return () => rects.forEach((r) => r.remove());\n    }, [projSize]);\n\n    const [canvasWidth] = useSize(canvasEl);\n    const ratio = canvasWidth / width;\n    useEffect(() => {\n      if (!ratio) return;\n      const scp = scope.current;\n      scp.view.viewSize = projSize.multiply(ratio);\n      scp.view.scale(ratio, P_ZERO);\n      scp.project.layers.forEach((l) => (l.visible = true));\n      scp.view.update();\n\n      return () => scp.view?.scale(1 / ratio, P_ZERO);\n    }, [ratio, projSize]);\n\n    const [imgRaster, setImgRaster] = usePaperItem();\n    useEffect(() => {\n      if (!imgSrc) return;\n      scope.current.activate();\n      const raster = new Raster(imgSrc);\n      raster.project.layers[0]?.addChild(raster);\n      raster.sendToBack();\n      raster.onLoad = () => {\n        raster.view.update();\n        raster.fitBounds(new Rectangle(projSize));\n        raster.bringToFront();\n      };\n      setImgRaster(raster);\n    }, [imgSrc, projSize, setImgRaster]);\n\n    const mergedStrokes = useMemo(\n      () =>\n        otherStates\n          ? DrawState.mergeStates(drawState, ...otherStates)\n          : drawState.getStrokeList(),\n      [drawState, otherStates]\n    );\n\n    const renderSlow = useRef(false);\n    const deferTimerID = useRef(0);\n    const deferRender = useRef(false);\n    const setDefer = () => (deferRender.current = renderSlow.current);\n    if (readonly) setDefer();\n\n    useEffect(() => {\n      const [, l1] = scope.current.project.layers;\n      if (!l1) return;\n      const render = () => {\n        const tempGroup: paper.Item[] = [];\n        const timeBeforeRender = performance.now();\n        scope.current.activate();\n        // clean-up layer_1 except the clip mask.\n        l1.removeChildren(1);\n        mergedStrokes.forEach((stroke) => {\n          const self = drawState.hasStroke(stroke.uid);\n          const item = paintStroke(stroke, l1, !self);\n          if (self) tempGroup.push(item);\n        });\n        setGroup(tempGroup);\n\n        unrasterizeCanvas();\n        deferRender.current = false;\n        pathClones.current.forEach((c) => c.remove());\n        pathClones.current = [];\n\n        scope.current.view.update();\n        const duration = performance.now() - timeBeforeRender;\n        renderSlow.current = duration > 16;\n      };\n\n      if (deferRender.current) {\n        deferTimerID.current = window.setTimeout(render, 1000);\n      } else render();\n\n      // cancel previous render timer.\n      return () => window.clearTimeout(deferTimerID.current);\n    }, [mergedStrokes, drawState]);\n\n    const hitRef = useRef<paper.HitResult>();\n    const [selected, setSelected] = useState(false);\n    const paperMode = mode === \"select\" && selected ? \"selected\" : mode;\n    const [chosenIDs, setChosenIDs] = useState<string[]>([]);\n    const chosenItems = useMemo(() => {\n      const IDSet = new Set(chosenIDs);\n      return group.filter((item) => IDSet.has(item.name));\n    }, [group, chosenIDs]);\n\n    const resetSelect = useEvent(() => {\n      setSelected(false);\n      setPath(undefined);\n      setRotateHandle(undefined);\n      setChosenIDs([]);\n      toggleSelectTool(false);\n    });\n\n    useEffect(() => {\n      if (mode === \"select\") return resetSelect;\n    }, [mode, resetSelect]);\n    useEffect(() => resetSelect, [lasso, resetSelect]);\n\n    // reset selection after redo/undo\n    useEffect(() => {\n      const type = drawState.lastOp?.type ?? \"\";\n      if (/^redo|undo$/.test(type)) resetSelect();\n    }, [drawState, resetSelect]);\n\n    useEffect(() => {\n      toggleSelectTool(false);\n      if (pointText.current) {\n        const ptProxy = new Proxy(pointText.current, {});\n        toggleTextTool(ptProxy, renderSlow.current);\n      }\n    }, [canvasWidth, toggleSelectTool, toggleTextTool]);\n\n    const layerRaster = useRef<paper.Raster>();\n    const rasterizeLayer = (clip: paper.Path, force = false) => {\n      if (!renderSlow.current && !force) return;\n      const [l0, l1] = scope.current.project.layers;\n      if (!l0 || !l1) return;\n      l1.visible = true;\n      clip.clipMask = true;\n      const prevClip = l1.firstChild;\n      prevClip.replaceWith(clip);\n      imgRaster?.insertAbove(clip);\n\n      const dpi = 72 * devicePixelRatio;\n      const resolution = (canvasWidth / clip.bounds.width) * dpi;\n      let raster = layerRaster.current;\n      raster = layerRaster.current = l1.rasterize({ raster, resolution });\n      raster.visible = true;\n\n      l1.visible = false;\n      clip.replaceWith(prevClip);\n      imgRaster?.addTo(l0);\n    };\n    const unrasterizeLayer = () => {\n      scope.current.activate();\n      const [, l1] = scope.current.project.layers;\n      const lr = layerRaster.current;\n      if (!l1 || !lr) return;\n      l1.visible = true;\n      lr.visible = false;\n    };\n\n    const canvasRaster = useRef<paper.Raster>();\n    // raster changes with the size of canvas element\n    useEffect(\n      () => () => {\n        canvasRaster.current?.remove();\n        canvasRaster.current = undefined;\n      },\n      [canvasWidth]\n    );\n    const rasterizeCanvas = () => {\n      if (!renderSlow.current) return;\n      // rasterize the canvas only once\n      if (canvasRaster.current?.visible === true) return;\n      scope.current.activate();\n      const { view } = scope.current;\n      // create a raster of the canvas element's size only once.\n      const raster = (canvasRaster.current ??= new Raster(\n        view.viewSize.multiply(devicePixelRatio)\n      ));\n      raster.drawImage(view.element, P_ZERO);\n      raster.fitBounds(view.bounds);\n      raster.visible = true;\n      raster.opacity = process.env.NODE_ENV === \"production\" ? 1 : 0.8;\n      const [, l1] = scope.current.project.layers;\n      l1 && (l1.visible = false);\n    };\n    const unrasterizeCanvas = () => {\n      scope.current.activate();\n      const [, l1] = scope.current.project.layers;\n      const cr = canvasRaster.current;\n      const lr = layerRaster.current;\n      if (!l1 || !cr) return;\n      cr.visible = false;\n      // keep layer_1 hidden unless all 2 raster is hidden.\n      if (lr?.visible !== true) l1.visible = true;\n    };\n\n    const downPath = (e: paper.MouseEvent) => {\n      rasterizeCanvas();\n      setPath(startStroke(drawCtrl, e.point, renderSlow.current));\n    };\n    const downRect = (e: paper.MouseEvent) => {\n      rasterizeCanvas();\n      setPath(startRect(e.point));\n    };\n\n    const selectionDragged = useRef(false);\n    const handleDown = {\n      draw(e: paper.MouseEvent) {\n        setDefer();\n        downPath(e);\n      },\n      erase: downPath,\n      select: lasso ? downPath : downRect,\n      selected(e: paper.MouseEvent) {\n        selectionDragged.current = false;\n        if (!path) return;\n        if (!lasso) {\n          // check if the point hit the segment point.\n          let hitRes =\n            path.hitTest(e.point, { segments: true }) ??\n            rotateHandle?.hitTest(e.point, { segments: true, selected: true });\n          hitRef.current = hitRes;\n          if (hitRes) return;\n        }\n\n        // if click outside, reset the selection.\n        if (!path.contains(e.point)) {\n          resetSelect();\n          setRotateHandle(undefined);\n          lasso ? downPath(e) : downRect(e);\n        }\n      },\n      text: null,\n    }[paperMode];\n\n    const dragPath = (e: paper.MouseEvent) => {\n      // cancel previous render timer.\n      window.clearTimeout(deferTimerID.current);\n      path?.add(e.point);\n      path?.smooth();\n    };\n    const resizeRect = (e: paper.MouseEvent) => {\n      if (!path) return;\n      const { x, y } = e.point;\n      const [, s1, s2, s3] = path.segments;\n      if (!s1 || !s2 || !s3) return;\n      s1.point.x = x;\n      s2.point = e.point;\n      s3.point.y = y;\n      path.selected = true;\n    };\n    const moveSelected = (delta: paper.Point) => {\n      chosenItems.forEach((item) => item.translate(delta));\n      path?.translate(delta);\n      rotateHandle?.translate(delta);\n    };\n\n    const handleDrag = {\n      draw: dragPath,\n      erase: dragPath,\n      select: lasso ? dragPath : resizeRect,\n      selected(e: paper.MouseEvent) {\n        const hitRes = hitRef.current;\n        if (!path) return;\n        toggleSelectTool(false);\n        selectionDragged.current = true;\n        if (hitRes?.segment) {\n          const segment = hitRes.segment;\n          const rotating = segment.selected;\n          if (rotating) {\n            // rotate select items\n            const { center } = path.bounds;\n            const axis = segment.point.subtract(center);\n            const line = e.point.subtract(center);\n            setCursor(getRotateCurcor(line.angle));\n            const angle = line.angle - axis.angle;\n            path.rotate(angle, center);\n            rotateHandle?.rotate(angle, center);\n            chosenItems.forEach((item) => item?.rotate(angle, center));\n          } else {\n            // resize selected items\n            const moveP = segment.point;\n            const baseP = segment.next.next.point;\n            const diagonal = moveP.subtract(baseP);\n            const projection = e.point.subtract(baseP).project(diagonal);\n            const scale = projection.x / diagonal.x;\n            if (scale < 0) return;\n\n            path.scale(scale, baseP);\n            chosenItems.forEach((item) => {\n              item.scale(scale, baseP);\n              item.strokeWidth *= scale;\n            });\n\n            // reposition the rotate handle.\n            if (!rotateHandle) return;\n            rotateHandle.scale(scale, baseP);\n            const rBaseP = rotateHandle.segments[0]?.point;\n            if (!rBaseP) return;\n            rotateHandle.scale(100 / rotateHandle.length, rBaseP);\n          }\n        } else {\n          moveSelected(e.delta);\n        }\n      },\n      text: null,\n    }[paperMode];\n\n    useEffect(() => {\n      scope.current.tool.maxDistance = eraserWidth;\n    }, [eraserWidth]);\n    const erased = useRef(new Set<string>());\n    const replaced = useRef(new Map<string, paper.Item>());\n\n    const itemGrid = useMemo(() => {\n      if (!/^(erase|select)$/.test(mode)) return [];\n      return gernerateGrid(group, width, height);\n    }, [group, width, height, mode]);\n\n    const handleToolDrag = (e: paper.ToolEvent) => {\n      const layer = scope.current.project.layers[1];\n      if (paperMode !== \"erase\" || !layer) return;\n      const ew = eraserWidth;\n\n      const hitOption = { class: paper.Path, stroke: true, tolerance: ew / 2 };\n      const bounds = new Rectangle(e.point.subtract(ew), new Size(ew, ew));\n\n      getGridItems(itemGrid, bounds).forEach((item) => {\n        if (erased.current.has(item.name)) return;\n        item.hitTestAll(e.point, hitOption)?.forEach(({ item }) => {\n          if (!(item instanceof paper.Path)) return;\n          let topItem: paper.PathItem = item;\n          while (topItem.parent !== layer) {\n            if (!(topItem.parent instanceof paper.PathItem)) break;\n            topItem = topItem.parent;\n          }\n          const { name } = topItem;\n\n          if (drawCtrl.pixelEraser) {\n            const radius = (ew + item.strokeWidth) / 2;\n            const circle = new Path.Circle({\n              center: e.point,\n              radius,\n              insert: false,\n            });\n\n            const sub = item.subtract(circle, { trace: false });\n            item.replaceWith(sub);\n            if (topItem === item) {\n              setGridItem(itemGrid, sub, item);\n              topItem = sub;\n            }\n            replaced.current.set(name, topItem);\n          } else {\n            topItem.opacity = 0.5;\n            topItem.guide = true;\n            erased.current.add(name);\n          }\n        });\n      });\n    };\n\n    const pathClones = useRef<paper.Path[]>([]);\n    const handleUp = {\n      draw() {\n        if (!path || path.segments.length <= 1) {\n          // if canvas is clicked without any path in queue.\n          if (!pathClones.current.length) unrasterizeCanvas();\n          return;\n        }\n        path.simplify();\n        if (renderSlow.current) pathClones.current.push(path.clone());\n        const pathData = path.exportJSON();\n        onChange((prev) => DrawState.addStroke(prev, pathData));\n        setPath(undefined);\n      },\n      erase() {\n        unrasterizeCanvas();\n        setPath(undefined);\n        if (drawCtrl.pixelEraser) {\n          const items = Array.from(replaced.current);\n          replaced.current.clear();\n          const splitters: Splitter[] = items.map(([uid, item]) => {\n            const paths = flattenCP(item);\n            paths.forEach((p) => (p.name = \"\"));\n            return [uid, paths.map((p) => p.exportJSON())];\n          });\n          if (!splitters.length) return;\n          onChange((prev) => DrawState.splitStrokes(prev, splitters));\n        } else {\n          const erasedList = Array.from(erased.current);\n          erased.current.clear();\n          if (!erasedList.length) return;\n          onChange((prev) => DrawState.eraseStrokes(prev, erasedList));\n        }\n      },\n      select() {\n        unrasterizeCanvas();\n        if (!path) return;\n        if (Math.abs(path.area) < 1_000) return setPath(undefined);\n\n        let selection: string[];\n        const { view } = scope.current;\n        if (lasso) {\n          path.closePath();\n          path.simplify();\n          if (!renderSlow.current) moveDash(path);\n          const items = getGridItems(itemGrid, path.bounds);\n          selection = checkLasso(items, path);\n        } else {\n          const items = getGridItems(itemGrid, path.bounds);\n          selection = checkLasso(items, path);\n          const link = new Path();\n          const { topCenter } = path.bounds;\n          link.add(topCenter, topCenter.subtract(new Point(0, 100)));\n          link.lastSegment.selected = true;\n          setRotateHandle(link);\n        }\n        setSelected(true);\n        setChosenIDs(selection);\n        const bc = path.bounds.bottomCenter;\n        toggleSelectTool(true, view.projectToView(bc));\n      },\n      selected(e: paper.MouseEvent) {\n        handleSelectedCursor(e);\n        if (!path || !selectionDragged.current) return;\n        const { view } = scope.current;\n        const bc = path.bounds.bottomCenter;\n        toggleSelectTool(true, view.projectToView(bc));\n        updateMutation();\n      },\n      text(e: paper.MouseEvent) {\n        if (pointText.current) {\n          submitText();\n          return handleTextCursor(e);\n        }\n        const [, l1] = scope.current.project.layers;\n        if (!l1) return;\n        const t = getClickedText(l1, e.point) ?? startText(e.point);\n        t.justification = \"left\";\n        pointText.current = t;\n        prevTextData.current = t.exportJSON();\n        rasterizeCanvas();\n        toggleTextTool(t, renderSlow.current);\n      },\n    }[paperMode];\n\n    const [cursor, setCursor] = useState(\"auto\");\n    useEffect(() => {\n      if (paperMode === \"text\" || paperMode === \"select\") {\n        setCursor(\"crosshair\");\n      } else if (paperMode === \"selected\") {\n        setCursor(lasso ? \"crosshair\" : \"nwse-resize\");\n      } else if (paperMode === \"draw\" || paperMode === \"erase\") {\n        setCursor(getCircleCursor(drawCtrl, ratio));\n      }\n    }, [paperMode, lasso, drawCtrl, ratio]);\n\n    const handleSelectedCursor = (e: paper.MouseEvent) => {\n      if (!path) return;\n      const hitRes =\n        path.hitTest(e.point, { segments: true }) ??\n        rotateHandle?.hitTest(e.point, { segments: true, selected: true });\n      if (hitRes?.segment) {\n        if (hitRes.segment.selected) {\n          const center = path.bounds.center;\n          if (!center) return;\n          const line = hitRes.segment.point.subtract(center);\n          return setCursor(getRotateCurcor(line.angle));\n        }\n        const moveP = hitRes.segment.point;\n        const baseP = hitRes.segment.next.next.point;\n        const diagonal = moveP.subtract(baseP);\n        const { x, y } = diagonal;\n        return setCursor(x * y < 0 ? \"nesw-resize\" : \"nwse-resize\");\n      }\n      if (path.contains(e.point)) return setCursor(\"move\");\n      setCursor(\"crosshair\");\n    };\n    const handleTextCursor = (e: paper.MouseEvent) => {\n      if (pointText.current) return setCursor(\"auto\");\n      const layer = scope.current.project.layers[1];\n      if (!layer) return;\n      if (getClickedText(layer, e.point)) setCursor(\"text\");\n      else setCursor(\"crosshair\");\n    };\n\n    const handleMove = {\n      selected: handleSelectedCursor,\n      text: handleTextCursor,\n      ...{ select: null, draw: null, erase: null },\n    }[paperMode];\n\n    const handleKeyDown = (e: paper.KeyEvent) => {\n      if (paperMode !== \"selected\") return;\n      const delta = {\n        up: new Point(0, -10),\n        down: new Point(0, 10),\n        left: new Point(-10, 0),\n        right: new Point(10, 0),\n      }[e.key];\n      if (!delta) return;\n      e.preventDefault();\n      delta && moveSelected(delta);\n      toggleSelectTool(false);\n    };\n\n    const handleKeyUp = {\n      selected(e: paper.KeyEvent) {\n        if (/^(delete|backspace)$/.test(e.key)) deleteSelected();\n        if (/^(up|down|left|right)$/.test(e.key)) updateMutation();\n        if (/escape/.test(e.key)) resetSelect();\n      },\n      text(e: paper.KeyEvent) {\n        if (/escape/.test(e.key)) submitText();\n      },\n      ...{ select: null, draw: null, erase: null },\n    }[paperMode];\n\n    useEffect(() => {\n      if (readonly) return;\n\n      type Handler<E> = ((e: E) => boolean | void) | null;\n      const activate = <E,>(handler: Handler<E>): Handler<E> => {\n        return (e) => {\n          scope.current.activate();\n          if (handler) return handler(e);\n        };\n      };\n      const { view, tool } = scope.current;\n      view.onMouseDown = activate(handleDown);\n      view.onMouseDrag = activate(handleDrag);\n      view.onMouseUp = activate(handleUp);\n      view.onMouseMove = activate(handleMove);\n      tool.onMouseDrag = activate(handleToolDrag);\n      tool.onKeyDown = activate(handleKeyDown);\n      tool.onKeyUp = activate(handleKeyUp);\n    });\n\n    const updateMutation = () => {\n      if (!chosenItems?.length) return;\n      const mutations: Mutation[] = chosenItems.map((p) => {\n        const { name } = p;\n        p.name = \"\";\n        return [name, p.exportJSON()];\n      });\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\n    };\n\n    const deleteSelected = () => {\n      resetSelect();\n      if (!chosenIDs.length) return;\n      onChange((prev) => DrawState.eraseStrokes(prev, chosenIDs));\n    };\n\n    const mutateStyle = (updated: Partial<DrawCtrl>) => {\n      scope.current.activate();\n      updateGroupStyle(chosenItems, updated);\n      updateMutation();\n    };\n\n    const duplicateSelected = () => {\n      scope.current.activate();\n      if (!path || !chosenItems.length) return;\n      const size = path.bounds.size;\n      const { width, height } = size;\n      const transP = new Point(width, height).divide(10);\n      const copies = chosenItems.map((item) => item.clone());\n      copies.forEach((item) => item.translate(transP));\n      path.translate(transP);\n      rotateHandle?.translate(transP);\n\n      copies.forEach((p) => (p.name = \"\"));\n      const pathDataList = copies.map((item) => item.exportJSON());\n      const IDs: string[] = [];\n      onChange((prev) => DrawState.addStrokes(prev, pathDataList, IDs));\n      setChosenIDs(IDs);\n      toggleSelectTool(false);\n    };\n\n    const rasterizeSelected = () => {\n      scope.current.activate();\n      const clip = path?.clone();\n      clip && rasterizeLayer(clip, true);\n      unrasterizeLayer();\n      return layerRaster.current?.toDataURL() ?? \"\";\n    };\n\n    const pointText = useRef<paper.PointText>();\n    const prevTextData = useRef(\"\");\n    const cancelText = useEvent(() => {\n      unrasterizeCanvas();\n      if (!pointText.current?.name) {\n        pointText.current?.remove();\n      }\n      pointText.current = undefined;\n      toggleTextTool(undefined, renderSlow.current);\n    });\n\n    const submitText = useEvent(() => {\n      const t = pointText.current;\n      if (!t) return;\n      cancelText();\n      if (t.exportJSON() === prevTextData.current) return;\n      const { content, name } = t;\n      t.name = \"\";\n      // if text content empty\n      if (!content) {\n        // erase existing text item\n        if (name) onChange((prev) => DrawState.eraseStrokes(prev, [name]));\n        return;\n      }\n      const pathData = t.exportJSON();\n      if (!name) {\n        // add new text item\n        onChange((prev) => DrawState.addStroke(prev, pathData));\n      } else {\n        // mutate existing text item\n        onChange((prev) => DrawState.mutateStrokes(prev, [[name, pathData]]));\n      }\n    });\n    const mutatePointText = (cb: (prev: paper.PointText) => void) => {\n      const pt = pointText.current;\n      if (!pt) return;\n      scope.current.activate();\n      cb(pt);\n      toggleTextTool(new Proxy(pt, {}), renderSlow.current);\n    };\n\n    useEffect(() => {\n      if (mode === \"text\") return submitText;\n    }, [mode, submitText]);\n\n    useImperativeHandle(ref, () => ({\n      deleteSelected,\n      duplicateSelected,\n      rasterizeSelected,\n      mutateStyle,\n      mutatePointText,\n    }));\n\n    usePreventGesture();\n    usePinch(\n      ({ memo, offset: [scale], first, last, origin }) => {\n        scope.current.activate();\n        const { view } = scope.current;\n        const originRawP = new paper.Point(origin);\n\n        let lastScale: number;\n        let lastOrigin, elPos: paper.Point;\n        if (first || !memo) {\n          const { x, y } = view.element.getBoundingClientRect();\n          lastScale = 1;\n          elPos = new Point(x, y);\n          lastOrigin = originRawP.subtract(elPos);\n          toggleSelectTool(false);\n          cancelText();\n          rasterizeLayer(new Path.Rectangle(P_ZERO, projSize));\n          unrasterizeCanvas();\n        } else {\n          [lastScale, lastOrigin, elPos] = memo;\n        }\n\n        const originViewP = originRawP.subtract(elPos);\n        const originPorjP = view.viewToProject(originViewP);\n\n        const deltaP = originViewP.subtract(lastOrigin);\n        const transP = deltaP.divide(view.zoom);\n        view.translate(transP);\n\n        let dScale = first ? 1 : scale / lastScale;\n        scope.current.settings.hitTolerance /= dScale;\n        view.scale(dScale, originPorjP);\n\n        if (last) {\n          Promise.all([\n            putCenterBack(view, projSize),\n            scaleView(view, originPorjP, dScale),\n          ]).then(unrasterizeLayer);\n          view.scale(1 / dScale, originPorjP);\n        } else {\n          return [scale, originViewP, elPos];\n        }\n      },\n      {\n        scaleBounds: { max: 5, min: 1 },\n        rubberband: 0.5,\n        target: canvasEl,\n      }\n    );\n\n    const touchHandler = usePreventTouch(finger);\n    return (\n      <div\n        className=\"draw-wrapper\"\n        style={{ cursor }}\n        data-readonly={readonly}\n        {...touchHandler}\n      >\n        <canvas ref={canvasEl} className=\"draw-canvas\" />\n      </div>\n    );\n  }\n);\n\nDrawRaw.displayName = \"Draw\";\nexport const Draw = React.memo(DrawRaw);\n\nfunction usePaperItem<T extends paper.Item>() {\n  const tuple = useState<T>();\n  const [item] = tuple;\n  useDebugValue(item);\n  useEffect(() => () => void item?.remove(), [item]);\n  return tuple;\n}\n\nconst paintStroke = (() => {\n  const cacheMap = new WeakMap<\n    paper.Layer,\n    Map<string, { stroke: Stroke; item: paper.Item }>\n  >();\n\n  return (stroke: Stroke, layer: paper.Layer, readonly = false) => {\n    const { pathData, uid } = stroke;\n    const cache = cacheMap.get(layer) ?? new Map();\n    cacheMap.set(layer, cache);\n    const cached = cache.get(uid);\n    let item: paper.Item;\n    if (cached?.stroke === stroke) {\n      layer.addChild(cached.item);\n      item = cached.item;\n    } else {\n      try {\n        item = layer.importJSON(pathData);\n      } catch (e) {\n        console.error(e);\n      }\n      item ??= new paper.Item();\n      item.name = uid;\n      cache.set(uid, { item, stroke });\n    }\n    item.opacity = 1;\n    item.guide = readonly;\n    return item;\n  };\n})();\n\nconst paintRects = (layers: paper.Layer[], projSize: paper.Size) => {\n  const [l0, l1, l2] = layers;\n  if (!l0 || !l1 || !l2) return [];\n  const bgRect = new Path.Rectangle(P_ZERO, projSize);\n  const clip1 = bgRect.clone();\n  const clip2 = bgRect.clone();\n  bgRect.fillColor = new Color(\"#fff\");\n  l0.addChild(bgRect);\n  l1.addChild(clip1);\n  l2.addChild(clip2);\n  l1.clipped = true;\n  l2.clipped = true;\n  return [bgRect, clip1, clip2];\n};\n\nconst startRect = (point: paper.Point) => {\n  const rect = new Path.Rectangle(point, new Size(0, 0));\n  rect.onFrame = () => {}; // the handle size bug\n  return rect;\n};\n\nconst startStroke = (drawCtrl: DrawCtrl, point: paper.Point, slow = false) => {\n  let { mode, lineWidth, eraserWidth, color, highlight } = drawCtrl;\n  const path = new Path();\n  path.add(point);\n  if (mode === \"erase\") {\n    color = \"#ccc\";\n    lineWidth = eraserWidth;\n  }\n  if (mode === \"select\") {\n    color = \"#009dec\";\n    lineWidth = 5;\n  }\n  const strokeColor = new Color(color);\n  if ((mode === \"draw\" && highlight) || (mode === \"erase\" && !slow)) {\n    strokeColor.alpha = 0.5;\n    path.blendMode = \"multiply\";\n  }\n  path.strokeColor = strokeColor;\n  path.strokeWidth = lineWidth;\n  path.strokeJoin = \"round\";\n  path.strokeCap = \"round\";\n  path.guide = true;\n  return path;\n};\n\nconst moveDash = (item: paper.Item) => {\n  item.dashOffset = 0;\n  item.dashArray = [30, 20];\n  item.onFrame = () => (item.dashOffset += 3);\n};\n\nconst scaleView = (\n  view: paper.View,\n  originPorjP: paper.Point,\n  dScale: number\n) =>\n  new Promise<void>((resolve) => {\n    if (Math.abs(dScale - 1) < 0.05) {\n      view.scale(dScale, originPorjP);\n      return resolve();\n    }\n    let aniCount = 10;\n    dScale = Math.pow(dScale, 1 / aniCount);\n    const scale = () => {\n      view.scale(dScale, originPorjP);\n      if (--aniCount > 0) requestAnimationFrame(scale);\n      else requestAnimationFrame(() => resolve());\n    };\n    scale();\n  });\n\nconst getTargetCenter = (view: paper.View, projSize: paper.Size) => {\n  const { x, y } = view.center;\n  const minSize = Size.min(view.size, projSize).divide(2);\n  const { width: minX, height: minY } = minSize;\n  const { width: maxX, height: maxY } = projSize.subtract(minSize);\n\n  const targetX = x < minX ? minX : x > maxX ? maxX : x;\n  const targetY = y < minY ? minY : y > maxY ? maxY : y;\n  return new Point(targetX, targetY);\n};\n\nconst putCenterBack = (view: paper.View, projSize: paper.Size) =>\n  new Promise<void>((resolve) => {\n    const targetCenter = getTargetCenter(view, projSize);\n    if (view.center.equals(targetCenter)) return resolve();\n    let aniCount = 10;\n    const move = () => {\n      const delta = view.center.subtract(targetCenter);\n      view.translate(delta.divide(aniCount));\n      if (--aniCount > 0) requestAnimationFrame(move);\n      else requestAnimationFrame(() => resolve());\n    };\n    requestAnimationFrame(move);\n  });\n\nconst checkLasso = (items: paper.Item[], selection: paper.Path) => {\n  const isInside = (p: paper.Path) => {\n    if (selection.segments.length === 4 && p.isInside(selection.bounds)) {\n      return true;\n    }\n    return !p.subtract(selection, { insert: false, trace: false }).compare(p);\n  };\n  return items\n    .filter((item) => {\n      if (!item.name) return false;\n      if (!item.bounds.intersects(selection.bounds)) return false;\n      if (item instanceof paper.Path) {\n        return isInside(item);\n      } else {\n        const checkedP = new Path.Rectangle(item.bounds);\n        checkedP.remove();\n        return isInside(checkedP) || selection.isInside(item.bounds);\n      }\n    })\n    .map(({ name }) => name);\n};\n\nconst updateGroupStyle = (items: paper.Item[], updated: Partial<DrawCtrl>) => {\n  const { lineWidth, color, highlight } = updated;\n  items.forEach((item) => {\n    if (item instanceof paper.PointText && color) {\n      const newColor = new Color(color);\n      item.fillColor = newColor;\n    }\n\n    if (!(item instanceof paper.Path)) return;\n\n    if (color) {\n      const newColor = new Color(color);\n      if (item.blendMode === \"multiply\") newColor.alpha = 0.5;\n      item.strokeColor = newColor;\n    }\n\n    if (lineWidth) item.strokeWidth = lineWidth;\n\n    if (!item.strokeColor || highlight === undefined) return;\n    item.strokeColor.alpha = highlight ? 0.5 : 1;\n    item.blendMode = highlight ? \"multiply\" : \"normal\";\n  });\n};\n\nconst getClickedText = (layer: paper.Layer, point: paper.Point) => {\n  const hitRes = layer.hitTest(point, { class: paper.PointText, fill: true });\n  if (hitRes?.item instanceof paper.PointText) return hitRes?.item;\n};\n\nconst startText = (point: paper.Point) => {\n  return new paper.PointText({\n    point: point.add(new Point(0, 50)),\n    content: \"\",\n    fontSize: 50,\n    fontFamily: \"Arial, sans-serif\",\n  });\n};\n\nconst flattenCP = (cp: paper.Item): paper.Path[] => {\n  if (cp instanceof paper.Path) {\n    return cp.isEmpty() ? [] : [cp];\n  }\n  if (cp instanceof paper.CompoundPath) {\n    return cp.children.map(flattenCP).flat();\n  }\n  return [];\n};\n","import { CSSProperties, FC, RefObject, useMemo, useState } from \"react\";\nimport {\n  CopyOutlined,\n  BoldOutlined,\n  DeleteOutlined,\n  PictureTwoTone,\n  PictureOutlined,\n  BgColorsOutlined,\n  ItalicOutlined,\n} from \"@ant-design/icons\";\nimport { Button, ButtonProps, Modal, Popover, Select } from \"antd\";\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\nimport { allColors } from \"lib/color\";\nimport { DrawRefType } from \"component/Draw\";\nimport { saveAs } from \"file-saver\";\nimport { Color } from \"paper/dist/paper-core\";\nimport \"./draw-tools.sass\";\nimport IconFont from \"component/IconFont\";\n\nconst btnProps: ButtonProps = {\n  type: \"text\",\n  shape: \"round\",\n  size: \"small\",\n};\n\nconst getPosVars = (x: number, y: number) => {\n  return { \"--pos-x\": x + \"px\", \"--pos-y\": y + \"px\" } as CSSProperties;\n};\nconst getObjVars = (obj: Record<string, string | number>, unit?: string) => {\n  const result: Record<string, string | number> = {};\n  Object.entries(obj).forEach(([key, value]) => {\n    if (unit) value += unit;\n    result[\"--\" + key] = value;\n  });\n  return result as CSSProperties;\n};\n\nexport const SelectTool: FC<{\n  drawRef: RefObject<DrawRefType>;\n  visible: boolean;\n  clickPoint: paper.Point;\n}> = ({ drawRef, visible, clickPoint }) => {\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\n\n  const getRaster = () => {\n    if (!drawRef.current) return;\n    const imageData = drawRef.current.rasterizeSelected();\n    Modal.confirm({\n      title: \"Screenshot\",\n      content: <img className=\"raster\" src={imageData} alt=\"raster\" />,\n      className: \"raster-modal\",\n      icon: <PictureTwoTone />,\n      okText: \"Save\",\n      onOk: () => saveAs(imageData, document.title.split(\" - \")[0] + \".png\"),\n    });\n  };\n\n  const { x, y } = clickPoint;\n  return (\n    <div\n      className=\"select-tool tool-options\"\n      data-visible={visible}\n      style={getPosVars(x, y)}\n    >\n      <Popover\n        trigger=\"click\"\n        placement=\"bottom\"\n        overlayClassName=\"style-pop\"\n        getPopupContainer={(e) => e.parentElement!}\n        destroyTooltipOnHide\n        content={\n          <PenPanel\n            updateDrawCtrl={(updated) => {\n              setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\n              drawRef.current?.mutateStyle(updated);\n            }}\n            drawCtrl={currDrawCtrl}\n          />\n        }\n      >\n        <Button icon={<BgColorsOutlined />} {...btnProps} />\n      </Popover>\n      <Button\n        icon={<CopyOutlined />}\n        onClick={() => drawRef.current?.duplicateSelected()}\n        {...btnProps}\n      />\n      <Button icon={<PictureOutlined />} onClick={getRaster} {...btnProps} />\n      <Button\n        danger\n        icon={<DeleteOutlined />}\n        onClick={() => drawRef.current?.deleteSelected()}\n        {...btnProps}\n      />\n    </div>\n  );\n};\n\nexport const TextTool: FC<{\n  pointText: paper.PointText;\n  drawRef: RefObject<DrawRefType>;\n  renderSlow: boolean;\n}> = ({ pointText, drawRef, renderSlow }) => {\n  const { view, position, leading, content, rotation } = pointText;\n  const { fontFamily, fontWeight, fontSize } = pointText;\n\n  const { x, y } = view.projectToView(position);\n  const { topLeft, bottomLeft } = pointText.bounds;\n  const { x: bx, y: by } = view.projectToView(topLeft);\n  const { x: bbx, y: bby } = view.projectToView(bottomLeft);\n  const optionAtBottom = by < 90;\n\n  const scale = pointText.viewMatrix.scaling.x;\n  const { width, height } = pointText.internalBounds;\n\n  const lineHeight = +leading / +fontSize ?? 1.2;\n\n  const color = pointText.fillColor?.toCSS(true) ?? allColors[0]!;\n  const fontColorBtn = (\n    <Popover\n      content={\n        <ColorSelect\n          color={color}\n          setColor={(c) =>\n            drawRef.current?.mutatePointText((prev) => {\n              prev.fillColor = new Color(c);\n            })\n          }\n        />\n      }\n      trigger=\"click\"\n      overlayStyle={{ width: 200 }}\n      placement=\"bottom\"\n      getPopupContainer={(e) => e.parentElement!}\n    >\n      <Button\n        {...btnProps}\n        icon={<IconFont type=\"icon-circle\" style={{ color }} />}\n      />\n    </Popover>\n  );\n\n  const { isItalic, isBold } = parseFontStyle(fontWeight);\n  const fontStyleCSS = {\n    fontWeight: isBold ? \"bold\" : \"normal\",\n    fontStyle: isItalic ? \"italic\" : \"normal\",\n  };\n\n  const fontFamilySelect = (\n    <Select\n      className=\"font-select\"\n      popupClassName=\"font-drop\"\n      value={fontFamily}\n      onChange={(v) => {\n        drawRef.current?.mutatePointText((prev) => {\n          prev.fontFamily = v;\n        });\n      }}\n      size=\"small\"\n      bordered={false}\n      virtual={false}\n      getPopupContainer={(e) => e.parentElement.parentElement!}\n      dropdownMatchSelectWidth={100}\n      options={[\n        { value: \"Arial, sans-serif\", name: \"Arial\" },\n        { value: \"'Times New Roman', serif\", name: \"Times\" },\n        { value: \"Georgia, serif\", name: \"Georgia\" },\n        { value: \"'Courier New', monospace\", name: \"Courier\" },\n      ].map(({ value, name }) => ({\n        value,\n        label: (\n          <span style={{ fontFamily: value, fontWeight: \"normal\" }}>\n            {name}\n          </span>\n        ),\n      }))}\n    />\n  );\n\n  const offset = useMemo(\n    // paperjs sets all baseline ratio to 0.75.\n    () => 0.75 - getBaselineRatio(fontFamily, lineHeight),\n    [fontFamily, lineHeight]\n  );\n\n  return (\n    <div\n      className=\"text-tool\"\n      style={{\n        ...getObjVars({ scale, color }),\n        ...getObjVars({ rotation }, \"deg\"),\n        ...getObjVars({ width, height }, \"px\"),\n        ...getObjVars({ offset }, \"em\"),\n        ...getPosVars(x, y),\n      }}\n    >\n      <div\n        className=\"textarea-wrapper\"\n        data-slow={renderSlow}\n        data-empty={!content}\n        style={{ fontSize, fontFamily, lineHeight, ...fontStyleCSS }}\n      >\n        <textarea\n          autoFocus={!content}\n          placeholder=\"Text\"\n          value={content}\n          onChange={(e) => {\n            drawRef.current?.mutatePointText((prev) => {\n              prev.content = e.target.value;\n            });\n          }}\n        />\n      </div>\n      <div\n        className=\"tool-options text-options\"\n        data-bottom={optionAtBottom}\n        style={{\n          ...(optionAtBottom ? getPosVars(bbx, bby) : getPosVars(bx, by)),\n        }}\n      >\n        <div className=\"row\">\n          {fontFamilySelect}\n          {fontColorBtn}\n        </div>\n        <div className=\"row\">\n          <Button\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                prev.fontWeight = toggleBold(prev.fontWeight);\n              });\n            }}\n            {...btnProps}\n            type={isBold ? \"link\" : \"text\"}\n            icon={<BoldOutlined />}\n          />\n          <Button\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                prev.fontWeight = toggleItalic(prev.fontWeight);\n              });\n            }}\n            {...btnProps}\n            type={isItalic ? \"link\" : \"text\"}\n            icon={<ItalicOutlined />}\n          />\n          <Button\n            {...btnProps}\n            icon={<IconFont type=\"icon-font_size_down\" />}\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                const { topLeft } = prev.bounds;\n                prev.scale(0.9, topLeft);\n              });\n            }}\n          />\n          <Button\n            {...btnProps}\n            icon={<IconFont type=\"icon-font_size_up\" />}\n            onClick={() => {\n              drawRef.current?.mutatePointText((prev) => {\n                const { topLeft } = prev.bounds;\n                prev.scale(1.1, topLeft);\n              });\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst parseFontStyle = (fontStyle: string | number) => {\n  fontStyle = fontStyle + \"\";\n  const isItalic = /italic/g.test(fontStyle);\n  const isBold = /bold/g.test(fontStyle);\n  return { isItalic, isBold };\n};\n\nconst toggleItalic = (fontStyle: string | number) => {\n  const { isItalic, isBold } = parseFontStyle(fontStyle);\n  const boldText = isBold ? \"bold\" : \"normal\";\n  return (isItalic ? \"\" : \"italic \") + boldText;\n};\n\nconst toggleBold = (fontStyle: string | number) => {\n  const { isItalic, isBold } = parseFontStyle(fontStyle);\n  const italicText = isItalic ? \"italic \" : \"\";\n  return italicText + (isBold ? \"normal\" : \"bold\");\n};\n\nconst getBaselineRatio = (fontFamily: string, lineHeight: number) => {\n  const div = document.createElement(\"div\");\n  div.innerText = \"p\";\n  Object.assign(div.style, { fontSize: \"100px\", fontFamily, lineHeight });\n  document.body.appendChild(div);\n\n  const span = document.createElement(\"span\");\n  span.style.display = \"inline-block\";\n  div.appendChild(span);\n\n  const r0 = div.getBoundingClientRect();\n  const r1 = span.getBoundingClientRect();\n  const ratio = (r1.y - r0.y) / r0.height;\n  document.body.removeChild(div);\n  return Math.max(-1, Math.min(ratio, 1));\n};\n","import React, {\n  FC,\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport { useDrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { useMemoizedFn as useEvent } from \"ahooks\";\nimport { Draw, DrawRefType } from \"component/Draw\";\nimport { SelectTool, TextTool } from \"pages/reader/tools/DrawTools\";\nimport { once, range } from \"lodash\";\nimport { useInView } from \"react-intersection-observer\";\nimport { DrawState } from \"lib/draw/DrawState\";\nimport { Map, Set } from \"immutable\";\nimport { P_ZERO } from \"component/Draw/Draw\";\n\nconst PageWrapperRaw: FC<{\n  drawState: DrawState;\n  teamStateMap?: Map<string, DrawState>;\n  thumbnail?: string;\n  pdfIndex?: number;\n  noteID?: string;\n  updateState?: (ds: DrawState) => void;\n  onViewChange?: (ratio: number) => void;\n  preview?: boolean;\n  preload?: boolean;\n  ignores?: Set<string>;\n  skipInView?: boolean;\n}> = ({\n  thumbnail,\n  drawState,\n  teamStateMap,\n  updateState,\n  pdfIndex,\n  noteID = \"\",\n  preview = false,\n  onViewChange,\n  preload = false,\n  ignores = Set<string>(),\n  skipInView = false,\n}) => {\n  const threshold = onViewChange && range(0, 1.2, 0.2);\n  const [ref, visible, entry] = useInView({ threshold, skip: skipInView });\n  useEffect(() => {\n    if (!onViewChange) return;\n    if (!entry || !visible) return onViewChange(0);\n    onViewChange(entry.intersectionRatio);\n  }, [visible, entry, onViewChange]);\n\n  const [fullImg, setFullImg] = useState<string>();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const loadImage = useCallback(\n    once(async () => {\n      if (!pdfIndex || !noteID) return;\n      const { getNotePageImage } = await import(\"lib/note/pdfImage\");\n      setFullImg(await getNotePageImage(noteID, pdfIndex));\n    }),\n    [pdfIndex, noteID]\n  );\n\n  const show = visible || preload;\n  useEffect(() => {\n    if (!preview && show) loadImage();\n  }, [show, preview, loadImage]);\n\n  const otherStates = useMemo(\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\n    [teamStateMap, ignores]\n  );\n\n  const imageLoaded = Boolean(fullImg || !pdfIndex);\n  const drawShow = show && imageLoaded;\n\n  const { height, width } = drawState;\n  const ratio = height / width;\n\n  return (\n    <div ref={ref} className=\"page-wrapper\">\n      <svg className=\"size-holder\" viewBox={`0 0 100 ${ratio * 100}`} />\n      {drawShow && (\n        <DrawWrapper\n          drawState={drawState}\n          otherStates={otherStates}\n          updateState={updateState}\n          imgSrc={fullImg || thumbnail}\n          preview={preview}\n        />\n      )}\n    </div>\n  );\n};\nPageWrapperRaw.displayName = \"PageWrapper\";\nexport const PageWrapper = React.memo(PageWrapperRaw);\n\nconst DrawWrapper: FC<{\n  drawState: DrawState;\n  otherStates?: DrawState[];\n  updateState?: (ds: DrawState) => void;\n  preview?: boolean;\n  imgSrc?: string;\n}> = ({ drawState, updateState, otherStates, preview = false, imgSrc }) => {\n  const drawCtrl = useDrawCtrl();\n  const drawRef = useRef<DrawRefType>(null);\n  const [selectShow, setSelectShow] = useState(false);\n  const [clickPoint, setClickPoint] = useState<paper.Point>(P_ZERO);\n  const [pointText, setPointText] = useState<paper.PointText>();\n  const [renderSlow, setRenderSlow] = useState(false);\n\n  const handleChange = useEvent(\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\n      if (!updateState) return;\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\n      if (newDS === drawState) return;\n      updateState(newDS);\n    }\n  );\n\n  const toggleSelectTool = (active: boolean, clickPoint?: paper.Point) => {\n    setClickPoint((p) => clickPoint ?? p);\n    setSelectShow(active);\n  };\n\n  const toggleTextTool = (\n    pointText: paper.PointText | undefined,\n    slow: boolean\n  ) => {\n    setPointText(pointText);\n    setRenderSlow(slow);\n  };\n\n  return preview ? (\n    <Draw\n      drawState={drawState}\n      otherStates={otherStates}\n      imgSrc={imgSrc}\n      readonly\n    />\n  ) : (\n    <>\n      <Draw\n        drawState={drawState}\n        otherStates={otherStates}\n        onChange={handleChange}\n        imgSrc={imgSrc}\n        drawCtrl={drawCtrl}\n        ref={drawRef}\n        toggleTextTool={toggleTextTool}\n        toggleSelectTool={toggleSelectTool}\n      />\n      <SelectTool\n        drawRef={drawRef}\n        visible={selectShow}\n        clickPoint={clickPoint}\n      />\n      {pointText && (\n        <TextTool\n          drawRef={drawRef}\n          pointText={pointText}\n          renderSlow={renderSlow}\n        />\n      )}\n    </>\n  );\n};\n","import { PageWrapper } from \"./PageWrapper\";\nimport \"./page-wrapper.sass\";\nexport default PageWrapper;\n","import React, {\n  FC,\n  PropsWithChildren,\n  useContext,\n  useDebugValue,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Button, message } from \"antd\";\nimport { EditOutlined, EyeInvisibleOutlined } from \"@ant-design/icons\";\nimport localforage from \"localforage\";\nimport { once } from \"lodash\";\nimport \"./draw-ctrl.sass\";\n\nexport interface DrawCtrl {\n  mode: \"draw\" | \"erase\" | \"select\" | \"text\";\n  finger: boolean;\n  lineWidth: number;\n  eraserWidth: number;\n  color: string;\n  highlight: boolean;\n  lasso: boolean;\n  pixelEraser: boolean;\n  widthList: number[];\n}\n\nexport const defaultWidthList = [10, 20, 30, 50];\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\n  mode: \"draw\",\n  finger: true,\n  lineWidth: 10,\n  eraserWidth: 10,\n  color: \"#000000\",\n  highlight: false,\n  lasso: false,\n  pixelEraser: false,\n  widthList: defaultWidthList,\n};\n\nasync function getDrawCtrl() {\n  let drawCtrl = await localforage.getItem<DrawCtrl>(\"DRAW_CTRL\");\n  if (!drawCtrl) {\n    drawCtrl = defaultDrawCtrl;\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\n  }\n  return drawCtrl;\n}\n\nasync function saveDrawCtrl(drawCtrl: DrawCtrl) {\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\n}\n\nconst DrawCtrlContext = React.createContext({\n  drawCtrl: defaultDrawCtrl,\n  updateDrawCtrl: (() => {}) as (updated: Partial<DrawCtrl>) => void,\n});\n\nexport function useDrawCtrl() {\n  const { drawCtrl } = useContext(DrawCtrlContext);\n  useDebugValue(drawCtrl);\n  return drawCtrl;\n}\n\nexport function useUpdateDrawCtrl() {\n  const { updateDrawCtrl } = useContext(DrawCtrlContext);\n  return updateDrawCtrl;\n}\n\nexport const DrawCtrlProvider: FC<PropsWithChildren> = ({ children }) => {\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\n  useEffect(() => {\n    getDrawCtrl().then(setDrawCtrl);\n  }, []);\n\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\n    setDrawCtrl((prev) => {\n      const newCtrl = { ...prev, ...updated };\n      saveDrawCtrl(newCtrl);\n      return newCtrl;\n    });\n  };\n\n  const { finger } = drawCtrl;\n  useEffect(() => {\n    const detectPen = (e: PointerEvent) => {\n      const isPen = e.isPrimary && e.pointerType === \"pen\";\n      if (!isPen || !finger) return;\n      showPencilMsg(() => updateDrawCtrl({ finger: false }));\n    };\n    document.addEventListener(\"pointerup\", detectPen);\n    return () => document.removeEventListener(\"pointerup\", detectPen);\n  }, [finger]);\n\n  return (\n    <DrawCtrlContext.Provider value={{ drawCtrl, updateDrawCtrl }}>\n      {children}\n    </DrawCtrlContext.Provider>\n  );\n};\n\nconst showPencilMsg = once(async (cb: () => void) => {\n  const hide = () => {\n    message.destroy(\"DETECT_PENCIL\");\n    localforage.setItem(\"SKIP_PENCIL_MSG\", true);\n  };\n  if (await localforage.getItem(\"SKIP_PENCIL_MSG\")) return;\n  message.info({\n    content: (\n      <>\n        Your device supports\n        <Button\n          shape=\"round\"\n          size=\"small\"\n          icon={<EditOutlined />}\n          onClick={() => {\n            cb();\n            hide();\n          }}\n        >\n          Pencil only\n        </Button>\n        <Button\n          size=\"small\"\n          type=\"text\"\n          shape=\"circle\"\n          icon={<EyeInvisibleOutlined style={{ color: \"#999\" }} />}\n          onClick={hide}\n        />\n      </>\n    ),\n    key: \"DETECT_PENCIL\",\n    className: \"pencil-msg\",\n  });\n});\n","export function createVirtualCanvas(width: number, height: number) {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  if (!context) {\n    throw new Error(\"can't get virtual canvas context\");\n  }\n  canvas.width = width;\n  canvas.height = height;\n  return { canvas, context };\n}\n\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\n  canvas.width = 1;\n  canvas.height = 1;\n  const ctx = canvas.getContext('2d');\n  ctx?.clearRect(0, 0, 1, 1);\n}\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\nimport { defaultWidthList, DrawCtrl } from \"lib/draw/DrawCtrl\";\nimport { ColorCirle } from \"component/ColorCircle\";\nimport { WIDTH } from \"lib/draw/DrawState\";\nimport { Popover, Segmented, Slider } from \"antd\";\nimport { allColors } from \"lib/color\";\nimport { Setter } from \"lib/hooks\";\nimport IconFont from \"component/IconFont\";\nimport { List } from \"immutable\";\nimport \"./pen-panel.sass\";\n\nexport const PenPanel: FC<{\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n  drawCtrl: Partial<DrawCtrl>;\n}> = ({ updateDrawCtrl, drawCtrl }) => {\n  const { highlight, color } = drawCtrl;\n  const [panelBlur, setPanelBlur] = useState(false);\n\n  return (\n    <div className=\"pen-panel\" data-blur={panelBlur} data-hi={highlight}>\n      <div className=\"pen-status\">\n        <WidthSelect\n          updateDrawCtrl={updateDrawCtrl}\n          drawCtrl={drawCtrl}\n          setPanelBlur={setPanelBlur}\n        />\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\n      </div>\n      <ColorSelect\n        color={color || \"\"}\n        setColor={(c) => updateDrawCtrl({ color: c })}\n      />\n    </div>\n  );\n};\n\nexport const WidthSelect: FC<{\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n  drawCtrl: Partial<DrawCtrl>;\n  setPanelBlur?: Setter<boolean>;\n  field?: \"lineWidth\" | \"eraserWidth\";\n}> = ({\n  updateDrawCtrl,\n  drawCtrl,\n  setPanelBlur = () => {},\n  field = \"lineWidth\",\n}) => {\n  const currWidth = drawCtrl[field];\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\n\n  const chosen = useMemo(\n    () => widthList.indexOf(currWidth ?? -1),\n    [currWidth, widthList]\n  );\n\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\n  useEffect(() => {\n    if (popShow.includes(true)) setPanelBlur(true);\n    else setPanelBlur(false);\n  }, [popShow, setPanelBlur]);\n\n  const realSizeStyle = (width: number) =>\n    ({\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width})`,\n    } as CSSProperties);\n\n  const options = [\n    { value: -1, label: null },\n    ...widthList.map((width, index) => ({\n      value: index,\n      label: (\n        <Popover\n          open={popShow.get(index)}\n          onOpenChange={(v) => setPopShow((prev) => prev.set(index, v))}\n          trigger={chosen === index ? [\"click\"] : []}\n          placement=\"bottom\"\n          destroyTooltipOnHide\n          content={\n            <Slider\n              min={5}\n              max={100}\n              className=\"ctrl-slider\"\n              defaultValue={width}\n              onAfterChange={(w) => {\n                if (widthList.includes(w)) {\n                  setPopShow((prev) => prev.set(index, false));\n                  return updateDrawCtrl({ [field]: w });\n                }\n                const newWL = widthList.slice();\n                newWL[index] = w;\n                updateDrawCtrl({ widthList: newWL, [field]: w });\n              }}\n            />\n          }\n        >\n          <div className=\"circle-wrapper\" style={realSizeStyle(width)}>\n            <ColorCirle className={\"width-circle \" + field} color={color} />\n          </div>\n        </Popover>\n      ),\n    })),\n  ];\n\n  return (\n    <Segmented\n      className=\"width-seg\"\n      value={chosen}\n      options={options}\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 10 })}\n    />\n  );\n};\n\nconst HighlightSwitch: FC<{\n  checked?: boolean;\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\n}> = ({ checked = false, updateDrawCtrl }) => {\n  return (\n    <label className=\"hi-wrapper\">\n      <input\n        type=\"checkbox\"\n        name=\"highlight\"\n        checked={checked}\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\n      />\n      <div className=\"hi-switch\">\n        <IconFont type=\"icon-Highlight\" />\n      </div>\n    </label>\n  );\n};\n\nexport const ColorSelect: FC<{\n  color: string;\n  setColor: (color: string) => void;\n}> = ({ setColor, color }) => (\n  <div className=\"color-select\">\n    {allColors.map((c) => (\n      <label key={c}>\n        <input\n          checked={color === c}\n          type=\"radio\"\n          name=\"color\"\n          onChange={(e) => e.target.checked && setColor(c)}\n        />\n        <div\n          data-color={c}\n          className=\"circle\"\n          style={{ backgroundColor: c, borderColor: c }}\n        />\n      </label>\n    ))}\n  </div>\n);\n"],"names":["createFromIconfontCN","scriptUrl","rotateCursorFactory","src","size","cache","Map","half","createVirtualCanvas","canvas","context","image","Image","angle","Math","round","cached","get","translate","rotate","PI","drawImage","data","toDataURL","clearRect","resetTransform","set","getRotateCursor1x","getRotateCursor2x","getRotateCurcor","data1x","data2x","usePreventTouch","allowFinger","isTouch","useRef","checkPoniter","e","isPrimary","current","pointerType","preventTouch","touch","touches","touchType","isApplePencil","length","isEventValid","stopPropagation","onPointerDownCapture","onPointerMoveCapture","onTouchStartCapture","onTouchMoveCapture","getGridRange","bounds","topLeft","bottomRight","floor","x","ceil","y","setGridItem","grid","item","replaced","strokeBounds","xmin","xmax","ymin","ymax","delete","add","getGridItems","itemSet","Set","forEach","Array","from","P_ZERO","Point","DrawRaw","React","ref","drawState","otherStates","onChange","drawCtrl","defaultDrawCtrl","readonly","imgSrc","toggleSelectTool","toggleTextTool","width","height","projSize","useMemo","Size","mode","finger","lasso","eraserWidth","canvasEl","scope","paper","useState","group","setGroup","usePaperItem","path","setPath","rotateHandle","setRotateHandle","useEvent","useEffect","cvs","scp","setup","settings","handleSize","hitTolerance","Layer","visible","project","layers","activate","Tool","view","remove","releaseCanvas","rects","paintRects","r","useSize","canvasWidth","ratio","viewSize","multiply","scale","l","update","imgRaster","setImgRaster","raster","Raster","addChild","sendToBack","onLoad","fitBounds","Rectangle","bringToFront","mergedStrokes","DrawState","getStrokeList","renderSlow","deferTimerID","deferRender","setDefer","l1","render","tempGroup","timeBeforeRender","performance","now","removeChildren","stroke","self","hasStroke","uid","paintStroke","push","unrasterizeCanvas","pathClones","c","duration","window","setTimeout","clearTimeout","hitRef","selected","setSelected","paperMode","chosenIDs","setChosenIDs","chosenItems","IDSet","filter","has","name","resetSelect","undefined","type","lastOp","test","pointText","ptProxy","Proxy","layerRaster","rasterizeLayer","clip","force","l0","clipMask","prevClip","firstChild","replaceWith","insertAbove","dpi","devicePixelRatio","resolution","rasterize","addTo","unrasterizeLayer","lr","canvasRaster","rasterizeCanvas","element","opacity","cr","downPath","startStroke","point","downRect","startRect","selectionDragged","handleDown","draw","erase","select","hitRes","hitTest","segments","contains","text","dragPath","smooth","moveSelected","delta","handleDrag","s1","s2","s3","segment","center","axis","subtract","line","setCursor","moveP","baseP","next","diagonal","strokeWidth","rBaseP","tool","maxDistance","erased","itemGrid","wnum","hnum","gernerateGrid","handleToolDrag","layer","ew","hitOption","class","tolerance","hitTestAll","topItem","parent","pixelEraser","radius","circle","Path","insert","sub","trace","guide","handleUp","simplify","clone","pathData","exportJSON","prev","items","clear","splitters","map","paths","flattenCP","p","erasedList","abs","area","selection","closePath","moveDash","checkLasso","link","topCenter","lastSegment","bc","bottomCenter","projectToView","handleSelectedCursor","updateMutation","submitText","handleTextCursor","t","getClickedText","startText","justification","prevTextData","cursor","lineWidth","double","getSvg","img1x","img2x","getCircleCursor","handleMove","handleKeyDown","up","down","left","right","key","preventDefault","handleKeyUp","deleteSelected","handler","onMouseDown","onMouseDrag","onMouseUp","onMouseMove","onKeyDown","onKeyUp","mutations","mutateStyle","updated","updateGroupStyle","duplicateSelected","transP","divide","copies","pathDataList","IDs","rasterizeSelected","cancelText","content","mutatePointText","cb","pt","useImperativeHandle","document","addEventListener","removeEventListener","usePinch","memo","offset","first","last","origin","lastScale","lastOrigin","elPos","originRawP","getBoundingClientRect","originViewP","originPorjP","viewToProject","zoom","dScale","Promise","all","putCenterBack","scaleView","then","scaleBounds","max","min","rubberband","target","touchHandler","className","style","displayName","Draw","tuple","useDebugValue","cacheMap","WeakMap","importJSON","console","error","l2","bgRect","clip1","clip2","fillColor","Color","clipped","rect","onFrame","slow","color","highlight","strokeColor","alpha","blendMode","strokeJoin","strokeCap","dashOffset","dashArray","resolve","aniCount","pow","requestAnimationFrame","targetCenter","minSize","minX","minY","maxX","maxY","targetX","targetY","getTargetCenter","equals","move","isInside","compare","intersects","checkedP","newColor","fill","fontSize","fontFamily","cp","isEmpty","children","flat","btnProps","shape","getPosVars","getObjVars","obj","unit","result","Object","entries","value","SelectTool","drawRef","clickPoint","currDrawCtrl","setCurrDrawCtrl","trigger","placement","overlayClassName","getPopupContainer","parentElement","destroyTooltipOnHide","PenPanel","updateDrawCtrl","icon","BgColorsOutlined","CopyOutlined","onClick","PictureOutlined","imageData","Modal","title","alt","PictureTwoTone","okText","onOk","saveAs","split","danger","DeleteOutlined","TextTool","position","leading","rotation","fontWeight","bottomLeft","bx","by","bbx","bby","optionAtBottom","viewMatrix","scaling","internalBounds","lineHeight","toCSS","allColors","fontColorBtn","setColor","overlayStyle","IconFont","parseFontStyle","isItalic","isBold","fontStyleCSS","fontStyle","fontFamilySelect","popupClassName","v","bordered","virtual","dropdownMatchSelectWidth","options","label","getBaselineRatio","autoFocus","placeholder","toggleBold","BoldOutlined","toggleItalic","ItalicOutlined","div","createElement","innerText","assign","body","appendChild","span","display","r0","removeChild","PageWrapperRaw","thumbnail","teamStateMap","updateState","pdfIndex","noteID","preview","onViewChange","preload","ignores","skipInView","threshold","range","useInView","skip","entry","intersectionRatio","fullImg","setFullImg","loadImage","useCallback","once","getNotePageImage","show","deleteAll","toList","toArray","imageLoaded","Boolean","drawShow","viewBox","DrawWrapper","useDrawCtrl","selectShow","setSelectShow","setClickPoint","setPointText","setRenderSlow","handleChange","arg","newDS","active","defaultWidthList","widthList","getDrawCtrl","localforage","saveDrawCtrl","DrawCtrlContext","useContext","useUpdateDrawCtrl","DrawCtrlProvider","setDrawCtrl","newCtrl","detectPen","showPencilMsg","Provider","hide","message","EditOutlined","EyeInvisibleOutlined","getContext","Error","ctx","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","field","currWidth","chosen","indexOf","List","popShow","setPopShow","includes","realSizeStyle","WIDTH","index","open","onOpenChange","defaultValue","onAfterChange","w","newWL","slice","i","backgroundColor","borderColor"],"sourceRoot":""}