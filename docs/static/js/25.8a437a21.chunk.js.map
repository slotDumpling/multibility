{"version":3,"file":"static/js/25.8a437a21.chunk.js","mappings":"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","sources":["component/IconFont.tsx","component/Draw/cursor/cursor.ts","component/Draw/touch.ts","component/Draw/Draw.tsx","pages/reader/tools/DrawTools.tsx","component/PageWrapper/PageWrapper.tsx","component/PageWrapper/index.tsx","lib/draw/DrawCtrl.tsx","lib/draw/canvas.ts","pages/reader/tools/PenPanel.tsx"],"sourcesContent":["import { createFromIconfontCN } from \"@ant-design/icons\";\r\n\r\nexport default createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_3181679_yo844n7qgns.js\",\r\n});\r\n","import { createVirtualCanvas } from \"lib/draw/canvas\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport rotateImg from \"./rotate.png\";\r\n\r\nexport const getCircleCursor = (drawCtrl: DrawCtrl, ratio: number) => {\r\n  const { lineWidth, eraserWidth, mode } = drawCtrl;\r\n  const size = ratio * (mode === \"erase\" ? eraserWidth : lineWidth);\r\n  if (size < 5) return \"crosshair\";\r\n  const half = size / 2;\r\n  return `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23FFF7\" width=\"${size}\" height=\"${size}\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"5\"/></svg>') ${half} ${half}, auto`;\r\n};\r\n\r\nconst getRotateCursorImage = (() => {\r\n  const cache = new Map<number, string>();\r\n  const { canvas, context } = createVirtualCanvas(44, 44);\r\n  const image = new Image();\r\n  image.src = rotateImg;\r\n  return (angle: number) => {\r\n    angle = Math.round(angle / 10) * 10;\r\n    const cached = cache.get(angle);\r\n    if (cached) return cached;\r\n    context.translate(22, 22);\r\n    context.rotate((angle * Math.PI) / 180);\r\n    context.drawImage(image, -22, -22);\r\n    const data = canvas.toDataURL();\r\n    context.clearRect(-22, -22, 44, 44);\r\n    context.resetTransform();\r\n    cache.set(angle, data);\r\n    return data;\r\n  };\r\n})();\r\n\r\nexport const getRotateCurcor = (angle: number) => {\r\n  return `url(${getRotateCursorImage(angle)}) 22 22, auto`;\r\n};\r\n","import { PointerEvent, TouchEvent, useEffect, useRef } from \"react\";\r\n\r\ntype iOSTouch = Touch & {\r\n  force?: number;\r\n  touchType?: \"stylus\" | \"direct\";\r\n};\r\n\r\nexport function isApplePencil(e: TouchEvent) {\r\n  const touch = e.touches[0] as iOSTouch;\r\n  return touch?.touchType === \"stylus\";\r\n}\r\n\r\nexport function usePreventTouch(\r\n  allowFinger: boolean\r\n): React.HTMLAttributes<HTMLDivElement> {\r\n  const isTouch = useRef(false);\r\n  const checkPoniter = (e: PointerEvent) =>\r\n    e.isPrimary && (isTouch.current = e.pointerType === \"touch\");\r\n\r\n  const isEventValid = (e: TouchEvent) =>\r\n    !isTouch.current ||\r\n    isApplePencil(e) ||\r\n    (allowFinger && e.touches.length === 1);\r\n\r\n  const preventTouch = (e: TouchEvent) =>\r\n    isEventValid(e) || e.stopPropagation();\r\n\r\n  return {\r\n    onPointerDownCapture: checkPoniter,\r\n    onPointerMoveCapture: checkPoniter,\r\n    onTouchStartCapture: preventTouch,\r\n    onTouchMoveCapture: preventTouch,\r\n  };\r\n}\r\n\r\nexport function usePreventGesture() {\r\n  useEffect(() => {\r\n    const handler = (e: Event) => e.preventDefault();\r\n    document.addEventListener(\"gesturestart\", handler);\r\n    document.addEventListener(\"gesturechange\", handler);\r\n    document.addEventListener(\"gestureend\", handler);\r\n    return () => {\r\n      document.removeEventListener(\"gesturestart\", handler);\r\n      document.removeEventListener(\"gesturechange\", handler);\r\n      document.removeEventListener(\"gestureend\", handler);\r\n    };\r\n  }, []);\r\n}\r\n","import React, {\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  Dispatch,\r\n  useEffect,\r\n  useCallback,\r\n  useDebugValue,\r\n  SetStateAction,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport paper, {\r\n  Path,\r\n  Size,\r\n  Point,\r\n  Group,\r\n  Color,\r\n  Raster,\r\n  Layer,\r\n} from \"paper/dist/paper-core\";\r\nimport { usePinch } from \"@use-gesture/react\";\r\nimport useSize from \"@react-hook/size\";\r\nimport { DrawState, Mutation, Splitter, Stroke } from \"lib/draw/DrawState\";\r\nimport { defaultDrawCtrl, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { releaseCanvas } from \"lib/draw/canvas\";\r\nimport { getCircleCursor, getRotateCurcor } from \"./cursor\";\r\nimport { usePreventTouch, usePreventGesture } from \"./touch\";\r\n\r\nexport type ActiveToolKey = \"\" | \"select\" | \"text\";\r\nexport interface DrawRefType {\r\n  deleteSelected: () => void;\r\n  duplicateSelected: () => void;\r\n  mutateStyle: (updated: Partial<DrawCtrl>) => void;\r\n  rasterize: () => string;\r\n  submitText: (text: string, color?: string, justification?: string) => void;\r\n  cancelText: () => void;\r\n  pointText?: paper.PointText;\r\n}\r\ninterface DrawPropType {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  onChange?: Dispatch<SetStateAction<DrawState>>;\r\n  setActiveTool?: Dispatch<SetStateAction<ActiveToolKey>>;\r\n  drawCtrl?: DrawCtrl;\r\n  readonly?: boolean;\r\n  imgSrc?: string;\r\n}\r\n\r\nconst HIT_TOLERANCE = 20;\r\n\r\nconst DrawRaw = React.forwardRef<DrawRefType, DrawPropType>(\r\n  (\r\n    {\r\n      drawState,\r\n      otherStates,\r\n      onChange = () => {},\r\n      drawCtrl = defaultDrawCtrl,\r\n      readonly = false,\r\n      imgSrc,\r\n      setActiveTool = () => {},\r\n    },\r\n    ref\r\n  ) => {\r\n    const { width, height } = drawState;\r\n    const { mode, finger, lasso, eraserWidth } = drawCtrl;\r\n\r\n    const canvasEl = useRef<HTMLCanvasElement>(null);\r\n    const scope = useRef(new paper.PaperScope());\r\n    const [group, setGroup] = useState<paper.Item[]>([]);\r\n    const [path, setPath] = usePaperItem<paper.Path>();\r\n    const [rect, setRect] = usePaperItem<paper.Path.Rectangle>();\r\n    const [rotateHandle, setRotateHandle] = usePaperItem<paper.Path>();\r\n\r\n    useEffect(() => {\r\n      const cvs = canvasEl.current;\r\n      const scp = scope.current;\r\n      if (!cvs) return;\r\n\r\n      scp.setup(cvs);\r\n      scp.settings.handleSize = 10;\r\n      scp.settings.hitTolerance = HIT_TOLERANCE;\r\n      [0, 1, 2].forEach(() => (new Layer().visible = false));\r\n      scp.project.layers[2]?.activate();\r\n      new scp.Tool();\r\n\r\n      return () => {\r\n        scp.view?.remove();\r\n        releaseCanvas(cvs);\r\n      };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      scope.current.activate();\r\n      const { layers } = scope.current.project;\r\n      const rects = paintRects(layers, width, height);\r\n      return () => rects.forEach((r) => r.remove());\r\n    }, [width, height]);\r\n\r\n    const [canvasWidth] = useSize(canvasEl);\r\n    const ratio = canvasWidth / width;\r\n    useEffect(() => {\r\n      if (!ratio) return;\r\n      const scp = scope.current;\r\n      const zero = new Point(0, 0);\r\n      scp.view.viewSize = new Size(width, height).multiply(ratio);\r\n      scp.view.scale(ratio, zero);\r\n      scp.project.layers.forEach((l) => (l.visible = true));\r\n      scp.view.update();\r\n\r\n      return () => scp.view?.scale(1 / ratio, zero);\r\n    }, [width, height, ratio]);\r\n\r\n    useEffect(() => {\r\n      if (!imgSrc) return;\r\n      scope.current.activate();\r\n      const raster = new Raster(imgSrc);\r\n      raster.project.layers[0]?.addChild(raster);\r\n      raster.sendToBack();\r\n      raster.onLoad = () => {\r\n        raster.view.update();\r\n        raster.fitBounds(new paper.Rectangle(0, 0, width, height));\r\n        raster.bringToFront();\r\n      };\r\n\r\n      return () => void raster?.remove();\r\n    }, [imgSrc, width, height]);\r\n\r\n    const mergedStrokes = useMemo(\r\n      () =>\r\n        otherStates\r\n          ? DrawState.mergeStates(drawState, ...otherStates)\r\n          : drawState.getStrokeList(),\r\n      [drawState, otherStates]\r\n    );\r\n\r\n    const renderSlow = useRef(false);\r\n    useEffect(() => {\r\n      const tempGroup: paper.Item[] = [];\r\n      const layer = scope.current.project.layers[1];\r\n      if (!layer) return;\r\n\r\n      scope.current.activate();\r\n      mergedStrokes.forEach((stroke) => {\r\n        const self = drawState.hasStroke(stroke.uid);\r\n        const item = paintStroke(stroke, layer, !self);\r\n        if (self) tempGroup.push(item);\r\n      });\r\n      setGroup(tempGroup);\r\n\r\n      const timeBeforeRender = Date.now();\r\n      scope.current.view.update();\r\n      requestAnimationFrame(() => {\r\n        const duration = Date.now() - timeBeforeRender;\r\n        renderSlow.current = duration > 32;\r\n      });\r\n\r\n      return () => void layer.removeChildren(1);\r\n    }, [mergedStrokes, drawState]);\r\n\r\n    const hitRef = useRef<paper.HitResult>();\r\n    const [selected, setSelected] = useState(false);\r\n    const paperMode = mode === \"select\" && selected ? \"selected\" : mode;\r\n    const [chosenIDs, setChosenIDs] = useState<string[]>([]);\r\n    const chosenItems = useMemo(() => {\r\n      const IDSet = new Set(chosenIDs);\r\n      return group.filter((item) => IDSet.has(item.name));\r\n    }, [group, chosenIDs]);\r\n\r\n    const resetSelect = useCallback(() => {\r\n      setSelected(false);\r\n      setPath(undefined);\r\n      setRect(undefined);\r\n      setRotateHandle(undefined);\r\n    }, [setPath, setRect, setRotateHandle]);\r\n\r\n    useEffect(() => {\r\n      if (mode === \"select\") return resetSelect;\r\n    }, [mode, resetSelect]);\r\n    useEffect(() => resetSelect, [lasso, resetSelect]);\r\n\r\n    useEffect(() => {\r\n      if (!selected) return;\r\n      return () => {\r\n        setChosenIDs([]);\r\n        setActiveTool(\"\");\r\n      };\r\n    }, [selected, setActiveTool]);\r\n\r\n    const [raster, setRaster] = usePaperItem<paper.Raster>();\r\n    const pinching = useRef(false);\r\n    const rasterizeLayer = (useClip = true) => {\r\n      if (!renderSlow.current) return;\r\n      const [l0, l1] = scope.current.project.layers;\r\n      const { view } = scope.current;\r\n      if (!l0 || !l1) return;\r\n      setRaster((r) => {\r\n        scope.current.activate();\r\n        l1.visible = true;\r\n        const projSize = new Size(width, height);\r\n        const clipSize = useClip ? Size.min(view.size, projSize) : projSize;\r\n        const clip = new Path.Rectangle(clipSize);\r\n        clip.position = view.center;\r\n        clip.clipMask = true;\r\n        const prevClip = l1.firstChild;\r\n        if (useClip) prevClip.replaceWith(clip);\r\n\r\n        const dpi = 72 * devicePixelRatio;\r\n        const resolution = (canvasWidth / clipSize.width) * dpi;\r\n        r = l1.rasterize({ raster: r, resolution });\r\n\r\n        r.visible = true;\r\n        l1.visible = false;\r\n        l0.addChild(r);\r\n        if (useClip) clip.replaceWith(prevClip);\r\n        clip.remove();\r\n        return r;\r\n      });\r\n    };\r\n    const unrasterizeLayer = () => {\r\n      const [, l1] = scope.current.project.layers;\r\n      if (pinching.current || !l1 || !raster) return;\r\n      l1.visible = true;\r\n      raster.visible = false;\r\n    };\r\n\r\n    const downPath = (e: paper.MouseEvent) => {\r\n      rasterizeLayer();\r\n      setPath(startStroke(drawCtrl, e.point));\r\n    };\r\n    const downRect = (e: paper.MouseEvent) => {\r\n      rasterizeLayer();\r\n      setRect(startRect(e.point));\r\n    };\r\n\r\n    const handleDown = {\r\n      draw: downPath,\r\n      erase: downPath,\r\n      select: lasso ? downPath : downRect,\r\n      selected(e: paper.MouseEvent) {\r\n        if (lasso) {\r\n          // if the point is outside of selection, reset selection\r\n          if (path?.contains(e.point)) return;\r\n          downPath(e);\r\n          setSelected(false);\r\n        } else {\r\n          // check if the point hit the segment point.\r\n          let hitRes =\r\n            rect?.hitTest(e.point, { segments: true }) ??\r\n            rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n          hitRef.current = hitRes;\r\n          if (hitRes) return;\r\n\r\n          // if the point is outside of selection, reset selection\r\n          if (rect?.contains(e.point)) return;\r\n          downRect(e);\r\n          setRotateHandle(undefined);\r\n          setSelected(false);\r\n        }\r\n      },\r\n      text(e: paper.MouseEvent) {\r\n        const layer = scope.current.project.layers[1];\r\n        if (!layer) return;\r\n        const t = getClickedText(layer, e.point) ?? startText(e.point);\r\n        setPointText(t);\r\n      },\r\n    }[paperMode];\r\n\r\n    const dragPath = (e: paper.MouseEvent) => {\r\n      path?.add(e.point);\r\n      path?.smooth();\r\n    };\r\n    const resizeRect = (e: paper.MouseEvent) => {\r\n      if (!rect) return;\r\n      const { x, y } = e.point;\r\n      const [, s1, s2, s3] = rect.segments;\r\n      if (!s1 || !s2 || !s3) return;\r\n      s1.point.x = x;\r\n      s2.point = e.point;\r\n      s3.point.y = y;\r\n      rect.selected = true;\r\n    };\r\n\r\n    const handleDrag = {\r\n      draw: dragPath,\r\n      erase: dragPath,\r\n      select: lasso ? dragPath : resizeRect,\r\n      selected(e: paper.MouseEvent) {\r\n        const hitRes = hitRef.current;\r\n        if (hitRes?.segment && rect && rotateHandle) {\r\n          const segment = hitRes.segment;\r\n          const rotating = segment.selected;\r\n          if (rotating) {\r\n            // rotate select items\r\n            const { center } = rect.bounds;\r\n            const axis = segment.point.subtract(center);\r\n            const line = e.point.subtract(center);\r\n            setCursor(getRotateCurcor(line.angle));\r\n            const angle = line.angle - axis.angle;\r\n            rect.rotate(angle, center);\r\n            rotateHandle.rotate(angle, center);\r\n            chosenItems.forEach((item) => item?.rotate(angle, center));\r\n          } else {\r\n            // resize selected items\r\n            const moveP = segment.point;\r\n            const baseP = segment.next.next.point;\r\n            const diagonal = moveP.subtract(baseP);\r\n            const projection = e.point.subtract(baseP).project(diagonal);\r\n            const scale = projection.x / diagonal.x;\r\n            if (scale < 0) return;\r\n\r\n            rect.scale(scale, baseP);\r\n            chosenItems.forEach((item) => {\r\n              item.scale(scale, baseP);\r\n              item.strokeWidth *= scale;\r\n            });\r\n            rotateHandle.scale(scale, baseP);\r\n            const rBaseP = rotateHandle.segments[0]?.point;\r\n            if (!rBaseP) return;\r\n            rotateHandle.scale(100 / rotateHandle.length, rBaseP);\r\n          }\r\n        } else {\r\n          // move selected items\r\n          chosenItems.forEach((item) => item.translate(e.delta));\r\n          path?.translate(e.delta);\r\n          rect?.translate(e.delta);\r\n          rotateHandle?.translate(e.delta);\r\n        }\r\n      },\r\n      text(e: paper.MouseEvent) {\r\n        if (!pointText || pointText.name) return;\r\n        const { topCenter, bottomRight } = pointText.bounds;\r\n        const diagonal = bottomRight.subtract(topCenter);\r\n        const projection = e.point.subtract(topCenter).project(diagonal);\r\n        const scale = projection.x / diagonal.x;\r\n        if (scale < 0) return;\r\n        pointText.scale(scale, topCenter);\r\n      },\r\n    }[paperMode];\r\n\r\n    useEffect(() => {\r\n      scope.current.tool.maxDistance = eraserWidth;\r\n    }, [eraserWidth]);\r\n    const erased = useRef(new Set<string>());\r\n    const replaced = useRef(new Map<string, paper.Item>());\r\n\r\n    const handelToolDrag = (e: paper.ToolEvent) => {\r\n      if (paperMode !== \"erase\") return;\r\n      const layer = scope.current.project.layers[1];\r\n      if (!layer) return;\r\n      const prevVisible = layer.visible;\r\n      layer.visible = true;\r\n      const hitRes = layer.hitTestAll(e.point, {\r\n        class: paper.Path,\r\n        stroke: true,\r\n        tolerance: eraserWidth / 2,\r\n      });\r\n      layer.visible = prevVisible;\r\n\r\n      hitRes?.forEach(({ item }) => {\r\n        if (!(item instanceof paper.Path)) return;\r\n        let topItem: paper.PathItem = item;\r\n        while (topItem.parent !== layer) {\r\n          if (!(topItem.parent instanceof paper.PathItem)) break;\r\n          topItem = topItem.parent;\r\n        }\r\n        const { name } = topItem;\r\n\r\n        if (drawCtrl.pixelEraser) {\r\n          const radius = (eraserWidth + item.strokeWidth) / 2;\r\n          const circle = new Path.Circle({\r\n            center: e.point,\r\n            radius,\r\n            insert: false,\r\n          });\r\n\r\n          const sub = item.subtract(circle, { trace: false });\r\n          item.replaceWith(sub);\r\n          if (topItem === item) topItem = sub;\r\n          replaced.current.set(name, topItem);\r\n        } else {\r\n          topItem.opacity = 0.5;\r\n          topItem.guide = true;\r\n          erased.current.add(name);\r\n        }\r\n      });\r\n    };\r\n\r\n    const handleUp = {\r\n      draw() {\r\n        unrasterizeLayer();\r\n        if (!path || path.segments.length <= 1) return;\r\n        path.simplify();\r\n        const pathData = path.exportJSON();\r\n        setPath(undefined);\r\n        onChange((prev) => DrawState.addStroke(prev, pathData));\r\n      },\r\n      erase() {\r\n        unrasterizeLayer();\r\n        setPath(undefined);\r\n        if (drawCtrl.pixelEraser) {\r\n          const items = Array.from(replaced.current);\r\n          replaced.current.clear();\r\n          const splitters: Splitter[] = items.map(([uid, item]) => {\r\n            const paths = flattenCP(item);\r\n            return [uid, paths.map((i) => i.exportJSON())];\r\n          });\r\n          if (!splitters.length) return;\r\n          onChange((prev) => DrawState.splitStrokes(prev, splitters));\r\n        } else {\r\n          const erasedList = Array.from(erased.current);\r\n          erased.current.clear();\r\n          if (!erasedList.length) return;\r\n          onChange((prev) => DrawState.eraseStrokes(prev, erasedList));\r\n        }\r\n      },\r\n      select() {\r\n        unrasterizeLayer();\r\n        let selection: string[];\r\n        if (lasso) {\r\n          if (!path || Math.abs(path.area) < 1_000) return setPath(undefined);\r\n          path.closePath();\r\n          path.simplify();\r\n          moveDash(path);\r\n          selection = checkLasso(group, path);\r\n        } else {\r\n          if (!rect || Math.abs(rect.area) < 1_000) return setRect(undefined);\r\n          selection = checkLasso(group, rect);\r\n          const link = new Path();\r\n          const { topCenter } = rect.bounds;\r\n          link.add(topCenter, topCenter.subtract(new Point(0, 100)));\r\n          link.lastSegment.selected = true;\r\n          setRotateHandle(link);\r\n        }\r\n        setSelected(true);\r\n        setChosenIDs(selection);\r\n        setActiveTool(\"select\");\r\n      },\r\n      selected(e: paper.MouseEvent) {\r\n        updateMutation();\r\n        handleSelectedCursor(e);\r\n      },\r\n      text() {\r\n        setActiveTool(\"text\");\r\n      },\r\n    }[paperMode];\r\n\r\n    const [cursor, setCursor] = useState(\"auto\");\r\n    useEffect(() => {\r\n      if (paperMode === \"text\" || paperMode === \"select\") {\r\n        setCursor(\"crosshair\");\r\n      } else if (paperMode === \"selected\") {\r\n        setCursor(lasso ? \"crosshair\" : \"nwse-resize\");\r\n      } else if (paperMode === \"draw\" || paperMode === \"erase\") {\r\n        setCursor(getCircleCursor(drawCtrl, ratio));\r\n      }\r\n    }, [paperMode, lasso, drawCtrl, ratio]);\r\n\r\n    const handleSelectedCursor = (e: paper.MouseEvent) => {\r\n      const hitRes =\r\n        rect?.hitTest(e.point, { segments: true }) ??\r\n        rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n      if (hitRes?.segment) {\r\n        if (hitRes.segment.selected) {\r\n          const center = rect?.bounds.center;\r\n          if (!center) return;\r\n          const line = hitRes.segment.point.subtract(center);\r\n          return setCursor(getRotateCurcor(line.angle));\r\n        }\r\n        const moveP = hitRes.segment.point;\r\n        const baseP = hitRes.segment.next.next.point;\r\n        const diagonal = moveP.subtract(baseP);\r\n        const { x, y } = diagonal;\r\n        return setCursor(x * y < 0 ? \"nesw-resize\" : \"nwse-resize\");\r\n      }\r\n      if ((rect ?? path)?.contains(e.point)) return setCursor(\"move\");\r\n      setCursor(\"crosshair\");\r\n    };\r\n\r\n    const handleMove = {\r\n      selected: handleSelectedCursor,\r\n      text(e: paper.MouseEvent) {\r\n        const layer = scope.current.project.layers[1];\r\n        if (!layer) return;\r\n        if (getClickedText(layer, e.point)) setCursor(\"text\");\r\n        else setCursor(\"crosshair\");\r\n      },\r\n      ...{ select: null, draw: null, erase: null },\r\n    }[paperMode];\r\n\r\n    const handleKeyUp =\r\n      paperMode === \"selected\"\r\n        ? (e: paper.KeyEvent) => {\r\n            if ([\"delete\", \"backspace\"].includes(e.key)) {\r\n              deleteSelected();\r\n            }\r\n          }\r\n        : null;\r\n\r\n    useEffect(() => {\r\n      if (readonly) return;\r\n\r\n      type Handler<E> = ((e: E) => boolean | void) | null;\r\n      const activate = <E,>(handler: Handler<E>): Handler<E> => {\r\n        return (e) => {\r\n          scope.current.activate();\r\n          if (handler) return handler(e);\r\n        };\r\n      };\r\n      const { view, tool } = scope.current;\r\n      view.onMouseDown = activate(handleDown);\r\n      view.onMouseDrag = activate(handleDrag);\r\n      view.onMouseUp = activate(handleUp);\r\n      view.onMouseMove = activate(handleMove);\r\n      tool.onMouseDrag = activate(handelToolDrag);\r\n      tool.onKeyUp = activate(handleKeyUp);\r\n    });\r\n\r\n    const updateMutation = () => {\r\n      if (!chosenItems?.length) return;\r\n      const mutations: Mutation[] = chosenItems.map((p) => [\r\n        p.name,\r\n        p.exportJSON(),\r\n      ]);\r\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\r\n    };\r\n\r\n    const deleteSelected = () => {\r\n      resetSelect();\r\n      if (!chosenIDs.length) return;\r\n      onChange((prev) => DrawState.eraseStrokes(prev, chosenIDs));\r\n    };\r\n\r\n    const mutateStyle = (updated: Partial<DrawCtrl>) => {\r\n      scope.current.activate();\r\n      updateGroupStyle(chosenItems, updated);\r\n      updateMutation();\r\n    };\r\n\r\n    const duplicateSelected = () => {\r\n      scope.current.activate();\r\n      const size = (rect || path)?.bounds.size;\r\n      if (!size || !chosenItems.length) return;\r\n      const { width, height } = size;\r\n      const transP = new Point(width, height).divide(10);\r\n      const copies = chosenItems.map((item) => item.clone());\r\n      copies.forEach((item) => item.translate(transP));\r\n      rect?.translate(transP);\r\n      path?.translate(transP);\r\n      rotateHandle?.translate(transP);\r\n\r\n      const mutations: Mutation[] = copies.map((item) => [\r\n        DrawState.getUid(),\r\n        item.exportJSON(),\r\n      ]);\r\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\r\n      setChosenIDs(mutations.map(([uid]) => uid));\r\n    };\r\n\r\n    const rasterize = () => {\r\n      const g = new Group(chosenItems);\r\n      const layer = scope.current.project.layers[1];\r\n      if (!layer) return \"\";\r\n      g.addTo(layer);\r\n      return g.rasterize({ insert: false }).toDataURL();\r\n    };\r\n\r\n    const [pointText, setPointText] = usePaperItem<paper.PointText>();\r\n    const cancelText = useCallback(() => {\r\n      setPointText(undefined);\r\n      setActiveTool(\"\");\r\n    }, [setPointText, setActiveTool]);\r\n\r\n    useEffect(() => {\r\n      if (mode === \"text\") return cancelText;\r\n    }, [mode, cancelText]);\r\n\r\n    const submitText = (\r\n      text: string,\r\n      color = \"#000\",\r\n      justification = \"center\"\r\n    ) => {\r\n      if (!pointText) return;\r\n      pointText.content = text;\r\n      pointText.fillColor = new Color(color);\r\n      pointText.justification = justification;\r\n      const pathData = pointText.exportJSON();\r\n      const { name } = pointText;\r\n      cancelText();\r\n      if (!name) return onChange((prev) => DrawState.addStroke(prev, pathData));\r\n      onChange((prev) => DrawState.mutateStrokes(prev, [[name, pathData]]));\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      deleteSelected,\r\n      duplicateSelected,\r\n      cancelText,\r\n      submitText,\r\n      mutateStyle,\r\n      rasterize,\r\n      pointText,\r\n    }));\r\n\r\n    usePreventGesture();\r\n    usePinch(\r\n      ({ memo, offset: [scale], first, last, origin }) => {\r\n        scope.current.activate();\r\n        const { view } = scope.current;\r\n        const originRawP = new paper.Point(origin);\r\n\r\n        let lastScale: number;\r\n        let lastOrigin, elPos: paper.Point;\r\n        if (first || !memo) {\r\n          const { x, y } = canvasEl.current!.getBoundingClientRect();\r\n          lastScale = 1;\r\n          elPos = new Point(x, y);\r\n          lastOrigin = originRawP.subtract(elPos);\r\n          rasterizeLayer(false);\r\n          pinching.current = true;\r\n        } else {\r\n          [lastScale, lastOrigin, elPos] = memo;\r\n        }\r\n\r\n        const originViewP = originRawP.subtract(elPos);\r\n        const originPorjP = view.viewToProject(originViewP);\r\n\r\n        const deltaP = originViewP.subtract(lastOrigin);\r\n        const transP = deltaP.divide(view.zoom);\r\n        view.translate(transP);\r\n\r\n        if (Math.abs(1 - scale) < 0.05) scale = 1;\r\n        let dScale = first ? 1 : scale / lastScale;\r\n        scope.current.settings.hitTolerance /= dScale;\r\n\r\n        if (last) {\r\n          scaleView(view, originPorjP, dScale)\r\n            .then(() => putCenterBack(view, new Size(width, height)))\r\n            .then(() => (pinching.current = false))\r\n            .then(unrasterizeLayer);\r\n        } else {\r\n          view.scale(dScale, originPorjP);\r\n          return [scale, originViewP, elPos];\r\n        }\r\n      },\r\n      {\r\n        scaleBounds: { max: 5, min: 0.3 },\r\n        rubberband: 0.5,\r\n        target: canvasEl,\r\n      }\r\n    );\r\n\r\n    const touchHandler = usePreventTouch(finger);\r\n    return (\r\n      <div\r\n        className=\"draw-wrapper\"\r\n        style={{ cursor }}\r\n        data-readonly={readonly}\r\n        {...touchHandler}\r\n      >\r\n        <canvas ref={canvasEl} className=\"draw-canvas\" />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nDrawRaw.displayName = \"Draw\";\r\nexport const Draw = React.memo(DrawRaw);\r\n\r\nfunction usePaperItem<T extends paper.Item>() {\r\n  const tuple = useState<T | undefined>();\r\n  const [item] = tuple;\r\n  useDebugValue(item);\r\n  useEffect(() => {\r\n    if (!item?.name) return () => void item?.remove();\r\n  }, [item]);\r\n  return tuple;\r\n}\r\n\r\nconst paintStroke = (() => {\r\n  const cacheMap = new WeakMap<\r\n    paper.Layer,\r\n    Map<string, { stroke: Stroke; item: paper.Item }>\r\n  >();\r\n\r\n  return (stroke: Stroke, layer: paper.Layer, readonly = false) => {\r\n    const { pathData, uid } = stroke;\r\n    const cache = cacheMap.get(layer) ?? new Map();\r\n    cacheMap.set(layer, cache);\r\n    const cached = cache.get(uid);\r\n    let item: paper.Item;\r\n    if (cached?.stroke === stroke) {\r\n      layer.addChild(cached.item);\r\n      item = cached.item;\r\n    } else {\r\n      try {\r\n        item = layer.importJSON(pathData);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n      item ??= new paper.Item();\r\n      item.name = uid;\r\n      cache.set(uid, { item, stroke });\r\n    }\r\n    item.opacity = 1;\r\n    item.guide = readonly;\r\n    return item;\r\n  };\r\n})();\r\n\r\nconst paintRects = (layers: paper.Layer[], width: number, height: number) => {\r\n  const [l0, l1, l2] = layers;\r\n  if (!l0 || !l1 || !l2) return [];\r\n  const bgRect = new Path.Rectangle(new Point(0, 0), new Point(width, height));\r\n  const clip1 = bgRect.clone();\r\n  const clip2 = bgRect.clone();\r\n  bgRect.fillColor = new Color(\"#fff\");\r\n  l0.addChild(bgRect);\r\n  l1.addChild(clip1);\r\n  l2.addChild(clip2);\r\n  l1.clipped = true;\r\n  l2.clipped = true;\r\n  return [bgRect, clip1, clip2];\r\n};\r\n\r\nconst startRect = (point: paper.Point) => {\r\n  const rect = new Path.Rectangle(point, new Size(0, 0));\r\n  rect.onFrame = () => {}; // the handle size bug\r\n  return rect;\r\n};\r\n\r\nconst startStroke = (drawCtrl: DrawCtrl, point: paper.Point) => {\r\n  let { mode, lineWidth, eraserWidth, color, highlight } = drawCtrl;\r\n  const path = new Path();\r\n  path.add(point);\r\n  if (mode === \"erase\") {\r\n    color = \"#ccc\";\r\n    lineWidth = eraserWidth;\r\n  }\r\n  if (mode === \"select\") {\r\n    color = \"#009dec\";\r\n    lineWidth = 5;\r\n  }\r\n  const strokeColor = new Color(color);\r\n  if (highlight || mode === \"erase\") {\r\n    strokeColor.alpha = 0.5;\r\n    path.blendMode = \"multiply\";\r\n  }\r\n  path.strokeColor = strokeColor;\r\n  path.strokeWidth = lineWidth;\r\n  path.strokeJoin = \"round\";\r\n  path.strokeCap = \"round\";\r\n  path.guide = true;\r\n  return path;\r\n};\r\n\r\nconst moveDash = (item: paper.Item) => {\r\n  item.dashOffset = 0;\r\n  item.dashArray = [30, 20];\r\n  item.onFrame = () => (item.dashOffset += 3);\r\n};\r\n\r\nconst scaleView = (\r\n  view: paper.View,\r\n  originPorjP: paper.Point,\r\n  dScale: number\r\n) =>\r\n  new Promise<void>((res) => {\r\n    if (Math.abs(dScale - 1) < 0.05) {\r\n      view.scale(dScale, originPorjP);\r\n      return res();\r\n    }\r\n    let aniCount = 10;\r\n    dScale = Math.pow(dScale, 1 / aniCount);\r\n    const scale = () => {\r\n      view.scale(dScale, originPorjP);\r\n      if (--aniCount > 0) requestAnimationFrame(scale);\r\n      else requestAnimationFrame(() => res());\r\n    };\r\n    scale();\r\n  });\r\n\r\nconst getCenterTranslate = (\r\n  view: paper.View,\r\n  projSize: paper.Size\r\n): [number, number] => {\r\n  const { x, y } = view.center;\r\n  const { width: viewW, height: viewH } = view.size;\r\n  const { width: projW, height: projH } = projSize;\r\n\r\n  const [minX, minY] = [Math.min(viewW, projW) / 2, Math.min(viewH, projH) / 2];\r\n  const [maxX, maxY] = [projW - minX, projH - minY];\r\n\r\n  const deltaX = x < minX ? minX - x : x > maxX ? maxX - x : 0;\r\n  const deltaY = y < minY ? minY - y : y > maxY ? maxY - y : 0;\r\n\r\n  return [deltaX, deltaY];\r\n};\r\n\r\nconst putCenterBack = (view: paper.View, projSize: paper.Size) =>\r\n  new Promise<void>((res) => {\r\n    const [deltaX, deltaY] = getCenterTranslate(view, projSize);\r\n    if (!deltaX && !deltaY) return res();\r\n    let aniCount = 10;\r\n    const dP = new Point(deltaX, deltaY).divide(-aniCount);\r\n    const move = () => {\r\n      view.translate(dP);\r\n      if (--aniCount > 0) requestAnimationFrame(move);\r\n      else requestAnimationFrame(() => res());\r\n    };\r\n    move();\r\n  });\r\n\r\nconst checkLasso = (items: paper.Item[], selection: paper.Path) => {\r\n  const isInside = (p: paper.Path) => {\r\n    const res = p.subtract(selection, { insert: false, trace: false });\r\n    res.remove();\r\n    return !res.compare(p);\r\n  };\r\n  return items\r\n    .filter((item) => {\r\n      if (!item.name) return false;\r\n      if (!item.bounds.intersects(selection.bounds)) return false;\r\n      if (item instanceof paper.Path) {\r\n        return (\r\n          (selection.segments.length === 4 &&\r\n            item.isInside(selection.bounds)) ||\r\n          isInside(item)\r\n        );\r\n      } else {\r\n        const checkedP = new Path.Rectangle(item.bounds);\r\n        checkedP.remove();\r\n        return isInside(checkedP) || selection.isInside(item.bounds);\r\n      }\r\n    })\r\n    .map(({ name }) => name);\r\n};\r\n\r\nconst updateGroupStyle = (items: paper.Item[], updated: Partial<DrawCtrl>) => {\r\n  const { lineWidth, color, highlight } = updated;\r\n  items.forEach((item) => {\r\n    if (item instanceof paper.PointText && color) {\r\n      const newColor = new Color(color);\r\n      item.fillColor = newColor;\r\n    }\r\n\r\n    if (!(item instanceof paper.Path)) return;\r\n\r\n    if (color) {\r\n      const newColor = new Color(color);\r\n      if (item.blendMode === \"multiply\") newColor.alpha = 0.5;\r\n      item.strokeColor = newColor;\r\n    }\r\n\r\n    if (lineWidth) item.strokeWidth = lineWidth;\r\n\r\n    if (!item.strokeColor || highlight === undefined) return;\r\n    item.strokeColor.alpha = highlight ? 0.5 : 1;\r\n    item.blendMode = highlight ? \"multiply\" : \"normal\";\r\n  });\r\n};\r\n\r\nconst getClickedText = (layer: paper.Layer, point: paper.Point) => {\r\n  const hitRes = layer.hitTest(point, {\r\n    class: paper.PointText,\r\n    fill: true,\r\n  });\r\n  if (hitRes?.item instanceof paper.PointText) return hitRes?.item;\r\n};\r\n\r\nconst startText = (point: paper.Point) => {\r\n  return new paper.PointText({\r\n    point: point.add(new Point(0, 50)),\r\n    content: \"Insert text...\",\r\n    fontSize: 50,\r\n    justification: \"center\",\r\n    fillColor: \"#1890ff55\",\r\n  });\r\n};\r\n\r\nconst flattenCP = (cp: paper.Item): paper.Path[] => {\r\n  if (cp instanceof paper.Path) {\r\n    return cp.isEmpty() ? [] : [cp];\r\n  }\r\n  if (cp instanceof paper.CompoundPath) {\r\n    return cp.children.map(flattenCP).flat();\r\n  }\r\n  return [];\r\n};\r\n","import { FC, RefObject, useEffect, useState } from \"react\";\r\nimport {\r\n  CopyOutlined,\r\n  DeleteOutlined,\r\n  PictureOutlined,\r\n  BgColorsOutlined,\r\n  AlignLeftOutlined,\r\n  FontColorsOutlined,\r\n  AlignRightOutlined,\r\n  AlignCenterOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Button, ButtonProps, Modal, Popover, Radio } from \"antd\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { allColors } from \"lib/color\";\r\nimport { DrawRefType } from \"component/Draw\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { saveAs } from \"file-saver\";\r\nimport \"./drawTools.sass\";\r\n\r\nexport const SelectTool: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n  visible: boolean;\r\n}> = ({ drawRef, visible }) => (\r\n  <CSSTransition timeout={300} in={visible} unmountOnExit>\r\n    <SelectToolContent drawRef={drawRef} />\r\n  </CSSTransition>\r\n);\r\n\r\nexport const SelectToolContent: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n}> = ({ drawRef }) => {\r\n  const btnProps: ButtonProps = {\r\n    type: \"text\",\r\n    shape: \"round\",\r\n    size: \"small\",\r\n  };\r\n\r\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\r\n\r\n  const getRaster = () => {\r\n    if (!drawRef.current) return;\r\n    const imageData = drawRef.current.rasterize();\r\n    Modal.confirm({\r\n      title: \"Screenshot\",\r\n      content: <img className=\"raster\" src={imageData} alt=\"raster\" />,\r\n      className: \"raster-modal\",\r\n      icon: <PictureOutlined />,\r\n      okText: \"Save\",\r\n      onOk: () => saveAs(imageData, \"screenshot\"),\r\n    });\r\n  };\r\n\r\n  return createPortal(\r\n    <div className=\"select-tool\">\r\n      <Popover\r\n        trigger=\"click\"\r\n        placement=\"bottom\"\r\n        getPopupContainer={(e) => e.parentElement!}\r\n        destroyTooltipOnHide\r\n        content={\r\n          <PenPanel\r\n            updateDrawCtrl={(updated) => {\r\n              setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\r\n              drawRef.current?.mutateStyle(updated);\r\n            }}\r\n            drawCtrl={currDrawCtrl}\r\n          />\r\n        }\r\n      >\r\n        <Button icon={<BgColorsOutlined />} {...btnProps} />\r\n      </Popover>\r\n      <Button\r\n        icon={<CopyOutlined />}\r\n        onClick={() => drawRef.current?.duplicateSelected()}\r\n        {...btnProps}\r\n      />\r\n      <Button icon={<PictureOutlined />} onClick={getRaster} {...btnProps} />\r\n      <Button\r\n        danger\r\n        icon={<DeleteOutlined />}\r\n        onClick={() => drawRef.current?.deleteSelected()}\r\n        {...btnProps}\r\n      />\r\n    </div>,\r\n    document.querySelector(\".reader.container > header\")!\r\n  );\r\n};\r\n\r\nexport const TextTool: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n  visible: boolean;\r\n}> = ({ visible, drawRef }) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [color, setColor] = useState(allColors[0]!);\r\n  const [align, setAlign] = useState(\"center\");\r\n\r\n  useEffect(() => {\r\n    const pointText = drawRef.current?.pointText;\r\n    if (!pointText || !visible) return;\r\n    const { name, content, justification, fillColor } = pointText;\r\n    setAlign(justification);\r\n    if (name) {\r\n      setText(content);\r\n      setColor(fillColor?.toCSS(true) ?? allColors[0]!);\r\n    } else {\r\n      setText(\"\");\r\n      setColor(allColors[0]!);\r\n    }\r\n  }, [visible, drawRef]);\r\n\r\n  const fontColorBtn = (\r\n    <Popover\r\n      content={<ColorSelect color={color} setColor={setColor} />}\r\n      overlayStyle={{ width: 200 }}\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n    >\r\n      <Button\r\n        size=\"small\"\r\n        icon={<FontColorsOutlined className=\"font-icon\" style={{ color }} />}\r\n      />\r\n    </Popover>\r\n  );\r\n\r\n  const alignRadio = (\r\n    <Radio.Group\r\n      size=\"small\"\r\n      optionType=\"button\"\r\n      value={align}\r\n      buttonStyle=\"solid\"\r\n      onChange={(e) => setAlign(e.target.value)}\r\n      options={[\r\n        { label: <AlignLeftOutlined />, value: \"left\" },\r\n        { label: <AlignCenterOutlined />, value: \"center\" },\r\n        { label: <AlignRightOutlined />, value: \"right\" },\r\n      ]}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      visible={visible}\r\n      title=\"Insert text\"\r\n      onCancel={() => drawRef.current?.cancelText()}\r\n      onOk={() => {\r\n        const content = text.trim();\r\n        if (!content) return drawRef.current?.cancelText();\r\n        drawRef.current?.submitText(content, color, align);\r\n      }}\r\n      bodyStyle={{ paddingTop: 0 }}\r\n      destroyOnClose\r\n    >\r\n      <div className=\"insert-option\">\r\n        {fontColorBtn}\r\n        {alignRadio}\r\n      </div>\r\n      <TextArea\r\n        size=\"large\"\r\n        rows={3}\r\n        autoFocus\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n      />\r\n    </Modal>\r\n  );\r\n};\r\n","import React, {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport { useDrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { useMemoizedFn as useEvent } from \"ahooks\";\r\nimport { Draw, ActiveToolKey, DrawRefType } from \"component/Draw\";\r\nimport { SelectTool, TextTool } from \"pages/reader/tools/DrawTools\";\r\nimport { once, range } from \"lodash\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { DrawState } from \"lib/draw/DrawState\";\r\nimport { Map, Set } from \"immutable\";\r\n\r\nconst PageWrapperRaw: FC<{\r\n  drawState: DrawState;\r\n  teamStateMap?: Map<string, DrawState>;\r\n  thumbnail?: string;\r\n  pdfIndex?: number;\r\n  noteID?: string;\r\n  updateState?: (ds: DrawState) => void;\r\n  onViewChange?: (ratio: number) => void;\r\n  preview?: boolean;\r\n  preload?: boolean;\r\n  ignores?: Set<string>;\r\n  skipInView?: boolean;\r\n}> = ({\r\n  thumbnail,\r\n  drawState,\r\n  teamStateMap,\r\n  updateState,\r\n  pdfIndex,\r\n  noteID = \"\",\r\n  preview = false,\r\n  onViewChange,\r\n  preload = false,\r\n  ignores = Set<string>(),\r\n  skipInView = false,\r\n}) => {\r\n  const threshold = onViewChange && range(0, 1.2, 0.2);\r\n  const [ref, visible, entry] = useInView({ threshold, skip: skipInView });\r\n  useEffect(() => {\r\n    if (!onViewChange) return;\r\n    if (!entry || !visible) return onViewChange(0);\r\n    onViewChange(entry.intersectionRatio);\r\n  }, [visible, entry, onViewChange]);\r\n\r\n  const [fullImg, setFullImg] = useState<string>();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const loadImage = useCallback(\r\n    once(async () => {\r\n      if (!pdfIndex || !noteID) return;\r\n      const { getNotePageImage } = await import(\"lib/note/pdfImage\");\r\n      setFullImg(await getNotePageImage(noteID, pdfIndex));\r\n    }),\r\n    [pdfIndex, noteID]\r\n  );\r\n\r\n  const show = visible || preload;\r\n  useEffect(() => {\r\n    if (!preview && show) loadImage();\r\n  }, [show, preview, loadImage]);\r\n\r\n  const otherStates = useMemo(\r\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\r\n    [teamStateMap, ignores]\r\n  );\r\n\r\n  const imageLoaded = Boolean(fullImg || !pdfIndex);\r\n  const drawShow = show && imageLoaded;\r\n\r\n  const { height, width } = drawState;\r\n  const ratio = height / width;\r\n\r\n  return (\r\n    <div ref={ref} className=\"page-wrapper\">\r\n      <svg viewBox={`0 0 100 ${ratio * 100}`} />\r\n      {drawShow && (\r\n        <DrawWrapper\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          updateState={updateState}\r\n          imgSrc={fullImg || thumbnail}\r\n          preview={preview}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nPageWrapperRaw.displayName = \"PageWrapper\";\r\nexport const PageWrapper = React.memo(PageWrapperRaw);\r\n\r\nconst DrawWrapper: FC<{\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}> = ({ drawState, updateState, otherStates, preview = false, imgSrc }) => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const [activeTool, setActiveTool] = useState<ActiveToolKey>(\"\");\r\n  const drawRef = useRef<DrawRefType>(null);\r\n\r\n  const handleChange = useEvent(\r\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\r\n      if (!updateState) return;\r\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\r\n      if (newDS === drawState) return;\r\n      updateState(newDS);\r\n    }\r\n  );\r\n\r\n  return preview ? (\r\n    <Draw\r\n      drawState={drawState}\r\n      otherStates={otherStates}\r\n      imgSrc={imgSrc}\r\n      readonly\r\n    />\r\n  ) : (\r\n    <>\r\n      <Draw\r\n        drawState={drawState}\r\n        otherStates={otherStates}\r\n        onChange={handleChange}\r\n        imgSrc={imgSrc}\r\n        drawCtrl={drawCtrl}\r\n        ref={drawRef}\r\n        setActiveTool={setActiveTool}\r\n      />\r\n      <SelectTool drawRef={drawRef} visible={activeTool === \"select\"} />\r\n      <TextTool drawRef={drawRef} visible={activeTool === \"text\"} />\r\n    </>\r\n  );\r\n};\r\nDrawWrapper.displayName = \"DrawWrapper\";\r\n","import { PageWrapper } from \"./PageWrapper\";\r\nimport \"./page-wrapper.sass\";\r\nexport default PageWrapper;\r\n","import localforage from \"localforage\";\r\nimport React, {\r\n  FC,\r\n  PropsWithChildren,\r\n  useContext,\r\n  useDebugValue,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nexport interface DrawCtrl {\r\n  mode: \"draw\" | \"erase\" | \"select\" | \"text\";\r\n  finger: boolean;\r\n  lineWidth: number;\r\n  eraserWidth: number;\r\n  color: string;\r\n  highlight: boolean;\r\n  lasso: boolean;\r\n  pixelEraser: boolean;\r\n  widthList: number[];\r\n}\r\n\r\nexport const defaultWidthList = [10, 20, 30, 50];\r\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\r\n  mode: \"draw\",\r\n  finger: true,\r\n  lineWidth: 10,\r\n  eraserWidth: 10,\r\n  color: \"#000000\",\r\n  highlight: false,\r\n  lasso: true,\r\n  pixelEraser: false,\r\n  widthList: defaultWidthList,\r\n};\r\n\r\nasync function getDrawCtrl() {\r\n  let drawCtrl = await localforage.getItem<DrawCtrl>(\"DRAW_CTRL\");\r\n  if (!drawCtrl) {\r\n    drawCtrl = defaultDrawCtrl;\r\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n  }\r\n  return drawCtrl;\r\n}\r\n\r\nasync function saveDrawCtrl(drawCtrl: DrawCtrl) {\r\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n}\r\n\r\nconst DrawCtrlContext = React.createContext({\r\n  drawCtrl: defaultDrawCtrl,\r\n  updateDrawCtrl: (() => {}) as (updated: Partial<DrawCtrl>) => void,\r\n});\r\n\r\nexport function useDrawCtrl() {\r\n  const { drawCtrl } = useContext(DrawCtrlContext);\r\n  useDebugValue(drawCtrl);\r\n  return drawCtrl;\r\n}\r\n\r\nexport function useUpdateDrawCtrl() {\r\n  const { updateDrawCtrl } = useContext(DrawCtrlContext);\r\n  return updateDrawCtrl;\r\n}\r\n\r\nexport const DrawCtrlProvider: FC<PropsWithChildren> = ({ children }) => {\r\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\r\n  useEffect(() => {\r\n    getDrawCtrl().then(setDrawCtrl);\r\n  }, []);\r\n\r\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\r\n    setDrawCtrl((prev) => {\r\n      const newCtrl = { ...prev, ...updated };\r\n      saveDrawCtrl(newCtrl);\r\n      return newCtrl;\r\n    });\r\n  };\r\n  return (\r\n    <DrawCtrlContext.Provider value={{ drawCtrl, updateDrawCtrl }}>\r\n      {children}\r\n    </DrawCtrlContext.Provider>\r\n  );\r\n};\r\n","export function createVirtualCanvas(width: number, height: number) {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const context = canvas.getContext(\"2d\");\r\n  if (!context) {\r\n    throw new Error(\"can't get virtual canvas context\");\r\n  }\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  return { canvas, context };\r\n}\r\n\r\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  const ctx = canvas.getContext('2d');\r\n  ctx?.clearRect(0, 0, 1, 1);\r\n}\r\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\r\nimport { defaultWidthList, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorCirle } from \"component/ColorCircle\";\r\nimport { WIDTH } from \"lib/draw/DrawState\";\r\nimport { Popover, Segmented, Slider } from \"antd\";\r\nimport { allColors } from \"lib/color\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport IconFont from \"component/IconFont\";\r\nimport { List } from \"immutable\";\r\nimport \"./penPanel.sass\";\r\n\r\nexport const PenPanel: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n}> = ({ updateDrawCtrl, drawCtrl }) => {\r\n  const { highlight, color } = drawCtrl;\r\n  const [panelBlur, setPanelBlur] = useState(false);\r\n\r\n  return (\r\n    <div className=\"pen-panel\" data-blur={panelBlur} data-hi={highlight}>\r\n      <div className=\"pen-status\">\r\n        <WidthSelect\r\n          updateDrawCtrl={updateDrawCtrl}\r\n          drawCtrl={drawCtrl}\r\n          setPanelBlur={setPanelBlur}\r\n        />\r\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\r\n      </div>\r\n      <ColorSelect\r\n        color={color || \"\"}\r\n        setColor={(c) => updateDrawCtrl({ color: c })}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const WidthSelect: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n  setPanelBlur?: Setter<boolean>;\r\n  field?: \"lineWidth\" | \"eraserWidth\";\r\n}> = ({\r\n  updateDrawCtrl,\r\n  drawCtrl,\r\n  setPanelBlur = () => {},\r\n  field = \"lineWidth\",\r\n}) => {\r\n  const currWidth = drawCtrl[field];\r\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\r\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\r\n\r\n  const chosen = useMemo(\r\n    () => widthList.indexOf(currWidth ?? -1),\r\n    [currWidth, widthList]\r\n  );\r\n\r\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\r\n  useEffect(() => {\r\n    if (popShow.includes(true)) setPanelBlur(true);\r\n    else setPanelBlur(false);\r\n  }, [popShow, setPanelBlur]);\r\n\r\n  const realSizeStyle = (width: number) =>\r\n    ({\r\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width})`,\r\n    } as CSSProperties);\r\n\r\n  const options = [\r\n    { value: -1, label: null },\r\n    ...widthList.map((width, index) => ({\r\n      value: index,\r\n      label: (\r\n        <Popover\r\n          visible={popShow.get(index)}\r\n          onVisibleChange={(v) => setPopShow((prev) => prev.set(index, v))}\r\n          trigger={chosen === index ? [\"click\"] : []}\r\n          placement=\"bottom\"\r\n          destroyTooltipOnHide\r\n          content={\r\n            <Slider\r\n              min={5}\r\n              max={100}\r\n              className=\"ctrl-slider\"\r\n              defaultValue={width}\r\n              onAfterChange={(w) => {\r\n                if (widthList.includes(w)) {\r\n                  setPopShow((prev) => prev.set(index, false));\r\n                  return updateDrawCtrl({ [field]: w });\r\n                }\r\n                const newWL = widthList.slice();\r\n                newWL[index] = w;\r\n                updateDrawCtrl({ widthList: newWL, [field]: w });\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          <div className=\"circle-wrapper\" style={realSizeStyle(width)}>\r\n            <ColorCirle className={\"width-circle \" + field} color={color} />\r\n          </div>\r\n        </Popover>\r\n      ),\r\n    })),\r\n  ];\r\n\r\n  return (\r\n    <Segmented\r\n      className=\"width-seg\"\r\n      value={chosen}\r\n      options={options}\r\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 10 })}\r\n    />\r\n  );\r\n};\r\n\r\nconst HighlightSwitch: FC<{\r\n  checked?: boolean;\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ checked = false, updateDrawCtrl }) => {\r\n  return (\r\n    <label className=\"hi-wrapper\">\r\n      <input\r\n        type=\"checkbox\"\r\n        name=\"highlight\"\r\n        checked={checked}\r\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\r\n      />\r\n      <div className=\"hi-switch\">\r\n        <IconFont type=\"icon-Highlight\" />\r\n      </div>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport const ColorSelect: FC<{\r\n  color: string;\r\n  setColor: (color: string) => void;\r\n}> = ({ setColor, color }) => (\r\n  <div className=\"color-select\">\r\n    {allColors.map((c) => (\r\n      <label key={c}>\r\n        <input\r\n          checked={color === c}\r\n          type=\"radio\"\r\n          name=\"color\"\r\n          onChange={(e) => e.target.checked && setColor(c)}\r\n        />\r\n        <div\r\n          data-color={c}\r\n          className=\"circle\"\r\n          style={{ backgroundColor: c, borderColor: c }}\r\n        />\r\n      </label>\r\n    ))}\r\n  </div>\r\n);\r\n"],"names":["createFromIconfontCN","scriptUrl","getRotateCursorImage","cache","Map","createVirtualCanvas","canvas","context","image","Image","src","angle","Math","round","cached","get","translate","rotate","PI","drawImage","data","toDataURL","clearRect","resetTransform","set","getRotateCurcor","usePreventTouch","allowFinger","isTouch","useRef","checkPoniter","e","isPrimary","current","pointerType","preventTouch","touch","touches","touchType","isApplePencil","length","isEventValid","stopPropagation","onPointerDownCapture","onPointerMoveCapture","onTouchStartCapture","onTouchMoveCapture","DrawRaw","React","ref","drawState","otherStates","onChange","drawCtrl","defaultDrawCtrl","readonly","imgSrc","setActiveTool","width","height","mode","finger","lasso","eraserWidth","canvasEl","scope","paper","useState","group","setGroup","usePaperItem","path","setPath","rect","setRect","rotateHandle","setRotateHandle","useEffect","cvs","scp","setup","settings","handleSize","hitTolerance","forEach","Layer","visible","project","layers","activate","Tool","view","remove","releaseCanvas","rects","paintRects","r","useSize","canvasWidth","ratio","zero","Point","viewSize","Size","multiply","scale","l","update","raster","Raster","addChild","sendToBack","onLoad","fitBounds","bringToFront","mergedStrokes","useMemo","DrawState","getStrokeList","renderSlow","tempGroup","layer","stroke","self","hasStroke","uid","item","paintStroke","push","timeBeforeRender","Date","now","requestAnimationFrame","duration","removeChildren","hitRef","selected","setSelected","paperMode","chosenIDs","setChosenIDs","chosenItems","IDSet","Set","filter","has","name","resetSelect","useCallback","undefined","setRaster","pinching","rasterizeLayer","useClip","l0","l1","projSize","clipSize","size","clip","Path","position","center","clipMask","prevClip","firstChild","replaceWith","dpi","devicePixelRatio","resolution","rasterize","unrasterizeLayer","downPath","startStroke","point","downRect","startRect","handleDown","draw","erase","select","contains","hitRes","hitTest","segments","text","t","getClickedText","startText","setPointText","dragPath","add","smooth","handleDrag","x","y","s1","s2","s3","segment","bounds","axis","subtract","line","setCursor","moveP","baseP","next","diagonal","strokeWidth","rBaseP","delta","pointText","topCenter","bottomRight","tool","maxDistance","erased","replaced","handelToolDrag","prevVisible","hitTestAll","class","tolerance","topItem","parent","pixelEraser","radius","circle","insert","sub","trace","opacity","guide","handleUp","simplify","pathData","exportJSON","prev","items","Array","from","clear","splitters","map","flattenCP","i","erasedList","selection","abs","area","closePath","moveDash","checkLasso","link","lastSegment","updateMutation","handleSelectedCursor","cursor","lineWidth","half","getCircleCursor","handleMove","handleKeyUp","includes","key","deleteSelected","handler","onMouseDown","onMouseDrag","onMouseUp","onMouseMove","onKeyUp","mutations","p","mutateStyle","updated","updateGroupStyle","duplicateSelected","transP","divide","copies","clone","g","Group","addTo","cancelText","submitText","color","justification","content","fillColor","Color","useImperativeHandle","preventDefault","document","addEventListener","removeEventListener","usePinch","memo","offset","first","last","origin","lastScale","lastOrigin","elPos","originRawP","getBoundingClientRect","originViewP","originPorjP","viewToProject","zoom","dScale","scaleView","then","putCenterBack","scaleBounds","max","min","rubberband","target","touchHandler","className","style","displayName","Draw","tuple","useDebugValue","cacheMap","WeakMap","importJSON","console","error","l2","bgRect","clip1","clip2","clipped","onFrame","highlight","strokeColor","alpha","blendMode","strokeJoin","strokeCap","dashOffset","dashArray","Promise","res","aniCount","pow","viewW","viewH","projW","projH","minX","minY","maxX","maxY","getCenterTranslate","deltaX","deltaY","dP","move","isInside","compare","intersects","checkedP","newColor","fill","fontSize","cp","isEmpty","children","flat","SelectTool","drawRef","CSSTransition","timeout","in","unmountOnExit","SelectToolContent","btnProps","type","shape","currDrawCtrl","setCurrDrawCtrl","createPortal","trigger","placement","getPopupContainer","parentElement","destroyTooltipOnHide","PenPanel","updateDrawCtrl","icon","BgColorsOutlined","CopyOutlined","onClick","PictureOutlined","imageData","Modal","title","alt","okText","onOk","saveAs","danger","DeleteOutlined","querySelector","TextTool","setText","allColors","setColor","align","setAlign","toCSS","fontColorBtn","overlayStyle","FontColorsOutlined","alignRadio","optionType","value","buttonStyle","options","label","AlignLeftOutlined","AlignCenterOutlined","AlignRightOutlined","onCancel","trim","bodyStyle","paddingTop","destroyOnClose","TextArea","rows","autoFocus","PageWrapperRaw","thumbnail","teamStateMap","updateState","pdfIndex","noteID","preview","onViewChange","preload","ignores","skipInView","threshold","range","useInView","skip","entry","intersectionRatio","fullImg","setFullImg","loadImage","once","getNotePageImage","show","deleteAll","toList","toArray","imageLoaded","Boolean","drawShow","viewBox","DrawWrapper","PageWrapper","useDrawCtrl","activeTool","handleChange","useEvent","arg","newDS","defaultWidthList","widthList","getDrawCtrl","localforage","saveDrawCtrl","DrawCtrlContext","useContext","useUpdateDrawCtrl","DrawCtrlProvider","setDrawCtrl","Provider","newCtrl","createElement","getContext","Error","ctx","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","c","field","currWidth","chosen","indexOf","List","popShow","setPopShow","realSizeStyle","WIDTH","index","onVisibleChange","v","defaultValue","onAfterChange","w","newWL","slice","IconFont","backgroundColor","borderColor"],"sourceRoot":""}