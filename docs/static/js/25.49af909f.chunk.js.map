{"version":3,"file":"static/js/25.49af909f.chunk.js","mappings":"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","sources":["component/IconFont.tsx","component/Draw/cursor/cursor.ts","component/Draw/touch.ts","component/Draw/Draw.tsx","pages/reader/tools/DrawTools.tsx","component/PageWrapper/PageWrapper.tsx","component/PageWrapper/index.tsx","lib/draw/DrawCtrl.tsx","lib/draw/canvas.ts","pages/reader/tools/PenPanel.tsx"],"sourcesContent":["import { createFromIconfontCN } from \"@ant-design/icons\";\r\n\r\nexport default createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_3181679_yo844n7qgns.js\",\r\n});\r\n","import { createVirtualCanvas } from \"lib/draw/canvas\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport rotateImg from \"./rotate.png\";\r\n\r\nexport const getCircleCursor = (drawCtrl: DrawCtrl, ratio: number) => {\r\n  const { lineWidth, eraserWidth, mode } = drawCtrl;\r\n  const size = ratio * (mode === \"erase\" ? eraserWidth : lineWidth);\r\n  if (size < 5) return \"crosshair\";\r\n  const half = size / 2;\r\n  return `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23FFF7\" width=\"${size}\" height=\"${size}\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"5\"/></svg>') ${half} ${half}, auto`;\r\n};\r\n\r\nconst getRotateCursorImage = (() => {\r\n  const cache = new Map<number, string>();\r\n  const { canvas, context } = createVirtualCanvas(44, 44);\r\n  const image = new Image();\r\n  image.src = rotateImg;\r\n  return (angle: number) => {\r\n    angle = Math.round(angle / 10) * 10;\r\n    const cached = cache.get(angle);\r\n    if (cached) return cached;\r\n    context.translate(22, 22);\r\n    context.rotate((angle * Math.PI) / 180);\r\n    context.drawImage(image, -22, -22);\r\n    const data = canvas.toDataURL();\r\n    context.clearRect(-22, -22, 44, 44);\r\n    context.resetTransform();\r\n    cache.set(angle, data);\r\n    return data;\r\n  };\r\n})();\r\n\r\nexport const getRotateCurcor = (angle: number) => {\r\n  return `url(${getRotateCursorImage(angle)}) 22 22, auto`;\r\n};\r\n","import { PointerEvent, TouchEvent, useEffect, useRef } from \"react\";\r\n\r\ntype iOSTouch = Touch & {\r\n  force?: number;\r\n  touchType?: \"stylus\" | \"direct\";\r\n};\r\n\r\nexport function isApplePencil(e: TouchEvent) {\r\n  const touch = e.touches[0] as iOSTouch;\r\n  return touch?.touchType === \"stylus\";\r\n}\r\n\r\nexport function usePreventTouch(\r\n  allowFinger: boolean\r\n): React.HTMLAttributes<HTMLDivElement> {\r\n  const isTouch = useRef(false);\r\n  const checkPoniter = (e: PointerEvent) =>\r\n    e.isPrimary && (isTouch.current = e.pointerType === \"touch\");\r\n\r\n  const isEventValid = (e: TouchEvent) =>\r\n    !isTouch.current ||\r\n    isApplePencil(e) ||\r\n    (allowFinger && e.touches.length === 1);\r\n\r\n  const preventTouch = (e: TouchEvent) =>\r\n    isEventValid(e) || e.stopPropagation();\r\n\r\n  return {\r\n    onPointerDownCapture: checkPoniter,\r\n    onPointerMoveCapture: checkPoniter,\r\n    onTouchStartCapture: preventTouch,\r\n    onTouchMoveCapture: preventTouch,\r\n  };\r\n}\r\n\r\nexport function usePreventGesture() {\r\n  useEffect(() => {\r\n    const handler = (e: Event) => e.preventDefault();\r\n    document.addEventListener(\"gesturestart\", handler);\r\n    document.addEventListener(\"gesturechange\", handler);\r\n    document.addEventListener(\"gestureend\", handler);\r\n    return () => {\r\n      document.removeEventListener(\"gesturestart\", handler);\r\n      document.removeEventListener(\"gesturechange\", handler);\r\n      document.removeEventListener(\"gestureend\", handler);\r\n    };\r\n  }, []);\r\n}\r\n","import React, {\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  Dispatch,\r\n  useEffect,\r\n  useCallback,\r\n  useDebugValue,\r\n  SetStateAction,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport paper, {\r\n  Path,\r\n  Size,\r\n  Point,\r\n  Color,\r\n  Raster,\r\n  Layer,\r\n  Rectangle,\r\n} from \"paper/dist/paper-core\";\r\nimport { usePinch } from \"@use-gesture/react\";\r\nimport useSize from \"@react-hook/size\";\r\nimport { DrawState, Mutation, Splitter, Stroke } from \"lib/draw/DrawState\";\r\nimport { defaultDrawCtrl, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { releaseCanvas } from \"lib/draw/canvas\";\r\nimport { getCircleCursor, getRotateCurcor } from \"./cursor\";\r\nimport { usePreventTouch, usePreventGesture } from \"./touch\";\r\n\r\nexport type ActiveToolKey = \"\" | \"select\" | \"text\";\r\nexport interface DrawRefType {\r\n  deleteSelected: () => void;\r\n  duplicateSelected: () => void;\r\n  rasterizeSelected: () => string;\r\n  mutateStyle: (updated: Partial<DrawCtrl>) => void;\r\n  submitText: (text: string, color?: string, justification?: string) => void;\r\n  cancelText: () => void;\r\n  pointText?: paper.PointText;\r\n}\r\ninterface DrawPropType {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  onChange?: Dispatch<SetStateAction<DrawState>>;\r\n  setActiveTool?: Dispatch<SetStateAction<ActiveToolKey>>;\r\n  drawCtrl?: DrawCtrl;\r\n  readonly?: boolean;\r\n  imgSrc?: string;\r\n}\r\n\r\nconst HIT_TOLERANCE = 20;\r\nconst P_ZERO = new Point(0, 0);\r\n\r\nconst DrawRaw = React.forwardRef<DrawRefType, DrawPropType>(\r\n  (\r\n    {\r\n      drawState,\r\n      otherStates,\r\n      onChange = () => {},\r\n      drawCtrl = defaultDrawCtrl,\r\n      readonly = false,\r\n      imgSrc,\r\n      setActiveTool = () => {},\r\n    },\r\n    ref\r\n  ) => {\r\n    const { width, height } = drawState;\r\n    const projSize = useMemo(() => new Size(width, height), [width, height]);\r\n    const { mode, finger, lasso, eraserWidth } = drawCtrl;\r\n\r\n    const canvasEl = useRef<HTMLCanvasElement>(null);\r\n    const scope = useRef(new paper.PaperScope());\r\n    const [group, setGroup] = useState<paper.Item[]>([]);\r\n    const [path, setPath] = usePaperItem<paper.Path>();\r\n    const [rect, setRect] = usePaperItem<paper.Path.Rectangle>();\r\n    const [rotateHandle, setRotateHandle] = usePaperItem<paper.Path>();\r\n\r\n    useEffect(() => {\r\n      const cvs = canvasEl.current;\r\n      const scp = scope.current;\r\n      if (!cvs) return;\r\n\r\n      scp.setup(cvs);\r\n      scp.settings.handleSize = 10;\r\n      scp.settings.hitTolerance = HIT_TOLERANCE;\r\n      [0, 1, 2].forEach(() => (new Layer().visible = false));\r\n      scp.project.layers[2]?.activate();\r\n      new scp.Tool();\r\n\r\n      return () => {\r\n        scp.view?.remove();\r\n        releaseCanvas(cvs);\r\n      };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      scope.current.activate();\r\n      const { layers } = scope.current.project;\r\n      const rects = paintRects(layers, projSize);\r\n      return () => rects.forEach((r) => r.remove());\r\n    }, [projSize]);\r\n\r\n    const [canvasWidth] = useSize(canvasEl);\r\n    const ratio = canvasWidth / width;\r\n    useEffect(() => {\r\n      if (!ratio) return;\r\n      const scp = scope.current;\r\n      scp.view.viewSize = projSize.multiply(ratio);\r\n      scp.view.scale(ratio, P_ZERO);\r\n      scp.project.layers.forEach((l) => (l.visible = true));\r\n      scp.view.update();\r\n\r\n      return () => scp.view?.scale(1 / ratio, P_ZERO);\r\n    }, [ratio, projSize]);\r\n\r\n    const [imgRaster, setImgRaster] = usePaperItem();\r\n    useEffect(() => {\r\n      if (!imgSrc) return;\r\n      scope.current.activate();\r\n      const raster = new Raster(imgSrc);\r\n      raster.project.layers[0]?.addChild(raster);\r\n      raster.sendToBack();\r\n      raster.onLoad = () => {\r\n        raster.view.update();\r\n        raster.fitBounds(new Rectangle(projSize));\r\n        raster.bringToFront();\r\n      };\r\n      setImgRaster(raster);\r\n    }, [imgSrc, projSize, setImgRaster]);\r\n\r\n    const mergedStrokes = useMemo(\r\n      () =>\r\n        otherStates\r\n          ? DrawState.mergeStates(drawState, ...otherStates)\r\n          : drawState.getStrokeList(),\r\n      [drawState, otherStates]\r\n    );\r\n\r\n    const renderSlow = useRef(false);\r\n    const deferRender = useRef(false);\r\n    const deferTimerID = useRef(0);\r\n\r\n    useEffect(() => {\r\n      const layer = scope.current.project.layers[1];\r\n      if (!layer) return;\r\n      const render = () => {\r\n        const tempGroup: paper.Item[] = [];\r\n        const timeBeforeRender = performance.now();\r\n        scope.current.activate();\r\n        // clean-up layer_1 except the clip mask.\r\n        layer.removeChildren(1);\r\n        mergedStrokes.forEach((stroke) => {\r\n          const self = drawState.hasStroke(stroke.uid);\r\n          const item = paintStroke(stroke, layer, !self);\r\n          if (self) tempGroup.push(item);\r\n        });\r\n        setGroup(tempGroup);\r\n\r\n        unrasterizeCanvas();\r\n        pathClones.current.forEach((c) => c.remove());\r\n        pathClones.current = [];\r\n\r\n        scope.current.view.update();\r\n        const duration = performance.now() - timeBeforeRender;\r\n        renderSlow.current = duration > 16;\r\n      };\r\n\r\n      if (deferRender.current) {\r\n        deferTimerID.current = window.setTimeout(render, 1000);\r\n      } else render();\r\n\r\n      // cancel previous render timer.\r\n      return () => window.clearTimeout(deferTimerID.current);\r\n    }, [mergedStrokes, drawState]);\r\n    useEffect(() => void (deferRender.current = false), [drawState]);\r\n\r\n    const hitRef = useRef<paper.HitResult>();\r\n    const [selected, setSelected] = useState(false);\r\n    const paperMode = mode === \"select\" && selected ? \"selected\" : mode;\r\n    const [chosenIDs, setChosenIDs] = useState<string[]>([]);\r\n    const chosenItems = useMemo(() => {\r\n      const IDSet = new Set(chosenIDs);\r\n      return group.filter((item) => IDSet.has(item.name));\r\n    }, [group, chosenIDs]);\r\n\r\n    const resetSelect = useCallback(() => {\r\n      setSelected(false);\r\n      setPath(undefined);\r\n      setRect(undefined);\r\n      setRotateHandle(undefined);\r\n    }, [setPath, setRect, setRotateHandle]);\r\n\r\n    useEffect(() => {\r\n      if (mode === \"select\") return resetSelect;\r\n    }, [mode, resetSelect]);\r\n    useEffect(() => resetSelect, [lasso, resetSelect]);\r\n\r\n    useEffect(() => {\r\n      if (!selected) return;\r\n      return () => {\r\n        setChosenIDs([]);\r\n        setActiveTool(\"\");\r\n      };\r\n    }, [selected, setActiveTool]);\r\n\r\n    const layerRaster = useRef<paper.Raster>();\r\n    const rasterizeLayer = (clip: paper.Path, force = false) => {\r\n      if (!renderSlow.current && !force) return;\r\n      const [l0, l1] = scope.current.project.layers;\r\n      if (!l0 || !l1) return;\r\n      l1.visible = true;\r\n      clip.clipMask = true;\r\n      const prevClip = l1.firstChild;\r\n      prevClip.replaceWith(clip);\r\n      imgRaster?.insertAbove(clip);\r\n\r\n      const dpi = 72 * devicePixelRatio;\r\n      const resolution = (canvasWidth / clip.bounds.width) * dpi;\r\n      let raster = layerRaster.current;\r\n      raster = layerRaster.current = l1.rasterize({ raster, resolution });\r\n      raster.visible = true;\r\n\r\n      l1.visible = false;\r\n      clip.replaceWith(prevClip);\r\n      imgRaster?.addTo(l0);\r\n    };\r\n    const unrasterizeLayer = () => {\r\n      scope.current.activate();\r\n      const [, l1] = scope.current.project.layers;\r\n      const lr = layerRaster.current;\r\n      if (!l1 || !lr) return;\r\n      l1.visible = true;\r\n      lr.visible = false;\r\n    };\r\n\r\n    const canvasRaster = useRef<paper.Raster>();\r\n    // raster changes with the size of canvas element\r\n    useEffect(\r\n      () => () => {\r\n        canvasRaster.current?.remove();\r\n        canvasRaster.current = undefined;\r\n      },\r\n      [canvasWidth]\r\n    );\r\n    const rasterizeCanvas = () => {\r\n      if (!renderSlow.current) return;\r\n      // rasterize the canvas only once\r\n      if (canvasRaster.current?.visible === true) return;\r\n      scope.current.activate();\r\n      const { view } = scope.current;\r\n      // create a raster of the canvas element's size only once.\r\n      const raster = (canvasRaster.current ??= new Raster(\r\n        view.viewSize.multiply(window.devicePixelRatio)\r\n      ));\r\n      raster.drawImage(view.element, P_ZERO);\r\n      raster.fitBounds(view.bounds);\r\n      raster.visible = true;\r\n      raster.opacity = process.env.NODE_ENV === \"production\" ? 1 : 0.8;\r\n      const [, l1] = scope.current.project.layers;\r\n      l1 && (l1.visible = false);\r\n    };\r\n    const unrasterizeCanvas = () => {\r\n      scope.current.activate();\r\n      deferRender.current = false;\r\n      const [, l1] = scope.current.project.layers;\r\n      const cr = canvasRaster.current;\r\n      const lr = layerRaster.current;\r\n      if (!l1 || !cr) return;\r\n      cr.visible = false;\r\n      // keep layer_1 hidden unless all 2 raster is hidden.\r\n      if (lr?.visible !== true) l1.visible = true;\r\n    };\r\n\r\n    const downPath = (e: paper.MouseEvent) => {\r\n      rasterizeCanvas();\r\n      setPath(startStroke(drawCtrl, e.point, renderSlow.current));\r\n    };\r\n    const downRect = (e: paper.MouseEvent) => {\r\n      rasterizeCanvas();\r\n      setRect(startRect(e.point));\r\n    };\r\n\r\n    const handleDown = {\r\n      draw(e: paper.MouseEvent) {\r\n        deferRender.current = renderSlow.current;\r\n        downPath(e);\r\n      },\r\n      erase: downPath,\r\n      select: lasso ? downPath : downRect,\r\n      selected(e: paper.MouseEvent) {\r\n        if (lasso) {\r\n          // if the point is outside of selection, reset selection\r\n          if (path?.contains(e.point)) return;\r\n          setSelected(false);\r\n          downPath(e);\r\n        } else {\r\n          // check if the point hit the segment point.\r\n          let hitRes =\r\n            rect?.hitTest(e.point, { segments: true }) ??\r\n            rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n          hitRef.current = hitRes;\r\n          if (hitRes) return;\r\n\r\n          // if the point is outside of selection, reset selection\r\n          if (rect?.contains(e.point)) return;\r\n          setRotateHandle(undefined);\r\n          setSelected(false);\r\n          downRect(e);\r\n        }\r\n      },\r\n      text(e: paper.MouseEvent) {\r\n        const layer = scope.current.project.layers[1];\r\n        if (!layer) return;\r\n        rasterizeCanvas();\r\n        const t = getClickedText(layer, e.point) ?? startText(e.point);\r\n        setPointText(t);\r\n      },\r\n    }[paperMode];\r\n\r\n    const dragPath = (e: paper.MouseEvent) => {\r\n      // cancel previous render timer.\r\n      window.clearTimeout(deferTimerID.current);\r\n      path?.add(e.point);\r\n      path?.smooth();\r\n    };\r\n    const resizeRect = (e: paper.MouseEvent) => {\r\n      if (!rect) return;\r\n      const { x, y } = e.point;\r\n      const [, s1, s2, s3] = rect.segments;\r\n      if (!s1 || !s2 || !s3) return;\r\n      s1.point.x = x;\r\n      s2.point = e.point;\r\n      s3.point.y = y;\r\n      rect.selected = true;\r\n    };\r\n\r\n    const handleDrag = {\r\n      draw: dragPath,\r\n      erase: dragPath,\r\n      select: lasso ? dragPath : resizeRect,\r\n      selected(e: paper.MouseEvent) {\r\n        const hitRes = hitRef.current;\r\n        if (hitRes?.segment && rect && rotateHandle) {\r\n          const segment = hitRes.segment;\r\n          const rotating = segment.selected;\r\n          if (rotating) {\r\n            // rotate select items\r\n            const { center } = rect.bounds;\r\n            const axis = segment.point.subtract(center);\r\n            const line = e.point.subtract(center);\r\n            setCursor(getRotateCurcor(line.angle));\r\n            const angle = line.angle - axis.angle;\r\n            rect.rotate(angle, center);\r\n            rotateHandle.rotate(angle, center);\r\n            chosenItems.forEach((item) => item?.rotate(angle, center));\r\n          } else {\r\n            // resize selected items\r\n            const moveP = segment.point;\r\n            const baseP = segment.next.next.point;\r\n            const diagonal = moveP.subtract(baseP);\r\n            const projection = e.point.subtract(baseP).project(diagonal);\r\n            const scale = projection.x / diagonal.x;\r\n            if (scale < 0) return;\r\n\r\n            rect.scale(scale, baseP);\r\n            chosenItems.forEach((item) => {\r\n              item.scale(scale, baseP);\r\n              item.strokeWidth *= scale;\r\n            });\r\n            rotateHandle.scale(scale, baseP);\r\n            const rBaseP = rotateHandle.segments[0]?.point;\r\n            if (!rBaseP) return;\r\n            rotateHandle.scale(100 / rotateHandle.length, rBaseP);\r\n          }\r\n        } else {\r\n          // move selected items\r\n          chosenItems.forEach((item) => item.translate(e.delta));\r\n          path?.translate(e.delta);\r\n          rect?.translate(e.delta);\r\n          rotateHandle?.translate(e.delta);\r\n        }\r\n      },\r\n      text(e: paper.MouseEvent) {\r\n        if (!pointText || pointText.name) return;\r\n        const { topCenter, bottomRight } = pointText.bounds;\r\n        const diagonal = bottomRight.subtract(topCenter);\r\n        const projection = e.point.subtract(topCenter).project(diagonal);\r\n        const scale = projection.x / diagonal.x;\r\n        if (scale < 0) return;\r\n        pointText.scale(scale, topCenter);\r\n      },\r\n    }[paperMode];\r\n\r\n    useEffect(() => {\r\n      scope.current.tool.maxDistance = eraserWidth;\r\n    }, [eraserWidth]);\r\n    const erased = useRef(new Set<string>());\r\n    const replaced = useRef(new Map<string, paper.Item>());\r\n\r\n    const itemGrid = useMemo(() => {\r\n      if (!/^(erase|select)$/.test(mode)) return [];\r\n      const wnum = Math.ceil(width / 100);\r\n      const hnum = Math.ceil(height / 100);\r\n      const grid = Array.from({ length: wnum }, () =>\r\n        Array.from({ length: hnum }, () => new Set<paper.Item>())\r\n      );\r\n      group.forEach((item) => setGridItem(grid, item));\r\n      return grid;\r\n    }, [group, width, height, mode]);\r\n\r\n    const handleToolDrag = (e: paper.ToolEvent) => {\r\n      const layer = scope.current.project.layers[1];\r\n      if (paperMode !== \"erase\" || !layer) return;\r\n      const ew = eraserWidth;\r\n\r\n      const hitOption = { class: paper.Path, stroke: true, tolerance: ew / 2 };\r\n      const bounds = new Rectangle(e.point.subtract(ew), new Size(ew, ew));\r\n\r\n      getGridItems(itemGrid, bounds).forEach((item) => {\r\n        if (erased.current.has(item.name)) return;\r\n        item.hitTestAll(e.point, hitOption)?.forEach(({ item }) => {\r\n          if (!(item instanceof paper.Path)) return;\r\n          let topItem: paper.PathItem = item;\r\n          while (topItem.parent !== layer) {\r\n            if (!(topItem.parent instanceof paper.PathItem)) break;\r\n            topItem = topItem.parent;\r\n          }\r\n          const { name } = topItem;\r\n\r\n          if (drawCtrl.pixelEraser) {\r\n            const radius = (ew + item.strokeWidth) / 2;\r\n            const circle = new Path.Circle({\r\n              center: e.point,\r\n              radius,\r\n              insert: false,\r\n            });\r\n\r\n            const sub = item.subtract(circle, { trace: false });\r\n            item.replaceWith(sub);\r\n            if (topItem === item) {\r\n              setGridItem(itemGrid, sub, item);\r\n              topItem = sub;\r\n            }\r\n            replaced.current.set(name, topItem);\r\n          } else {\r\n            topItem.opacity = 0.5;\r\n            topItem.guide = true;\r\n            erased.current.add(name);\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    const pathClones = useRef<paper.Path[]>([]);\r\n    const handleUp = {\r\n      draw() {\r\n        if (!path || path.segments.length <= 1) {\r\n          // if canvas is clicked without any path in queue.\r\n          if (!pathClones.current.length) unrasterizeCanvas();\r\n          return;\r\n        }\r\n        path.simplify();\r\n        if (renderSlow.current) pathClones.current.push(path.clone());\r\n        const pathData = path.exportJSON();\r\n        onChange((prev) => DrawState.addStroke(prev, pathData));\r\n        setPath(undefined);\r\n      },\r\n      erase() {\r\n        unrasterizeCanvas();\r\n        setPath(undefined);\r\n        if (drawCtrl.pixelEraser) {\r\n          const items = Array.from(replaced.current);\r\n          replaced.current.clear();\r\n          const splitters: Splitter[] = items.map(([uid, item]) => {\r\n            const paths = flattenCP(item);\r\n            return [uid, paths.map((i) => i.exportJSON())];\r\n          });\r\n          if (!splitters.length) return;\r\n          onChange((prev) => DrawState.splitStrokes(prev, splitters));\r\n        } else {\r\n          const erasedList = Array.from(erased.current);\r\n          erased.current.clear();\r\n          if (!erasedList.length) return;\r\n          onChange((prev) => DrawState.eraseStrokes(prev, erasedList));\r\n        }\r\n      },\r\n      select() {\r\n        unrasterizeCanvas();\r\n        let selection: string[];\r\n        if (lasso) {\r\n          if (!path || Math.abs(path.area) < 1_000) return setPath(undefined);\r\n          path.closePath();\r\n          path.simplify();\r\n          if (!renderSlow.current) moveDash(path);\r\n          const items = getGridItems(itemGrid, path.bounds);\r\n          selection = checkLasso(items, path);\r\n        } else {\r\n          if (!rect || Math.abs(rect.area) < 1_000) return setRect(undefined);\r\n          const items = getGridItems(itemGrid, rect.bounds);\r\n          selection = checkLasso(items, rect);\r\n          const link = new Path();\r\n          const { topCenter } = rect.bounds;\r\n          link.add(topCenter, topCenter.subtract(new Point(0, 100)));\r\n          link.lastSegment.selected = true;\r\n          setRotateHandle(link);\r\n        }\r\n        setSelected(true);\r\n        setChosenIDs(selection);\r\n        setActiveTool(\"select\");\r\n      },\r\n      selected(e: paper.MouseEvent) {\r\n        updateMutation();\r\n        handleSelectedCursor(e);\r\n      },\r\n      text() {\r\n        unrasterizeCanvas();\r\n        setActiveTool(\"text\");\r\n      },\r\n    }[paperMode];\r\n\r\n    const [cursor, setCursor] = useState(\"auto\");\r\n    useEffect(() => {\r\n      if (paperMode === \"text\" || paperMode === \"select\") {\r\n        setCursor(\"crosshair\");\r\n      } else if (paperMode === \"selected\") {\r\n        setCursor(lasso ? \"crosshair\" : \"nwse-resize\");\r\n      } else if (paperMode === \"draw\" || paperMode === \"erase\") {\r\n        setCursor(getCircleCursor(drawCtrl, ratio));\r\n      }\r\n    }, [paperMode, lasso, drawCtrl, ratio]);\r\n\r\n    const handleSelectedCursor = (e: paper.MouseEvent) => {\r\n      const hitRes =\r\n        rect?.hitTest(e.point, { segments: true }) ??\r\n        rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n      if (hitRes?.segment) {\r\n        if (hitRes.segment.selected) {\r\n          const center = rect?.bounds.center;\r\n          if (!center) return;\r\n          const line = hitRes.segment.point.subtract(center);\r\n          return setCursor(getRotateCurcor(line.angle));\r\n        }\r\n        const moveP = hitRes.segment.point;\r\n        const baseP = hitRes.segment.next.next.point;\r\n        const diagonal = moveP.subtract(baseP);\r\n        const { x, y } = diagonal;\r\n        return setCursor(x * y < 0 ? \"nesw-resize\" : \"nwse-resize\");\r\n      }\r\n      if ((rect ?? path)?.contains(e.point)) return setCursor(\"move\");\r\n      setCursor(\"crosshair\");\r\n    };\r\n\r\n    const handleMove = {\r\n      selected: handleSelectedCursor,\r\n      text(e: paper.MouseEvent) {\r\n        const layer = scope.current.project.layers[1];\r\n        if (!layer) return;\r\n        if (getClickedText(layer, e.point)) setCursor(\"text\");\r\n        else setCursor(\"crosshair\");\r\n      },\r\n      ...{ select: null, draw: null, erase: null },\r\n    }[paperMode];\r\n\r\n    const handleKeyUp = (e: paper.KeyEvent) => {\r\n      if (paperMode !== \"selected\") return;\r\n      if (/^(delete|backspace)$/.test(e.key)) deleteSelected();\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (readonly) return;\r\n\r\n      type Handler<E> = ((e: E) => boolean | void) | null;\r\n      const activate = <E,>(handler: Handler<E>): Handler<E> => {\r\n        return (e) => {\r\n          scope.current.activate();\r\n          if (handler) return handler(e);\r\n        };\r\n      };\r\n      const { view, tool } = scope.current;\r\n      view.onMouseDown = activate(handleDown);\r\n      view.onMouseDrag = activate(handleDrag);\r\n      view.onMouseUp = activate(handleUp);\r\n      view.onMouseMove = activate(handleMove);\r\n      tool.onMouseDrag = activate(handleToolDrag);\r\n      tool.onKeyUp = activate(handleKeyUp);\r\n    });\r\n\r\n    const updateMutation = () => {\r\n      if (!chosenItems?.length) return;\r\n      const mutations: Mutation[] = chosenItems.map((p) => [\r\n        p.name,\r\n        p.exportJSON(),\r\n      ]);\r\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\r\n    };\r\n\r\n    const deleteSelected = () => {\r\n      resetSelect();\r\n      if (!chosenIDs.length) return;\r\n      onChange((prev) => DrawState.eraseStrokes(prev, chosenIDs));\r\n    };\r\n\r\n    const mutateStyle = (updated: Partial<DrawCtrl>) => {\r\n      scope.current.activate();\r\n      updateGroupStyle(chosenItems, updated);\r\n      updateMutation();\r\n    };\r\n\r\n    const duplicateSelected = () => {\r\n      scope.current.activate();\r\n      const size = (rect || path)?.bounds.size;\r\n      if (!size || !chosenItems.length) return;\r\n      const { width, height } = size;\r\n      const transP = new Point(width, height).divide(10);\r\n      const copies = chosenItems.map((item) => item.clone());\r\n      copies.forEach((item) => item.translate(transP));\r\n      rect?.translate(transP);\r\n      path?.translate(transP);\r\n      rotateHandle?.translate(transP);\r\n\r\n      const pathDataList = copies.map((item) => item.exportJSON());\r\n      const IDs: string[] = [];\r\n      onChange((prev) => DrawState.addStrokes(prev, pathDataList, IDs));\r\n      setChosenIDs(IDs);\r\n    };\r\n\r\n    const rasterizeSelected = () => {\r\n      scope.current.activate();\r\n      const clip = (rect ?? path)?.clone();\r\n      clip && rasterizeLayer(clip, true);\r\n      unrasterizeLayer();\r\n      return layerRaster.current?.toDataURL() ?? \"\";\r\n    };\r\n\r\n    const [pointText, setPointText] = usePaperItem<paper.PointText>();\r\n    const cancelText = useCallback(() => {\r\n      setPointText(undefined);\r\n      setActiveTool(\"\");\r\n    }, [setPointText, setActiveTool]);\r\n\r\n    useEffect(() => {\r\n      if (mode === \"text\") return cancelText;\r\n    }, [mode, cancelText]);\r\n\r\n    const submitText = (\r\n      text: string,\r\n      color = \"#000\",\r\n      justification = \"center\"\r\n    ) => {\r\n      if (!pointText) return;\r\n      pointText.content = text;\r\n      pointText.fillColor = new Color(color);\r\n      pointText.justification = justification;\r\n      const pathData = pointText.exportJSON();\r\n      const { name } = pointText;\r\n      cancelText();\r\n      if (!name) return onChange((prev) => DrawState.addStroke(prev, pathData));\r\n      onChange((prev) => DrawState.mutateStrokes(prev, [[name, pathData]]));\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      deleteSelected,\r\n      duplicateSelected,\r\n      rasterizeSelected,\r\n      mutateStyle,\r\n      cancelText,\r\n      submitText,\r\n      pointText,\r\n    }));\r\n\r\n    usePreventGesture();\r\n    usePinch(\r\n      ({ memo, offset: [scale], first, last, origin }) => {\r\n        scope.current.activate();\r\n        const { view } = scope.current;\r\n        const originRawP = new paper.Point(origin);\r\n\r\n        let lastScale: number;\r\n        let lastOrigin, elPos: paper.Point;\r\n        if (first || !memo) {\r\n          const { x, y } = canvasEl.current!.getBoundingClientRect();\r\n          lastScale = 1;\r\n          elPos = new Point(x, y);\r\n          lastOrigin = originRawP.subtract(elPos);\r\n          rasterizeLayer(new Path.Rectangle(P_ZERO, projSize));\r\n          unrasterizeCanvas();\r\n        } else {\r\n          [lastScale, lastOrigin, elPos] = memo;\r\n        }\r\n\r\n        const originViewP = originRawP.subtract(elPos);\r\n        const originPorjP = view.viewToProject(originViewP);\r\n\r\n        const deltaP = originViewP.subtract(lastOrigin);\r\n        const transP = deltaP.divide(view.zoom);\r\n        view.translate(transP);\r\n\r\n        let dScale = first ? 1 : scale / lastScale;\r\n        scope.current.settings.hitTolerance /= dScale;\r\n        view.scale(dScale, originPorjP);\r\n\r\n        if (last) {\r\n          Promise.all([\r\n            putCenterBack(view, projSize),\r\n            scaleView(view, originPorjP, dScale),\r\n          ]).then(unrasterizeLayer);\r\n          view.scale(1 / dScale, originPorjP);\r\n        } else {\r\n          return [scale, originViewP, elPos];\r\n        }\r\n      },\r\n      {\r\n        scaleBounds: { max: 5, min: 1 },\r\n        rubberband: 0.5,\r\n        target: canvasEl,\r\n      }\r\n    );\r\n\r\n    const touchHandler = usePreventTouch(finger);\r\n    return (\r\n      <div\r\n        className=\"draw-wrapper\"\r\n        style={{ cursor }}\r\n        data-readonly={readonly}\r\n        {...touchHandler}\r\n      >\r\n        <canvas ref={canvasEl} className=\"draw-canvas\" />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nDrawRaw.displayName = \"Draw\";\r\nexport const Draw = React.memo(DrawRaw);\r\n\r\nfunction usePaperItem<T extends paper.Item>() {\r\n  const tuple = useState<T>();\r\n  const [item] = tuple;\r\n  useDebugValue(item);\r\n  useEffect(() => {\r\n    if (!item?.name) return () => void item?.remove();\r\n  }, [item]);\r\n  return tuple;\r\n}\r\n\r\nconst paintStroke = (() => {\r\n  const cacheMap = new WeakMap<\r\n    paper.Layer,\r\n    Map<string, { stroke: Stroke; item: paper.Item }>\r\n  >();\r\n\r\n  return (stroke: Stroke, layer: paper.Layer, readonly = false) => {\r\n    const { pathData, uid } = stroke;\r\n    const cache = cacheMap.get(layer) ?? new Map();\r\n    cacheMap.set(layer, cache);\r\n    const cached = cache.get(uid);\r\n    let item: paper.Item;\r\n    if (cached?.stroke === stroke) {\r\n      layer.addChild(cached.item);\r\n      item = cached.item;\r\n    } else {\r\n      try {\r\n        item = layer.importJSON(pathData);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n      item ??= new paper.Item();\r\n      item.name = uid;\r\n      cache.set(uid, { item, stroke });\r\n    }\r\n    item.opacity = 1;\r\n    item.guide = readonly;\r\n    return item;\r\n  };\r\n})();\r\n\r\nconst paintRects = (layers: paper.Layer[], projSize: paper.Size) => {\r\n  const [l0, l1, l2] = layers;\r\n  if (!l0 || !l1 || !l2) return [];\r\n  const bgRect = new Path.Rectangle(P_ZERO, projSize);\r\n  const clip1 = bgRect.clone();\r\n  const clip2 = bgRect.clone();\r\n  bgRect.fillColor = new Color(\"#fff\");\r\n  l0.addChild(bgRect);\r\n  l1.addChild(clip1);\r\n  l2.addChild(clip2);\r\n  l1.clipped = true;\r\n  l2.clipped = true;\r\n  return [bgRect, clip1, clip2];\r\n};\r\n\r\nconst startRect = (point: paper.Point) => {\r\n  const rect = new Path.Rectangle(point, new Size(0, 0));\r\n  rect.onFrame = () => {}; // the handle size bug\r\n  return rect;\r\n};\r\n\r\nconst startStroke = (drawCtrl: DrawCtrl, point: paper.Point, slow = false) => {\r\n  let { mode, lineWidth, eraserWidth, color, highlight } = drawCtrl;\r\n  const path = new Path();\r\n  path.add(point);\r\n  if (mode === \"erase\") {\r\n    color = \"#ccc\";\r\n    lineWidth = eraserWidth;\r\n  }\r\n  if (mode === \"select\") {\r\n    color = \"#009dec\";\r\n    lineWidth = 5;\r\n  }\r\n  const strokeColor = new Color(color);\r\n  if ((mode === \"draw\" && highlight) || (mode === \"erase\" && !slow)) {\r\n    strokeColor.alpha = 0.5;\r\n    path.blendMode = \"multiply\";\r\n  }\r\n  path.strokeColor = strokeColor;\r\n  path.strokeWidth = lineWidth;\r\n  path.strokeJoin = \"round\";\r\n  path.strokeCap = \"round\";\r\n  path.guide = true;\r\n  return path;\r\n};\r\n\r\nconst moveDash = (item: paper.Item) => {\r\n  item.dashOffset = 0;\r\n  item.dashArray = [30, 20];\r\n  item.onFrame = () => (item.dashOffset += 3);\r\n};\r\n\r\nconst scaleView = (\r\n  view: paper.View,\r\n  originPorjP: paper.Point,\r\n  dScale: number\r\n) =>\r\n  new Promise<void>((resolve) => {\r\n    if (Math.abs(dScale - 1) < 0.05) {\r\n      view.scale(dScale, originPorjP);\r\n      return resolve();\r\n    }\r\n    let aniCount = 10;\r\n    dScale = Math.pow(dScale, 1 / aniCount);\r\n    const scale = () => {\r\n      view.scale(dScale, originPorjP);\r\n      if (--aniCount > 0) requestAnimationFrame(scale);\r\n      else requestAnimationFrame(() => resolve());\r\n    };\r\n    scale();\r\n  });\r\n\r\nconst getTargetCenter = (view: paper.View, projSize: paper.Size) => {\r\n  const { x, y } = view.center;\r\n  const minSize = Size.min(view.size, projSize).divide(2);\r\n  const { width: minX, height: minY } = minSize;\r\n  const { width: maxX, height: maxY } = projSize.subtract(minSize);\r\n\r\n  const targetX = x < minX ? minX : x > maxX ? maxX : x;\r\n  const targetY = y < minY ? minY : y > maxY ? maxY : y;\r\n  return new Point(targetX, targetY);\r\n};\r\n\r\nconst putCenterBack = (view: paper.View, projSize: paper.Size) =>\r\n  new Promise<void>((resolve) => {\r\n    const targetCenter = getTargetCenter(view, projSize);\r\n    if (view.center.equals(targetCenter)) return resolve();\r\n    let aniCount = 10;\r\n    const move = () => {\r\n      const delta = view.center.subtract(targetCenter);\r\n      view.translate(delta.divide(aniCount));\r\n      if (--aniCount > 0) requestAnimationFrame(move);\r\n      else requestAnimationFrame(() => resolve());\r\n    };\r\n    requestAnimationFrame(move);\r\n  });\r\n\r\nconst checkLasso = (items: paper.Item[], selection: paper.Path) => {\r\n  const isInside = (p: paper.Path) => {\r\n    if (selection.segments.length === 4 && p.isInside(selection.bounds)) {\r\n      return true;\r\n    }\r\n    return !p.subtract(selection, { insert: false, trace: false }).compare(p);\r\n  };\r\n  return items\r\n    .filter((item) => {\r\n      if (!item.name) return false;\r\n      if (!item.bounds.intersects(selection.bounds)) return false;\r\n      if (item instanceof paper.Path) {\r\n        return isInside(item);\r\n      } else {\r\n        const checkedP = new Path.Rectangle(item.bounds);\r\n        checkedP.remove();\r\n        return isInside(checkedP) || selection.isInside(item.bounds);\r\n      }\r\n    })\r\n    .map(({ name }) => name);\r\n};\r\n\r\nconst updateGroupStyle = (items: paper.Item[], updated: Partial<DrawCtrl>) => {\r\n  const { lineWidth, color, highlight } = updated;\r\n  items.forEach((item) => {\r\n    if (item instanceof paper.PointText && color) {\r\n      const newColor = new Color(color);\r\n      item.fillColor = newColor;\r\n    }\r\n\r\n    if (!(item instanceof paper.Path)) return;\r\n\r\n    if (color) {\r\n      const newColor = new Color(color);\r\n      if (item.blendMode === \"multiply\") newColor.alpha = 0.5;\r\n      item.strokeColor = newColor;\r\n    }\r\n\r\n    if (lineWidth) item.strokeWidth = lineWidth;\r\n\r\n    if (!item.strokeColor || highlight === undefined) return;\r\n    item.strokeColor.alpha = highlight ? 0.5 : 1;\r\n    item.blendMode = highlight ? \"multiply\" : \"normal\";\r\n  });\r\n};\r\n\r\nconst getClickedText = (layer: paper.Layer, point: paper.Point) => {\r\n  const hitRes = layer.hitTest(point, {\r\n    class: paper.PointText,\r\n    fill: true,\r\n  });\r\n  if (hitRes?.item instanceof paper.PointText) return hitRes?.item;\r\n};\r\n\r\nconst startText = (point: paper.Point) => {\r\n  return new paper.PointText({\r\n    point: point.add(new Point(0, 50)),\r\n    content: \"Insert text...\",\r\n    fontSize: 50,\r\n    justification: \"center\",\r\n    fillColor: \"#1890ff55\",\r\n  });\r\n};\r\n\r\nconst flattenCP = (cp: paper.Item): paper.Path[] => {\r\n  if (cp instanceof paper.Path) {\r\n    return cp.isEmpty() ? [] : [cp];\r\n  }\r\n  if (cp instanceof paper.CompoundPath) {\r\n    return cp.children.map(flattenCP).flat();\r\n  }\r\n  return [];\r\n};\r\n\r\nconst getGridRange = (bounds: paper.Rectangle) => {\r\n  const { topLeft, bottomRight } = bounds;\r\n  return [\r\n    Math.floor(topLeft.x / 100),\r\n    Math.ceil(bottomRight.x / 100),\r\n    Math.floor(topLeft.y / 100),\r\n    Math.ceil(bottomRight.y / 100),\r\n  ] as [number, number, number, number];\r\n};\r\n\r\nconst setGridItem = (\r\n  grid: Set<paper.Item>[][],\r\n  item: paper.Item,\r\n  replaced?: paper.Item\r\n) => {\r\n  const bounds = (replaced ?? item).strokeBounds;\r\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\r\n  for (let x = xmin; x <= xmax; x += 1) {\r\n    for (let y = ymin; y <= ymax; y += 1) {\r\n      replaced && grid[x]?.[y]?.delete(replaced);\r\n      grid[x]?.[y]?.add(item);\r\n    }\r\n  }\r\n};\r\n\r\nconst getGridItems = (grid: Set<paper.Item>[][], bounds: paper.Rectangle) => {\r\n  const itemSet = new Set<paper.Item>();\r\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\r\n  for (let x = xmin; x <= xmax; x += 1) {\r\n    for (let y = ymin; y <= ymax; y += 1) {\r\n      grid[x]?.[y]?.forEach((item) => itemSet.add(item));\r\n    }\r\n  }\r\n  return Array.from(itemSet);\r\n};\r\n","import { FC, RefObject, useEffect, useState } from \"react\";\r\nimport {\r\n  CopyOutlined,\r\n  DeleteOutlined,\r\n  PictureTwoTone,\r\n  PictureOutlined,\r\n  BgColorsOutlined,\r\n  AlignLeftOutlined,\r\n  FontColorsOutlined,\r\n  AlignRightOutlined,\r\n  AlignCenterOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Button, ButtonProps, Modal, Popover, Radio } from \"antd\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { allColors } from \"lib/color\";\r\nimport { DrawRefType } from \"component/Draw\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { saveAs } from \"file-saver\";\r\nimport \"./drawTools.sass\";\r\n\r\nexport const SelectTool: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n  visible: boolean;\r\n}> = ({ drawRef, visible }) => (\r\n  <CSSTransition timeout={300} in={visible} unmountOnExit>\r\n    <SelectToolContent drawRef={drawRef} />\r\n  </CSSTransition>\r\n);\r\n\r\nexport const SelectToolContent: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n}> = ({ drawRef }) => {\r\n  const btnProps: ButtonProps = {\r\n    type: \"text\",\r\n    shape: \"round\",\r\n    size: \"small\",\r\n  };\r\n\r\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\r\n\r\n  const getRaster = () => {\r\n    if (!drawRef.current) return;\r\n    const imageData = drawRef.current.rasterizeSelected();\r\n    Modal.confirm({\r\n      title: \"Screenshot\",\r\n      content: <img className=\"raster\" src={imageData} alt=\"raster\" />,\r\n      className: \"raster-modal\",\r\n      icon: <PictureTwoTone />,\r\n      okText: \"Save\",\r\n      onOk: () => saveAs(imageData, document.title.split(\"-\")[0] + \".png\"),\r\n    });\r\n  };\r\n\r\n  return createPortal(\r\n    <div className=\"select-tool\">\r\n      <Popover\r\n        trigger=\"click\"\r\n        placement=\"bottom\"\r\n        getPopupContainer={(e) => e.parentElement!}\r\n        destroyTooltipOnHide\r\n        content={\r\n          <PenPanel\r\n            updateDrawCtrl={(updated) => {\r\n              setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\r\n              drawRef.current?.mutateStyle(updated);\r\n            }}\r\n            drawCtrl={currDrawCtrl}\r\n          />\r\n        }\r\n      >\r\n        <Button icon={<BgColorsOutlined />} {...btnProps} />\r\n      </Popover>\r\n      <Button\r\n        icon={<CopyOutlined />}\r\n        onClick={() => drawRef.current?.duplicateSelected()}\r\n        {...btnProps}\r\n      />\r\n      <Button icon={<PictureOutlined />} onClick={getRaster} {...btnProps} />\r\n      <Button\r\n        danger\r\n        icon={<DeleteOutlined />}\r\n        onClick={() => drawRef.current?.deleteSelected()}\r\n        {...btnProps}\r\n      />\r\n    </div>,\r\n    document.querySelector(\".reader.container > header\")!\r\n  );\r\n};\r\n\r\nexport const TextTool: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n  visible: boolean;\r\n}> = ({ visible, drawRef }) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [color, setColor] = useState(allColors[0]!);\r\n  const [align, setAlign] = useState(\"center\");\r\n\r\n  useEffect(() => {\r\n    const pointText = drawRef.current?.pointText;\r\n    if (!pointText || !visible) return;\r\n    const { name, content, justification, fillColor } = pointText;\r\n    setAlign(justification);\r\n    if (name) {\r\n      setText(content);\r\n      setColor(fillColor?.toCSS(true) ?? allColors[0]!);\r\n    } else {\r\n      setText(\"\");\r\n      setColor(allColors[0]!);\r\n    }\r\n  }, [visible, drawRef]);\r\n\r\n  const fontColorBtn = (\r\n    <Popover\r\n      content={<ColorSelect color={color} setColor={setColor} />}\r\n      overlayStyle={{ width: 200 }}\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n    >\r\n      <Button\r\n        size=\"small\"\r\n        icon={<FontColorsOutlined className=\"font-icon\" style={{ color }} />}\r\n      />\r\n    </Popover>\r\n  );\r\n\r\n  const alignRadio = (\r\n    <Radio.Group\r\n      size=\"small\"\r\n      optionType=\"button\"\r\n      value={align}\r\n      buttonStyle=\"solid\"\r\n      onChange={(e) => setAlign(e.target.value)}\r\n      options={[\r\n        { label: <AlignLeftOutlined />, value: \"left\" },\r\n        { label: <AlignCenterOutlined />, value: \"center\" },\r\n        { label: <AlignRightOutlined />, value: \"right\" },\r\n      ]}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      visible={visible}\r\n      title=\"Insert text\"\r\n      onCancel={() => drawRef.current?.cancelText()}\r\n      onOk={() => {\r\n        const content = text.trim();\r\n        if (!content) return drawRef.current?.cancelText();\r\n        drawRef.current?.submitText(content, color, align);\r\n      }}\r\n      bodyStyle={{ paddingTop: 0 }}\r\n      destroyOnClose\r\n    >\r\n      <div className=\"insert-option\">\r\n        {fontColorBtn}\r\n        {alignRadio}\r\n      </div>\r\n      <TextArea\r\n        size=\"large\"\r\n        rows={3}\r\n        autoFocus\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n      />\r\n    </Modal>\r\n  );\r\n};\r\n","import React, {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport { useDrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { useMemoizedFn as useEvent } from \"ahooks\";\r\nimport { Draw, ActiveToolKey, DrawRefType } from \"component/Draw\";\r\nimport { SelectTool, TextTool } from \"pages/reader/tools/DrawTools\";\r\nimport { once, range } from \"lodash\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { DrawState } from \"lib/draw/DrawState\";\r\nimport { Map, Set } from \"immutable\";\r\n\r\nconst PageWrapperRaw: FC<{\r\n  drawState: DrawState;\r\n  teamStateMap?: Map<string, DrawState>;\r\n  thumbnail?: string;\r\n  pdfIndex?: number;\r\n  noteID?: string;\r\n  updateState?: (ds: DrawState) => void;\r\n  onViewChange?: (ratio: number) => void;\r\n  preview?: boolean;\r\n  preload?: boolean;\r\n  ignores?: Set<string>;\r\n  skipInView?: boolean;\r\n}> = ({\r\n  thumbnail,\r\n  drawState,\r\n  teamStateMap,\r\n  updateState,\r\n  pdfIndex,\r\n  noteID = \"\",\r\n  preview = false,\r\n  onViewChange,\r\n  preload = false,\r\n  ignores = Set<string>(),\r\n  skipInView = false,\r\n}) => {\r\n  const threshold = onViewChange && range(0, 1.2, 0.2);\r\n  const [ref, visible, entry] = useInView({ threshold, skip: skipInView });\r\n  useEffect(() => {\r\n    if (!onViewChange) return;\r\n    if (!entry || !visible) return onViewChange(0);\r\n    onViewChange(entry.intersectionRatio);\r\n  }, [visible, entry, onViewChange]);\r\n\r\n  const [fullImg, setFullImg] = useState<string>();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const loadImage = useCallback(\r\n    once(async () => {\r\n      if (!pdfIndex || !noteID) return;\r\n      const { getNotePageImage } = await import(\"lib/note/pdfImage\");\r\n      setFullImg(await getNotePageImage(noteID, pdfIndex));\r\n    }),\r\n    [pdfIndex, noteID]\r\n  );\r\n\r\n  const show = visible || preload;\r\n  useEffect(() => {\r\n    if (!preview && show) loadImage();\r\n  }, [show, preview, loadImage]);\r\n\r\n  const otherStates = useMemo(\r\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\r\n    [teamStateMap, ignores]\r\n  );\r\n\r\n  const imageLoaded = Boolean(fullImg || !pdfIndex);\r\n  const drawShow = show && imageLoaded;\r\n\r\n  const { height, width } = drawState;\r\n  const ratio = height / width;\r\n\r\n  return (\r\n    <div ref={ref} className=\"page-wrapper\">\r\n      <svg viewBox={`0 0 100 ${ratio * 100}`} />\r\n      {drawShow && (\r\n        <DrawWrapper\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          updateState={updateState}\r\n          imgSrc={fullImg || thumbnail}\r\n          preview={preview}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nPageWrapperRaw.displayName = \"PageWrapper\";\r\nexport const PageWrapper = React.memo(PageWrapperRaw);\r\n\r\nconst DrawWrapper: FC<{\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}> = ({ drawState, updateState, otherStates, preview = false, imgSrc }) => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const [activeTool, setActiveTool] = useState<ActiveToolKey>(\"\");\r\n  const drawRef = useRef<DrawRefType>(null);\r\n\r\n  const handleChange = useEvent(\r\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\r\n      if (!updateState) return;\r\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\r\n      if (newDS === drawState) return;\r\n      updateState(newDS);\r\n    }\r\n  );\r\n\r\n  return preview ? (\r\n    <Draw\r\n      drawState={drawState}\r\n      otherStates={otherStates}\r\n      imgSrc={imgSrc}\r\n      readonly\r\n    />\r\n  ) : (\r\n    <>\r\n      <Draw\r\n        drawState={drawState}\r\n        otherStates={otherStates}\r\n        onChange={handleChange}\r\n        imgSrc={imgSrc}\r\n        drawCtrl={drawCtrl}\r\n        ref={drawRef}\r\n        setActiveTool={setActiveTool}\r\n      />\r\n      <SelectTool drawRef={drawRef} visible={activeTool === \"select\"} />\r\n      <TextTool drawRef={drawRef} visible={activeTool === \"text\"} />\r\n    </>\r\n  );\r\n};\r\nDrawWrapper.displayName = \"DrawWrapper\";\r\n","import { PageWrapper } from \"./PageWrapper\";\r\nimport \"./page-wrapper.sass\";\r\nexport default PageWrapper;\r\n","import localforage from \"localforage\";\r\nimport React, {\r\n  FC,\r\n  PropsWithChildren,\r\n  useContext,\r\n  useDebugValue,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nexport interface DrawCtrl {\r\n  mode: \"draw\" | \"erase\" | \"select\" | \"text\";\r\n  finger: boolean;\r\n  lineWidth: number;\r\n  eraserWidth: number;\r\n  color: string;\r\n  highlight: boolean;\r\n  lasso: boolean;\r\n  pixelEraser: boolean;\r\n  widthList: number[];\r\n}\r\n\r\nexport const defaultWidthList = [10, 20, 30, 50];\r\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\r\n  mode: \"draw\",\r\n  finger: true,\r\n  lineWidth: 10,\r\n  eraserWidth: 10,\r\n  color: \"#000000\",\r\n  highlight: false,\r\n  lasso: true,\r\n  pixelEraser: false,\r\n  widthList: defaultWidthList,\r\n};\r\n\r\nasync function getDrawCtrl() {\r\n  let drawCtrl = await localforage.getItem<DrawCtrl>(\"DRAW_CTRL\");\r\n  if (!drawCtrl) {\r\n    drawCtrl = defaultDrawCtrl;\r\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n  }\r\n  return drawCtrl;\r\n}\r\n\r\nasync function saveDrawCtrl(drawCtrl: DrawCtrl) {\r\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n}\r\n\r\nconst DrawCtrlContext = React.createContext({\r\n  drawCtrl: defaultDrawCtrl,\r\n  updateDrawCtrl: (() => {}) as (updated: Partial<DrawCtrl>) => void,\r\n});\r\n\r\nexport function useDrawCtrl() {\r\n  const { drawCtrl } = useContext(DrawCtrlContext);\r\n  useDebugValue(drawCtrl);\r\n  return drawCtrl;\r\n}\r\n\r\nexport function useUpdateDrawCtrl() {\r\n  const { updateDrawCtrl } = useContext(DrawCtrlContext);\r\n  return updateDrawCtrl;\r\n}\r\n\r\nexport const DrawCtrlProvider: FC<PropsWithChildren> = ({ children }) => {\r\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\r\n  useEffect(() => {\r\n    getDrawCtrl().then(setDrawCtrl);\r\n  }, []);\r\n\r\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\r\n    setDrawCtrl((prev) => {\r\n      const newCtrl = { ...prev, ...updated };\r\n      saveDrawCtrl(newCtrl);\r\n      return newCtrl;\r\n    });\r\n  };\r\n  return (\r\n    <DrawCtrlContext.Provider value={{ drawCtrl, updateDrawCtrl }}>\r\n      {children}\r\n    </DrawCtrlContext.Provider>\r\n  );\r\n};\r\n","export function createVirtualCanvas(width: number, height: number) {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const context = canvas.getContext(\"2d\");\r\n  if (!context) {\r\n    throw new Error(\"can't get virtual canvas context\");\r\n  }\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  return { canvas, context };\r\n}\r\n\r\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  const ctx = canvas.getContext('2d');\r\n  ctx?.clearRect(0, 0, 1, 1);\r\n}\r\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\r\nimport { defaultWidthList, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorCirle } from \"component/ColorCircle\";\r\nimport { WIDTH } from \"lib/draw/DrawState\";\r\nimport { Popover, Segmented, Slider } from \"antd\";\r\nimport { allColors } from \"lib/color\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport IconFont from \"component/IconFont\";\r\nimport { List } from \"immutable\";\r\nimport \"./penPanel.sass\";\r\n\r\nexport const PenPanel: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n}> = ({ updateDrawCtrl, drawCtrl }) => {\r\n  const { highlight, color } = drawCtrl;\r\n  const [panelBlur, setPanelBlur] = useState(false);\r\n\r\n  return (\r\n    <div className=\"pen-panel\" data-blur={panelBlur} data-hi={highlight}>\r\n      <div className=\"pen-status\">\r\n        <WidthSelect\r\n          updateDrawCtrl={updateDrawCtrl}\r\n          drawCtrl={drawCtrl}\r\n          setPanelBlur={setPanelBlur}\r\n        />\r\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\r\n      </div>\r\n      <ColorSelect\r\n        color={color || \"\"}\r\n        setColor={(c) => updateDrawCtrl({ color: c })}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const WidthSelect: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n  setPanelBlur?: Setter<boolean>;\r\n  field?: \"lineWidth\" | \"eraserWidth\";\r\n}> = ({\r\n  updateDrawCtrl,\r\n  drawCtrl,\r\n  setPanelBlur = () => {},\r\n  field = \"lineWidth\",\r\n}) => {\r\n  const currWidth = drawCtrl[field];\r\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\r\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\r\n\r\n  const chosen = useMemo(\r\n    () => widthList.indexOf(currWidth ?? -1),\r\n    [currWidth, widthList]\r\n  );\r\n\r\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\r\n  useEffect(() => {\r\n    if (popShow.includes(true)) setPanelBlur(true);\r\n    else setPanelBlur(false);\r\n  }, [popShow, setPanelBlur]);\r\n\r\n  const realSizeStyle = (width: number) =>\r\n    ({\r\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width})`,\r\n    } as CSSProperties);\r\n\r\n  const options = [\r\n    { value: -1, label: null },\r\n    ...widthList.map((width, index) => ({\r\n      value: index,\r\n      label: (\r\n        <Popover\r\n          visible={popShow.get(index)}\r\n          onVisibleChange={(v) => setPopShow((prev) => prev.set(index, v))}\r\n          trigger={chosen === index ? [\"click\"] : []}\r\n          placement=\"bottom\"\r\n          destroyTooltipOnHide\r\n          content={\r\n            <Slider\r\n              min={5}\r\n              max={100}\r\n              className=\"ctrl-slider\"\r\n              defaultValue={width}\r\n              onAfterChange={(w) => {\r\n                if (widthList.includes(w)) {\r\n                  setPopShow((prev) => prev.set(index, false));\r\n                  return updateDrawCtrl({ [field]: w });\r\n                }\r\n                const newWL = widthList.slice();\r\n                newWL[index] = w;\r\n                updateDrawCtrl({ widthList: newWL, [field]: w });\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          <div className=\"circle-wrapper\" style={realSizeStyle(width)}>\r\n            <ColorCirle className={\"width-circle \" + field} color={color} />\r\n          </div>\r\n        </Popover>\r\n      ),\r\n    })),\r\n  ];\r\n\r\n  return (\r\n    <Segmented\r\n      className=\"width-seg\"\r\n      value={chosen}\r\n      options={options}\r\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 10 })}\r\n    />\r\n  );\r\n};\r\n\r\nconst HighlightSwitch: FC<{\r\n  checked?: boolean;\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ checked = false, updateDrawCtrl }) => {\r\n  return (\r\n    <label className=\"hi-wrapper\">\r\n      <input\r\n        type=\"checkbox\"\r\n        name=\"highlight\"\r\n        checked={checked}\r\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\r\n      />\r\n      <div className=\"hi-switch\">\r\n        <IconFont type=\"icon-Highlight\" />\r\n      </div>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport const ColorSelect: FC<{\r\n  color: string;\r\n  setColor: (color: string) => void;\r\n}> = ({ setColor, color }) => (\r\n  <div className=\"color-select\">\r\n    {allColors.map((c) => (\r\n      <label key={c}>\r\n        <input\r\n          checked={color === c}\r\n          type=\"radio\"\r\n          name=\"color\"\r\n          onChange={(e) => e.target.checked && setColor(c)}\r\n        />\r\n        <div\r\n          data-color={c}\r\n          className=\"circle\"\r\n          style={{ backgroundColor: c, borderColor: c }}\r\n        />\r\n      </label>\r\n    ))}\r\n  </div>\r\n);\r\n"],"names":["createFromIconfontCN","scriptUrl","getRotateCursorImage","cache","Map","createVirtualCanvas","canvas","context","image","Image","src","angle","Math","round","cached","get","translate","rotate","PI","drawImage","data","toDataURL","clearRect","resetTransform","set","getRotateCurcor","usePreventTouch","allowFinger","isTouch","useRef","checkPoniter","e","isPrimary","current","pointerType","preventTouch","touch","touches","touchType","isApplePencil","length","isEventValid","stopPropagation","onPointerDownCapture","onPointerMoveCapture","onTouchStartCapture","onTouchMoveCapture","P_ZERO","Point","DrawRaw","React","ref","drawState","otherStates","onChange","drawCtrl","defaultDrawCtrl","readonly","imgSrc","setActiveTool","width","height","projSize","useMemo","Size","mode","finger","lasso","eraserWidth","canvasEl","scope","paper","useState","group","setGroup","usePaperItem","path","setPath","rect","setRect","rotateHandle","setRotateHandle","useEffect","cvs","scp","setup","settings","handleSize","hitTolerance","forEach","Layer","visible","project","layers","activate","Tool","view","remove","releaseCanvas","rects","paintRects","r","useSize","canvasWidth","ratio","viewSize","multiply","scale","l","update","imgRaster","setImgRaster","raster","Raster","addChild","sendToBack","onLoad","fitBounds","Rectangle","bringToFront","mergedStrokes","DrawState","getStrokeList","renderSlow","deferRender","deferTimerID","layer","render","tempGroup","timeBeforeRender","performance","now","removeChildren","stroke","self","hasStroke","uid","item","paintStroke","push","unrasterizeCanvas","pathClones","c","duration","window","setTimeout","clearTimeout","hitRef","selected","setSelected","paperMode","chosenIDs","setChosenIDs","chosenItems","IDSet","Set","filter","has","name","resetSelect","useCallback","undefined","layerRaster","rasterizeLayer","clip","force","l0","l1","clipMask","prevClip","firstChild","replaceWith","insertAbove","dpi","devicePixelRatio","resolution","bounds","rasterize","addTo","unrasterizeLayer","lr","canvasRaster","rasterizeCanvas","element","opacity","cr","downPath","startStroke","point","downRect","startRect","handleDown","draw","erase","select","contains","hitRes","hitTest","segments","text","t","getClickedText","startText","setPointText","dragPath","add","smooth","handleDrag","x","y","s1","s2","s3","segment","center","axis","subtract","line","setCursor","moveP","baseP","next","diagonal","strokeWidth","rBaseP","delta","pointText","topCenter","bottomRight","tool","maxDistance","erased","replaced","itemGrid","test","wnum","ceil","hnum","grid","Array","from","setGridItem","handleToolDrag","ew","hitOption","class","tolerance","getGridItems","hitTestAll","topItem","parent","pixelEraser","radius","circle","Path","insert","sub","trace","guide","handleUp","simplify","clone","pathData","exportJSON","prev","items","clear","splitters","map","flattenCP","i","erasedList","selection","abs","area","closePath","moveDash","checkLasso","link","lastSegment","updateMutation","handleSelectedCursor","cursor","lineWidth","size","half","getCircleCursor","handleMove","handleKeyUp","key","deleteSelected","handler","onMouseDown","onMouseDrag","onMouseUp","onMouseMove","onKeyUp","mutations","p","mutateStyle","updated","updateGroupStyle","duplicateSelected","transP","divide","copies","pathDataList","IDs","rasterizeSelected","cancelText","submitText","color","justification","content","fillColor","Color","useImperativeHandle","preventDefault","document","addEventListener","removeEventListener","usePinch","memo","offset","first","last","origin","lastScale","lastOrigin","elPos","originRawP","getBoundingClientRect","originViewP","originPorjP","viewToProject","zoom","dScale","Promise","all","putCenterBack","scaleView","then","scaleBounds","max","min","rubberband","target","touchHandler","className","style","displayName","Draw","tuple","useDebugValue","cacheMap","WeakMap","importJSON","console","error","l2","bgRect","clip1","clip2","clipped","onFrame","slow","highlight","strokeColor","alpha","blendMode","strokeJoin","strokeCap","dashOffset","dashArray","resolve","aniCount","pow","requestAnimationFrame","targetCenter","minSize","minX","minY","maxX","maxY","targetX","targetY","getTargetCenter","equals","move","isInside","compare","intersects","checkedP","newColor","fill","fontSize","cp","isEmpty","children","flat","getGridRange","topLeft","floor","strokeBounds","xmin","xmax","ymin","ymax","delete","itemSet","SelectTool","drawRef","CSSTransition","timeout","in","unmountOnExit","SelectToolContent","btnProps","type","shape","currDrawCtrl","setCurrDrawCtrl","createPortal","trigger","placement","getPopupContainer","parentElement","destroyTooltipOnHide","PenPanel","updateDrawCtrl","icon","BgColorsOutlined","CopyOutlined","onClick","PictureOutlined","imageData","Modal","title","alt","PictureTwoTone","okText","onOk","saveAs","split","danger","DeleteOutlined","querySelector","TextTool","setText","allColors","setColor","align","setAlign","toCSS","fontColorBtn","overlayStyle","FontColorsOutlined","alignRadio","optionType","value","buttonStyle","options","label","AlignLeftOutlined","AlignCenterOutlined","AlignRightOutlined","onCancel","trim","bodyStyle","paddingTop","destroyOnClose","TextArea","rows","autoFocus","PageWrapperRaw","thumbnail","teamStateMap","updateState","pdfIndex","noteID","preview","onViewChange","preload","ignores","skipInView","threshold","range","useInView","skip","entry","intersectionRatio","fullImg","setFullImg","loadImage","once","getNotePageImage","show","deleteAll","toList","toArray","imageLoaded","Boolean","drawShow","viewBox","DrawWrapper","PageWrapper","useDrawCtrl","activeTool","handleChange","useEvent","arg","newDS","defaultWidthList","widthList","getDrawCtrl","localforage","saveDrawCtrl","DrawCtrlContext","useContext","useUpdateDrawCtrl","DrawCtrlProvider","setDrawCtrl","Provider","newCtrl","createElement","getContext","Error","ctx","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","field","currWidth","chosen","indexOf","List","popShow","setPopShow","includes","realSizeStyle","WIDTH","index","onVisibleChange","v","defaultValue","onAfterChange","w","newWL","slice","IconFont","backgroundColor","borderColor"],"sourceRoot":""}