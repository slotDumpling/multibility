{"version":3,"file":"static/js/25.29fef8a0.chunk.js","mappings":"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","sources":["component/IconFont.tsx","component/Draw/cursor/cursor.ts","component/Draw/touch.ts","component/Draw/Draw.tsx","pages/reader/tools/DrawTools.tsx","component/PageWrapper/PageWrapper.tsx","component/PageWrapper/index.tsx","lib/draw/DrawCtrl.tsx","lib/draw/canvas.ts","pages/reader/tools/PenPanel.tsx"],"sourcesContent":["import { createFromIconfontCN } from \"@ant-design/icons\";\r\n\r\nexport default createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_3181679_yo844n7qgns.js\",\r\n});\r\n","import { createVirtualCanvas } from \"lib/draw/canvas\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport rotateImg from \"./rotate.png\";\r\n\r\nexport const getCircleCursor = (drawCtrl: DrawCtrl, ratio: number) => {\r\n  const { lineWidth, eraserWidth, mode } = drawCtrl;\r\n  const size = ratio * (mode === \"erase\" ? eraserWidth : lineWidth);\r\n  if (size < 5) return \"crosshair\";\r\n  const half = size / 2;\r\n  return `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23FFF7\" width=\"${size}\" height=\"${size}\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"5\"/></svg>') ${half} ${half}, auto`;\r\n};\r\n\r\nconst getRotateCursorImage = (() => {\r\n  const cache = new Map<number, string>();\r\n  const { canvas, context } = createVirtualCanvas(44, 44);\r\n  const image = new Image();\r\n  image.src = rotateImg;\r\n  return (angle: number) => {\r\n    angle = Math.round(angle / 10) * 10;\r\n    const cached = cache.get(angle);\r\n    if (cached) return cached;\r\n    context.translate(22, 22);\r\n    context.rotate((angle * Math.PI) / 180);\r\n    context.drawImage(image, -22, -22);\r\n    const data = canvas.toDataURL();\r\n    context.clearRect(-22, -22, 44, 44);\r\n    context.resetTransform();\r\n    cache.set(angle, data);\r\n    return data;\r\n  };\r\n})();\r\n\r\nexport const getRotateCurcor = (angle: number) => {\r\n  return `url(${getRotateCursorImage(angle)}) 22 22, auto`;\r\n};\r\n","import { PointerEvent, TouchEvent, useEffect, useRef } from \"react\";\r\n\r\ntype iOSTouch = Touch & {\r\n  force?: number;\r\n  touchType?: \"stylus\" | \"direct\";\r\n};\r\n\r\nexport function isApplePencil(e: TouchEvent) {\r\n  const touch = e.touches[0] as iOSTouch;\r\n  return touch?.touchType === \"stylus\";\r\n}\r\n\r\nexport function usePreventTouch(\r\n  allowFinger: boolean\r\n): React.HTMLAttributes<HTMLDivElement> {\r\n  const isTouch = useRef(false);\r\n  const checkPoniter = (e: PointerEvent) =>\r\n    e.isPrimary && (isTouch.current = e.pointerType === \"touch\");\r\n\r\n  const isEventValid = (e: TouchEvent) =>\r\n    !isTouch.current ||\r\n    isApplePencil(e) ||\r\n    (allowFinger && e.touches.length === 1);\r\n\r\n  const preventTouch = (e: TouchEvent) =>\r\n    isEventValid(e) || e.stopPropagation();\r\n\r\n  return {\r\n    onPointerDownCapture: checkPoniter,\r\n    onPointerMoveCapture: checkPoniter,\r\n    onTouchStartCapture: preventTouch,\r\n    onTouchMoveCapture: preventTouch,\r\n  };\r\n}\r\n\r\nexport function usePreventGesture() {\r\n  useEffect(() => {\r\n    const handler = (e: Event) => e.preventDefault();\r\n    document.addEventListener(\"gesturestart\", handler);\r\n    document.addEventListener(\"gesturechange\", handler);\r\n    document.addEventListener(\"gestureend\", handler);\r\n    return () => {\r\n      document.removeEventListener(\"gesturestart\", handler);\r\n      document.removeEventListener(\"gesturechange\", handler);\r\n      document.removeEventListener(\"gestureend\", handler);\r\n    };\r\n  }, []);\r\n}\r\n","import React, {\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  Dispatch,\r\n  useEffect,\r\n  useCallback,\r\n  useDebugValue,\r\n  SetStateAction,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport paper, {\r\n  Path,\r\n  Size,\r\n  Point,\r\n  Group,\r\n  Color,\r\n  Raster,\r\n  Layer,\r\n} from \"paper/dist/paper-core\";\r\nimport { usePinch } from \"@use-gesture/react\";\r\nimport useSize from \"@react-hook/size\";\r\nimport { DrawState, Mutation, Splitter, Stroke } from \"lib/draw/DrawState\";\r\nimport { defaultDrawCtrl, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { releaseCanvas } from \"lib/draw/canvas\";\r\nimport { getCircleCursor, getRotateCurcor } from \"./cursor\";\r\nimport { usePreventTouch, usePreventGesture } from \"./touch\";\r\n\r\nexport type ActiveToolKey = \"\" | \"select\" | \"text\";\r\nexport interface DrawRefType {\r\n  deleteSelected: () => void;\r\n  duplicateSelected: () => void;\r\n  mutateStyle: (updated: Partial<DrawCtrl>) => void;\r\n  rasterize: () => string;\r\n  submitText: (text: string, color?: string, justification?: string) => void;\r\n  cancelText: () => void;\r\n  pointText?: paper.PointText;\r\n}\r\ninterface DrawPropType {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  onChange?: Dispatch<SetStateAction<DrawState>>;\r\n  setActiveTool?: Dispatch<SetStateAction<ActiveToolKey>>;\r\n  drawCtrl?: DrawCtrl;\r\n  readonly?: boolean;\r\n  imgSrc?: string;\r\n}\r\n\r\nconst HIT_TOLERANCE = 20;\r\n\r\nconst DrawRaw = React.forwardRef<DrawRefType, DrawPropType>(\r\n  (\r\n    {\r\n      drawState,\r\n      otherStates,\r\n      onChange = () => {},\r\n      drawCtrl = defaultDrawCtrl,\r\n      readonly = false,\r\n      imgSrc,\r\n      setActiveTool = () => {},\r\n    },\r\n    ref\r\n  ) => {\r\n    const { width, height } = drawState;\r\n    const { mode, finger, lasso, eraserWidth } = drawCtrl;\r\n\r\n    const canvasEl = useRef<HTMLCanvasElement>(null);\r\n    const scope = useRef(new paper.PaperScope());\r\n    const [group, setGroup] = useState<paper.Item[]>([]);\r\n    const [path, setPath] = usePaperItem<paper.Path>();\r\n    const [rect, setRect] = usePaperItem<paper.Path.Rectangle>();\r\n    const [rotateHandle, setRotateHandle] = usePaperItem<paper.Path>();\r\n\r\n    useEffect(() => {\r\n      const cvs = canvasEl.current;\r\n      const scp = scope.current;\r\n      if (!cvs) return;\r\n\r\n      scp.setup(cvs);\r\n      scp.settings.handleSize = 10;\r\n      scp.settings.hitTolerance = HIT_TOLERANCE;\r\n      [0, 1, 2].forEach(() => (new Layer().visible = false));\r\n      scp.project.layers[2]?.activate();\r\n      new scp.Tool();\r\n\r\n      return () => {\r\n        scp.view?.remove();\r\n        releaseCanvas(cvs);\r\n      };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      scope.current.activate();\r\n      const { layers } = scope.current.project;\r\n      const rects = paintRects(layers, width, height);\r\n      return () => rects.forEach((r) => r.remove());\r\n    }, [width, height]);\r\n\r\n    const [canvasWidth] = useSize(canvasEl);\r\n    const ratio = canvasWidth / width;\r\n    useEffect(() => {\r\n      if (!ratio) return;\r\n      const scp = scope.current;\r\n      const zero = new Point(0, 0);\r\n      scp.view.viewSize = new Size(width, height).multiply(ratio);\r\n      scp.view.scale(ratio, zero);\r\n      scp.project.layers.forEach((l) => (l.visible = true));\r\n      scp.view.update();\r\n\r\n      return () => scp.view?.scale(1 / ratio, zero);\r\n    }, [width, height, ratio]);\r\n\r\n    useEffect(() => {\r\n      if (!imgSrc) return;\r\n      scope.current.activate();\r\n      const raster = new Raster(imgSrc);\r\n      raster.project.layers[0]?.addChild(raster);\r\n      raster.sendToBack();\r\n      raster.onLoad = () => {\r\n        raster.view.update();\r\n        raster.fitBounds(new paper.Rectangle(0, 0, width, height));\r\n        raster.bringToFront();\r\n      };\r\n\r\n      return () => void raster?.remove();\r\n    }, [imgSrc, width, height]);\r\n\r\n    const mergedStrokes = useMemo(\r\n      () =>\r\n        otherStates\r\n          ? DrawState.mergeStates(drawState, ...otherStates)\r\n          : drawState.getStrokeList(),\r\n      [drawState, otherStates]\r\n    );\r\n    useEffect(() => {\r\n      const tempGroup: paper.Item[] = [];\r\n      const layer = scope.current.project.layers[1];\r\n      if (!layer) return;\r\n\r\n      scope.current.activate();\r\n      mergedStrokes.forEach((stroke) => {\r\n        const self = drawState.hasStroke(stroke.uid);\r\n        const item = paintStroke(stroke, layer, !self);\r\n        if (self) tempGroup.push(item);\r\n      });\r\n      setGroup(tempGroup);\r\n\r\n      return () => void layer.removeChildren(1);\r\n    }, [mergedStrokes, drawState]);\r\n\r\n    const hitRef = useRef<paper.HitResult>();\r\n    const [selected, setSelected] = useState(false);\r\n    const paperMode = mode === \"select\" && selected ? \"selected\" : mode;\r\n    const [chosenIDs, setChosenIDs] = useState<string[]>([]);\r\n    const chosenItems = useMemo(() => {\r\n      const IDSet = new Set(chosenIDs);\r\n      return group.filter((item) => IDSet.has(item.name));\r\n    }, [group, chosenIDs]);\r\n\r\n    const resetSelect = useCallback(() => {\r\n      setSelected(false);\r\n      setPath(undefined);\r\n      setRect(undefined);\r\n      setRotateHandle(undefined);\r\n    }, [setPath, setRect, setRotateHandle]);\r\n\r\n    useEffect(() => {\r\n      if (mode === \"select\") return resetSelect;\r\n    }, [mode, resetSelect]);\r\n    useEffect(() => resetSelect, [lasso, resetSelect]);\r\n\r\n    useEffect(() => {\r\n      if (!selected) return;\r\n      return () => {\r\n        setChosenIDs([]);\r\n        setActiveTool(\"\");\r\n      };\r\n    }, [selected, setActiveTool]);\r\n\r\n    const [raster, setRaster] = usePaperItem<paper.Raster>();\r\n    const rasterizeLayer = () => {\r\n      if (mergedStrokes.length < 2_000) return;\r\n      const [l0, l1] = scope.current.project.layers;\r\n      if (!l0 || !l1) return;\r\n      setRaster((r) => {\r\n        scope.current.activate();\r\n        const resolution = (canvasWidth / width) * 72 * devicePixelRatio;\r\n        r = l1.rasterize({ raster: r, resolution });\r\n        r.visible = true;\r\n        l0.addChild(r);\r\n        l1.visible = false;\r\n        return r;\r\n      });\r\n    };\r\n    const unrasterizeLayer = () => {\r\n      scope.current.project.layers[1]!.visible = true;\r\n      if (raster) raster.visible = false;\r\n    };\r\n\r\n    const downPath = (e: paper.MouseEvent) => {\r\n      rasterizeLayer();\r\n      setPath(startStroke(drawCtrl, e.point));\r\n    };\r\n    const downRect = (e: paper.MouseEvent) => {\r\n      rasterizeLayer();\r\n      setRect(startRect(e.point));\r\n    };\r\n\r\n    const handleDown = {\r\n      draw: downPath,\r\n      erase: downPath,\r\n      select: lasso ? downPath : downRect,\r\n      selected(e: paper.MouseEvent) {\r\n        if (lasso) {\r\n          // if the point is outside of selection, reset selection\r\n          if (path?.contains(e.point)) return;\r\n          downPath(e);\r\n          setSelected(false);\r\n        } else {\r\n          // check if the point hit the segment point.\r\n          let hitRes =\r\n            rect?.hitTest(e.point, { segments: true }) ??\r\n            rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n          hitRef.current = hitRes;\r\n          if (hitRes) return;\r\n\r\n          // if the point is outside of selection, reset selection\r\n          if (rect?.contains(e.point)) return;\r\n          downRect(e);\r\n          setRotateHandle(undefined);\r\n          setSelected(false);\r\n        }\r\n      },\r\n      text(e: paper.MouseEvent) {\r\n        const layer = scope.current.project.layers[1];\r\n        if (!layer) return;\r\n        const t = getClickedText(layer, e.point) ?? startText(e.point);\r\n        setPointText(t);\r\n      },\r\n    }[paperMode];\r\n\r\n    const dragPath = (e: paper.MouseEvent) => {\r\n      path?.add(e.point);\r\n      path?.smooth();\r\n    };\r\n    const resizeRect = (e: paper.MouseEvent) => {\r\n      if (!rect) return;\r\n      const { x, y } = e.point;\r\n      const [, s1, s2, s3] = rect.segments;\r\n      if (!s1 || !s2 || !s3) return;\r\n      s1.point.x = x;\r\n      s2.point = e.point;\r\n      s3.point.y = y;\r\n      rect.selected = true;\r\n    };\r\n\r\n    const handleDrag = {\r\n      draw: dragPath,\r\n      erase: dragPath,\r\n      select: lasso ? dragPath : resizeRect,\r\n      selected(e: paper.MouseEvent) {\r\n        const hitRes = hitRef.current;\r\n        if (hitRes?.segment && rect && rotateHandle) {\r\n          const segment = hitRes.segment;\r\n          const rotating = segment.selected;\r\n          if (rotating) {\r\n            // rotate select items\r\n            const { center } = rect.bounds;\r\n            const axis = segment.point.subtract(center);\r\n            const line = e.point.subtract(center);\r\n            setCursor(getRotateCurcor(line.angle));\r\n            const angle = line.angle - axis.angle;\r\n            rect.rotate(angle, center);\r\n            rotateHandle.rotate(angle, center);\r\n            chosenItems.forEach((item) => item?.rotate(angle, center));\r\n          } else {\r\n            // resize selected items\r\n            const moveP = segment.point;\r\n            const baseP = segment.next.next.point;\r\n            const diagonal = moveP.subtract(baseP);\r\n            const projection = e.point.subtract(baseP).project(diagonal);\r\n            const scale = projection.x / diagonal.x;\r\n            if (scale < 0) return;\r\n\r\n            rect.scale(scale, baseP);\r\n            chosenItems.forEach((item) => {\r\n              item.scale(scale, baseP);\r\n              item.strokeWidth *= scale;\r\n            });\r\n            rotateHandle.scale(scale, baseP);\r\n            const rBaseP = rotateHandle.segments[0]?.point;\r\n            if (!rBaseP) return;\r\n            rotateHandle.scale(100 / rotateHandle.length, rBaseP);\r\n          }\r\n        } else {\r\n          // move selected items\r\n          chosenItems.forEach((item) => item.translate(e.delta));\r\n          path?.translate(e.delta);\r\n          rect?.translate(e.delta);\r\n          rotateHandle?.translate(e.delta);\r\n        }\r\n      },\r\n      text(e: paper.MouseEvent) {\r\n        if (!pointText || pointText.name) return;\r\n        const { topCenter, bottomRight } = pointText.bounds;\r\n        const diagonal = bottomRight.subtract(topCenter);\r\n        const projection = e.point.subtract(topCenter).project(diagonal);\r\n        const scale = projection.x / diagonal.x;\r\n        if (scale < 0) return;\r\n        pointText.scale(scale, topCenter);\r\n      },\r\n    }[paperMode];\r\n\r\n    useEffect(() => {\r\n      scope.current.tool.maxDistance = eraserWidth;\r\n    }, [eraserWidth]);\r\n    const erased = useRef(new Set<string>());\r\n    const replaced = useRef(new Map<string, paper.Item>());\r\n\r\n    const handelToolDrag = (e: paper.ToolEvent) => {\r\n      if (paperMode !== \"erase\") return;\r\n      const layer = scope.current.project.layers[1];\r\n      if (!layer) return;\r\n      const prevVisible = layer.visible;\r\n      layer.visible = true;\r\n      const hitRes = layer.hitTestAll(e.point, {\r\n        class: paper.Path,\r\n        stroke: true,\r\n        tolerance: eraserWidth / 2,\r\n      });\r\n      layer.visible = prevVisible;\r\n\r\n      hitRes?.forEach(({ item }) => {\r\n        if (!(item instanceof paper.Path)) return;\r\n        let topItem: paper.PathItem = item;\r\n        while (topItem.parent !== layer) {\r\n          if (!(topItem.parent instanceof paper.PathItem)) break;\r\n          topItem = topItem.parent;\r\n        }\r\n        const { name } = topItem;\r\n\r\n        if (drawCtrl.pixelEraser) {\r\n          const radius = (eraserWidth + item.strokeWidth) / 2;\r\n          const circle = new Path.Circle({\r\n            center: e.point,\r\n            radius,\r\n            insert: false,\r\n          });\r\n\r\n          const sub = item.subtract(circle, { trace: false });\r\n          item.replaceWith(sub);\r\n          if (topItem === item) topItem = sub;\r\n          replaced.current.set(name, topItem);\r\n        } else {\r\n          topItem.opacity = 0.5;\r\n          topItem.guide = true;\r\n          erased.current.add(name);\r\n        }\r\n      });\r\n    };\r\n\r\n    const handleUp = {\r\n      draw() {\r\n        unrasterizeLayer();\r\n        if (!path || path.segments.length <= 1) return;\r\n        path.simplify();\r\n        const pathData = path.exportJSON();\r\n        setPath(undefined);\r\n        onChange((prev) => DrawState.addStroke(prev, pathData));\r\n      },\r\n      erase() {\r\n        unrasterizeLayer();\r\n        setPath(undefined);\r\n        if (drawCtrl.pixelEraser) {\r\n          const items = Array.from(replaced.current);\r\n          replaced.current.clear();\r\n          const splitters: Splitter[] = items.map(([uid, item]) => {\r\n            const paths = flattenCP(item);\r\n            return [uid, paths.map((i) => i.exportJSON())];\r\n          });\r\n          if (!splitters.length) return;\r\n          onChange((prev) => DrawState.splitStrokes(prev, splitters));\r\n        } else {\r\n          const erasedList = Array.from(erased.current);\r\n          erased.current.clear();\r\n          if (!erasedList.length) return;\r\n          onChange((prev) => DrawState.eraseStrokes(prev, erasedList));\r\n        }\r\n      },\r\n      select() {\r\n        unrasterizeLayer();\r\n        let selection: string[];\r\n        if (lasso) {\r\n          if (!path || Math.abs(path.area) < 1_000) return setPath(undefined);\r\n          path.closePath();\r\n          path.simplify();\r\n          moveDash(path);\r\n          selection = checkLasso(group, path);\r\n        } else {\r\n          if (!rect || Math.abs(rect.area) < 1_000) return setRect(undefined);\r\n          selection = checkLasso(group, rect);\r\n          const link = new Path();\r\n          const { topCenter } = rect.bounds;\r\n          link.add(topCenter, topCenter.subtract(new Point(0, 100)));\r\n          link.lastSegment.selected = true;\r\n          setRotateHandle(link);\r\n        }\r\n        setSelected(true);\r\n        setChosenIDs(selection);\r\n        setActiveTool(\"select\");\r\n      },\r\n      selected(e: paper.MouseEvent) {\r\n        updateMutation();\r\n        handleSelectedCursor(e);\r\n      },\r\n      text() {\r\n        setActiveTool(\"text\");\r\n      },\r\n    }[paperMode];\r\n\r\n    const [cursor, setCursor] = useState(\"auto\");\r\n    useEffect(() => {\r\n      if (paperMode === \"text\" || paperMode === \"select\") {\r\n        setCursor(\"crosshair\");\r\n      } else if (paperMode === \"selected\") {\r\n        setCursor(lasso ? \"crosshair\" : \"nwse-resize\");\r\n      } else if (paperMode === \"draw\" || paperMode === \"erase\") {\r\n        setCursor(getCircleCursor(drawCtrl, ratio));\r\n      }\r\n    }, [paperMode, lasso, drawCtrl, ratio]);\r\n\r\n    const handleSelectedCursor = (e: paper.MouseEvent) => {\r\n      const hitRes =\r\n        rect?.hitTest(e.point, { segments: true }) ??\r\n        rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n      if (hitRes?.segment) {\r\n        if (hitRes.segment.selected) {\r\n          const center = rect?.bounds.center;\r\n          if (!center) return;\r\n          const line = hitRes.segment.point.subtract(center);\r\n          return setCursor(getRotateCurcor(line.angle));\r\n        }\r\n        const moveP = hitRes.segment.point;\r\n        const baseP = hitRes.segment.next.next.point;\r\n        const diagonal = moveP.subtract(baseP);\r\n        const { x, y } = diagonal;\r\n        return setCursor(x * y < 0 ? \"nesw-resize\" : \"nwse-resize\");\r\n      }\r\n      if ((rect ?? path)?.contains(e.point)) return setCursor(\"move\");\r\n      setCursor(\"crosshair\");\r\n    };\r\n\r\n    const handleMove = {\r\n      selected: handleSelectedCursor,\r\n      text(e: paper.MouseEvent) {\r\n        const layer = scope.current.project.layers[1];\r\n        if (!layer) return;\r\n        if (getClickedText(layer, e.point)) setCursor(\"text\");\r\n        else setCursor(\"crosshair\");\r\n      },\r\n      ...{ select: null, draw: null, erase: null },\r\n    }[paperMode];\r\n\r\n    const handleKeyUp =\r\n      paperMode === \"selected\"\r\n        ? (e: paper.KeyEvent) => {\r\n            if ([\"delete\", \"backspace\"].includes(e.key)) {\r\n              deleteSelected();\r\n            }\r\n          }\r\n        : null;\r\n\r\n    useEffect(() => {\r\n      if (readonly) return;\r\n\r\n      type Handler<E> = ((e: E) => boolean | void) | null;\r\n      const activate = <E,>(handler: Handler<E>): Handler<E> => {\r\n        return (e) => {\r\n          scope.current.activate();\r\n          if (handler) return handler(e);\r\n        };\r\n      };\r\n      const { view, tool } = scope.current;\r\n      view.onMouseDown = activate(handleDown);\r\n      view.onMouseDrag = activate(handleDrag);\r\n      view.onMouseUp = activate(handleUp);\r\n      view.onMouseMove = activate(handleMove);\r\n      tool.onMouseDrag = activate(handelToolDrag);\r\n      tool.onKeyUp = activate(handleKeyUp);\r\n    });\r\n\r\n    const updateMutation = () => {\r\n      if (!chosenItems?.length) return;\r\n      const mutations: Mutation[] = chosenItems.map((p) => [\r\n        p.name,\r\n        p.exportJSON(),\r\n      ]);\r\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\r\n    };\r\n\r\n    const deleteSelected = () => {\r\n      resetSelect();\r\n      if (!chosenIDs.length) return;\r\n      onChange((prev) => DrawState.eraseStrokes(prev, chosenIDs));\r\n    };\r\n\r\n    const mutateStyle = (updated: Partial<DrawCtrl>) => {\r\n      scope.current.activate();\r\n      updateGroupStyle(chosenItems, updated);\r\n      updateMutation();\r\n    };\r\n\r\n    const duplicateSelected = () => {\r\n      scope.current.activate();\r\n      const size = (rect || path)?.bounds.size;\r\n      if (!size || !chosenItems.length) return;\r\n      const { width, height } = size;\r\n      const transP = new Point(width, height).divide(10);\r\n      const copies = chosenItems.map((item) => item.clone());\r\n      copies.forEach((item) => item.translate(transP));\r\n      rect?.translate(transP);\r\n      path?.translate(transP);\r\n      rotateHandle?.translate(transP);\r\n\r\n      const mutations: Mutation[] = copies.map((item) => [\r\n        DrawState.getUid(),\r\n        item.exportJSON(),\r\n      ]);\r\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\r\n      setChosenIDs(mutations.map(([uid]) => uid));\r\n    };\r\n\r\n    const rasterize = () => {\r\n      const g = new Group(chosenItems);\r\n      const layer = scope.current.project.layers[1];\r\n      if (!layer) return \"\";\r\n      g.addTo(layer);\r\n      return g.rasterize({ insert: false }).toDataURL();\r\n    };\r\n\r\n    const [pointText, setPointText] = usePaperItem<paper.PointText>();\r\n    const cancelText = useCallback(() => {\r\n      setPointText(undefined);\r\n      setActiveTool(\"\");\r\n    }, [setPointText, setActiveTool]);\r\n\r\n    useEffect(() => {\r\n      if (mode === \"text\") return cancelText;\r\n    }, [mode, cancelText]);\r\n\r\n    const submitText = (\r\n      text: string,\r\n      color = \"#000\",\r\n      justification = \"center\"\r\n    ) => {\r\n      if (!pointText) return;\r\n      pointText.content = text;\r\n      pointText.fillColor = new Color(color);\r\n      pointText.justification = justification;\r\n      const pathData = pointText.exportJSON();\r\n      const { name } = pointText;\r\n      cancelText();\r\n      if (!name) return onChange((prev) => DrawState.addStroke(prev, pathData));\r\n      onChange((prev) => DrawState.mutateStrokes(prev, [[name, pathData]]));\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      deleteSelected,\r\n      duplicateSelected,\r\n      cancelText,\r\n      submitText,\r\n      mutateStyle,\r\n      rasterize,\r\n      pointText,\r\n    }));\r\n\r\n    usePreventGesture();\r\n    usePinch(\r\n      ({ memo, offset: [scale], first, last, origin }) => {\r\n        scope.current.activate();\r\n        const { view } = scope.current;\r\n        const originRawP = new Point(origin);\r\n\r\n        let lastScale: number;\r\n        let lastOrigin, elPos: paper.Point;\r\n        if (first || !memo) {\r\n          const { x, y } = canvasEl.current!.getBoundingClientRect();\r\n          lastScale = 1;\r\n          elPos = new Point(x, y);\r\n          lastOrigin = originRawP.subtract(elPos);\r\n        } else {\r\n          [lastScale, lastOrigin, elPos] = memo;\r\n        }\r\n\r\n        const originViewP = originRawP.subtract(elPos);\r\n        const originPorjP = view.viewToProject(originViewP);\r\n\r\n        if (Math.abs(1 - scale) < 0.05) scale = 1;\r\n        let dScale = first ? 1 : scale / lastScale;\r\n        let aniCount = last ? 10 : 1;\r\n        dScale = Math.pow(dScale, 1 / aniCount);\r\n        const scaleView = () => {\r\n          view.scale(dScale, originPorjP);\r\n          scope.current.settings.hitTolerance /= dScale;\r\n          if (--aniCount > 0) requestAnimationFrame(scaleView);\r\n          else if (last) putCenterBack(view, new Size(width, height));\r\n        };\r\n        scaleView();\r\n\r\n        const deltaP = originViewP.subtract(lastOrigin);\r\n        const transP = deltaP.divide(view.zoom);\r\n        view.translate(transP);\r\n\r\n        if (!last) return [scale, originViewP, elPos];\r\n      },\r\n      {\r\n        scaleBounds: { max: 10, min: 0.3 },\r\n        rubberband: 0.5,\r\n        target: canvasEl,\r\n      }\r\n    );\r\n\r\n    const touchHandler = usePreventTouch(finger);\r\n    return (\r\n      <div\r\n        className=\"draw-wrapper\"\r\n        style={{ cursor }}\r\n        data-readonly={readonly}\r\n        {...touchHandler}\r\n      >\r\n        <canvas ref={canvasEl} className=\"draw-canvas\" />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nDrawRaw.displayName = \"Draw\";\r\nexport const Draw = React.memo(DrawRaw);\r\n\r\nfunction usePaperItem<T extends paper.Item>() {\r\n  const tuple = useState<T | undefined>();\r\n  const [item] = tuple;\r\n  useDebugValue(item);\r\n  useEffect(() => {\r\n    if (!item?.name) return () => void item?.remove();\r\n  }, [item]);\r\n  return tuple;\r\n}\r\n\r\nconst paintStroke = (() => {\r\n  const cacheMap = new WeakMap<\r\n    paper.Layer,\r\n    Map<string, { stroke: Stroke; item: paper.Item }>\r\n  >();\r\n\r\n  return (stroke: Stroke, layer: paper.Layer, readonly = false) => {\r\n    const { pathData, uid } = stroke;\r\n    const cache = cacheMap.get(layer) ?? new Map();\r\n    cacheMap.set(layer, cache);\r\n    const cached = cache.get(uid);\r\n    let item: paper.Item;\r\n    if (cached?.stroke === stroke) {\r\n      layer.addChild(cached.item);\r\n      item = cached.item;\r\n    } else {\r\n      try {\r\n        item = layer.importJSON(pathData);\r\n      } catch (e) {\r\n        console.error(e);\r\n        item = new paper.Item();\r\n      }\r\n      item.name = uid;\r\n      cache.set(uid, { item, stroke });\r\n    }\r\n    item.opacity = 1;\r\n    item.guide = readonly;\r\n    return item;\r\n  };\r\n})();\r\n\r\nconst paintRects = (layers: paper.Layer[], width: number, height: number) => {\r\n  const [l0, l1, l2] = layers;\r\n  if (!l0 || !l1 || !l2) return [];\r\n  const bgRect = new Path.Rectangle(new Point(0, 0), new Point(width, height));\r\n  const clip1 = bgRect.clone();\r\n  const clip2 = clip1.clone();\r\n  bgRect.fillColor = new Color(\"#fff\");\r\n  l0.addChild(bgRect);\r\n  l1.addChild(clip1);\r\n  l2.addChild(clip2);\r\n  l1.clipped = true;\r\n  l2.clipped = true;\r\n  return [bgRect, clip1, clip2];\r\n};\r\n\r\nconst startRect = (point: paper.Point) => {\r\n  const rect = new Path.Rectangle(point, new Size(0, 0));\r\n  rect.onFrame = () => {}; // the handle size bug\r\n  return rect;\r\n};\r\n\r\nconst startStroke = (drawCtrl: DrawCtrl, point: paper.Point) => {\r\n  let { mode, lineWidth, eraserWidth, color, highlight } = drawCtrl;\r\n  const path = new Path();\r\n  path.add(point);\r\n  if (mode === \"erase\") {\r\n    color = \"#ccc\";\r\n    lineWidth = eraserWidth;\r\n  }\r\n  if (mode === \"select\") {\r\n    color = \"#009dec\";\r\n    lineWidth = 5;\r\n  }\r\n  const strokeColor = new Color(color);\r\n  if (highlight || mode === \"erase\") {\r\n    strokeColor.alpha = 0.5;\r\n    path.blendMode = \"multiply\";\r\n  }\r\n  path.strokeColor = strokeColor;\r\n  path.strokeWidth = lineWidth;\r\n  path.strokeJoin = \"round\";\r\n  path.strokeCap = \"round\";\r\n  path.guide = true;\r\n  return path;\r\n};\r\n\r\nconst moveDash = (item: paper.Item) => {\r\n  item.dashOffset = 0;\r\n  item.dashArray = [30, 20];\r\n  item.onFrame = () => (item.dashOffset += 3);\r\n};\r\n\r\nconst getCenterTranslate = (\r\n  view: paper.View,\r\n  projSize: paper.Size\r\n): [number, number] => {\r\n  const { x, y } = view.center;\r\n  const { width: viewW, height: viewH } = view.size;\r\n  const { width: projW, height: projH } = projSize;\r\n\r\n  const [minX, minY] = [Math.min(viewW, projW) / 2, Math.min(viewH, projH) / 2];\r\n  const [maxX, maxY] = [projW - minX, projH - minY];\r\n\r\n  const deltaX = x < minX ? minX - x : x > maxX ? maxX - x : 0;\r\n  const deltaY = y < minY ? minY - y : y > maxY ? maxY - y : 0;\r\n\r\n  return [deltaX, deltaY];\r\n};\r\n\r\nconst putCenterBack = (view: paper.View, projSize: paper.Size) => {\r\n  const [deltaX, deltaY] = getCenterTranslate(view, projSize);\r\n  let aniCount = 10;\r\n  const dP = new Point(deltaX, deltaY).divide(-aniCount);\r\n  const move = () => {\r\n    view.translate(dP);\r\n    if (--aniCount > 0) requestAnimationFrame(move);\r\n  };\r\n  move();\r\n};\r\n\r\nconst checkLasso = (items: paper.Item[], selection: paper.Path) => {\r\n  const isInside = (p: paper.Path) => {\r\n    const res = p.subtract(selection, { insert: false, trace: false });\r\n    res.remove();\r\n    return !res.compare(p);\r\n  };\r\n  return items\r\n    .filter((item) => {\r\n      if (!item.name) return false;\r\n      if (!item.bounds.intersects(selection.bounds)) return false;\r\n      if (item instanceof paper.Path) {\r\n        return (\r\n          (selection.segments.length === 4 &&\r\n            item.isInside(selection.bounds)) ||\r\n          isInside(item)\r\n        );\r\n      } else {\r\n        const checkedP = new Path.Rectangle(item.bounds);\r\n        checkedP.remove();\r\n        return isInside(checkedP) || selection.isInside(item.bounds);\r\n      }\r\n    })\r\n    .map(({ name }) => name);\r\n};\r\n\r\nconst updateGroupStyle = (items: paper.Item[], updated: Partial<DrawCtrl>) => {\r\n  const { lineWidth, color, highlight } = updated;\r\n  items.forEach((item) => {\r\n    if (item instanceof paper.PointText && color) {\r\n      const newColor = new Color(color);\r\n      item.fillColor = newColor;\r\n    }\r\n\r\n    if (!(item instanceof paper.Path)) return;\r\n\r\n    if (color) {\r\n      const newColor = new Color(color);\r\n      if (item.blendMode === \"multiply\") newColor.alpha = 0.5;\r\n      item.strokeColor = newColor;\r\n    }\r\n\r\n    if (lineWidth) item.strokeWidth = lineWidth;\r\n\r\n    if (!item.strokeColor || highlight === undefined) return;\r\n    item.strokeColor.alpha = highlight ? 0.5 : 1;\r\n    item.blendMode = highlight ? \"multiply\" : \"normal\";\r\n  });\r\n};\r\n\r\nconst getClickedText = (layer: paper.Layer, point: paper.Point) => {\r\n  const hitRes = layer.hitTest(point, {\r\n    class: paper.PointText,\r\n    fill: true,\r\n  });\r\n  if (hitRes?.item instanceof paper.PointText) return hitRes?.item;\r\n};\r\n\r\nconst startText = (point: paper.Point) => {\r\n  return new paper.PointText({\r\n    point: point.add(new Point(0, 50)),\r\n    content: \"Insert text...\",\r\n    fontSize: 50,\r\n    justification: \"center\",\r\n    fillColor: \"#1890ff55\",\r\n  });\r\n};\r\n\r\nconst flattenCP = (cp: paper.Item): paper.Path[] => {\r\n  if (cp instanceof paper.Path) {\r\n    return cp.isEmpty() ? [] : [cp];\r\n  }\r\n  if (cp instanceof paper.CompoundPath) {\r\n    return cp.children.map(flattenCP).flat();\r\n  }\r\n  return [];\r\n};\r\n","import { FC, RefObject, useEffect, useState } from \"react\";\r\nimport {\r\n  CopyOutlined,\r\n  DeleteOutlined,\r\n  PictureOutlined,\r\n  BgColorsOutlined,\r\n  AlignLeftOutlined,\r\n  FontColorsOutlined,\r\n  AlignRightOutlined,\r\n  AlignCenterOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Button, ButtonProps, Modal, Popover, Radio } from \"antd\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\r\nimport { useForceLight } from \"lib/Dark\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { allColors } from \"lib/color\";\r\nimport { DrawRefType } from \"component/Draw\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { saveAs } from \"file-saver\";\r\nimport \"./drawTools.sass\";\r\n\r\nexport const SelectTool: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n  visible: boolean;\r\n}> = ({ drawRef, visible }) => (\r\n  <CSSTransition timeout={300} in={visible} unmountOnExit>\r\n    <SelectToolContent drawRef={drawRef} />\r\n  </CSSTransition>\r\n);\r\n\r\nexport const SelectToolContent: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n}> = ({ drawRef }) => {\r\n  const btnProps: ButtonProps = {\r\n    type: \"text\",\r\n    shape: \"round\",\r\n    size: \"small\",\r\n  };\r\n\r\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\r\n\r\n  const getRaster = () => {\r\n    if (!drawRef.current) return;\r\n    const imageData = drawRef.current.rasterize();\r\n    Modal.confirm({\r\n      title: \"Screenshot\",\r\n      content: <img className=\"raster\" src={imageData} alt=\"raster\" />,\r\n      className: \"raster-modal\",\r\n      icon: <PictureOutlined />,\r\n      okText: \"Save\",\r\n      onOk: () => saveAs(imageData, \"screenshot\"),\r\n    });\r\n  };\r\n\r\n  return createPortal(\r\n    <div className=\"select-tool\">\r\n      <Popover\r\n        trigger=\"click\"\r\n        placement=\"bottom\"\r\n        getPopupContainer={(e) => e.parentElement!}\r\n        destroyTooltipOnHide\r\n        content={\r\n          <PenPanel\r\n            updateDrawCtrl={(updated) => {\r\n              setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\r\n              drawRef.current?.mutateStyle(updated);\r\n            }}\r\n            drawCtrl={currDrawCtrl}\r\n          />\r\n        }\r\n      >\r\n        <Button icon={<BgColorsOutlined />} {...btnProps} />\r\n      </Popover>\r\n      <Button\r\n        icon={<CopyOutlined />}\r\n        onClick={() => drawRef.current?.duplicateSelected()}\r\n        {...btnProps}\r\n      />\r\n      <Button icon={<PictureOutlined />} onClick={getRaster} {...btnProps} />\r\n      <Button\r\n        danger\r\n        icon={<DeleteOutlined />}\r\n        onClick={() => drawRef.current?.deleteSelected()}\r\n        {...btnProps}\r\n      />\r\n    </div>,\r\n    document.querySelector(\".reader.container > header\")!\r\n  );\r\n};\r\n\r\nexport const TextTool: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n  visible: boolean;\r\n}> = ({ visible, drawRef }) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [color, setColor] = useState(allColors[0]!);\r\n  const [align, setAlign] = useState(\"center\");\r\n  const [forceLight] = useForceLight();\r\n\r\n  useEffect(() => {\r\n    const pointText = drawRef.current?.pointText;\r\n    if (!pointText || !visible) return;\r\n    const { name, content, justification, fillColor } = pointText;\r\n    setAlign(justification);\r\n    if (name) {\r\n      setText(content);\r\n      setColor(fillColor?.toCSS(true) ?? allColors[0]!);\r\n    } else {\r\n      setText(\"\");\r\n      setColor(allColors[0]!);\r\n    }\r\n  }, [visible, drawRef]);\r\n\r\n  const fontColorBtn = (\r\n    <Popover\r\n      content={<ColorSelect color={color} setColor={setColor} />}\r\n      overlayStyle={{ width: 200 }}\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n    >\r\n      <Button\r\n        size=\"small\"\r\n        icon={<FontColorsOutlined className=\"font-icon\" style={{ color }} />}\r\n      />\r\n    </Popover>\r\n  );\r\n\r\n  const alignRadio = (\r\n    <Radio.Group\r\n      size=\"small\"\r\n      optionType=\"button\"\r\n      value={align}\r\n      buttonStyle=\"solid\"\r\n      onChange={(e) => setAlign(e.target.value)}\r\n      options={[\r\n        { label: <AlignLeftOutlined />, value: \"left\" },\r\n        { label: <AlignCenterOutlined />, value: \"center\" },\r\n        { label: <AlignRightOutlined />, value: \"right\" },\r\n      ]}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      visible={visible}\r\n      title=\"Insert text\"\r\n      onCancel={() => drawRef.current?.cancelText()}\r\n      onOk={() => {\r\n        const content = text.trim();\r\n        if (!content) return drawRef.current?.cancelText();\r\n        drawRef.current?.submitText(content, color, align);\r\n      }}\r\n      bodyStyle={{ paddingTop: 0 }}\r\n      destroyOnClose\r\n    >\r\n      <div className=\"insert-option\" data-force-light={forceLight}>\r\n        {fontColorBtn}\r\n        {alignRadio}\r\n      </div>\r\n      <TextArea\r\n        size=\"large\"\r\n        rows={3}\r\n        autoFocus\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n      />\r\n    </Modal>\r\n  );\r\n};\r\n","import React, {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport { useDrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { useForceLight } from \"lib/Dark\";\r\nimport { useMemoizedFn as useEvent } from \"ahooks\";\r\nimport { Draw, ActiveToolKey, DrawRefType } from \"component/Draw\";\r\nimport { SelectTool, TextTool } from \"pages/reader/tools/DrawTools\";\r\nimport { once, range } from \"lodash\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { DrawState } from \"lib/draw/DrawState\";\r\nimport { Map, Set } from \"immutable\";\r\n\r\nconst PageWrapperRaw: FC<{\r\n  drawState: DrawState;\r\n  teamStateMap?: Map<string, DrawState>;\r\n  thumbnail?: string;\r\n  pdfIndex?: number;\r\n  noteID?: string;\r\n  updateState?: (ds: DrawState) => void;\r\n  onViewChange?: (ratio: number) => void;\r\n  preview?: boolean;\r\n  preload?: boolean;\r\n  ignores?: Set<string>;\r\n  skipInView?: boolean;\r\n}> = ({\r\n  thumbnail,\r\n  drawState,\r\n  teamStateMap,\r\n  updateState,\r\n  pdfIndex,\r\n  noteID = \"\",\r\n  preview = false,\r\n  onViewChange,\r\n  preload = false,\r\n  ignores = Set<string>(),\r\n  skipInView = false,\r\n}) => {\r\n  const threshold = onViewChange && range(0, 1.2, 0.2);\r\n  const [ref, visible, entry] = useInView({ threshold, skip: skipInView });\r\n  useEffect(() => {\r\n    if (!onViewChange) return;\r\n    if (!entry || !visible) return onViewChange(0);\r\n    onViewChange(entry.intersectionRatio);\r\n  }, [visible, entry, onViewChange]);\r\n\r\n  const [fullImg, setFullImg] = useState<string>();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const loadImage = useCallback(\r\n    once(async () => {\r\n      if (!pdfIndex || !noteID) return;\r\n      const { getNotePageImage } = await import(\"lib/note/pdfImage\");\r\n      setFullImg(await getNotePageImage(noteID, pdfIndex));\r\n    }),\r\n    [pdfIndex, noteID]\r\n  );\r\n\r\n  const show = visible || preload;\r\n  useEffect(() => {\r\n    if (!preview && show) loadImage();\r\n  }, [show, preview, loadImage]);\r\n\r\n  const otherStates = useMemo(\r\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\r\n    [teamStateMap, ignores]\r\n  );\r\n\r\n  const imageLoaded = Boolean(fullImg || !pdfIndex);\r\n  const drawShow = show && imageLoaded;\r\n\r\n  const { height, width } = drawState;\r\n  const ratio = height / width;\r\n  const [forceLight] = useForceLight();\r\n\r\n  return (\r\n    <div ref={ref} className=\"page-wrapper\" data-force-light={forceLight}>\r\n      <svg viewBox={`0 0 100 ${ratio * 100}`} />\r\n      {drawShow && (\r\n        <DrawWrapper\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          updateState={updateState}\r\n          imgSrc={fullImg || thumbnail}\r\n          preview={preview}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nPageWrapperRaw.displayName = \"PageWrapper\";\r\nexport const PageWrapper = React.memo(PageWrapperRaw);\r\n\r\nconst DrawWrapper: FC<{\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}> = ({ drawState, updateState, otherStates, preview = false, imgSrc }) => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const [activeTool, setActiveTool] = useState<ActiveToolKey>(\"\");\r\n  const drawRef = useRef<DrawRefType>(null);\r\n\r\n  const handleChange = useEvent(\r\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\r\n      if (!updateState) return;\r\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\r\n      if (newDS === drawState) return;\r\n      updateState(newDS);\r\n    }\r\n  );\r\n\r\n  return preview ? (\r\n    <Draw\r\n      drawState={drawState}\r\n      otherStates={otherStates}\r\n      imgSrc={imgSrc}\r\n      readonly\r\n    />\r\n  ) : (\r\n    <>\r\n      <Draw\r\n        drawState={drawState}\r\n        otherStates={otherStates}\r\n        onChange={handleChange}\r\n        imgSrc={imgSrc}\r\n        drawCtrl={drawCtrl}\r\n        ref={drawRef}\r\n        setActiveTool={setActiveTool}\r\n      />\r\n      <SelectTool drawRef={drawRef} visible={activeTool === \"select\"} />\r\n      <TextTool drawRef={drawRef} visible={activeTool === \"text\"} />\r\n    </>\r\n  );\r\n};\r\nDrawWrapper.displayName = \"DrawWrapper\";\r\n","import { PageWrapper } from \"./PageWrapper\";\r\nimport \"./page-wrapper.sass\";\r\nexport default PageWrapper;\r\n","import localforage from \"localforage\";\r\nimport React, {\r\n  FC,\r\n  PropsWithChildren,\r\n  useContext,\r\n  useDebugValue,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nexport interface DrawCtrl {\r\n  mode: \"draw\" | \"erase\" | \"select\" | \"text\";\r\n  finger: boolean;\r\n  lineWidth: number;\r\n  eraserWidth: number;\r\n  color: string;\r\n  highlight: boolean;\r\n  lasso: boolean;\r\n  pixelEraser: boolean;\r\n  widthList: number[];\r\n}\r\n\r\nexport const defaultWidthList = [10, 20, 30, 50];\r\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\r\n  mode: \"draw\",\r\n  finger: true,\r\n  lineWidth: 10,\r\n  eraserWidth: 10,\r\n  color: \"#000000\",\r\n  highlight: false,\r\n  lasso: true,\r\n  pixelEraser: false,\r\n  widthList: defaultWidthList,\r\n};\r\n\r\nasync function getDrawCtrl() {\r\n  let drawCtrl = await localforage.getItem<DrawCtrl>(\"DRAW_CTRL\");\r\n  if (!drawCtrl) {\r\n    drawCtrl = defaultDrawCtrl;\r\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n  }\r\n  return drawCtrl;\r\n}\r\n\r\nasync function saveDrawCtrl(drawCtrl: DrawCtrl) {\r\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n}\r\n\r\nconst DrawCtrlContext = React.createContext({\r\n  drawCtrl: defaultDrawCtrl,\r\n  updateDrawCtrl: (() => {}) as (updated: Partial<DrawCtrl>) => void,\r\n});\r\n\r\nexport function useDrawCtrl() {\r\n  const { drawCtrl } = useContext(DrawCtrlContext);\r\n  useDebugValue(drawCtrl);\r\n  return drawCtrl;\r\n}\r\n\r\nexport function useUpdateDrawCtrl() {\r\n  const { updateDrawCtrl } = useContext(DrawCtrlContext);\r\n  return updateDrawCtrl;\r\n}\r\n\r\nexport const DrawCtrlProvider: FC<PropsWithChildren> = ({ children }) => {\r\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\r\n  useEffect(() => {\r\n    getDrawCtrl().then(setDrawCtrl);\r\n  }, []);\r\n\r\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\r\n    setDrawCtrl((prev) => {\r\n      const newCtrl = { ...prev, ...updated };\r\n      saveDrawCtrl(newCtrl);\r\n      return newCtrl;\r\n    });\r\n  };\r\n  return (\r\n    <DrawCtrlContext.Provider value={{ drawCtrl, updateDrawCtrl }}>\r\n      {children}\r\n    </DrawCtrlContext.Provider>\r\n  );\r\n};\r\n","export function createVirtualCanvas(width: number, height: number) {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const context = canvas.getContext(\"2d\");\r\n  if (!context) {\r\n    throw new Error(\"can't get virtual canvas context\");\r\n  }\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  return { canvas, context };\r\n}\r\n\r\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  const ctx = canvas.getContext('2d');\r\n  ctx?.clearRect(0, 0, 1, 1);\r\n}\r\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\r\nimport { defaultWidthList, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorCirle } from \"component/ColorCircle\";\r\nimport { WIDTH } from \"lib/draw/DrawState\";\r\nimport { Popover, Segmented, Slider } from \"antd\";\r\nimport { allColors } from \"lib/color\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport IconFont from \"component/IconFont\";\r\nimport { List } from \"immutable\";\r\nimport \"./penPanel.sass\";\r\nimport { useForceLight } from \"lib/Dark\";\r\n\r\nexport const PenPanel: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n}> = ({ updateDrawCtrl, drawCtrl }) => {\r\n  const { highlight, color } = drawCtrl;\r\n  const [panelBlur, setPanelBlur] = useState(false);\r\n\r\n  return (\r\n    <div className=\"pen-panel\" data-blur={panelBlur} data-hi={highlight}>\r\n      <div className=\"pen-status\">\r\n        <WidthSelect\r\n          updateDrawCtrl={updateDrawCtrl}\r\n          drawCtrl={drawCtrl}\r\n          setPanelBlur={setPanelBlur}\r\n        />\r\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\r\n      </div>\r\n      <ColorSelect\r\n        color={color || \"\"}\r\n        setColor={(c) => updateDrawCtrl({ color: c })}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const WidthSelect: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n  setPanelBlur?: Setter<boolean>;\r\n  field?: \"lineWidth\" | \"eraserWidth\";\r\n}> = ({\r\n  updateDrawCtrl,\r\n  drawCtrl,\r\n  setPanelBlur = () => {},\r\n  field = \"lineWidth\",\r\n}) => {\r\n  const currWidth = drawCtrl[field];\r\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\r\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\r\n\r\n  const chosen = useMemo(\r\n    () => widthList.indexOf(currWidth ?? -1),\r\n    [currWidth, widthList]\r\n  );\r\n\r\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\r\n  useEffect(() => {\r\n    if (popShow.includes(true)) setPanelBlur(true);\r\n    else setPanelBlur(false);\r\n  }, [popShow, setPanelBlur]);\r\n\r\n  const realSizeStyle = (width: number) =>\r\n    ({\r\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width})`,\r\n    } as CSSProperties);\r\n\r\n  const [forceLight] = useForceLight();\r\n\r\n  const options = [\r\n    { value: -1, label: null },\r\n    ...widthList.map((width, index) => ({\r\n      value: index,\r\n      label: (\r\n        <Popover\r\n          visible={popShow.get(index)}\r\n          onVisibleChange={(v) => setPopShow((prev) => prev.set(index, v))}\r\n          trigger={chosen === index ? [\"click\"] : []}\r\n          placement=\"bottom\"\r\n          destroyTooltipOnHide\r\n          content={\r\n            <Slider\r\n              min={5}\r\n              max={100}\r\n              className=\"ctrl-slider\"\r\n              defaultValue={width}\r\n              onAfterChange={(w) => {\r\n                if (widthList.includes(w)) {\r\n                  setPopShow((prev) => prev.set(index, false));\r\n                  return updateDrawCtrl({ [field]: w });\r\n                }\r\n                const newWL = widthList.slice();\r\n                newWL[index] = w;\r\n                updateDrawCtrl({ widthList: newWL, [field]: w });\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          <div\r\n            className=\"circle-wrapper\"\r\n            data-force-light={forceLight}\r\n            style={realSizeStyle(width)}\r\n          >\r\n            <ColorCirle className={\"width-circle \" + field} color={color} />\r\n          </div>\r\n        </Popover>\r\n      ),\r\n    })),\r\n  ];\r\n\r\n  return (\r\n    <Segmented\r\n      className=\"width-seg\"\r\n      value={chosen}\r\n      options={options}\r\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 10 })}\r\n    />\r\n  );\r\n};\r\n\r\nconst HighlightSwitch: FC<{\r\n  checked?: boolean;\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ checked = false, updateDrawCtrl }) => {\r\n  return (\r\n    <label className=\"hi-wrapper\">\r\n      <input\r\n        type=\"checkbox\"\r\n        name=\"highlight\"\r\n        checked={checked}\r\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\r\n      />\r\n      <div className=\"hi-switch\">\r\n        <IconFont type=\"icon-Highlight\" />\r\n      </div>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport const ColorSelect: FC<{\r\n  color: string;\r\n  setColor: (color: string) => void;\r\n}> = ({ setColor, color }) => {\r\n  const [forceLight] = useForceLight();\r\n  return (\r\n    <div className=\"color-select\" data-force-light={forceLight}>\r\n      {allColors.map((c) => (\r\n        <label key={c}>\r\n          <input\r\n            checked={color === c}\r\n            type=\"radio\"\r\n            name=\"color\"\r\n            onChange={(e) => e.target.checked && setColor(c)}\r\n          />\r\n          <div\r\n            data-color={c}\r\n            className=\"circle\"\r\n            style={{ backgroundColor: c, borderColor: c }}\r\n          />\r\n        </label>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n"],"names":["createFromIconfontCN","scriptUrl","getRotateCursorImage","cache","Map","createVirtualCanvas","canvas","context","image","Image","src","angle","Math","round","cached","get","translate","rotate","PI","drawImage","data","toDataURL","clearRect","resetTransform","set","getRotateCurcor","usePreventTouch","allowFinger","isTouch","useRef","checkPoniter","e","isPrimary","current","pointerType","preventTouch","touch","touches","touchType","isApplePencil","length","isEventValid","stopPropagation","onPointerDownCapture","onPointerMoveCapture","onTouchStartCapture","onTouchMoveCapture","DrawRaw","React","ref","drawState","otherStates","onChange","drawCtrl","defaultDrawCtrl","readonly","imgSrc","setActiveTool","width","height","mode","finger","lasso","eraserWidth","canvasEl","scope","paper","useState","group","setGroup","usePaperItem","path","setPath","rect","setRect","rotateHandle","setRotateHandle","useEffect","cvs","scp","setup","settings","handleSize","hitTolerance","forEach","Layer","visible","project","layers","activate","Tool","view","remove","releaseCanvas","rects","paintRects","r","useSize","canvasWidth","ratio","zero","Point","viewSize","Size","multiply","scale","l","update","raster","Raster","addChild","sendToBack","onLoad","fitBounds","bringToFront","mergedStrokes","useMemo","DrawState","getStrokeList","tempGroup","layer","stroke","self","hasStroke","uid","item","paintStroke","push","removeChildren","hitRef","selected","setSelected","paperMode","chosenIDs","setChosenIDs","chosenItems","IDSet","Set","filter","has","name","resetSelect","useCallback","undefined","setRaster","rasterizeLayer","l0","l1","resolution","devicePixelRatio","rasterize","unrasterizeLayer","downPath","startStroke","point","downRect","startRect","handleDown","draw","erase","select","contains","hitRes","hitTest","segments","text","t","getClickedText","startText","setPointText","dragPath","add","smooth","handleDrag","x","y","s1","s2","s3","segment","center","bounds","axis","subtract","line","setCursor","moveP","baseP","next","diagonal","strokeWidth","rBaseP","delta","pointText","topCenter","bottomRight","tool","maxDistance","erased","replaced","handelToolDrag","prevVisible","hitTestAll","class","tolerance","topItem","parent","pixelEraser","radius","circle","Path","insert","sub","trace","replaceWith","opacity","guide","handleUp","simplify","pathData","exportJSON","prev","items","Array","from","clear","splitters","map","flattenCP","i","erasedList","selection","abs","area","closePath","moveDash","checkLasso","link","lastSegment","updateMutation","handleSelectedCursor","cursor","lineWidth","size","half","getCircleCursor","handleMove","handleKeyUp","includes","key","deleteSelected","handler","onMouseDown","onMouseDrag","onMouseUp","onMouseMove","onKeyUp","mutations","p","mutateStyle","updated","updateGroupStyle","duplicateSelected","transP","divide","copies","clone","g","Group","addTo","cancelText","submitText","color","justification","content","fillColor","Color","useImperativeHandle","preventDefault","document","addEventListener","removeEventListener","usePinch","memo","offset","first","last","origin","lastScale","lastOrigin","elPos","originRawP","getBoundingClientRect","originViewP","originPorjP","viewToProject","dScale","aniCount","pow","scaleView","requestAnimationFrame","putCenterBack","zoom","scaleBounds","max","min","rubberband","target","touchHandler","className","style","displayName","Draw","tuple","useDebugValue","cacheMap","WeakMap","importJSON","console","error","l2","bgRect","clip1","clip2","clipped","onFrame","highlight","strokeColor","alpha","blendMode","strokeJoin","strokeCap","dashOffset","dashArray","projSize","viewW","viewH","projW","projH","minX","minY","maxX","maxY","getCenterTranslate","deltaX","deltaY","dP","move","isInside","res","compare","intersects","checkedP","newColor","fill","fontSize","cp","isEmpty","children","flat","SelectTool","drawRef","CSSTransition","timeout","in","unmountOnExit","SelectToolContent","btnProps","type","shape","currDrawCtrl","setCurrDrawCtrl","createPortal","trigger","placement","getPopupContainer","parentElement","destroyTooltipOnHide","PenPanel","updateDrawCtrl","icon","BgColorsOutlined","CopyOutlined","onClick","PictureOutlined","imageData","Modal","title","alt","okText","onOk","saveAs","danger","DeleteOutlined","querySelector","TextTool","setText","allColors","setColor","align","setAlign","useForceLight","forceLight","toCSS","fontColorBtn","overlayStyle","FontColorsOutlined","alignRadio","optionType","value","buttonStyle","options","label","AlignLeftOutlined","AlignCenterOutlined","AlignRightOutlined","onCancel","trim","bodyStyle","paddingTop","destroyOnClose","TextArea","rows","autoFocus","PageWrapperRaw","thumbnail","teamStateMap","updateState","pdfIndex","noteID","preview","onViewChange","preload","ignores","skipInView","threshold","range","useInView","skip","entry","intersectionRatio","fullImg","setFullImg","loadImage","once","getNotePageImage","show","deleteAll","toList","toArray","imageLoaded","Boolean","drawShow","viewBox","DrawWrapper","PageWrapper","useDrawCtrl","activeTool","handleChange","useEvent","arg","newDS","defaultWidthList","widthList","getDrawCtrl","localforage","saveDrawCtrl","DrawCtrlContext","useContext","useUpdateDrawCtrl","DrawCtrlProvider","setDrawCtrl","then","Provider","newCtrl","createElement","getContext","Error","ctx","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","c","field","currWidth","chosen","indexOf","List","popShow","setPopShow","realSizeStyle","WIDTH","index","onVisibleChange","v","defaultValue","onAfterChange","w","newWL","slice","IconFont","backgroundColor","borderColor"],"sourceRoot":""}