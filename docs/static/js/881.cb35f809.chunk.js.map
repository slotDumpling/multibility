{"version":3,"file":"static/js/881.cb35f809.chunk.js","mappings":"mLAIaA,EAAwD,SAAC,GAG/D,IAFLC,EAEI,EAFJA,MACAC,EACI,EADJA,UAEMC,EAAQ,CAAEC,gBAAiBH,GACjC,OACE,gBAAKC,UAAWG,GAAAA,CAAW,eAAgBH,GAAYC,MAAOA,M,+HCV3D,IAAMG,EAAS,CACpB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAIWC,EAAS,UADI,CAAC,UAAW,UAAW,UAAW,WAChBD,GAE/BE,EAAiB,WAC5B,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWN,EAAOO,QAChD,OAAOP,EAAOG,IAcHK,EAAiB,SAACC,GAC7B,IAAMN,EAZS,SAACM,GAChB,IAAIC,EAAO,EACX,GAAmB,IAAfD,EAAIF,OAAc,OAAOG,EAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAIF,OAAQI,IAE9BD,GAAQA,GAAQ,GAAKA,EADTD,EAAIG,WAAWD,GAE3BD,GAAQ,EAEV,OAAON,KAAKS,IAAIH,GAIFI,CAASL,GAAOT,EAAOO,OACrC,OAAOP,EAAOG,K,+LCpCHY,EAAQ,IAuCfC,EAA+C,CACnDC,SAASC,EAAAA,EAAAA,MACTC,WAAWC,EAAAA,EAAAA,MACXC,cAAcD,EAAAA,EAAAA,OAGVE,GAAiBC,EAAAA,EAAAA,IAAOP,GAOjBQ,EAAsB,WACjC,MAAO,CAAEP,QAAS,KAGPQ,EAAb,WACE,WACUC,EACQC,EACAC,EACTC,IACN,oBAJOH,UAAAA,EAIR,KAHgBC,MAAAA,EAGhB,KAFgBC,OAAAA,EAEhB,KADOC,OAAAA,EALX,2CAQE,WACE,OAAOC,KAAKJ,YAThB,0BAYE,WACE,OAAOI,KAAKC,eAAeC,IAAI,eAbnC,6BAgBE,WACE,OAAOF,KAAKC,eAAeC,IAAI,kBAjBnC,0BAoBE,WACE,OAAOF,KAAKC,eAAeC,IAAI,aArBnC,2BAwBE,WACE,OAAOF,KAAKG,eACTC,UACAC,KAAI,qDA3BX,2BA8BE,WACE,OAAOL,KAAKG,eAAeG,SA/B/B,qBAkCE,WACE,OAAoC,IAA7BN,KAAKG,eAAeI,OAnC/B,uBAsCE,SAAUC,GACR,OAAOR,KAAKG,eAAeM,IAAID,MAvCnC,0BA0CE,SAAmBX,EAAeC,GAChC,OAAO,IAAIH,EAAUH,IAAkBK,EAAOC,KA3ClD,kBA8CE,SAAYY,GACV,IACMC,EAAaD,EAAUE,kBAAkBN,OAC/C,IAAKK,EAAY,OAAOD,EACxB,IAAMrB,EAAYqB,EACfG,eACAC,QAAQJ,EAAUT,gBACrB,OAAO,IAAIN,EACTgB,EAAWI,IAAI,YAAa1B,GAC5BqB,EAAUb,MACVa,EAAUZ,OATc,CAAEkB,KAAM,WA/CtC,kBA6DE,SAAYN,GACV,IAEMO,EAAaP,EAAUG,eAAeK,QAC5C,OAAKD,EACE,IAAItB,EAAUsB,EAAYP,EAAUb,MAAOa,EAAUZ,OAJlC,CAAEkB,KAAM,SAGVN,IAjE5B,uBAqEE,SAAiBA,EAAsBS,GACrC,IAEMC,EAAS,CAAED,SAAAA,EAAUX,KAFfa,EAAAA,EAAAA,MAEoBC,UADdC,KAAKC,OAEvB,OAAO7B,EAAU8B,WAAWf,EAAWU,KAzE3C,wBA4EE,SAAkBV,EAAsBU,GACtC,IAAQZ,EAAQY,EAARZ,IACFkB,EAAahB,EAAUT,eACvB0B,EAAaD,EAChBE,OAAO,WAAW,SAACC,GAAD,OAAOA,EAAEd,IAAIP,EAAKY,MACpCQ,OAAO,gBAAgB,SAACC,GAAD,OAAOA,EAAEC,KAAKJ,MACrCK,OAAO,aAEJhC,EAAoB,CAAEiB,KAAM,MAAOI,OAAAA,GAEzC,OAAO,IAAIzB,EAAUgC,EAAYjB,EAAUb,MAAOa,EAAUZ,OAAQC,KAtFxE,0BAyFE,SAAoBW,EAAsBsB,GACxC,GAAsB,IAAlBA,EAAOvD,OAAc,OAAOiC,EAChC,IAAMgB,EAAahB,EAAUT,eACvB0B,EAAaD,EAChBE,OAAO,WAAW,SAACK,GAAD,OAAOA,EAAEC,UAAUF,MACrCJ,OAAO,gBAAgB,SAACC,GAAD,OAAOA,EAAEC,KAAKJ,MACrCK,OAAO,aAEJhC,EAAoB,CAAEiB,KAAM,QAASgB,OAAAA,GAE3C,OAAO,IAAIrC,EAAUgC,EAAYjB,EAAUb,MAAOa,EAAUZ,OAAQC,KAnGxE,2BAsGE,SAAqBW,EAAsByB,GACzC,GAAyB,IAArBA,EAAU1D,OAAc,OAAOiC,EACnC,IAAMgB,EAAahB,EAAUT,eACzBd,EAAUuB,EAAUP,eACxBgC,EAAUC,SACR,+BAAE5B,EAAF,KAAOW,EAAP,YACGhC,EAAUA,EAAQyC,OACjBpB,EACA,CAAEA,IAAAA,EAAKW,SAAAA,EAAUG,UAAWC,KAAKC,QACjC,SAACK,GAAD,eAAC,UAAYA,GAAb,IAAgBV,SAAAA,UAGtB,IAKMpB,EAAoB,CAAEiB,KAAM,SAAUmB,UAAAA,GAE5C,OAAO,IAAIxC,EAPQ+B,EAChBX,IAAI,UAAW5B,GACfyC,OAAO,gBAAgB,SAACC,GAAD,OAAOA,EAAEC,KAAKJ,MACrCK,OAAO,aAIuBrB,EAAUb,MAAOa,EAAUZ,OAAQC,KAzHxE,4BA6HE,SAAsBW,EAAsBU,GAC1C,IAAQZ,EAAmBY,EAAnBZ,IAAKc,EAAcF,EAAdE,UACPe,EAAa3B,EAAUP,eAAeD,IAAIM,GAC3C6B,IACLA,EAAWf,UAAYA,KAjI3B,2BAoIE,SAAqBZ,EAAsB4B,GACzC,OAAQA,EAAGtB,MACT,IAAK,MACH,OAAOrB,EAAU8B,WAAWf,EAAW4B,EAAGlB,QAC5C,IAAK,QACH,OAAOzB,EAAU4C,aAAa7B,EAAW4B,EAAGN,QAC9C,IAAK,SACH,OAAOrC,EAAU6C,cAAc9B,EAAW4B,EAAGH,WAC/C,IAAK,OACH,OAAOxC,EAAU8C,KAAK/B,GACxB,IAAK,OACH,OAAOf,EAAU+C,KAAKhC,MA/I9B,oBAmJE,SAAcA,GAEZ,MAAO,CAAEvB,QADOuB,EAAUT,eAAeC,IAAI,WAAWyC,cApJ5D,0BAwJE,SACEC,EACA/C,EACAC,GAEA,IAAQX,EAAwByD,EAAxBzD,QAAS0D,EAAeD,EAAfC,WACbC,EAAK,IAAInD,EACXH,IAAiBuB,IAAI,WAAW3B,EAAAA,EAAAA,IAAWD,IAC3CU,EACAC,GAGF,OADU,OAAV+C,QAAU,IAAVA,GAAAA,EAAYT,SAAQ,SAACE,GAAD,OAASQ,EAAKnD,EAAUoD,cAAcD,EAAIR,MACvDQ,IApKX,yBAuKE,WAAsD,IAAD,uBAA/BE,EAA+B,yBAA/BA,EAA+B,gBACnD,IAAMC,EAAYD,EAAO3C,KAAI,SAACyC,GAAD,OAAQA,EAAG3C,eAAe+C,YACjDC,EAAgB,GAChBC,EAAO,IAAIC,IAAJ,EACX,kBAAEC,GAAF,eAAQC,GAAR,sBAAgBD,EAAGhC,UAAYiC,EAAGjC,aAQpC,IALA2B,EAAUb,SAAQ,SAACoB,EAAMnF,GACvB,MAAwBmF,EAAKC,OAArBC,EAAR,EAAQA,MAAR,EAAeC,MACPP,EAAKtB,KAAK,CAAC4B,EAAOrF,OAGrB+E,EAAK7C,OAAS,GAAG,CACtB,IAAMqD,EAASR,EAAKS,MACpB,IAAKD,EAAQ,MACb,cAAwBA,EAAxB,GAAOxC,EAAP,KAAe/C,EAAf,KACA8E,EAAcrB,KAAKV,GAEnB,MAAwB6B,EAAU5E,GAAOoF,OAAjCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KACfA,GAAQP,EAAKtB,KAAK,CAAC4B,EAAOrF,IAE5B,OAAO8E,MA5LX,M,sBC5DO,SAASW,EAAoBjE,EAAeC,GACjD,IAAMiE,EAASC,SAASC,cAAc,UAChCC,EAAUH,EAAOI,WAAW,MAClC,IAAKD,EACH,MAAM,IAAIE,MAAM,oCAIlB,OAFAL,EAAOlE,MAAQA,EACfkE,EAAOjE,OAASA,EACT,CAAEiE,OAAAA,EAAQG,QAAAA,GAGZ,SAASG,EAAcN,GAC5BA,EAAOlE,MAAQ,EACfkE,EAAOjE,OAAS,EAChB,IAAMwE,EAAMP,EAAOI,WAAW,MAC3B,OAAHG,QAAG,IAAHA,GAAAA,EAAKC,UAAU,EAAG,EAAG,EAAG,G,2VCLfC,EAAW,qCAIf,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,kGAEoBC,IAAAA,IAAA,eAAkBD,IAFtC,mBAEKE,EAFL,EAEKA,KACRC,QAAQC,IAAI,CAAEF,KAAAA,IACU,MAApBA,EAAKG,WAJN,yCAIiC,MAJjC,gCAKIH,EAAKI,QALT,yCAOHH,QAAQI,MAAR,MAPG,kBAQI,MARJ,iFAmBA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BF,GAA/B,wGAEoBL,IAAAA,IAAA,eAAkBK,IAFtC,mBAEKJ,EAFL,EAEKA,KACAG,GAHL,EAG4BH,GAAvBG,WAAeI,GAHpB,YAIgB,MAAfJ,EAJD,yCAI4B,MAJ5B,gCAKII,GALJ,yCAOHN,QAAQI,MAAR,MAPG,kBAQI,MARJ,iFAYA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAgCJ,GAAhC,0GAEmBE,EAAgBF,GAFnC,UAEGK,EAFH,gDAGkB,MAHlB,cAIKC,EAAwBD,EAAxBC,SAAUC,EAAcF,EAAdE,UAJf,UAMOC,EAAAA,EAAAA,IAAeR,EAAQM,EAAUC,GANxC,4DAM2DF,GAN3D,YAQCC,EAASG,QARV,kCASsBd,GAAAA,CAAM,CAC3Be,OAAQ,MACRC,IAAKX,EACLY,aAAc,SAZf,wBASOhB,EATP,EASOA,KAKFiB,EAAO,IAAIC,KAAK,CAAClB,GAAO,CAAE5D,KAAM,oBAdrC,WAeK+E,EAAAA,EAAAA,IAAaf,EAAQM,EAAUC,EAAWM,GAf/C,kDAiBKE,EAAAA,EAAAA,IAAaf,EAAQM,EAAUC,GAjBpC,iCAmBIF,GAnBJ,yCAqBHR,QAAQI,MAAR,MArBG,kBAsBI,MAtBJ,iFA0BA,SAAee,EAAtB,+CAAO,OAAP,oBAAO,WAAuBhB,GAAvB,8GACciB,EAAAA,EAAAA,IAASjB,GADvB,UACCkB,EADD,iDAEa,GAFb,cAGG1F,EAAgD0F,EAAhD1F,IAAK2F,EAA2CD,EAA3CC,KAAMV,EAAqCS,EAArCT,QAASW,EAA4BF,EAA5BE,IAAKC,EAAuBH,EAAvBG,UAAWC,EAAYJ,EAAZI,SAC5CC,EAAAA,EAAAA,IAAeD,GAJV,mBAOoB3B,IAAAA,IAAA,iBAAoBK,GAAU,CACnDwB,QAAQC,EAAAA,EAAAA,MACRH,QAAAA,EACAhB,SAAU,CAAE9E,IAAAA,EAAK2F,KAAAA,EAAMV,QAAAA,EAASY,UAAAA,KAV/B,oBAOKzB,EAPL,EAOKA,MAMJwB,EAbD,wBAcKM,EAAW,IAAIC,SAdpB,UAegBP,EAAIQ,cAfpB,eAeKC,EAfL,OAgBKhB,EAAO,IAAIC,KAAK,CAACe,IACvBH,EAASI,OAAO,OAAQjB,EAAMb,GAjB7B,UAkBKL,GAAAA,CAAM,CACVe,OAAQ,OACRC,IAAK,SACLf,KAAM8B,EACNK,QAAS,CAAE,eAAgB,yBAtB5B,WA0BqB,MAApBnC,EAAKG,WA1BN,2CA0BiC,GA1BjC,kCA2BI,GA3BJ,yCA6BHF,QAAQI,MAAR,MA7BG,mBA8BI,GA9BJ,iFAkCA,SAAe+B,EAAtB,+CAAO,OAAP,oBAAO,WAA2BhC,GAA3B,oGACciB,EAAAA,EAAAA,IAASjB,GADvB,UACCkB,EADD,gDAEa,MAFb,cAGG1F,EAA2C0F,EAA3C1F,IAAK2F,EAAsCD,EAAtCC,KAAMV,EAAgCS,EAAhCT,QAASY,EAAuBH,EAAvBG,UAAWC,EAAYJ,EAAZI,SACvCC,EAAAA,EAAAA,IAAeD,GAJV,mBAOoB3B,IAAAA,IAAA,iBAAoBK,GAAU,CACnDwB,QAAQC,EAAAA,EAAAA,MACRH,QAAAA,EACAhB,SAAU,CAAE9E,IAAAA,EAAK2F,KAAAA,EAAMV,QAAAA,EAASY,UAAAA,KAV/B,oBAYqB,MAZrB,EAOKzB,KAKCG,WAZN,2CAYiC,GAZjC,kCAaS,GAbT,iEAeHF,QAAQI,MAAR,MAfG,mBAgBI,GAhBJ,iFAoBA,SAAegC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCjC,GAAhC,oGAEoBL,IAAAA,IAAA,gBAAmBK,GAAU,CAClDkC,OAAQ,CAAEV,QAAQC,EAAAA,EAAAA,SAHjB,mBAKqB,OAHhB7B,EAFL,EAEKA,MAGCG,WALN,yCAKiC,MALjC,cAMKoC,EAAcvC,EAAduC,UANL,kBAOIA,GAPJ,yCASHtC,QAAQI,MAAR,MATG,kBAUI,MAVJ,iFAjHPN,IAAAA,SAAAA,QAAyBH,G,0gBCClB,SAAe4C,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,IAAAA,QACrB,aAFG,YACCC,EADD,iDAIgBA,GAJhB,cAKLD,IAAAA,QAAoB,YAAa,IAL5B,kBAME,IANF,kEASA,SAAeE,IAAtB,4CAAO,OAAP,oBAAO,oGACcF,IAAAA,QAA6C,YAD3D,YACCG,EADD,iDAEYA,GAFZ,cAGLH,IAAAA,QAAoB,WAAY,IAH3B,kBAIE,IAJF,kEAOA,SAAeI,EAAtB,iDAAO,OAAP,oBAAO,WAAyBtB,EAActI,GAAvC,oFACC2C,GAAMa,EAAAA,EAAAA,MACNqG,EAAkB,CACtBlH,IAAAA,EACA2F,KAAAA,EACAtI,MAAAA,EACA8J,MAAO,IANJ,SAQkBJ,IARlB,cAQCK,EARD,OASCJ,GATD,kBASaI,GATb,cASwBpH,EAAMkH,IAT9B,SAUCL,IAAAA,QAAoB,WAAYG,GAVjC,gCAYEA,GAZF,kEAeA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAyBrH,GAAzB,yFACkB+G,IADlB,cACCK,EADD,OAEyBA,EAArBpH,GAAYgH,GAFhB,OAEyBI,EAFzB,CAEIpH,GAFJ,mBAGC6G,IAAAA,QAAoB,WAAYG,GAHjC,gCAKEA,GALF,kEAQA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAuBC,GAAvB,yFACkBR,IADlB,cACCK,EADD,OAECJ,GAFD,kBAEaI,GAFb,cAEwBG,EAAIvH,IAAMuH,IAFlC,SAGCV,IAAAA,QAAoB,WAAYG,GAHjC,gCAIEA,GAJF,kEAOA,SAAevB,EAAtB,+CAAO,OAAP,oBAAO,WAAwBzF,GAAxB,yFACc6G,IAAAA,QAA0B7G,GADxC,UACC0F,EADD,wEAGamB,IAAAA,QAAA,cAAiC7G,IAH9C,YAGC4F,EAHD,qEAIgBF,GAJhB,IAIsBE,IAAAA,KAJtB,iCAKOF,GALP,mEAQA,SAAe8B,EAAtB,iDAAO,OAAP,oBAAO,WAA4BxH,EAAayH,GAAzC,mFAED,YADJA,GAAWC,EAAAA,EAAAA,GAAOD,GAAU,SAACE,GAAD,YAAaC,IAAND,QACRF,EAASI,SAAW9G,KAAKC,OAF/C,SAIkB4F,IAJlB,cAICE,EAJD,UAKuCW,GAApC3B,QALH,EAKYD,UAAcf,GAL1B,YAMLgC,EAAS9G,IAAT,kBAAqB8G,EAAS9G,IAAS8E,GANlC,SAQC+B,IAAAA,QAAoB,YAAaC,GARlC,wBASkBrB,EAASzF,GAT3B,WASC8H,EATD,2EAWCjB,IAAAA,QAAoB7G,GAApB,kBAA8B8H,GAAaL,IAX5C,mEAcA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA4BjD,GAA5B,oFACG9E,EAAe8E,EAAf9E,IAAKgI,EAAUlD,EAAVkD,MADR,SAEkBpB,IAFlB,cAECE,EAFD,QAGI9G,GAAO8E,EAHX,SAIC+B,IAAAA,QAAoB,YAAaC,GAJlC,uBAKcC,IALd,UAKCC,EALD,SAMDgB,KAAShB,GANR,wBAOHA,EAAKgB,GAAOb,MAAM7F,KAAKwD,EAAS9E,KAP7B,UAQG6G,IAAAA,QAAoB,WAAYG,GARnC,iCAUE,CAAEA,KAAAA,EAAMF,SAAAA,IAVV,mEAaA,SAAemB,EAAtB,+CAAO,OAAP,oBAAO,WAA6BC,GAA7B,kFACGtC,EAAiBsC,EAAjBtC,IAAQF,GADX,OACoBwC,EADpB,YAECrB,IAAAA,QAAoBnB,EAAK1F,IAAK0F,GAF/B,WAGDE,EAHC,gCAGUiB,IAAAA,QAAA,cAA2BnB,EAAK1F,KAAO4F,GAHjD,cAIuCF,EAApCI,QAAoCJ,EAA3BG,UAAcf,GAJ1B,OAIuCY,EAJvC,YAKQqC,EAAajD,GALrB,2GAQA,SAAeqD,EAAtB,+CAAO,OAAP,oBAAO,WAA0BnI,GAA1B,+FACcyF,EAASzF,GADvB,cACC0F,EADD,gBAEkBkB,IAFlB,cAECE,EAFD,gBAGcC,IAHd,UAGCC,EAHD,OAIAtB,EAJA,0CAIa,CAAEsB,KAAAA,EAAMF,SAAAA,IAJrB,yBAKCD,IAAAA,WAAuB7G,GALxB,yBAMC6G,IAAAA,WAAA,cAA8B7G,IAN/B,sBAOE8G,EAAS9G,GAPX,UAQC6G,IAAAA,QAAoB,YAAaC,GARlC,cAUGkB,EAAUtC,EAAVsC,SACKhB,GAXR,wBAYGoB,EAAUpB,EAAKgB,IACbb,MAAQiB,EAAQjB,MAAMkB,QAAO,SAACC,GAAD,OAAQA,IAAOtI,KAbjD,UAcG6G,IAAAA,QAAoB,WAAYG,GAdnC,iCAgBE,CAAEA,KAAAA,EAAMF,SAAAA,IAhBV,mEAmBA,SAAeyB,EAAtB,iDAAO,OAAP,oBAAO,WAA2B/D,EAAgBwD,GAA3C,iGACcvC,EAASjB,GADvB,cACCkB,EADD,gBAEkBkB,IAFlB,cAECE,EAFD,gBAGcC,IAHd,UAGCC,EAHD,OAIAtB,EAJA,0CAIa,CAAEsB,KAAAA,EAAMF,SAAAA,IAJrB,eAMU0B,EAAc9C,EAArBsC,MACRtC,EAAKsC,MAAQA,EAPR,UAQCnB,IAAAA,QAAoBrC,EAAQkB,GAR7B,eASLoB,EAAStC,GAAQwD,MAAQA,EATpB,UAUCnB,IAAAA,QAAoB,YAAaC,GAVlC,eAYD0B,KAAaxB,KACToB,EAAUpB,EAAKwB,IACbrB,MAAQiB,EAAQjB,MAAMkB,QAAO,SAACC,GAAD,OAAQA,IAAO9D,MAEtD,UAAAwC,EAAKgB,UAAL,SAAab,MAAM7F,KAAKkD,GAhBnB,UAiBCqC,IAAAA,QAAoB,WAAYG,GAjBjC,iCAkBE,CAAEA,KAAAA,EAAMF,SAAAA,IAlBV,mEAqBA,SAAevB,EAAtB,qDAAO,OAAP,oBAAO,WACLf,EACAM,EACA6B,EACAtB,GAJK,mGAMYI,EAASjB,GANrB,YAMDkB,EANC,4DAQC+C,EAAO1H,KAAKC,MACZ8E,EAAoC,GAC1CJ,GAAI,kBACCZ,GADD,IAEFkD,MAAO,UACPU,MAAM,EACN5C,QAAAA,EACAF,IAAKP,EACLsD,WAAYF,EACZZ,SAAUY,IAIZG,OAAOC,QAAQlC,GAAW/E,SAAQ,YAAqB,IAAD,eAAlBkH,EAAkB,KAAVC,EAAU,KACpDjD,EAAQgD,IAAR,kBAAuBC,GAAvB,IAA6BC,OAAO9J,EAAAA,EAAAA,WAIlCmG,EA1BC,kCA2B4B,uDA3B5B,wBA2BK4D,EA3BL,EA2BKA,aA3BL,UA4BsBA,EAAa5D,GA5BnC,iBA4BK6D,EA5BL,EA4BKA,OACRN,OAAOlG,OAAOoD,GAASlE,SAAQ,SAACmH,GAC9B,IAAQI,EAAaJ,EAAbI,SACHA,IACLJ,EAAKK,MAAQF,EAAOC,EAAW,OAEjCzD,EAAK2D,UAAYH,EAAO,GAlCrB,yBAqCCjB,EAAcvC,GArCf,mEAwCA,SAAeV,EAAtB,mDAAO,OAAP,oBAAO,WACLR,EACAM,EACAC,GAHK,+GAKYU,EAASjB,GALrB,UAKDkB,EALC,iDAMa,GANb,aAOGG,EAAcf,EAAde,WACM5H,OAASyH,EAAKG,UAAU5H,QARjC,0CAQgD,GARhD,cASG6H,EAAiBJ,EAAjBI,QAASF,EAAQF,EAARE,IATZ,UAUyB,uDAVzB,iBAUG0D,EAVH,EAUGA,YAVH,MAasBV,OAAOC,QAAQ9D,GAbrC,+DAaK+D,EAbL,KAaaC,EAbb,OAcCD,KAAUhD,GAdX,2DAeKqD,EAAaJ,EAAbI,SACFH,GAAQ9J,EAAAA,EAAAA,KACd4G,EAAQgD,IAAR,kBAAuBC,GAAvB,IAA6BC,MAAAA,IACxBpD,GAAQuD,EAlBV,yEAmB2BG,EAAY1D,EAAKuD,EAAU,IAnBtD,QAmBHrD,EAAQgD,GAAQM,MAnBb,4DAqBC5B,EAAahD,EAAQ,CAAEqB,UAAAA,EAAWC,QAAAA,IArBnC,kCAsBE,GAtBF,qE,uLC1KMyD,EAAsC,CACjDC,MAAO,IACPR,MAAO,CAAErK,QAAS,KA2Cb,SAAS8K,IACd,IAAMX,GAASjI,EAAAA,EAAAA,MACT4H,EAAO1H,KAAKC,MAClB,MAAO,CACLhB,KAAKa,EAAAA,EAAAA,MACL8E,KAAK,QAAD,OAAU+D,GAAAA,CAAMjB,GAAMkB,OAAO,qBACjC3B,MAAO,UACPU,MAAM,EACNzD,SAAS,EACT0D,WAAYF,EACZZ,SAAUY,EACV3C,SAAQ,UACLgD,EAAS,CACRU,MAAO,IACPR,OAAO9J,EAAAA,EAAAA,OAGX2G,UAAW,CAACiD,IAIT,SAASc,EAAWb,GAMzB,MAAO,EALQlI,EAAAA,EAAAA,MACF,OAAGkI,QAAH,IAAGA,EAAAA,EAAQ,CACtBS,MAAO,IACPR,OAAO9J,EAAAA,EAAAA,OAKJ,SAAS6G,EAAeD,GAC7B8C,OAAOlG,OAAOoD,GAASlE,SAAQ,SAACmH,UACvBA,EAAKK,aACLL,EAAKc,Y,sHClFH5D,EAAa,WACxB,IAAI6D,EACJ,OAAO,WACL,GAAIA,EAAQ,OAAOA,EACnB,IAAI9D,EAAS+D,aAAaC,QAAQ,WAMlC,OALKhE,IACHA,GAASnF,EAAAA,EAAAA,MACTkJ,aAAaE,QAAQ,UAAWjE,IAElC8D,EAAS9D,EACFA,GAVe,GAcbkE,EAAc,WACzB,IAAIvE,EAAOoE,aAAaC,QAAQ,aAKhC,OAJKrE,IACHA,GAAO9E,EAAAA,EAAAA,MAASsJ,MAAM,EAAG,GACzBJ,aAAaE,QAAQ,YAAatE,IAE7BA,GAGIyE,EAAe,SAACzE,GAE3B,SADAA,EAAOA,EAAK0E,UAEPN,aAAaE,QAAQ,YAAatE,IAChC","sources":["component/widgets/ColorCircle.tsx","lib/color.ts","lib/draw/DrawState.ts","lib/draw/canvas.ts","lib/network/http.ts","lib/note/archive.ts","lib/note/note.ts","lib/user.ts"],"sourcesContent":["import classNames from \"classnames\";\nimport { FC } from \"react\";\nimport './circle.sass'\n\nexport const ColorCirle: FC<{ color: string; className?: string }> = ({\n  color,\n  className,\n}) => {\n  const style = { backgroundColor: color };\n  return (\n    <div className={classNames(\"color-circle\", className)} style={style} />\n  );\n};\n","export const colors = [\r\n  \"#f97316\",\r\n  \"#eab308\",\r\n  \"#84cc16\",\r\n  \"#22c55e\",\r\n  \"#10b981\",\r\n  \"#14b8a6\",\r\n  \"#06b6d4\",\r\n  \"#0ea5e9\",\r\n  \"#3b82f6\",\r\n  \"#6366f1\",\r\n  \"#8b5cf6\",\r\n  \"#a855f7\",\r\n  \"#d946ef\",\r\n  \"#ec4899\",\r\n  \"#f43f5e\",\r\n  \"#ef4444\",\r\n];\r\n\r\nexport const grayColors = [\"#000000\", \"#9ca3af\", \"#64748b\", \"#78716c\"];\r\nexport const allColors = [...grayColors, ...colors];\r\n\r\nexport const getRandomColor = () => {\r\n  const index = Math.floor(Math.random() * colors.length);\r\n  return colors[index];\r\n};\r\n\r\nconst hashCode = (str: string) => {\r\n  let hash = 0;\r\n  if (str.length === 0) return hash;\r\n  for (let i = 0; i < str.length; i++) {\r\n    const chr = str.charCodeAt(i);\r\n    hash = (hash << 5) - hash + chr;\r\n    hash |= 0;\r\n  }\r\n  return Math.abs(hash);\r\n};\r\n\r\nexport const getHashedColor = (str: string) => {\r\n  const index = hashCode(str) % colors.length;\r\n  return colors[index];\r\n};\r\n","import { List, Record, OrderedMap } from \"immutable\";\r\nimport { v4 as getUid } from \"uuid\";\r\nimport Heap from \"heap\";\r\n\r\nexport const WIDTH = 2000;\r\n\r\nexport interface Stroke {\r\n  uid: string;\r\n  pathData: string;\r\n  timestamp: number;\r\n}\r\n\r\nexport type StrokeRecord = globalThis.Record<string, Stroke>;\r\nexport type Mutation = [string, string];\r\n\r\nexport type Operation =\r\n  | {\r\n      type: \"add\";\r\n      stroke: Stroke;\r\n    }\r\n  | {\r\n      type: \"erase\";\r\n      erased: string[];\r\n    }\r\n  | {\r\n      type: \"mutate\";\r\n      mutations: Mutation[];\r\n    }\r\n  | {\r\n      type: \"undo\";\r\n    }\r\n  | {\r\n      type: \"redo\";\r\n    };\r\n\r\ninterface DrawStateRecordType {\r\n  strokes: OrderedMap<string, Stroke>;\r\n  undoStack: List<DrawStateRecord>;\r\n  historyStack: List<DrawStateRecord>;\r\n}\r\n\r\ntype DrawStateRecord = Record<DrawStateRecordType>;\r\n\r\nconst defaultRecord: Readonly<DrawStateRecordType> = {\r\n  strokes: OrderedMap(),\r\n  undoStack: List(),\r\n  historyStack: List(),\r\n};\r\n\r\nconst defaultFactory = Record(defaultRecord);\r\n\r\nexport interface FlatState {\r\n  strokes: StrokeRecord;\r\n  operations?: Operation[];\r\n}\r\n\r\nexport const getDefaultFlatState = (): FlatState => {\r\n  return { strokes: {} };\r\n};\r\n\r\nexport class DrawState {\r\n  constructor(\r\n    private immutable: DrawStateRecord,\r\n    public readonly width: number,\r\n    public readonly height: number,\r\n    public lastOp?: Operation\r\n  ) {}\r\n\r\n  getImmutable() {\r\n    return this.immutable;\r\n  }\r\n\r\n  getUndoStack() {\r\n    return this.getImmutable().get(\"undoStack\");\r\n  }\r\n\r\n  getHistoryStack() {\r\n    return this.getImmutable().get(\"historyStack\");\r\n  }\r\n\r\n  getStrokeMap() {\r\n    return this.getImmutable().get(\"strokes\");\r\n  }\r\n\r\n  getStrokeList(): Stroke[] {\r\n    return this.getStrokeMap()\r\n      .toArray()\r\n      .map(([_, stroke]) => stroke);\r\n  }\r\n\r\n  getLastStroke() {\r\n    return this.getStrokeMap().last();\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.getStrokeMap().size === 0;\r\n  }\r\n\r\n  hasStroke(uid: string) {\r\n    return this.getStrokeMap().has(uid);\r\n  }\r\n\r\n  static createEmpty(width: number, height: number) {\r\n    return new DrawState(defaultFactory(), width, height);\r\n  }\r\n\r\n  static undo(drawState: DrawState) {\r\n    const lastOp: Operation = { type: \"undo\" };\r\n    const lastRecord = drawState.getHistoryStack().last();\r\n    if (!lastRecord) return drawState;\r\n    const undoStack = drawState\r\n      .getUndoStack()\r\n      .unshift(drawState.getImmutable());\r\n    return new DrawState(\r\n      lastRecord.set(\"undoStack\", undoStack),\r\n      drawState.width,\r\n      drawState.height,\r\n      lastOp\r\n    );\r\n  }\r\n\r\n  static redo(drawState: DrawState) {\r\n    const lastOp: Operation = { type: \"redo\" };\r\n\r\n    const nextRecord = drawState.getUndoStack().first();\r\n    if (!nextRecord) return drawState;\r\n    return new DrawState(nextRecord, drawState.width, drawState.height, lastOp);\r\n  }\r\n\r\n  static addStroke(drawState: DrawState, pathData: string) {\r\n    const uid = getUid();\r\n    const timestamp = Date.now();\r\n    const stroke = { pathData, uid, timestamp };\r\n    return DrawState.pushStroke(drawState, stroke);\r\n  }\r\n\r\n  static pushStroke(drawState: DrawState, stroke: Stroke) {\r\n    const { uid } = stroke;\r\n    const prevRecord = drawState.getImmutable();\r\n    const currRecord = prevRecord\r\n      .update(\"strokes\", (s) => s.set(uid, stroke))\r\n      .update(\"historyStack\", (s) => s.push(prevRecord))\r\n      .delete(\"undoStack\");\r\n\r\n    const lastOp: Operation = { type: \"add\", stroke };\r\n\r\n    return new DrawState(currRecord, drawState.width, drawState.height, lastOp);\r\n  }\r\n\r\n  static eraseStrokes(drawState: DrawState, erased: string[]) {\r\n    if (erased.length === 0) return drawState;\r\n    const prevRecord = drawState.getImmutable();\r\n    const currRecord = prevRecord\r\n      .update(\"strokes\", (m) => m.deleteAll(erased))\r\n      .update(\"historyStack\", (s) => s.push(prevRecord))\r\n      .delete(\"undoStack\");\r\n\r\n    const lastOp: Operation = { type: \"erase\", erased };\r\n\r\n    return new DrawState(currRecord, drawState.width, drawState.height, lastOp);\r\n  }\r\n\r\n  static mutateStrokes(drawState: DrawState, mutations: Mutation[]) {\r\n    if (mutations.length === 0) return drawState;\r\n    const prevRecord = drawState.getImmutable();\r\n    let strokes = drawState.getStrokeMap();\r\n    mutations.forEach(\r\n      ([uid, pathData]) =>\r\n        (strokes = strokes.update(\r\n          uid,\r\n          { uid, pathData, timestamp: Date.now() },\r\n          (s) => ({ ...s, pathData })\r\n        ))\r\n    );\r\n    const currRecord = prevRecord\r\n      .set(\"strokes\", strokes)\r\n      .update(\"historyStack\", (s) => s.push(prevRecord))\r\n      .delete(\"undoStack\");\r\n\r\n    const lastOp: Operation = { type: \"mutate\", mutations };\r\n\r\n    return new DrawState(currRecord, drawState.width, drawState.height, lastOp);\r\n  }\r\n\r\n  // sync with mutation.\r\n  static syncStrokeTime(drawState: DrawState, stroke: Stroke) {\r\n    const { uid, timestamp } = stroke;\r\n    const prevStroke = drawState.getStrokeMap().get(uid);\r\n    if (!prevStroke) return;\r\n    prevStroke.timestamp = timestamp;\r\n  }\r\n\r\n  static pushOperation(drawState: DrawState, op: Operation) {\r\n    switch (op.type) {\r\n      case \"add\":\r\n        return DrawState.pushStroke(drawState, op.stroke);\r\n      case \"erase\":\r\n        return DrawState.eraseStrokes(drawState, op.erased);\r\n      case \"mutate\":\r\n        return DrawState.mutateStrokes(drawState, op.mutations);\r\n      case \"undo\":\r\n        return DrawState.undo(drawState);\r\n      case \"redo\":\r\n        return DrawState.redo(drawState);\r\n    }\r\n  }\r\n\r\n  static flaten(drawState: DrawState): FlatState {\r\n    const strokes = drawState.getImmutable().get(\"strokes\").toObject();\r\n    return { strokes };\r\n  }\r\n\r\n  static loadFromFlat(\r\n    flatState: FlatState,\r\n    width: number,\r\n    height: number\r\n  ): DrawState {\r\n    const { strokes, operations } = flatState;\r\n    let ds = new DrawState(\r\n      defaultFactory().set(\"strokes\", OrderedMap(strokes)),\r\n      width,\r\n      height\r\n    );\r\n    operations?.forEach((op) => (ds = DrawState.pushOperation(ds, op)));\r\n    return ds;\r\n  }\r\n\r\n  static mergeStates(...states: DrawState[]): Stroke[] {\r\n    const iterators = states.map((ds) => ds.getStrokeMap().values());\r\n    const mergedStrokes = [];\r\n    const heap = new Heap<[Stroke, number]>(\r\n      ([s0], [s1]) => s0.timestamp - s1.timestamp\r\n    );\r\n\r\n    iterators.forEach((iter, index) => {\r\n      const { value, done } = iter.next();\r\n      done || heap.push([value, index]);\r\n    });\r\n\r\n    while (heap.size() > 0) {\r\n      const record = heap.pop();\r\n      if (!record) break;\r\n      const [stroke, index] = record;\r\n      mergedStrokes.push(stroke);\r\n\r\n      const { value, done } = iterators[index].next();\r\n      done || heap.push([value, index]);\r\n    }\r\n    return mergedStrokes;\r\n  }\r\n}\r\n","export function createVirtualCanvas(width: number, height: number) {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const context = canvas.getContext(\"2d\");\r\n  if (!context) {\r\n    throw new Error(\"can't get virtual canvas context\");\r\n  }\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  return { canvas, context };\r\n}\r\n\r\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  const ctx = canvas.getContext('2d');\r\n  ctx?.clearRect(0, 0, 1, 1);\r\n}\r\n","import axios from \"axios\";\r\nimport {\r\n  removePageTimg,\r\n  TeamNoteInfo,\r\n  TeamPage,\r\n  TeamPageInfo,\r\n} from \"../note/note\";\r\nimport { loadNote, saveTeamNote, updateTeamNote } from \"../note/archive\";\r\nimport { getUserID } from \"../user\";\r\n\r\nexport let BASE_URL = \"https://api.slotdumpling.top/paint\";\r\n// BASE_URL = \"http://192.168.1.14:8090/paint\";\r\naxios.defaults.baseURL = BASE_URL;\r\n\r\nexport async function getNoteID(roomCode: string) {\r\n  try {\r\n    const { data } = await axios.get(`code/${roomCode}`);\r\n    console.log({ data });\r\n    if (data.statusCode !== 200) return null;\r\n    return data.noteID as string;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return null;\r\n  }\r\n}\r\n\r\ninterface InfoRes {\r\n  statusCode: number;\r\n  code: number;\r\n  noteInfo: TeamNoteInfo;\r\n  pageInfos: Record<string, TeamPageInfo>;\r\n}\r\n\r\nexport async function getTeamNoteInfo(noteID: string) {\r\n  try {\r\n    const { data } = await axios.get(`info/${noteID}`);\r\n    const { statusCode, ...res } = data as InfoRes;\r\n    if (statusCode !== 200) return null;\r\n    return res;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function loadTeamNoteInfo(noteID: string) {\r\n  try {\r\n    const infoRes = await getTeamNoteInfo(noteID);\r\n    if (!infoRes) return null;\r\n    const { noteInfo, pageInfos } = infoRes;\r\n\r\n    if (await updateTeamNote(noteID, noteInfo, pageInfos)) return infoRes;\r\n\r\n    if (noteInfo.withImg) {\r\n      const { data } = await axios({\r\n        method: \"GET\",\r\n        url: noteID,\r\n        responseType: \"blob\",\r\n      });\r\n      const file = new Blob([data], { type: \"application/pdf\" });\r\n      await saveTeamNote(noteID, noteInfo, pageInfos, file);\r\n    } else {\r\n      await saveTeamNote(noteID, noteInfo, pageInfos);\r\n    }\r\n    return infoRes;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function putNote(noteID: string) {\r\n  const note = await loadNote(noteID);\r\n  if (!note) return false;\r\n  const { uid, name, withImg, pdf, pageOrder, pageRec } = note;\r\n  removePageTimg(pageRec);\r\n\r\n  try {\r\n    const { data } = await axios.put(`create/${noteID}`, {\r\n      userID: getUserID(),\r\n      pageRec,\r\n      noteInfo: { uid, name, withImg, pageOrder },\r\n    });\r\n\r\n    if (pdf) {\r\n      const formData = new FormData();\r\n      const ab = await pdf.arrayBuffer();\r\n      const file = new Blob([ab]);\r\n      formData.append(\"file\", file, noteID);\r\n      await axios({\r\n        method: \"POST\",\r\n        url: \"upload\",\r\n        data: formData,\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      });\r\n    }\r\n\r\n    if (data.statusCode !== 201) return false;\r\n    return true;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function updatePages(noteID: string) {\r\n  const note = await loadNote(noteID);\r\n  if (!note) return null;\r\n  const { uid, name, withImg, pageOrder, pageRec } = note;\r\n  removePageTimg(pageRec);\r\n\r\n  try {\r\n    const { data } = await axios.put(`update/${noteID}`, {\r\n      userID: getUserID(),\r\n      pageRec,\r\n      noteInfo: { uid, name, withImg, pageOrder },\r\n    });\r\n    if (data.statusCode === 201) return true;\r\n    else return false;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function getTeamNoteState(noteID: string) {\r\n  try {\r\n    const { data } = await axios.get(`state/${noteID}`, {\r\n      params: { userID: getUserID() },\r\n    });\r\n    if (data.statusCode !== 200) return null;\r\n    const { teamPages } = data;\r\n    return teamPages as Record<string, TeamPage>;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return null;\r\n  }\r\n}\r\n","import { Note, NoteInfo, NotePage, TeamNoteInfo, TeamPageInfo } from \"./note\";\r\nimport { getDefaultFlatState } from \"../draw/DrawState\";\r\nimport localforage from \"localforage\";\r\nimport { v4 as getUid } from \"uuid\";\r\nimport { pickBy } from \"lodash-es\";\r\n\r\nexport interface NoteTag {\r\n  uid: string;\r\n  name: string;\r\n  color: string;\r\n  notes: string[];\r\n}\r\n\r\nexport async function getAllNotes() {\r\n  const allNotes = await localforage.getItem<Record<string, NoteInfo>>(\r\n    \"ALL_NOTES\"\r\n  );\r\n  if (allNotes) return allNotes;\r\n  localforage.setItem(\"ALL_NOTES\", {});\r\n  return {};\r\n}\r\n\r\nexport async function getAllTags() {\r\n  const tags = await localforage.getItem<Record<string, NoteTag>>(\"ALL_TAGS\");\r\n  if (tags) return tags;\r\n  localforage.setItem(\"ALL_TAGS\", {});\r\n  return {};\r\n}\r\n\r\nexport async function addNewTag(name: string, color: string) {\r\n  const uid = getUid();\r\n  const newTag: NoteTag = {\r\n    uid,\r\n    name,\r\n    color,\r\n    notes: [],\r\n  };\r\n  const prevTags = await getAllTags();\r\n  const tags = { ...prevTags, [uid]: newTag };\r\n  await localforage.setItem(\"ALL_TAGS\", tags);\r\n\r\n  return tags;\r\n}\r\n\r\nexport async function deleteTag(uid: string) {\r\n  const prevTags = await getAllTags();\r\n  const { [uid]: _, ...tags } = prevTags;\r\n  await localforage.setItem(\"ALL_TAGS\", tags);\r\n\r\n  return tags;\r\n}\r\n\r\nexport async function editTag(tag: NoteTag) {\r\n  const prevTags = await getAllTags();\r\n  const tags = { ...prevTags, [tag.uid]: tag };\r\n  await localforage.setItem(\"ALL_TAGS\", tags);\r\n  return tags;\r\n}\r\n\r\nexport async function loadNote(uid: string) {\r\n  const note = await localforage.getItem<Note>(uid);\r\n  if (!note) return;\r\n  const pdf = await localforage.getItem<Blob>(`PDF_${uid}`);\r\n  if (pdf) return { ...note, pdf };\r\n  else return note;\r\n}\r\n\r\nexport async function editNoteData(uid: string, noteData: Partial<Note>) {\r\n  noteData = pickBy(noteData, (v) => v !== undefined);\r\n  if (\"pageRec\" in noteData) noteData.lastTime = Date.now();\r\n\r\n  const allNotes = await getAllNotes();\r\n  const { pageRec, pageOrder, ...noteInfo } = noteData;\r\n  allNotes[uid] = { ...allNotes[uid], ...noteInfo };\r\n\r\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\r\n  const prevNote = await loadNote(uid);\r\n  if (!prevNote) return;\r\n  await localforage.setItem(uid, { ...prevNote, ...noteData });\r\n}\r\n\r\nexport async function saveNoteInfo(noteInfo: NoteInfo) {\r\n  const { uid, tagID } = noteInfo;\r\n  const allNotes = await getAllNotes();\r\n  allNotes[uid] = noteInfo;\r\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\r\n  const tags = await getAllTags();\r\n  if (tagID in tags) {\r\n    tags[tagID].notes.push(noteInfo.uid);\r\n    await localforage.setItem(\"ALL_TAGS\", tags);\r\n  }\r\n  return { tags, allNotes };\r\n}\r\n\r\nexport async function createNewNote(noteWithPdf: Note) {\r\n  const { pdf, ...note } = noteWithPdf;\r\n  await localforage.setItem(note.uid, note);\r\n  if (pdf) await localforage.setItem(`PDF_${note.uid}`, pdf);\r\n  const { pageRec, pageOrder, ...noteInfo } = note;\r\n  return await saveNoteInfo(noteInfo);\r\n}\r\n\r\nexport async function deleteNote(uid: string) {\r\n  const note = await loadNote(uid);\r\n  const allNotes = await getAllNotes();\r\n  const tags = await getAllTags();\r\n  if (!note) return { tags, allNotes };\r\n  await localforage.removeItem(uid);\r\n  await localforage.removeItem(`PDF_${uid}`);\r\n  delete allNotes[uid];\r\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\r\n\r\n  const { tagID } = note;\r\n  if (tagID in tags) {\r\n    const prevTag = tags[tagID];\r\n    prevTag.notes = prevTag.notes.filter((id) => id !== uid);\r\n    await localforage.setItem(\"ALL_TAGS\", tags);\r\n  }\r\n  return { tags, allNotes };\r\n}\r\n\r\nexport async function moveNoteTag(noteID: string, tagID: string) {\r\n  const note = await loadNote(noteID);\r\n  const allNotes = await getAllNotes();\r\n  const tags = await getAllTags();\r\n  if (!note) return { tags, allNotes };\r\n\r\n  const { tagID: prevTagId } = note;\r\n  note.tagID = tagID;\r\n  await localforage.setItem(noteID, note);\r\n  allNotes[noteID].tagID = tagID;\r\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\r\n\r\n  if (prevTagId in tags) {\r\n    const prevTag = tags[prevTagId];\r\n    prevTag.notes = prevTag.notes.filter((id) => id !== noteID);\r\n  }\r\n  tags[tagID]?.notes.push(noteID);\r\n  await localforage.setItem(\"ALL_TAGS\", tags);\r\n  return { tags, allNotes };\r\n}\r\n\r\nexport async function saveTeamNote(\r\n  noteID: string,\r\n  noteInfo: TeamNoteInfo,\r\n  teamPages: Record<string, TeamPageInfo>,\r\n  file?: Blob\r\n) {\r\n  let note = await loadNote(noteID);\r\n  if (note) return;\r\n  const time = Date.now();\r\n  const pageRec: Record<string, NotePage> = {};\r\n  note = {\r\n    ...noteInfo,\r\n    tagID: \"DEFAULT\",\r\n    team: true,\r\n    pageRec,\r\n    pdf: file,\r\n    createTime: time,\r\n    lastTime: time,\r\n  };\r\n\r\n  // set empty state for each page\r\n  Object.entries(teamPages).forEach(([pageID, page]) => {\r\n    pageRec[pageID] = { ...page, state: getDefaultFlatState() };\r\n  });\r\n\r\n  // parse timg for each page\r\n  if (file) {\r\n    const { getPDFImages } = await import(\"../note/pdfImage\");\r\n    const { images } = await getPDFImages(file);\r\n    Object.values(pageRec).forEach((page) => {\r\n      const { pdfIndex } = page;\r\n      if (!pdfIndex) return;\r\n      page.image = images[pdfIndex - 1];\r\n    });\r\n    note.thumbnail = images[0];\r\n  }\r\n\r\n  await createNewNote(note);\r\n}\r\n\r\nexport async function updateTeamNote(\r\n  noteID: string,\r\n  noteInfo: TeamNoteInfo,\r\n  pageInfos: Record<string, TeamPageInfo>\r\n) {\r\n  let note = await loadNote(noteID);\r\n  if (!note) return false;\r\n  const { pageOrder } = noteInfo;\r\n  if (pageOrder.length < note.pageOrder.length) return true;\r\n  const { pageRec, pdf } = note;\r\n  const { getOneImage } = await import(\"./pdfImage\");\r\n\r\n  // parse timgs & set empty states for new pages.\r\n  for (let [pageID, page] of Object.entries(pageInfos)) {\r\n    if (pageID in pageRec) continue;\r\n    const { pdfIndex } = page;\r\n    const state = getDefaultFlatState();\r\n    pageRec[pageID] = { ...page, state };\r\n    if (!pdf || !pdfIndex) continue;\r\n    pageRec[pageID].image = await getOneImage(pdf, pdfIndex, 0.5);\r\n  }\r\n  await editNoteData(noteID, { pageOrder, pageRec });\r\n  return true;\r\n}\r\n","import { getDefaultFlatState, FlatState } from \"../draw/DrawState\";\r\nimport { v4 as getUid } from \"uuid\";\r\nimport dayjs from \"dayjs\";\r\n\r\nexport interface NotePage {\r\n  ratio: number;\r\n  state: FlatState;\r\n  image?: string;\r\n  marked?: boolean;\r\n  pdfIndex?: number;\r\n}\r\n\r\nexport const defaultNotePage: Readonly<NotePage> = {\r\n  ratio: 1.5,\r\n  state: { strokes: {} },\r\n};\r\n\r\nexport interface TeamPageState {\r\n  states: Record<string, FlatState>;\r\n}\r\n\r\nexport interface TeamPageInfo {\r\n  ratio: number;\r\n  pdfIndex?: number;\r\n}\r\n\r\nexport type TeamPage = TeamPageInfo & TeamPageState;\r\n\r\nexport interface TeamNote {\r\n  uid: string;\r\n  pageRec: Record<string, TeamPage>;\r\n}\r\n\r\nexport interface NoteInfo {\r\n  uid: string;\r\n  name: string;\r\n  tagID: string;\r\n  team: boolean;\r\n  withImg: boolean;\r\n  createTime: number;\r\n  lastTime: number;\r\n  thumbnail?: string;\r\n}\r\n\r\nexport type Note = NoteInfo & {\r\n  pdf?: Blob;\r\n  pageRec: Record<string, NotePage>;\r\n  pageOrder: string[];\r\n};\r\n\r\nexport interface TeamNoteInfo {\r\n  uid: string;\r\n  name: string;\r\n  pageOrder: string[];\r\n  withImg: boolean;\r\n}\r\n\r\nexport function createEmptyNote(): Note {\r\n  const pageID = getUid();\r\n  const time = Date.now();\r\n  return {\r\n    uid: getUid(),\r\n    name: `Note ${dayjs(time).format(\"HH:mm, ddd MMM D\")}`,\r\n    tagID: \"DEFAULT\",\r\n    team: false,\r\n    withImg: false,\r\n    createTime: time,\r\n    lastTime: time,\r\n    pageRec: {\r\n      [pageID]: {\r\n        ratio: 1.5,\r\n        state: getDefaultFlatState(),\r\n      },\r\n    },\r\n    pageOrder: [pageID],\r\n  };\r\n}\r\n\r\nexport function createPage(page?: NotePage): [string, NotePage] {\r\n  const pageID = getUid();\r\n  const newPage = page ?? {\r\n    ratio: 1.5,\r\n    state: getDefaultFlatState(),\r\n  };\r\n  return [pageID, newPage];\r\n}\r\n\r\nexport function removePageTimg(pageRec: Record<string, NotePage>) {\r\n  Object.values(pageRec).forEach((page) => {\r\n    delete page.image;\r\n    delete page.marked;\r\n  });\r\n}\r\n","import { v4 as getUid } from \"uuid\";\r\n\r\nexport interface UserInfo {\r\n  userID: string;\r\n  userName: string;\r\n  online: boolean;\r\n}\r\n\r\nexport const getUserID = (() => {\r\n  let cached: string;\r\n  return () => {\r\n    if (cached) return cached;\r\n    let userID = localStorage.getItem(\"USER_ID\");\r\n    if (!userID) {\r\n      userID = getUid();\r\n      localStorage.setItem(\"USER_ID\", userID);\r\n    }\r\n    cached = userID;\r\n    return userID;\r\n  };\r\n})();\r\n\r\nexport const getUserName = () => {\r\n  let name = localStorage.getItem(\"USER_NAME\");\r\n  if (!name) {\r\n    name = getUid().slice(0, 8);\r\n    localStorage.setItem(\"USER_NAME\", name);\r\n  }\r\n  return name;\r\n};\r\n\r\nexport const saveUserName = (name: string) => {\r\n  name = name.trim();\r\n  if (!name) return false;\r\n  else localStorage.setItem(\"USER_NAME\", name);\r\n  return true;\r\n};\r\n"],"names":["ColorCirle","color","className","style","backgroundColor","classNames","colors","allColors","getRandomColor","index","Math","floor","random","length","getHashedColor","str","hash","i","charCodeAt","abs","hashCode","WIDTH","defaultRecord","strokes","OrderedMap","undoStack","List","historyStack","defaultFactory","Record","getDefaultFlatState","DrawState","immutable","width","height","lastOp","this","getImmutable","get","getStrokeMap","toArray","map","last","size","uid","has","drawState","lastRecord","getHistoryStack","getUndoStack","unshift","set","type","nextRecord","first","pathData","stroke","getUid","timestamp","Date","now","pushStroke","prevRecord","currRecord","update","s","push","delete","erased","m","deleteAll","mutations","forEach","prevStroke","op","eraseStrokes","mutateStrokes","undo","redo","toObject","flatState","operations","ds","pushOperation","states","iterators","values","mergedStrokes","heap","Heap","s0","s1","iter","next","value","done","record","pop","createVirtualCanvas","canvas","document","createElement","context","getContext","Error","releaseCanvas","ctx","clearRect","BASE_URL","getNoteID","roomCode","axios","data","console","log","statusCode","noteID","error","getTeamNoteInfo","res","loadTeamNoteInfo","infoRes","noteInfo","pageInfos","updateTeamNote","withImg","method","url","responseType","file","Blob","saveTeamNote","putNote","loadNote","note","name","pdf","pageOrder","pageRec","removePageTimg","userID","getUserID","formData","FormData","arrayBuffer","ab","append","headers","updatePages","getTeamNoteState","params","teamPages","getAllNotes","localforage","allNotes","getAllTags","tags","addNewTag","newTag","notes","prevTags","deleteTag","editTag","tag","editNoteData","noteData","pickBy","v","undefined","lastTime","prevNote","saveNoteInfo","tagID","createNewNote","noteWithPdf","deleteNote","prevTag","filter","id","moveNoteTag","prevTagId","time","team","createTime","Object","entries","pageID","page","state","getPDFImages","images","pdfIndex","image","thumbnail","getOneImage","defaultNotePage","ratio","createEmptyNote","dayjs","format","createPage","marked","cached","localStorage","getItem","setItem","getUserName","slice","saveUserName","trim"],"sourceRoot":""}