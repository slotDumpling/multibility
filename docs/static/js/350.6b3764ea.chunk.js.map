{"version":3,"file":"static/js/350.6b3764ea.chunk.js","mappings":"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","sources":["lib/draw/drawCtrl.ts","component/draw/Draw.tsx","lib/touch/touch.ts","lib/draw/StateSet.ts","component/ui/DigitDisplay.tsx","component/ui/IconFont.tsx","component/reader/ReaderTools.tsx","lib/array.ts","component/reader/PageNav.tsx","component/reader/DrawTools.tsx","component/reader/Reader.tsx","lib/hooks.ts","lib/draw/TeamState.ts","component/reader/Team.tsx","lib/network/io.ts","lib/draw/drawer.ts"],"sourcesContent":["import localforage from \"localforage\";\r\n\r\nexport type CtrlMode = \"draw\" | \"erase\" | \"select\" | \"selected\" | \"delete\";\r\n\r\nexport interface DrawCtrl {\r\n  finger: boolean;\r\n  lineWidth: number;\r\n  eraserWidth: number;\r\n  color: string;\r\n  highlight: boolean;\r\n}\r\n\r\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\r\n  finger: false,\r\n  lineWidth: 10,\r\n  eraserWidth: 10,\r\n  color: \"#000000\",\r\n  highlight: false,\r\n};\r\n\r\nexport async function getDrawCtrl() {\r\n  let drawCtrl = (await localforage.getItem(\"DRAW_CTRL\")) as DrawCtrl | null;\r\n  if (!drawCtrl) {\r\n    drawCtrl = defaultDrawCtrl;\r\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n  }\r\n  return drawCtrl;\r\n}\r\n\r\nexport async function saveDrawCtrl(drawCtrl: DrawCtrl) {\r\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n}\r\n","import React, {\r\n  useRef,\r\n  Dispatch,\r\n  useState,\r\n  useEffect,\r\n  TouchEvent,\r\n  SetStateAction,\r\n} from \"react\";\r\nimport { CtrlMode, defaultDrawCtrl, DrawCtrl } from \"../../lib/draw/drawCtrl\";\r\nimport { DrawState, SetDrawState, Stroke } from \"../../lib/draw/DrawState\";\r\nimport { releaseCanvas } from \"../../lib/draw/drawer\";\r\nimport { isStylus } from \"../../lib/touch/touch\";\r\nimport { Set } from \"immutable\";\r\nimport paper from \"paper\";\r\nimport \"./draw.sass\";\r\n\r\nconst PREVIEW_WIDTH = 200;\r\n\r\nconst Draw = ({\r\n  drawState,\r\n  onChange = () => {},\r\n  otherStates,\r\n  drawCtrl = defaultDrawCtrl,\r\n  mode = \"draw\",\r\n  setMode = () => {},\r\n  readonly = false,\r\n  preview = false,\r\n  imgSrc,\r\n}: {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  onChange?: SetDrawState;\r\n  drawCtrl?: DrawCtrl;\r\n  mode?: CtrlMode;\r\n  setMode?: Dispatch<SetStateAction<CtrlMode>>;\r\n  readonly?: boolean;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}) => {\r\n  const { width, height } = drawState;\r\n  const canvasEl = useRef<HTMLCanvasElement>(null);\r\n  const scope = useRef(new paper.PaperScope());\r\n  const group = useRef<paper.Path[]>();\r\n  const ratio = useRef(1);\r\n  const path = useRef<paper.Path>();\r\n  const [rect, setRect] = useState<paper.Shape.Rectangle>();\r\n  const selectGroup = useRef<paper.Group>();\r\n  const [erased, setErased] = useState(Set<string>());\r\n\r\n  let { color, finger, lineWidth, highlight, eraserWidth } = drawCtrl;\r\n\r\n  const isEventValid = (e: TouchEvent<HTMLCanvasElement>) => {\r\n    return finger || isStylus(e);\r\n  };\r\n\r\n  const updateRatio = () => {\r\n    const clientWidth = canvasEl.current?.clientWidth;\r\n    if (clientWidth) ratio.current = width / clientWidth;\r\n  };\r\n\r\n  const setupPaper = () => {\r\n    if (!canvasEl.current) return;\r\n    scope.current.setup(canvasEl.current);\r\n\r\n    const r = preview ? PREVIEW_WIDTH / width : 1;\r\n    scope.current.view.viewSize.width = width * r;\r\n    scope.current.view.viewSize.height = height * r;\r\n    scope.current.view.scale(r, new paper.Point(0, 0));\r\n  };\r\n\r\n  const setNewRect = (e: paper.MouseEvent) => {\r\n    updateRatio();\r\n    scope.current.activate();\r\n    const point = e.point.multiply(ratio.current);\r\n    const rectangle = new paper.Shape.Rectangle(point, new paper.Size(0, 0));\r\n    rectangle.strokeColor = new paper.Color(\"#1890ff\");\r\n    rectangle.strokeWidth = 3;\r\n    rectangle.dashOffset = 0;\r\n    rectangle.dashArray = [30, 20];\r\n    setRect(rectangle);\r\n  };\r\n\r\n  const handleDown = {\r\n    draw() {\r\n      updateRatio();\r\n      scope.current.activate();\r\n      path.current = new scope.current.Path();\r\n      const strokeColor = new paper.Color(color);\r\n      if (highlight) {\r\n        strokeColor.alpha /= 2;\r\n        path.current.blendMode = \"multiply\";\r\n      }\r\n      path.current.strokeColor = strokeColor;\r\n      path.current.strokeWidth = lineWidth;\r\n      path.current.strokeJoin = \"round\";\r\n      path.current.strokeCap = \"round\";\r\n    },\r\n    erase() {\r\n      updateRatio();\r\n      scope.current.activate();\r\n      path.current = new scope.current.Path();\r\n      const strokeColor = new paper.Color(\"#0003\");\r\n      path.current.strokeColor = strokeColor;\r\n      path.current.strokeWidth = eraserWidth;\r\n      path.current.strokeJoin = \"round\";\r\n      path.current.strokeCap = \"round\";\r\n    },\r\n    select(e: paper.MouseEvent) {\r\n      setNewRect(e);\r\n    },\r\n    selected(e: paper.MouseEvent) {\r\n      scope.current.activate();\r\n      const point = e.point.multiply(ratio.current);\r\n      if (!rect) return;\r\n      if (!point.isInside(rect.strokeBounds)) {\r\n        setNewRect(e);\r\n        setMode(\"select\");\r\n      }\r\n    },\r\n    delete() {},\r\n  }[mode];\r\n\r\n  const handleDrag = {\r\n    draw(e: paper.MouseEvent) {\r\n      if (!path.current) return;\r\n      scope.current.activate();\r\n      const point = e.point.multiply(ratio.current);\r\n      path.current.add(point);\r\n      path.current.smooth();\r\n    },\r\n    erase(e: paper.MouseEvent) {\r\n      const eraserPath = path.current;\r\n      if (!eraserPath) return;\r\n      scope.current.activate();\r\n      const point = e.point.multiply(ratio.current);\r\n      eraserPath.add(point);\r\n      eraserPath.smooth();\r\n\r\n      const newErased = group.current\r\n        ?.filter((p) => !erased.has(p.name))\r\n        .filter((p) => checkErase(p, eraserPath, e, ratio.current, eraserWidth))\r\n        .map((p) => p.name);\r\n      newErased && setErased((prev) => prev.concat(newErased));\r\n    },\r\n    select(e: paper.MouseEvent) {\r\n      if (!rect) return;\r\n      scope.current.activate();\r\n      const delta = e.delta.multiply(ratio.current);\r\n      rect.size = rect.size.add(new paper.Size(delta.x, delta.y));\r\n      rect.position = rect.position.add(delta.divide(2));\r\n    },\r\n    selected(e: paper.MouseEvent) {\r\n      const sGroup = selectGroup.current;\r\n      if (!rect || !sGroup) return;\r\n      const delta = e.delta.multiply(ratio.current);\r\n      rect.position = rect.position.add(delta);\r\n      sGroup.position = sGroup.position.add(delta);\r\n    },\r\n    delete() {},\r\n  }[mode];\r\n\r\n  const handleUp = {\r\n    erase() {\r\n      if (!path.current) return;\r\n      scope.current.activate();\r\n      path.current.remove();\r\n      onChange((prev) => DrawState.eraseStrokes(prev, erased.toArray()));\r\n      setErased(Set());\r\n    },\r\n    draw() {\r\n      if (!path.current || path.current.segments.length === 0) return;\r\n      path.current.simplify();\r\n      if (path.current.segments.length === 0) return;\r\n      const pathData = path.current.exportJSON();\r\n      path.current.remove();\r\n      onChange((prev) => DrawState.addStroke(prev, pathData));\r\n    },\r\n    select() {\r\n      if (!rect || rect.size.width < 10 || rect.size.height < 10) {\r\n        return setRect(undefined);\r\n      }\r\n      scope.current.activate();\r\n\r\n      const bounds = rect.strokeBounds;\r\n      selectGroup.current = new paper.Group();\r\n      group.current?.forEach((p) => {\r\n        if (!(p instanceof paper.Path)) return;\r\n        if (p.isInside(bounds) || p.intersects(rect)) {\r\n          selectGroup.current?.addChild(p);\r\n        }\r\n      });\r\n      setMode(\"selected\");\r\n    },\r\n    selected() {},\r\n    delete() {},\r\n  }[mode];\r\n\r\n  useEffect(() => {\r\n    setupPaper();\r\n    scope.current.activate();\r\n    const cvs = canvasEl.current;\r\n    return () => void (cvs && releaseCanvas(cvs));\r\n  }, []);\r\n\r\n  const handlePaper = () => {\r\n    if (readonly) return;\r\n    scope.current.view.onMouseDown = handleDown;\r\n    scope.current.view.onMouseDrag = handleDrag;\r\n    scope.current.view.onMouseUp = handleUp;\r\n  };\r\n  useEffect(handlePaper);\r\n\r\n  const preventTouch = (e: TouchEvent<HTMLCanvasElement>) => {\r\n    isEventValid(e) || e.stopPropagation();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!imgSrc) return;\r\n    const img = new Image();\r\n    img.src = imgSrc;\r\n    let raster: paper.Raster;\r\n\r\n    img.onload = () => {\r\n      scope.current.activate();\r\n      raster = new paper.Raster(img);\r\n      raster.position = scope.current.view.center;\r\n      let r = width / img.width;\r\n      raster.scale(r);\r\n      raster.sendToBack();\r\n    };\r\n\r\n    return () => void raster?.remove();\r\n  }, [imgSrc]);\r\n\r\n  useEffect(() => {\r\n    scope.current.activate();\r\n    group.current = [];\r\n\r\n    drawState.getValidStrokes().forEach((stroke) => {\r\n      paintStroke(stroke, group.current, erased);\r\n    });\r\n\r\n    return () => group.current?.forEach((item) => item.remove());\r\n  }, [drawState, erased]);\r\n\r\n  useEffect(() => {\r\n    scope.current.activate();\r\n    const otherGroup: paper.Path[] = [];\r\n\r\n    otherStates?.forEach((ds) => {\r\n      ds.getValidStrokes().forEach((stroke) => {\r\n        paintStroke(stroke, otherGroup);\r\n      });\r\n    });\r\n\r\n    return () => otherGroup.forEach((item) => item.remove());\r\n  }, [otherStates]);\r\n\r\n  const updateMutation = () => {\r\n    const list = selectGroup.current?.children;\r\n    if (!list?.length) return;\r\n    const mutations: [string, string][] = list.map((p) => [\r\n      p.name,\r\n      p.exportJSON(),\r\n    ]);\r\n    onChange((prev) => DrawState.mutateStroke(prev, mutations));\r\n  };\r\n\r\n  const deleteSelected = () => {\r\n    const list = selectGroup.current?.children;\r\n    if (!list?.length) return;\r\n    const deleted = list.map((item) => item.name);\r\n    onChange((prev) => DrawState.eraseStrokes(prev, deleted));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (mode === \"select\") {\r\n      //\r\n    } else if (mode === \"selected\") {\r\n      if (rect?.strokeColor) rect.strokeColor.alpha /= 2;\r\n      scope.current.activate();\r\n      return updateMutation;\r\n    } else if (mode === \"delete\") {\r\n      deleteSelected();\r\n      setMode(\"select\");\r\n      setRect(undefined);\r\n    } else {\r\n      setRect(undefined);\r\n    }\r\n  }, [mode]);\r\n\r\n  useEffect(() => {\r\n    if (!rect) return;\r\n    let id = 0;\r\n    const moveDash = () => {\r\n      id = requestAnimationFrame(() => {\r\n        rect.dashOffset += 3;\r\n        moveDash();\r\n      });\r\n    };\r\n    moveDash();\r\n    return () => {\r\n      rect.remove();\r\n      cancelAnimationFrame(id);\r\n    };\r\n  }, [rect]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasEl}\r\n      className=\"draw-canvas\"\r\n      data-paper-hidpi={false}\r\n      onTouchStartCapture={preventTouch}\r\n      onTouchMoveCapture={preventTouch}\r\n    />\r\n  );\r\n};\r\n\r\nexport default React.memo(Draw);\r\n\r\nconst paintStroke = (\r\n  stroke: Stroke,\r\n  group?: paper.Path[],\r\n  erased?: Set<string>\r\n) => {\r\n  let { pathData, uid } = stroke;\r\n  try {\r\n    const path = new paper.Path();\r\n    path.importJSON(pathData);\r\n    path.name = uid;\r\n    if (erased?.has(uid)) path.opacity /= 2;\r\n    group?.push(path);\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n\r\nconst getCheckPoints = (() => {\r\n  const cache = new WeakMap<paper.MouseEvent, paper.Point[]>();\r\n  return (e: paper.MouseEvent, ratio: number, eraserWidth: number) => {\r\n    const cached = cache.get(e);\r\n    if (cached) return cached;\r\n\r\n    const point = e.point.multiply(ratio);\r\n    const delta = e.delta.multiply(ratio);\r\n    const times = (delta.length / eraserWidth) * 2;\r\n    const checkPoints: paper.Point[] = [];\r\n    for (let i = 0; i < times; i += 1) {\r\n      checkPoints.push(point.subtract(delta.multiply(i / times)));\r\n    }\r\n    cache.set(e, checkPoints);\r\n    return checkPoints;\r\n  };\r\n})();\r\n\r\nconst checkErase = (\r\n  checkedPath: paper.Path,\r\n  eraserPath: paper.Path,\r\n  e: paper.MouseEvent,\r\n  ratio: number,\r\n  eraserWidth: number\r\n) => {\r\n  const curveBound = eraserPath.lastSegment.curve?.strokeBounds;\r\n  if (\r\n    !(checkedPath instanceof paper.Path) ||\r\n    !curveBound?.intersects(checkedPath.strokeBounds)\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  if (eraserPath.intersects(checkedPath)) return true;\r\n\r\n  const checkPoints = getCheckPoints(e, ratio, eraserWidth);\r\n  return checkPoints.some((cPoint) => {\r\n    const d = checkedPath.getNearestPoint(cPoint)?.getDistance(cPoint);\r\n    return d && d < (checkedPath.strokeWidth + eraserWidth) / 2;\r\n  });\r\n};\r\n","import { TouchEvent } from \"react\";\r\n\r\nexport type iOSTouch = Touch & {\r\n  force?: number;\r\n  touchType?: \"stylus\" | \"direct\";\r\n};\r\n\r\nexport function isStylus(e: TouchEvent<HTMLCanvasElement> | globalThis.TouchEvent) {\r\n  const touch = e.touches[0] as iOSTouch;\r\n  return touch?.touchType === \"stylus\";\r\n}\r\n","import { List, Map, Record } from \"immutable\";\r\nimport { DrawState, Operation } from \"./DrawState\";\r\nimport { NotePage } from \"../note/note\";\r\n\r\ninterface StateSetRecordType {\r\n  states: Map<string, DrawState>;\r\n  editStack: List<string>;\r\n  undoStack: List<string>;\r\n}\r\n\r\nconst defaultRecord: Readonly<StateSetRecordType> = {\r\n  states: Map(),\r\n  editStack: List(),\r\n  undoStack: List(),\r\n};\r\n\r\ntype StateSetRecord = Record<StateSetRecordType>;\r\nconst defaultFactory = Record(defaultRecord);\r\n\r\nexport type SetOperation = Operation & { pageID: string };\r\n\r\nexport class StateSet {\r\n  constructor(\r\n    private immutable: StateSetRecord,\r\n    public lastOp?: SetOperation\r\n  ) {}\r\n\r\n  static createFromList(list: [string, DrawState][]) {\r\n    return new StateSet(defaultFactory().set(\"states\", Map(list)));\r\n  }\r\n\r\n  static createFromPages(\r\n    pageRec: globalThis.Record<string, NotePage>,\r\n    width: number\r\n  ) {\r\n    const entries = Object.entries(pageRec);\r\n    return StateSet.createFromList(\r\n      entries.map(([key, { state, ratio }]) => [\r\n        key,\r\n        DrawState.loadFromFlat(state, width, width * ratio),\r\n      ])\r\n    );\r\n  }\r\n\r\n  getImmutable() {\r\n    return this.immutable;\r\n  }\r\n\r\n  getStates() {\r\n    return this.getImmutable().get(\"states\");\r\n  }\r\n\r\n  getOneState(pageID: string) {\r\n    return this.getStates().get(pageID);\r\n  }\r\n\r\n  getEditStack() {\r\n    return this.getImmutable().get(\"editStack\");\r\n  }\r\n\r\n  getUndoStack() {\r\n    return this.getImmutable().get(\"undoStack\");\r\n  }\r\n\r\n  setState(pageID: string, drawState: DrawState) {\r\n    const prevDS = this.getOneState(pageID);\r\n    if (!prevDS || prevDS === drawState) return this;\r\n    let currRecord = this.getImmutable()\r\n      .update(\"states\", (s) => s.set(pageID, drawState))\r\n      .update(\"editStack\", (l) => l.push(pageID))\r\n      .delete(\"undoStack\");\r\n\r\n    const { lastOp } = drawState;\r\n    const lastSetOp = lastOp && { ...lastOp, pageID };\r\n\r\n    return new StateSet(currRecord, lastSetOp);\r\n  }\r\n\r\n  addState(pageID: string, notePage: NotePage, width: number) {\r\n    const { state, ratio } = notePage;\r\n    const newDS = DrawState.loadFromFlat(state, width, width * ratio);\r\n    const currRecord = this.getImmutable().update(\"states\", (s) =>\r\n      s.set(pageID, newDS)\r\n    );\r\n    return new StateSet(currRecord);\r\n  }\r\n\r\n  deleteState(pageID: string) {\r\n    return new StateSet(\r\n      this.getImmutable().update(\"states\", (s) => s.delete(pageID))\r\n    );\r\n  }\r\n\r\n  isUndoable() {\r\n    return this.getEditStack().size > 0;\r\n  }\r\n\r\n  isRedoable() {\r\n    return this.getUndoStack().size > 0;\r\n  }\r\n\r\n  undo() {\r\n    if (!this.isUndoable()) return this;\r\n    const lastUid = this.getEditStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.undo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"editStack\", (s) => s.pop())\r\n        .update(\"undoStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  redo() {\r\n    if (!this.isRedoable()) return this;\r\n    const lastUid = this.getUndoStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.redo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"undoStack\", (s) => s.pop())\r\n        .update(\"editStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  getLastDS(): [string, DrawState] | undefined {\r\n    const pageID = this.lastOp?.pageID;\r\n    const ds = pageID && this.getOneState(pageID);\r\n    return ds ? [pageID, ds] : undefined;\r\n  }\r\n}\r\n","import classNames from \"classnames\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./digitDisplay.sass\";\r\n\r\nfunction num2digits(num: number): number[] {\r\n  return String(num)\r\n    .padStart(4, \"0\")\r\n    .split(\"\")\r\n    .map((s) => Number(s));\r\n}\r\n\r\nexport default function DigitDisplay({ value }: { value: number }) {\r\n  const [randomNum, setRandomNum] = useState(9999);\r\n  const displayNum = value >= 0 ? value : randomNum;\r\n  const digits = num2digits(displayNum);\r\n\r\n  function resetRandom() {\r\n    setRandomNum(Math.floor(Math.random() * 10000));\r\n  }\r\n  useEffect(() => {\r\n    if (value !== -1) return setRandomNum(9999);\r\n    const timer = setTimeout(resetRandom, 100);\r\n    return () => clearTimeout(timer);\r\n  }, [value]);\r\n\r\n  return (\r\n    <div className={classNames(\"digit-display\", { disabled: value === -2 })}>\r\n      {digits.map((d, idx) => (\r\n        <Digit key={idx} digit={d} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Digit({ digit }: { digit: number }) {\r\n  if (!(digit <= 9 && digit >= 0)) {\r\n    return <div className=\"digit\">*</div>;\r\n  }\r\n  return <div className=\"digit\">{digit}</div>;\r\n}\r\n","import { createFromIconfontCN } from \"@ant-design/icons\";\r\n\r\nexport default createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_3181679_eb02zt96p4p.js\",\r\n});\r\n","import { Button, Input } from \"antd\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { ReaderMethodCtx, ReaderStateCtx } from \"./Reader\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport classNames from \"classnames\";\r\n\r\nexport const AddPageButton = () => {\r\n  const { addFinalPage } = useContext(ReaderMethodCtx);\r\n  const { pageOrder } = useContext(ReaderStateCtx);\r\n  const empty = Boolean(pageOrder && !pageOrder.length);\r\n  return (\r\n    <div className={classNames(\"add-btn-wrapper\", { empty })}>\r\n      <Button\r\n        type=\"dashed\"\r\n        icon={<PlusOutlined />}\r\n        block\r\n        onClick={addFinalPage}\r\n      >\r\n        Add page\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const NoteHeader = () => {\r\n  const { noteInfo } = useContext(ReaderStateCtx);\r\n  const [noteName, setNoteName] = useState(\"\");\r\n  useEffect(() => {\r\n    if (!noteInfo) return;\r\n    setNoteName(noteInfo?.name);\r\n  }, [noteInfo]);\r\n\r\n  if (!noteInfo) return null;\r\n\r\n  return (\r\n    <div className=\"note-header\">\r\n      <Input value={noteName} bordered={false} />\r\n    </div>\r\n  );\r\n};\r\n","export function exchange<T>(list: T[], fromIndex: number, toIndex: number) {\r\n  const result = list.slice();\r\n  const [removed] = result.splice(fromIndex, 1);\r\n  result.splice(toIndex, 0, removed);\r\n  return result;\r\n}\r\n\r\nexport function insertAfter<T>(list: T[], prevItem: T, newItem: T) {\r\n  const prevIndex = list.indexOf(prevItem);\r\n  const curr = list.slice();\r\n  if (prevIndex === -1) return curr;\r\n  curr.splice(prevIndex + 1, 0, newItem);\r\n  return curr;\r\n}\r\n","import { Button, Drawer, Menu, Popover, Tabs } from \"antd\";\r\nimport React, {\r\n  FC,\r\n  useMemo,\r\n  Dispatch,\r\n  useState,\r\n  useContext,\r\n  MouseEvent,\r\n  SetStateAction,\r\n  useEffect,\r\n  useRef,\r\n} from \"react\";\r\nimport { PageWrapper, ReaderMethodCtx, ReaderStateCtx } from \"./Reader\";\r\nimport {\r\n  MoreOutlined,\r\n  PlusOutlined,\r\n  CopyOutlined,\r\n  DeleteOutlined,\r\n  MenuFoldOutlined,\r\n  MenuUnfoldOutlined,\r\n} from \"@ant-design/icons\";\r\nimport IconFont from \"../ui/IconFont\";\r\nimport {\r\n  Draggable,\r\n  Droppable,\r\n  DropResult,\r\n  DragDropContext,\r\n} from \"react-beautiful-dnd\";\r\nimport { AddPageButton } from \"./ReaderTools\";\r\nimport { exchange } from \"../../lib/array\";\r\nimport classNames from \"classnames\";\r\nimport { TeamCtx } from \"./Team\";\r\nimport \"./preview.sass\";\r\n\r\nconst PageNavContent = ({\r\n  activeKey,\r\n  setActiveKey,\r\n}: {\r\n  activeKey: string;\r\n  setActiveKey: Dispatch<SetStateAction<string>>;\r\n}) => {\r\n  const { pageOrder, inviewPages } = useContext(ReaderStateCtx);\r\n  const { setPageOrder, scrollPage } = useContext(ReaderMethodCtx);\r\n  const { updateReorder } = useContext(TeamCtx);\r\n  const refRec = useRef<Record<string, HTMLElement>>({});\r\n  const listEl = useRef<HTMLDivElement>();\r\n\r\n  const onDragEnd = ({ source, destination }: DropResult) => {\r\n    if (!destination || !pageOrder) return;\r\n    const { index: fromIndex } = source;\r\n    const { index: toIndex } = destination;\r\n    const pageID = pageOrder[fromIndex];\r\n    setPageOrder((prev) => {\r\n      if (!prev) return;\r\n      const newOrder = exchange(prev, fromIndex, toIndex);\r\n      updateReorder && updateReorder(newOrder);\r\n      return newOrder;\r\n    });\r\n    requestAnimationFrame(() => scrollPage(pageID));\r\n  };\r\n\r\n  const currpageID = useMemo(\r\n    () => pageOrder?.find((pageID) => inviewPages.has(pageID)) || \"\",\r\n    [pageOrder, inviewPages]\r\n  );\r\n\r\n  useEffect(() => {\r\n    refRec.current[currpageID]?.scrollIntoView();\r\n    const itemHeight = refRec.current[currpageID]?.clientHeight || 0;\r\n    const listHeight = listEl.current?.clientHeight || 0;\r\n    listEl.current?.scrollBy(0, -listHeight / 2 + itemHeight / 2);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"preview-container\">\r\n      <PreviewTabs activeKey={activeKey} setActiveKey={setActiveKey} />\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"droppable\">\r\n          {({ droppableProps, innerRef, placeholder }) => (\r\n            <div\r\n              className=\"page-list\"\r\n              ref={(e) => {\r\n                innerRef(e);\r\n                if (e) listEl.current = e;\r\n              }}\r\n              {...droppableProps}\r\n            >\r\n              {pageOrder?.map((uid, index) => (\r\n                <PagePreview\r\n                  key={uid}\r\n                  uid={uid}\r\n                  mode={activeKey}\r\n                  pageIndex={index}\r\n                  currpageID={currpageID}\r\n                  refRec={refRec.current}\r\n                />\r\n              ))}\r\n              {placeholder}\r\n              {activeKey === \"ALL\" && <AddPageButton />}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PagePreview: FC<{\r\n  uid: string;\r\n  mode: string;\r\n  pageIndex: number;\r\n  currpageID: string;\r\n  refRec: Record<string, HTMLElement>;\r\n}> = ({ uid, pageIndex, mode, currpageID, refRec }) => {\r\n  const { stateSet, teamStateSet, pageRec } = useContext(ReaderStateCtx);\r\n  const { scrollPage, switchPageMarked } = useContext(ReaderMethodCtx);\r\n  const page = pageRec && pageRec[uid];\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStates = teamStateSet?.getOnePageState(uid);\r\n  if (!page || !drawState) return null;\r\n\r\n  if (\r\n    mode === \"WRITTEN\" &&\r\n    drawState.isEmpty() &&\r\n    (!teamStates || teamStates.every((ds) => ds.isEmpty()))\r\n  ) {\r\n    return null;\r\n  } else if (mode === \"MARKED\" && !page.marked) {\r\n    return null;\r\n  }\r\n\r\n  const switchMarked = (e: MouseEvent<HTMLSpanElement>) => {\r\n    switchPageMarked(uid);\r\n    e.stopPropagation();\r\n  };\r\n  const curr = currpageID === uid;\r\n  const dragDisabled = mode !== \"ALL\";\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={uid}\r\n      index={pageIndex}\r\n      isDragDisabled={dragDisabled}\r\n    >\r\n      {(\r\n        { innerRef, draggableProps, dragHandleProps },\r\n        { isDragging: drag }\r\n      ) => {\r\n        const { image, marked } = page;\r\n        return (\r\n          <div\r\n            ref={(e) => {\r\n              innerRef(e);\r\n              if (e) refRec[uid] = e;\r\n            }}\r\n            className={classNames(\"page\", { curr, drag })}\r\n            onClick={() => scrollPage(uid)}\r\n            {...draggableProps}\r\n            {...dragHandleProps}\r\n          >\r\n            <PageWrapper\r\n              uid={uid}\r\n              drawState={drawState}\r\n              teamStates={teamStates}\r\n              thumbnail={image}\r\n              preview\r\n            />\r\n            <span\r\n              className={classNames(\"bookmark\", { marked })}\r\n              onClickCapture={switchMarked}\r\n            />\r\n            <span className=\"index\">{pageIndex + 1}</span>\r\n            <PreviewOption uid={uid} />\r\n          </div>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nconst PreviewOption = ({ uid }: { uid: string }) => {\r\n  const [popShow, setPopShow] = useState(false);\r\n  const { addPage, deletePage } = useContext(ReaderMethodCtx);\r\n  const { teamOn } = useContext(ReaderStateCtx);\r\n  const { Item } = Menu;\r\n\r\n  const menu = (\r\n    <Menu\r\n      onClick={({ key, domEvent }) => {\r\n        if (key === \"ADD\") {\r\n          addPage(uid);\r\n        } else if (key === \"COPY\") {\r\n          addPage(uid, true);\r\n        } else if (key === \"DELETE\") {\r\n          deletePage(uid);\r\n        }\r\n        domEvent.stopPropagation();\r\n        setPopShow(false);\r\n      }}\r\n    >\r\n      <Item key=\"ADD\" icon={<PlusOutlined />}>\r\n        Add page\r\n      </Item>\r\n      <Item key=\"COPY\" icon={<CopyOutlined />}>\r\n        Duplicate\r\n      </Item>\r\n      <Item key=\"DELETE\" danger icon={<DeleteOutlined />} disabled={teamOn}>\r\n        Delete\r\n      </Item>\r\n    </Menu>\r\n  );\r\n  return (\r\n    <Popover\r\n      content={menu}\r\n      trigger=\"click\"\r\n      placement=\"left\"\r\n      visible={popShow}\r\n      onVisibleChange={setPopShow}\r\n      destroyTooltipOnHide\r\n    >\r\n      <span\r\n        className=\"option\"\r\n        onClickCapture={(e) => {\r\n          setPopShow((prev) => !prev);\r\n          e.stopPropagation();\r\n        }}\r\n      >\r\n        <MoreOutlined />\r\n      </span>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst PreviewTabs = ({\r\n  activeKey,\r\n  setActiveKey,\r\n}: {\r\n  activeKey: string;\r\n  setActiveKey: (key: string) => void;\r\n}) => {\r\n  const { TabPane } = Tabs;\r\n  return (\r\n    <Tabs\r\n      className=\"tabs\"\r\n      activeKey={activeKey}\r\n      onChange={setActiveKey}\r\n      tabBarGutter={10}\r\n      size=\"small\"\r\n      centered\r\n    >\r\n      <TabPane tab={<IconFont type=\"icon-uf_paper\" />} key=\"ALL\" />\r\n      <TabPane tab={<IconFont type=\"icon-bookmark2\" />} key=\"MARKED\" />\r\n      <TabPane tab={<IconFont type=\"icon-write\" />} key=\"WRITTEN\" />\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport default function PageNav() {\r\n  const [navOn, setNavOn] = useState(false);\r\n  const [activeKey, setActiveKey] = useState<string>(\"ALL\");\r\n  const title = {\r\n    ALL: \"All Pages\",\r\n    MARKED: \"Bookmarks\",\r\n    WRITTEN: \"Notes\",\r\n  }[activeKey];\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        type=\"text\"\r\n        icon={<MenuFoldOutlined />}\r\n        onClick={() => setNavOn((prev) => !prev)}\r\n      />\r\n      <Drawer\r\n        visible={navOn}\r\n        onClose={() => setNavOn(false)}\r\n        width={200}\r\n        title={title}\r\n        closeIcon={<MenuUnfoldOutlined />}\r\n        bodyStyle={{ padding: 0, overflow: \"hidden\" }}\r\n        destroyOnClose\r\n      >\r\n        <PageNavContent activeKey={activeKey} setActiveKey={setActiveKey} />\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n","import React, {\r\n  FC,\r\n  useMemo,\r\n  useState,\r\n  Dispatch,\r\n  useEffect,\r\n  useContext,\r\n  CSSProperties,\r\n  SetStateAction,\r\n} from \"react\";\r\nimport {\r\n  Badge,\r\n  Avatar,\r\n  Button,\r\n  Slider,\r\n  Divider,\r\n  message,\r\n  Popover,\r\n  Popconfirm,\r\n  ButtonProps,\r\n  Tag,\r\n  Alert,\r\n} from \"antd\";\r\nimport Search from \"antd/lib/input/Search\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { ReaderMethodCtx, ReaderStateCtx } from \"./Reader\";\r\nimport { TeamCtx } from \"./Team\";\r\nimport DigitDisplay from \"../ui/DigitDisplay\";\r\nimport { colors, getHashedColor } from \"../../lib/color\";\r\nimport { getuserID, UserInfo } from \"../../lib/user\";\r\nimport { CtrlMode, DrawCtrl } from \"../../lib/draw/drawCtrl\";\r\nimport PageNav from \"./PageNav\";\r\nimport {\r\n  HomeFilled,\r\n  EyeOutlined,\r\n  UndoOutlined,\r\n  RedoOutlined,\r\n  SaveOutlined,\r\n  TeamOutlined,\r\n  CopyOutlined,\r\n  DragOutlined,\r\n  ExpandOutlined,\r\n  ReloadOutlined,\r\n  DeleteOutlined,\r\n  HighlightOutlined,\r\n  DisconnectOutlined,\r\n  RotateLeftOutlined,\r\n  RotateRightOutlined,\r\n  EyeInvisibleOutlined,\r\n  UsergroupAddOutlined,\r\n} from \"@ant-design/icons\";\r\nimport IconFont from \"../ui/IconFont\";\r\nimport \"./drawTools.sass\";\r\n\r\nexport default function DrawTools({\r\n  handleUndo,\r\n  handleRedo,\r\n  instantSave,\r\n}: {\r\n  handleUndo: () => void;\r\n  handleRedo: () => void;\r\n  instantSave: () => void;\r\n}) {\r\n  const { saved, stateSet, teamOn, mode, drawCtrl } =\r\n    useContext(ReaderStateCtx);\r\n  const { setDrawCtrl, setMode } = useContext(ReaderMethodCtx);\r\n  const { finger } = drawCtrl;\r\n\r\n  const nav = useNavigate();\r\n\r\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\r\n    setDrawCtrl((prev) => ({ ...prev, ...updated }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (mode === \"selected\") {\r\n      message.info({\r\n        className: \"select-message\",\r\n        icon: <DragOutlined style={{ display: \"none\" }} />,\r\n        content: <SelectMenu setMode={setMode} />,\r\n        duration: 0,\r\n        key: \"selected\",\r\n      });\r\n      return () => message.destroy(\"selected\");\r\n    }\r\n  }, [mode]);\r\n\r\n  return (\r\n    <header>\r\n      <div className=\"left\">\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => nav(\"/\")}\r\n          icon={<HomeFilled style={{ opacity: 0.8 }} />}\r\n        />\r\n        <br />\r\n        <Button\r\n          type=\"text\"\r\n          className=\"save\"\r\n          onClick={instantSave}\r\n          disabled={saved}\r\n          icon={<SaveOutlined />}\r\n        />\r\n      </div>\r\n      <div className=\"middle\">\r\n        <Button\r\n          type=\"text\"\r\n          shape=\"circle\"\r\n          icon={<UndoOutlined />}\r\n          onClick={handleUndo}\r\n          disabled={!stateSet?.isUndoable()}\r\n        />\r\n        <Button\r\n          className=\"redo\"\r\n          type=\"text\"\r\n          shape=\"circle\"\r\n          icon={<RedoOutlined />}\r\n          onClick={handleRedo}\r\n          disabled={!stateSet?.isRedoable()}\r\n        />\r\n        <br />\r\n        <PenButton updateDrawCtrl={updateDrawCtrl} />\r\n        <EraserButton updateDrawCtrl={updateDrawCtrl} />\r\n        <Button\r\n          type={[\"select\", \"selected\"].includes(mode) ? \"default\" : \"text\"}\r\n          shape=\"circle\"\r\n          onClick={() => setMode(\"select\")}\r\n          icon={<ExpandOutlined />}\r\n        />\r\n        <Button\r\n          className=\"finger\"\r\n          type={finger ? \"primary\" : \"text\"}\r\n          ghost={finger}\r\n          shape=\"circle\"\r\n          onClick={() => updateDrawCtrl({ finger: !finger })}\r\n          icon={<IconFont type=\"icon-finger\" />}\r\n        />\r\n      </div>\r\n      <div className=\"right\">\r\n        {teamOn && <RoomInfo />}\r\n        {teamOn || <JoinRoom />}\r\n        <br />\r\n        <PageNav />\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nconst PenButton = ({\r\n  updateDrawCtrl,\r\n}: {\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}) => {\r\n  const { mode } = useContext(ReaderStateCtx);\r\n  const { setMode } = useContext(ReaderMethodCtx);\r\n  return mode === \"draw\" ? (\r\n    <Popover\r\n      content={<PenPanel updateDrawCtrl={updateDrawCtrl} />}\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button type=\"default\" shape=\"circle\" icon={<HighlightOutlined />} />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      shape=\"circle\"\r\n      onClick={() => setMode(\"draw\")}\r\n      icon={<HighlightOutlined />}\r\n    />\r\n  );\r\n};\r\n\r\nconst PenPanel = ({\r\n  updateDrawCtrl,\r\n}: {\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}) => {\r\n  const {\r\n    drawCtrl: { lineWidth, highlight },\r\n  } = useContext(ReaderStateCtx);\r\n  const [tempLineWidth, setTempLineWidth] = useState(lineWidth);\r\n\r\n  return (\r\n    <div className=\"pen-panel\">\r\n      <div className=\"pen-status\">\r\n        <Slider\r\n          min={5}\r\n          max={100}\r\n          value={tempLineWidth}\r\n          onChange={setTempLineWidth}\r\n          onAfterChange={(lineWidth) => updateDrawCtrl({ lineWidth })}\r\n        />\r\n        <Button\r\n          type={highlight ? \"primary\" : \"text\"}\r\n          ghost={highlight}\r\n          shape=\"circle\"\r\n          icon={<IconFont type=\"icon-Highlight\" />}\r\n          onClick={() => updateDrawCtrl({ highlight: !highlight })}\r\n        />\r\n      </div>\r\n      <ColorSelect updateDrawCtrl={updateDrawCtrl} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ColorSelect = ({\r\n  updateDrawCtrl,\r\n}: {\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}) => {\r\n  const {\r\n    drawCtrl: { color },\r\n  } = useContext(ReaderStateCtx);\r\n\r\n  return (\r\n    <div className=\"color-select\">\r\n      {colors.map((c) => (\r\n        <label key={c}>\r\n          <input\r\n            checked={color === c}\r\n            type=\"radio\"\r\n            name=\"color\"\r\n            onChange={() => updateDrawCtrl({ color: c })}\r\n          />\r\n          <div\r\n            className=\"circle\"\r\n            style={{ \"--circle-color\": c } as CSSProperties}\r\n          ></div>\r\n        </label>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst EraserButton = ({\r\n  updateDrawCtrl,\r\n}: {\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}) => {\r\n  const { setMode } = useContext(ReaderMethodCtx);\r\n  const {\r\n    mode,\r\n    drawCtrl: { eraserWidth },\r\n  } = useContext(ReaderStateCtx);\r\n  const [tempEraserWidth, setTempEraserWidth] = useState(eraserWidth);\r\n\r\n  const content = (\r\n    <div className=\"pen-panel\">\r\n      <Slider\r\n        min={5}\r\n        max={100}\r\n        value={tempEraserWidth}\r\n        onChange={setTempEraserWidth}\r\n        onAfterChange={(eraserWidth) => updateDrawCtrl({ eraserWidth })}\r\n      />\r\n    </div>\r\n  );\r\n  return mode === \"erase\" ? (\r\n    <Popover\r\n      content={content}\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button\r\n        type=\"default\"\r\n        shape=\"circle\"\r\n        icon={<IconFont type=\"icon-eraser\" />}\r\n      />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      shape=\"circle\"\r\n      onClick={() => setMode(\"erase\")}\r\n      icon={<IconFont type=\"icon-eraser\" />}\r\n    />\r\n  );\r\n};\r\n\r\nconst SelectMenu: FC<{\r\n  setMode: Dispatch<SetStateAction<CtrlMode>>;\r\n}> = ({ setMode }) => {\r\n  const buttonProps: ButtonProps = {\r\n    type: \"text\",\r\n    shape: \"round\",\r\n  };\r\n  return (\r\n    <>\r\n      <Button icon={<RotateLeftOutlined />} {...buttonProps} />\r\n      <Button icon={<RotateRightOutlined />} {...buttonProps} />\r\n      <Button\r\n        danger\r\n        icon={<DeleteOutlined />}\r\n        onClick={() => setMode(\"delete\")}\r\n        {...buttonProps}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst UserCard: FC<{ userInfo: UserInfo }> = ({ userInfo }) => {\r\n  const { userName, userID } = userInfo;\r\n  const { ignores, setIgnores } = useContext(TeamCtx);\r\n  const color = useMemo(() => getHashedColor(userName), [userName]);\r\n  const self = userID === getuserID();\r\n  const ignored = ignores.has(userID) && !self;\r\n\r\n  const switchIgnore = () => {\r\n    setIgnores((prev) => {\r\n      if (prev.has(userID)) return prev.delete(userID);\r\n      return prev.add(userID);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-item\">\r\n      <Avatar\r\n        className=\"avatar\"\r\n        size=\"small\"\r\n        style={{ backgroundColor: color }}\r\n      >\r\n        {userName.slice(0, 4)}\r\n      </Avatar>\r\n      <span className=\"user-name\">{userName}</span>\r\n      {self ? (\r\n        <Tag className=\"me-tag\">Me</Tag>\r\n      ) : (\r\n        <Button\r\n          disabled={self}\r\n          type=\"text\"\r\n          icon={ignored ? <EyeInvisibleOutlined /> : <EyeOutlined />}\r\n          onClick={switchIgnore}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction RoomInfo() {\r\n  const { code, userList, loadInfo, connected } = useContext(TeamCtx);\r\n  const link = window.location.href;\r\n  const copy = () => {\r\n    navigator.clipboard.writeText(link);\r\n    message.destroy(\"copy\");\r\n    message.success({\r\n      content: \"Share link copied!\",\r\n      icon: <CopyOutlined />,\r\n      key: \"copy\",\r\n    });\r\n  };\r\n\r\n  const content = (\r\n    <div className=\"team-popover\">\r\n      {connected || (\r\n        <Alert\r\n          className=\"disconn-alert\"\r\n          message=\"Network failed.\"\r\n          icon={<DisconnectOutlined />}\r\n          type=\"error\"\r\n          showIcon\r\n          banner\r\n        />\r\n      )}\r\n      <DigitDisplay value={code} />\r\n      <Search\r\n        className=\"copy-link code-font\"\r\n        value={link}\r\n        enterButton={<Button icon={<CopyOutlined />} />}\r\n        onSearch={copy}\r\n      />\r\n      <Divider />\r\n      <div className=\"user-list\">\r\n        {userList.map((u) => (\r\n          <UserCard key={u.userID} userInfo={u} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const title = (\r\n    <div className=\"team-title\">\r\n      <span>Team info</span>\r\n      <Button\r\n        shape=\"circle\"\r\n        type=\"text\"\r\n        size=\"small\"\r\n        icon={<ReloadOutlined />}\r\n        onClick={loadInfo}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Popover\r\n      content={content}\r\n      trigger=\"click\"\r\n      placement=\"bottomRight\"\r\n      title={title}\r\n      defaultVisible\r\n      getPopupContainer={(e) => e}\r\n    >\r\n      <Button\r\n        type=\"text\"\r\n        icon={\r\n          <Badge\r\n            status={connected ? \"success\" : \"error\"}\r\n            count={connected ? userList.length : \"!\"}\r\n            size=\"small\"\r\n          >\r\n            <TeamOutlined />\r\n          </Badge>\r\n        }\r\n      />\r\n    </Popover>\r\n  );\r\n}\r\n\r\nconst JoinRoom = () => {\r\n  const { createRoom } = useContext(ReaderMethodCtx);\r\n  return (\r\n    <Popconfirm\r\n      placement=\"bottomRight\"\r\n      title=\"Enable team editing?\"\r\n      onConfirm={createRoom}\r\n      okText=\"Yes\"\r\n      cancelText=\"No\"\r\n    >\r\n      <Button type=\"text\" icon={<UsergroupAddOutlined />} />\r\n    </Popconfirm>\r\n  );\r\n};\r\n","import React, {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  Dispatch,\r\n  useEffect,\r\n  useContext,\r\n  useCallback,\r\n  createContext,\r\n  SetStateAction,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport { message } from \"antd\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport Draw from \"../draw/Draw\";\r\nimport {\r\n  DrawCtrl,\r\n  CtrlMode,\r\n  getDrawCtrl,\r\n  saveDrawCtrl,\r\n  defaultDrawCtrl,\r\n} from \"../../lib/draw/drawCtrl\";\r\nimport { DrawState } from \"../../lib/draw/DrawState\";\r\nimport { createPage, NoteInfo, NotePage } from \"../../lib/note/note\";\r\nimport { StateSet } from \"../../lib/draw/StateSet\";\r\nimport { loadNote, editNoteData } from \"../../lib/note/archive\";\r\nimport { debounce, last, omit } from \"lodash\";\r\nimport { putNote, updatePages } from \"../../lib/network/http\";\r\nimport { useBeforeunload } from \"react-beforeunload\";\r\nimport DrawTools from \"./DrawTools\";\r\n// import { getOnePageImage } from \"../../lib/note/pdfImage\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { Map, Set } from \"immutable\";\r\nimport { insertAfter } from \"../../lib/array\";\r\nimport { AddPageButton } from \"./ReaderTools\";\r\nimport { useMounted } from \"../../lib/hooks\";\r\nimport { TeamCtx } from \"./Team\";\r\nimport { TeamState } from \"../../lib/draw/TeamState\";\r\nimport \"./reader.sass\";\r\n\r\nexport const WIDTH = 2000;\r\n\r\nexport const ReaderStateCtx = createContext({\r\n  noteID: \"\",\r\n  noteInfo: undefined as NoteInfo | undefined,\r\n  stateSet: undefined as StateSet | undefined,\r\n  teamStateSet: undefined as TeamState | undefined,\r\n  pageRec: undefined as Record<string, NotePage> | undefined,\r\n  pageOrder: undefined as string[] | undefined,\r\n  saved: true,\r\n  teamOn: false,\r\n  inviewPages: Set<string>(),\r\n  refRec: {} as Record<string, HTMLElement>,\r\n  drawCtrl: defaultDrawCtrl,\r\n  mode: \"draw\" as CtrlMode,\r\n});\r\n\r\nexport const ReaderMethodCtx = createContext({\r\n  createRoom: () => {},\r\n  scrollPage: (() => {}) as (pageID: string) => void,\r\n  setInviewPages: (() => {}) as Dispatch<SetStateAction<Set<string>>>,\r\n  switchPageMarked: (() => {}) as (pageID: string) => void,\r\n  setPageOrder: (() => {}) as Dispatch<SetStateAction<string[] | undefined>>,\r\n  setPageState: (() => {}) as (uid: string, ds: DrawState) => void,\r\n  addPage: (() => {}) as (prevpageID: string, copy?: boolean) => void,\r\n  addFinalPage: () => {},\r\n  deletePage: (() => {}) as (pageID: string) => void,\r\n  setMode: (() => {}) as Dispatch<SetStateAction<CtrlMode>>,\r\n  setDrawCtrl: (() => {}) as Dispatch<SetStateAction<DrawCtrl>>,\r\n});\r\n\r\nexport default function Reader({ teamOn }: { teamOn: boolean }) {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const nav = useNavigate();\r\n\r\n  const [pageRec, setPageRec] = useState<Record<string, NotePage>>();\r\n  const [noteInfo, setNoteInfo] = useState<NoteInfo>();\r\n  const [stateSet, setStateSet] = useState<StateSet>();\r\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\r\n  const [mode, setMode] = useState<CtrlMode>(\"draw\");\r\n  const [saved, setSaved] = useState(true);\r\n  const [inviewPages, setInviewPages] = useState(Set<string>());\r\n  const [pageOrder, setPageOrder] = useState<string[]>();\r\n  const [loaded, setLoaded] = useState(false);\r\n  const refRec = useRef<Record<string, HTMLElement>>({});\r\n  const mounted = useMounted();\r\n\r\n  const { teamStateSet, pushOperation, teamUpdate, updateNewPage } =\r\n    useContext(TeamCtx);\r\n\r\n  const loadNotePages = async () => {\r\n    const storedNote = await loadNote(noteID);\r\n    if (!storedNote) {\r\n      message.error(\"Note not found\");\r\n      return nav(\"/\");\r\n    }\r\n    const { pageRec, pdf, pageOrder, ...noteInfo } = storedNote;\r\n    setPageRec(pageRec);\r\n    setPageOrder(pageOrder);\r\n    setNoteInfo(noteInfo);\r\n    setStateSet(StateSet.createFromPages(pageRec, WIDTH));\r\n    setDrawCtrl(await getDrawCtrl());\r\n    setLoaded(true);\r\n    if (teamOn) updatePages(noteID);\r\n  };\r\n\r\n  const debouncedSave = useCallback(\r\n    debounce(async (pr: Record<string, NotePage>) => {\r\n      await editNoteData(noteID, { pageRec: pr });\r\n      const canvas = document.querySelector(\"canvas\");\r\n      const data = canvas?.toDataURL();\r\n      data && editNoteData(noteID, { thumbnail: data });\r\n      mounted.current && setSaved(true);\r\n    }, 5000),\r\n    []\r\n  );\r\n  const instantSave = debouncedSave.flush;\r\n\r\n  const createRoom = async () => {\r\n    await instantSave();\r\n    const resCode = await putNote(noteID);\r\n    if (!resCode) {\r\n      message.error(\"Can't create room.\");\r\n      return;\r\n    }\r\n    await editNoteData(noteID, { team: true });\r\n    nav(\"/team/\" + noteID);\r\n  };\r\n\r\n  const noteInit = () => {\r\n    loadNotePages();\r\n  };\r\n\r\n  const noteDestroy = () => {\r\n    instantSave();\r\n  };\r\n\r\n  useLayoutEffect(() => {\r\n    noteInit();\r\n    return noteDestroy;\r\n  }, [noteID, teamOn]);\r\n\r\n  useBeforeunload(noteDestroy);\r\n\r\n  useEffect(() => {\r\n    if (!noteInfo) return;\r\n    document.title = noteInfo.name + \" - Multibility\";\r\n  }, [noteInfo]);\r\n\r\n  useEffect(() => {\r\n    loaded && saveDrawCtrl(drawCtrl);\r\n  }, [drawCtrl]);\r\n\r\n  useEffect(() => {\r\n    if (!stateSet?.lastOp || !pushOperation) return;\r\n    pushOperation(stateSet.lastOp);\r\n  }, [stateSet]);\r\n\r\n  useEffect(() => {\r\n    if (!pageRec || !loaded) return;\r\n    debouncedSave(pageRec);\r\n    setSaved(false);\r\n  }, [pageRec]);\r\n\r\n  useEffect(() => {\r\n    const handleReorder = async () => {\r\n      if (!pageOrder || !loaded) return;\r\n      await editNoteData(noteID, { pageOrder });\r\n      await instantSave();\r\n      const teamOrder = teamUpdate?.pageOrder;\r\n      if (teamOn && JSON.stringify(pageOrder) !== JSON.stringify(teamOrder)) {\r\n        updatePages(noteID);\r\n      }\r\n    };\r\n    handleReorder();\r\n  }, [pageOrder]);\r\n\r\n  useEffect(() => {\r\n    if (!teamUpdate) return;\r\n    const { type, pageOrder } = teamUpdate;\r\n    if (type === \"reorder\") {\r\n      setPageOrder(pageOrder);\r\n    } else if (type === \"newPage\") {\r\n      setPageOrder(pageOrder);\r\n      let { pageID, newPage } = teamUpdate;\r\n      setPageRec((prev) => prev && { ...prev, [pageID]: newPage });\r\n      setStateSet((prev) => prev?.addState(pageID, newPage, WIDTH));\r\n    }\r\n  }, [teamUpdate]);\r\n\r\n  const updatePageRec = (pageID: string, ds: DrawState) => {\r\n    const state = DrawState.flaten(ds);\r\n    setPageRec(\r\n      (prev) => prev && { ...prev, [pageID]: { ...prev[pageID], state } }\r\n    );\r\n  };\r\n\r\n  const setPageState = useCallback((uid: string, ds: DrawState) => {\r\n    setStateSet((prev) => prev?.setState(uid, ds));\r\n    updatePageRec(uid, ds);\r\n  }, []);\r\n\r\n  const switchPageMarked = (pageID: string) => {\r\n    const page = pageRec && pageRec[pageID];\r\n    if (!page) return;\r\n    const marked = !Boolean(page.marked);\r\n    setPageRec(\r\n      (prev) => prev && { ...prev, [pageID]: { ...prev[pageID], marked } }\r\n    );\r\n  };\r\n\r\n  const handleUndo = () => {\r\n    setStateSet((prev) => {\r\n      if (!prev) return;\r\n      const newSS = prev.undo();\r\n      const lastDS = newSS.getLastDS();\r\n      lastDS && updatePageRec(...lastDS);\r\n      return newSS;\r\n    });\r\n  };\r\n\r\n  const handleRedo = () => {\r\n    setStateSet((prev) => {\r\n      if (!prev) return;\r\n      const newSS = prev.redo();\r\n      const lastDS = newSS.getLastDS();\r\n      lastDS && updatePageRec(...lastDS);\r\n      return newSS;\r\n    });\r\n  };\r\n\r\n  const scrollPage = (pageID: string) => {\r\n    refRec.current[pageID]?.scrollIntoView();\r\n  };\r\n\r\n  const addPage = (prevpageID: string, copy = false) => {\r\n    const prevPage = copy ? pageRec && pageRec[prevpageID] : undefined;\r\n    const [pageID, newPage] = createPage(prevPage);\r\n    setPageOrder((prev) => {\r\n      if (!prev) return;\r\n      const newOrder = insertAfter(prev, prevpageID, pageID);\r\n      updateNewPage && updateNewPage(newOrder, pageID, newPage);\r\n      return newOrder;\r\n    });\r\n    setPageRec((prev) => prev && { ...prev, [pageID]: newPage });\r\n    setStateSet((prev) => prev?.addState(pageID, newPage, WIDTH));\r\n  };\r\n\r\n  const addFinalPage = () => {\r\n    const lastpageID = last(pageOrder);\r\n    lastpageID && addPage(lastpageID);\r\n  };\r\n\r\n  const deletePage = (pageID: string) => {\r\n    if (teamOn) {\r\n      message.error(\"You can't delete pages from a team note.\");\r\n      return;\r\n    }\r\n    setPageOrder((prev) => prev?.filter((id) => id !== pageID));\r\n    setPageRec((prev) => prev && omit(prev, pageID));\r\n    setStateSet((prev) => prev?.deleteState(pageID));\r\n  };\r\n\r\n  const renderResult = (\r\n    <div className=\"reader-container\">\r\n      <DrawTools\r\n        instantSave={instantSave}\r\n        handleUndo={handleUndo}\r\n        handleRedo={handleRedo}\r\n      />\r\n      <main>\r\n        {pageOrder?.map((uid) => (\r\n          <PageContainer uid={uid} key={uid} />\r\n        ))}\r\n        <AddPageButton />\r\n      </main>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <ReaderStateCtx.Provider\r\n      value={{\r\n        noteID,\r\n        noteInfo,\r\n        stateSet,\r\n        teamStateSet,\r\n        saved,\r\n        teamOn,\r\n        pageRec,\r\n        pageOrder,\r\n        inviewPages,\r\n        refRec: refRec.current,\r\n        mode,\r\n        drawCtrl,\r\n      }}\r\n    >\r\n      <ReaderMethodCtx.Provider\r\n        value={{\r\n          createRoom,\r\n          scrollPage,\r\n          setInviewPages,\r\n          switchPageMarked,\r\n          setPageOrder,\r\n          setPageState,\r\n          addPage,\r\n          addFinalPage,\r\n          deletePage,\r\n          setMode,\r\n          setDrawCtrl,\r\n        }}\r\n      >\r\n        {renderResult}\r\n      </ReaderMethodCtx.Provider>\r\n    </ReaderStateCtx.Provider>\r\n  );\r\n}\r\n\r\nconst PageContainer: FC<{ uid: string }> = ({ uid }) => {\r\n  const { pageRec, stateSet, teamStateSet } = useContext(ReaderStateCtx);\r\n  const { setPageState } = useContext(ReaderMethodCtx);\r\n\r\n  const page = pageRec && pageRec[uid];\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStates = teamStateSet?.getOnePageState(uid);\r\n  const updateState = useCallback(\r\n    (ds: DrawState) => setPageState(uid, ds),\r\n    [uid, setPageState]\r\n  );\r\n  if (!page || !drawState) return null;\r\n\r\n  return (\r\n    <PageWrapper\r\n      drawState={drawState}\r\n      teamStates={teamStates}\r\n      updateState={updateState}\r\n      pdfIndex={page.pdfIndex}\r\n      uid={uid}\r\n    />\r\n  );\r\n};\r\n\r\nexport const PageWrapper = ({\r\n  thumbnail,\r\n  drawState,\r\n  teamStates,\r\n  updateState,\r\n  pdfIndex,\r\n  preview = false,\r\n  uid,\r\n}: {\r\n  uid: string;\r\n  drawState: DrawState;\r\n  teamStates?: Map<string, DrawState>;\r\n  thumbnail?: string;\r\n  pdfIndex?: number;\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n}) => {\r\n  const { setInviewPages } = useContext(ReaderMethodCtx);\r\n  const { refRec, noteID } = useContext(ReaderStateCtx);\r\n  const [fullImg, setFullImg] = useState<string>();\r\n  const [visibleRef, visible] = useInView({ delay: 100 });\r\n\r\n  const { height, width } = drawState;\r\n  const ratio = height / width;\r\n\r\n  const handleRef = useCallback(\r\n    (e: HTMLDivElement | null) => {\r\n      if (!e) return;\r\n      visibleRef(e);\r\n      if (!preview && refRec) refRec[uid] = e;\r\n    },\r\n    [refRec]\r\n  );\r\n\r\n  const loadImage = useCallback(\r\n    (() => {\r\n      let called = false;\r\n      return async () => {\r\n        if (preview || !pdfIndex || called) return;\r\n        called = true;\r\n        const { getOnePageImage } = await import(\"../../lib/note/pdfImage\");\r\n        setFullImg(await getOnePageImage(noteID, pdfIndex));\r\n      };\r\n    })(),\r\n    [preview, pdfIndex]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (preview) return;\r\n    if (visible) {\r\n      loadImage();\r\n      setInviewPages((prev) => prev.add(uid));\r\n    } else {\r\n      setInviewPages((prev) => prev.delete(uid));\r\n    }\r\n  }, [visible, loadImage, preview]);\r\n\r\n  const { ignores } = useContext(TeamCtx);\r\n  const otherStates = useMemo(\r\n    () => teamStates && Array.from(teamStates.deleteAll(ignores).values()),\r\n    [teamStates, ignores]\r\n  );\r\n\r\n  const imageLoaded = fullImg || !pdfIndex;\r\n  const drawShow = visible && imageLoaded;\r\n  const maskShow = Boolean(preview || !imageLoaded);\r\n\r\n  return (\r\n    <section\r\n      ref={handleRef}\r\n      className=\"note-page\"\r\n      style={{ paddingTop: `${ratio * 100}%` }}\r\n    >\r\n      {drawShow && (\r\n        <DrawWrapper\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          updateState={updateState}\r\n          imgSrc={fullImg || thumbnail || undefined}\r\n          preview={preview}\r\n        />\r\n      )}\r\n      {maskShow && <div className=\"mask\" />}\r\n    </section>\r\n  );\r\n};\r\nPageWrapper.displayName = \"PageWrapper\";\r\n\r\nconst DrawWrapper = ({\r\n  drawState,\r\n  updateState,\r\n  otherStates,\r\n  preview = false,\r\n  imgSrc,\r\n}: {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}) => {\r\n  const { mode, drawCtrl } = useContext(ReaderStateCtx);\r\n  const { setMode } = useContext(ReaderMethodCtx);\r\n\r\n  const handleChange = useCallback(\r\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\r\n      if (!updateState) return;\r\n      let ds = arg instanceof DrawState ? arg : arg(drawState);\r\n      updateState(ds);\r\n    },\r\n    [updateState, drawState]\r\n  );\r\n\r\n  return (\r\n    <div className=\"page-draw\">\r\n      {preview ? (\r\n        <Draw\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          imgSrc={imgSrc}\r\n          readonly\r\n          preview\r\n        />\r\n      ) : (\r\n        <Draw\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          onChange={handleChange}\r\n          imgSrc={imgSrc}\r\n          drawCtrl={drawCtrl}\r\n          mode={mode}\r\n          setMode={setMode}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nDrawWrapper.displayName = \"DrawWrapper\";\r\n","import { useEffect, useMemo, useRef } from \"react\";\r\n\r\nexport function useObjectUrl(obj: Blob | MediaSource | undefined) {\r\n  const url = useMemo(() => (obj ? URL.createObjectURL(obj) : undefined), [obj]);\r\n\r\n  useEffect(() => {\r\n    const prevUrl = url || \"\";\r\n    return () => URL.revokeObjectURL(prevUrl);\r\n  }, [url]);\r\n\r\n  return url;\r\n}\r\n\r\nexport function useMounted() {\r\n  const _mounted = useRef(false);\r\n\r\n  useEffect(() => {\r\n    _mounted.current = true;\r\n    return () => {\r\n      _mounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  return _mounted;\r\n}\r\n","import { Map, Record } from \"immutable\";\nimport { NotePage, TeamNote, TeamPageInfo } from \"../note/note\";\nimport { DrawState } from \"./DrawState\";\nimport { SetOperation } from \"./StateSet\";\n\ninterface TeamStateRecordType {\n  pageStates: Map<string, Map<string, DrawState>>;\n  pageInfos: Map<string, TeamPageInfo>;\n}\n\nconst defaultRecord: Readonly<TeamStateRecordType> = {\n  pageStates: Map(),\n  pageInfos: Map(),\n};\n\ntype TeamStateRecord = Record<TeamStateRecordType>;\nconst defaultFactory = Record(defaultRecord);\n\nexport class TeamState {\n  constructor(private immutable: TeamStateRecord) {}\n\n  getImmutable() {\n    return this.immutable;\n  }\n\n  getPageStates() {\n    return this.getImmutable().get(\"pageStates\");\n  }\n\n  getPageInfos() {\n    return this.getImmutable().get(\"pageInfos\");\n  }\n\n  getOneState(pageID: string, userID: string) {\n    return this.getPageStates().get(pageID)?.get(userID);\n  }\n\n  getOnePageState(pageID: string) {\n    return this.getPageStates().get(pageID);\n  }\n\n  getPageRatio(pageID: string) {\n    return this.getPageInfos().get(pageID)?.ratio;\n  }\n\n  includesPage(pageID: string) {\n    return this.getPageStates().has(pageID);\n  }\n\n  setState(pageID: string, userID: string, drawState: DrawState) {\n    const pageMap = this.getPageStates().get(pageID);\n    if (!pageMap) return this;\n    return new TeamState(\n      this.getImmutable().update(\"pageStates\", (m) =>\n        m.set(pageID, pageMap.set(userID, drawState))\n      )\n    );\n  }\n\n  static createFromTeamPages(teamNote: TeamNote, width: number) {\n    const { pageRec } = teamNote;\n    let record = defaultFactory();\n    Object.entries(pageRec).forEach(([pageID, teamPage]) => {\n      const { states, ratio } = teamPage;\n      const pageMap = Map(\n        Object.entries(states).map(([userID, flatState]) => [\n          userID,\n          DrawState.loadFromFlat(flatState, width, width * ratio),\n        ])\n      );\n      record = record\n        .update(\"pageStates\", (m) => m.set(pageID, pageMap))\n        .update(\"pageInfos\", (m) => m.set(pageID, { ratio }));\n    });\n    return new TeamState(record);\n  }\n\n  addPage(pageID: string, notePage: NotePage) {\n    const { ratio } = notePage;\n    return new TeamState(\n      this.getImmutable()\n        .update(\"pageStates\", (m) => m.set(pageID, Map()))\n        .update(\"pageInfos\", (m) => m.set(pageID, { ratio }))\n    );\n  }\n\n  pushOperation(setOp: SetOperation, userID: string, width: number) {\n    const { pageID, ...op } = setOp;\n    const ratio = this.getPageRatio(pageID);\n    if (!this.includesPage(pageID) || !ratio) return this;\n    const prevDs =\n      this.getOneState(pageID, userID) ||\n      DrawState.createEmpty(width, width * ratio);\n\n    const ds = DrawState.pushOperation(prevDs, op);\n    return this.setState(pageID, userID, ds);\n  }\n}\n","import { message } from \"antd\";\r\nimport React, {\r\n  useState,\r\n  Dispatch,\r\n  useEffect,\r\n  createContext,\r\n  SetStateAction,\r\n} from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { SetOperation } from \"../../lib/draw/StateSet\";\r\nimport { getTeamNoteState, loadTeamNoteInfo } from \"../../lib/network/http\";\r\nimport { IoFactory } from \"../../lib/network/io\";\r\nimport Reader, { WIDTH } from \"./Reader\";\r\nimport { getuserID, UserInfo } from \"../../lib/user\";\r\nimport { LoginOutlined, LogoutOutlined } from \"@ant-design/icons\";\r\nimport { createTeamPage, NotePage } from \"../../lib/note/note\";\r\nimport { TeamState } from \"../../lib/draw/TeamState\";\r\nimport { Set } from \"immutable\";\r\n\r\nexport const TeamCtx = createContext({\r\n  code: -2,\r\n  userList: [] as UserInfo[],\r\n  ignores: Set<string>(),\r\n  setIgnores: (() => {}) as Dispatch<SetStateAction<Set<string>>>,\r\n  loadInfo: undefined as undefined | (() => Promise<boolean>),\r\n  teamStateSet: undefined as TeamState | undefined,\r\n  pushOperation: undefined as undefined | ((op: SetOperation) => void),\r\n  teamUpdate: undefined as undefined | TeamUpdate,\r\n  updateReorder: (() => {}) as undefined | ((pageOrder: string[]) => void),\r\n  updateNewPage: (() => {}) as\r\n    | undefined\r\n    | ((pageOrder: string[], pageID: string, newPage: NotePage) => void),\r\n  connected: false,\r\n});\r\n\r\ntype TeamUpdate =\r\n  | {\r\n      type: \"reorder\";\r\n      pageOrder: string[];\r\n    }\r\n  | {\r\n      type: \"newPage\";\r\n      pageOrder: string[];\r\n      pageID: string;\r\n      newPage: NotePage;\r\n    };\r\n\r\nexport default function Team() {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const [teamStateSet, setTeamStateSet] = useState<TeamState>();\r\n  const [code, setCode] = useState(-2);\r\n  const [userList, setUserList] = useState<UserInfo[]>([]);\r\n  const [ignores, setIgnores] = useState(Set<string>());\r\n  const [ws] = useState(IoFactory(noteID));\r\n  const [teamUpdate, setTeamUpdate] = useState<TeamUpdate>();\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [connected, setConnected] = useState(true);\r\n  const nav = useNavigate();\r\n\r\n  const loadState = async () => {\r\n    const teamNote = await getTeamNoteState(noteID);\r\n    if (!teamNote) {\r\n      message.error(\"Failed loading the team note state\");\r\n      return false;\r\n    }\r\n    setTeamStateSet(TeamState.createFromTeamPages(teamNote, WIDTH));\r\n    return true;\r\n  };\r\n\r\n  const loadInfo = async () => {\r\n    const info = await loadTeamNoteInfo(noteID);\r\n    if (!info) {\r\n      message.error(\"Failed loading the team note info\");\r\n      return false;\r\n    }\r\n    setCode(info.code);\r\n    return true;\r\n  };\r\n\r\n  const roomInit = async () => {\r\n    const dismiss = message.loading(\"Loading team note...\", 0);\r\n    if (!((await loadInfo()) && (await loadState()))) {\r\n      dismiss();\r\n      return nav(\"/\");\r\n    }\r\n    dismiss();\r\n    setLoaded(true);\r\n    ws.on(\"push\", ({ operation, userID }) => {\r\n      setTeamStateSet((prev) => prev?.pushOperation(operation, userID, WIDTH));\r\n    });\r\n\r\n    ws.on(\"joined\", ({ joined, members }) => {\r\n      const { userID, userName } = joined;\r\n      setUserList(members);\r\n      if (userID === getuserID()) return;\r\n      message.destroy(userID);\r\n      message.success({\r\n        icon: <LoginOutlined />,\r\n        content: `${userName} joined room`,\r\n        key: userID,\r\n      });\r\n    });\r\n\r\n    ws.on(\"leaved\", ({ leaved, members }) => {\r\n      const { userID, userName } = leaved;\r\n      setUserList(members);\r\n      if (userID === getuserID()) return;\r\n      message.destroy(userID);\r\n      message.warning({\r\n        icon: <LogoutOutlined />,\r\n        content: `${userName} leaved room`,\r\n        key: userID,\r\n      });\r\n    });\r\n\r\n    ws.on(\"reorder\", ({ pageOrder }: { pageOrder: string[] }) => {\r\n      setTeamUpdate({ type: \"reorder\", pageOrder });\r\n    });\r\n\r\n    ws.on(\r\n      \"newPage\",\r\n      ({\r\n        pageID,\r\n        newPage,\r\n        pageOrder,\r\n      }: {\r\n        userID: string;\r\n        pageOrder: string[];\r\n        pageID: string;\r\n        newPage: NotePage;\r\n      }) => {\r\n        setTeamStateSet((prev) => prev?.addPage(pageID, newPage));\r\n        newPage = createTeamPage(newPage);\r\n        setTeamUpdate({\r\n          type: \"newPage\",\r\n          pageOrder,\r\n          pageID,\r\n          newPage,\r\n        });\r\n      }\r\n    );\r\n\r\n    ws.on(\"connect\", () => setConnected(true));\r\n    ws.on(\"disconnect\", () => setConnected(false));\r\n\r\n    ws.connect();\r\n  };\r\n\r\n  const roomDestroy = () => {\r\n    ws.removeAllListeners();\r\n    ws.disconnect();\r\n  };\r\n\r\n  useEffect(() => {\r\n    roomInit();\r\n    return roomDestroy;\r\n  }, [noteID]);\r\n\r\n  const pushOperation = (op: SetOperation) => {\r\n    ws.emit(\"push\", { operation: op });\r\n  };\r\n\r\n  const updateReorder = (pageOrder: string[]) => {\r\n    ws.emit(\"reorder\", { pageOrder });\r\n  };\r\n\r\n  const updateNewPage = (\r\n    pageOrder: string[],\r\n    pageID: string,\r\n    newPage: NotePage\r\n  ) => {\r\n    setTeamStateSet((prev) => prev?.addPage(pageID, newPage));\r\n    const { image, marked, ...newTeamPage } = newPage;\r\n    ws.emit(\"newPage\", { pageOrder, pageID, newPage: newTeamPage });\r\n  };\r\n\r\n  return (\r\n    <TeamCtx.Provider\r\n      value={{\r\n        code,\r\n        ignores,\r\n        userList,\r\n        loadInfo,\r\n        connected,\r\n        setIgnores,\r\n        teamUpdate,\r\n        teamStateSet,\r\n        pushOperation,\r\n        updateReorder,\r\n        updateNewPage,\r\n      }}\r\n    >\r\n      {loaded && <Reader teamOn />}\r\n    </TeamCtx.Provider>\r\n  );\r\n}\r\n","import { io } from \"socket.io-client\";\r\nimport { getuserID, getUserName } from \"../user\";\r\nimport { BASE_URL } from \"./http\";\r\n\r\nexport const IoFactory = (noteID: string) => {\r\n  return () =>\r\n    io(BASE_URL, {\r\n      autoConnect: false,\r\n      query: {\r\n        userID: getuserID(),\r\n        userName: getUserName(),\r\n        noteID,\r\n      },\r\n    });\r\n};\r\n","export function createVirtualCanvas(width: number, height: number) {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const context = canvas.getContext(\"2d\");\r\n  if (!context) {\r\n    throw new Error(\"can't get virtual canvas context\");\r\n  }\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  return { canvas, context };\r\n}\r\n\r\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  const ctx = canvas.getContext('2d');\r\n  ctx?.clearRect(0, 0, 1, 1);\r\n}\r\n"],"names":["defaultDrawCtrl","finger","lineWidth","eraserWidth","color","highlight","getDrawCtrl","localforage","drawCtrl","Draw","drawState","onChange","otherStates","mode","setMode","readonly","preview","imgSrc","width","height","canvasEl","useRef","scope","paper","group","ratio","path","useState","rect","setRect","selectGroup","Set","erased","setErased","updateRatio","clientWidth","current","setNewRect","e","activate","point","multiply","rectangle","strokeColor","strokeWidth","dashOffset","dashArray","handleDown","draw","Path","alpha","blendMode","strokeJoin","strokeCap","erase","select","selected","isInside","strokeBounds","delete","handleDrag","add","smooth","eraserPath","newErased","filter","p","has","name","checkErase","map","prev","concat","delta","size","x","y","position","divide","sGroup","handleUp","remove","DrawState","toArray","segments","length","simplify","pathData","exportJSON","undefined","bounds","forEach","intersects","addChild","useEffect","setup","r","view","viewSize","scale","setupPaper","cvs","releaseCanvas","onMouseDown","onMouseDrag","onMouseUp","preventTouch","touch","touches","touchType","isStylus","isEventValid","stopPropagation","raster","img","Image","src","onload","center","sendToBack","getValidStrokes","stroke","paintStroke","item","otherGroup","ds","updateMutation","list","children","mutations","deleted","deleteSelected","id","moveDash","requestAnimationFrame","cancelAnimationFrame","ref","className","onTouchStartCapture","onTouchMoveCapture","React","uid","importJSON","opacity","push","console","error","getCheckPoints","cache","WeakMap","cached","get","times","checkPoints","i","subtract","set","checkedPath","curveBound","lastSegment","curve","some","cPoint","d","getNearestPoint","getDistance","defaultRecord","states","Map","editStack","List","undoStack","defaultFactory","Record","StateSet","immutable","lastOp","this","getImmutable","pageID","getStates","prevDS","getOneState","currRecord","update","s","l","notePage","state","newDS","getEditStack","getUndoStack","isUndoable","lastUid","last","lastSetOp","pop","isRedoable","pageRec","entries","Object","createFromList","key","DigitDisplay","value","randomNum","setRandomNum","digits","String","padStart","split","Number","resetRandom","Math","floor","random","timer","setTimeout","clearTimeout","classNames","disabled","idx","Digit","digit","createFromIconfontCN","scriptUrl","AddPageButton","addFinalPage","useContext","ReaderMethodCtx","pageOrder","ReaderStateCtx","empty","Boolean","type","icon","PlusOutlined","block","onClick","insertAfter","prevItem","newItem","prevIndex","indexOf","curr","slice","splice","PageNavContent","activeKey","setActiveKey","inviewPages","setPageOrder","scrollPage","updateReorder","TeamCtx","refRec","listEl","currpageID","useMemo","find","scrollIntoView","itemHeight","clientHeight","listHeight","scrollBy","PreviewTabs","onDragEnd","source","destination","fromIndex","index","toIndex","newOrder","result","removed","exchange","droppableId","droppableProps","innerRef","placeholder","PagePreview","pageIndex","stateSet","teamStateSet","switchPageMarked","page","teamStates","getOnePageState","isEmpty","every","marked","switchMarked","dragDisabled","draggableId","isDragDisabled","draggableProps","dragHandleProps","drag","isDragging","image","PageWrapper","thumbnail","onClickCapture","PreviewOption","popShow","setPopShow","addPage","deletePage","teamOn","Item","Menu","menu","domEvent","CopyOutlined","danger","DeleteOutlined","content","trigger","placement","visible","onVisibleChange","destroyTooltipOnHide","MoreOutlined","TabPane","Tabs","tabBarGutter","centered","tab","PageNav","navOn","setNavOn","title","ALL","MARKED","WRITTEN","MenuFoldOutlined","onClose","closeIcon","MenuUnfoldOutlined","bodyStyle","padding","overflow","destroyOnClose","DrawTools","handleUndo","handleRedo","instantSave","saved","setDrawCtrl","nav","useNavigate","updateDrawCtrl","updated","message","DragOutlined","style","display","SelectMenu","duration","HomeFilled","SaveOutlined","shape","UndoOutlined","RedoOutlined","PenButton","EraserButton","includes","ExpandOutlined","ghost","RoomInfo","JoinRoom","PenPanel","getPopupContainer","HighlightOutlined","tempLineWidth","setTempLineWidth","min","max","onAfterChange","ColorSelect","colors","c","checked","tempEraserWidth","setTempEraserWidth","buttonProps","RotateLeftOutlined","RotateRightOutlined","UserCard","userInfo","userName","userID","ignores","setIgnores","getHashedColor","self","getuserID","ignored","backgroundColor","EyeInvisibleOutlined","EyeOutlined","code","userList","loadInfo","connected","link","window","location","href","DisconnectOutlined","showIcon","banner","Search","enterButton","onSearch","navigator","clipboard","writeText","u","ReloadOutlined","defaultVisible","status","count","TeamOutlined","createRoom","onConfirm","okText","cancelText","UsergroupAddOutlined","WIDTH","createContext","noteID","noteInfo","setInviewPages","setPageState","Reader","useParams","setPageRec","setNoteInfo","setStateSet","setSaved","loaded","setLoaded","mounted","_mounted","useMounted","pushOperation","teamUpdate","updateNewPage","loadNotePages","loadNote","storedNote","pdf","createFromPages","updatePages","debouncedSave","useCallback","debounce","pr","editNoteData","canvas","document","querySelector","data","toDataURL","flush","putNote","team","noteDestroy","useLayoutEffect","useBeforeunload","saveDrawCtrl","handleReorder","teamOrder","JSON","stringify","newPage","addState","updatePageRec","setState","prevpageID","copy","prevPage","createPage","renderResult","newSS","undo","lastDS","getLastDS","redo","PageContainer","Provider","lastpageID","omit","deleteState","updateState","pdfIndex","fullImg","setFullImg","useInView","delay","visibleRef","handleRef","loadImage","called","getOnePageImage","Array","from","deleteAll","values","imageLoaded","drawShow","maskShow","paddingTop","DrawWrapper","displayName","handleChange","arg","pageStates","pageInfos","TeamState","getPageStates","getPageInfos","pageMap","m","setOp","op","getPageRatio","includesPage","prevDs","teamNote","record","teamPage","flatState","Team","setTeamStateSet","setCode","setUserList","io","BASE_URL","autoConnect","query","getUserName","IoFactory","ws","setTeamUpdate","setConnected","loadState","getTeamNoteState","createFromTeamPages","loadTeamNoteInfo","info","roomInit","dismiss","on","operation","joined","members","LoginOutlined","leaved","LogoutOutlined","createTeamPage","connect","roomDestroy","removeAllListeners","disconnect","emit","newTeamPage","createVirtualCanvas","createElement","context","getContext","Error","ctx","clearRect"],"sourceRoot":""}