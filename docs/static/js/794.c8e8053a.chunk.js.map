{"version":3,"file":"static/js/794.c8e8053a.chunk.js","mappings":"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","sources":["lib/draw/StateSet.ts","pages/reader/lib/scroll.ts","pages/reader/lib/array.ts","component/UserAvatar.tsx","pages/reader/tools/AddButton.tsx","pages/reader/PageNav/PageNav.tsx","pages/reader/Header/Left.tsx","pages/reader/Header/Middle.tsx","pages/reader/Header/Right.tsx","pages/reader/Header/index.tsx","pages/reader/Reader.tsx","lib/network/io.ts","pages/reader/Team.tsx","pages/reader/tools/Messages.tsx"],"sourcesContent":["import { DrawState, Operation, Stroke } from \"./DrawState\";\r\nimport { List, Map, Record } from \"immutable\";\r\nimport { NotePage } from \"lib/note/note\";\r\n\r\ninterface StateSetRecordType {\r\n  states: Map<string, DrawState>;\r\n  editStack: List<string>;\r\n  undoStack: List<string>;\r\n}\r\n\r\nconst defaultRecord: Readonly<StateSetRecordType> = {\r\n  states: Map(),\r\n  editStack: List(),\r\n  undoStack: List(),\r\n};\r\n\r\ntype StateSetRecord = Record<StateSetRecordType>;\r\nconst defaultFactory = Record(defaultRecord);\r\n\r\nexport type SetOperation = Operation & { pageID: string };\r\n\r\nexport class StateSet {\r\n  constructor(\r\n    private immutable: StateSetRecord,\r\n    public lastOp?: SetOperation\r\n  ) {}\r\n\r\n  static createFromPages(pageRec: globalThis.Record<string, NotePage>) {\r\n    return new StateSet(\r\n      defaultFactory().set(\r\n        \"states\",\r\n        Map(pageRec).map(({ state, ratio }) =>\r\n          DrawState.loadFromFlat(state, ratio)\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  getImmutable() {\r\n    return this.immutable;\r\n  }\r\n\r\n  getStates() {\r\n    return this.getImmutable().get(\"states\");\r\n  }\r\n\r\n  getOneState(pageID: string) {\r\n    return this.getStates().get(pageID);\r\n  }\r\n\r\n  getEditStack() {\r\n    return this.getImmutable().get(\"editStack\");\r\n  }\r\n\r\n  getUndoStack() {\r\n    return this.getImmutable().get(\"undoStack\");\r\n  }\r\n\r\n  setState(pageID: string, drawState: DrawState) {\r\n    const prevDS = this.getOneState(pageID);\r\n    if (!prevDS || prevDS === drawState) return this;\r\n    let currRecord = this.getImmutable()\r\n      .update(\"states\", (s) => s.set(pageID, drawState))\r\n      .update(\"editStack\", (l) => l.push(pageID))\r\n      .delete(\"undoStack\");\r\n\r\n    const { lastOp } = drawState;\r\n    const lastSetOp = lastOp && { ...lastOp, pageID };\r\n\r\n    return new StateSet(currRecord, lastSetOp);\r\n  }\r\n\r\n  // sync with mutation.\r\n  syncStrokeTime(pageID: string, stroke: Stroke) {\r\n    const prevDS = this.getOneState(pageID);\r\n    prevDS && DrawState.syncStrokeTime(prevDS, stroke);\r\n    return this;\r\n  }\r\n\r\n  addState(pageID: string, notePage: NotePage) {\r\n    const { state, ratio } = notePage;\r\n    const newDS = DrawState.loadFromFlat(state, ratio);\r\n    const currRecord = this.getImmutable().update(\"states\", (s) =>\r\n      s.set(pageID, newDS)\r\n    );\r\n    return new StateSet(currRecord);\r\n  }\r\n\r\n  deleteState(pageID: string) {\r\n    return new StateSet(\r\n      this.getImmutable().update(\"states\", (s) => s.delete(pageID))\r\n    );\r\n  }\r\n\r\n  isUndoable() {\r\n    return this.getEditStack().size > 0;\r\n  }\r\n\r\n  isRedoable() {\r\n    return this.getUndoStack().size > 0;\r\n  }\r\n\r\n  undo() {\r\n    if (!this.isUndoable()) return this;\r\n    const lastUid = this.getEditStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.undo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"editStack\", (s) => s.pop())\r\n        .update(\"undoStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  redo() {\r\n    if (!this.isRedoable()) return this;\r\n    const lastUid = this.getUndoStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.redo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"undoStack\", (s) => s.pop())\r\n        .update(\"editStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  getLastDS(): [string, DrawState] | undefined {\r\n    const pageID = this.lastOp?.pageID;\r\n    const ds = pageID && this.getOneState(pageID);\r\n    if (ds) return [pageID, ds];\r\n  }\r\n}\r\n","import { useDebugValue, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport localforage from \"localforage\";\r\nimport { Map } from \"immutable\";\r\nimport { debounce } from \"lodash\";\r\n\r\nconst scrollForage = localforage.createInstance({ name: \"scroll\" });\r\nconst persistScroll = debounce((noteID: string, currPageID: string) => {\r\n  scrollForage.setItem(noteID, currPageID);\r\n}, 5000);\r\n\r\nexport function useScrollPage(noteID: string, pageOrder = [] as string[]) {\r\n  const [refMap, setRefMap] = useState(Map<string, HTMLElement>());\r\n  const scrolled = useRef(false);\r\n  const [prevPageID, setPrevPageID] = useState(\"\");\r\n  const [inviewRatios, setInviewRatios] = useState(Map<string, number>());\r\n  const currPageID = useMemo(\r\n    () => largestKey(inviewRatios, pageOrder),\r\n    [inviewRatios, pageOrder]\r\n  );\r\n  useDebugValue(currPageID);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const stored = await scrollForage.getItem<string>(noteID);\r\n      if (!stored) return (scrolled.current = true);\r\n      setPrevPageID(stored);\r\n    })();\r\n  }, [noteID]);\r\n\r\n  useEffect(() => {\r\n    if (scrolled.current || !refMap.has(prevPageID)) return;\r\n    requestAnimationFrame(() => {\r\n      refMap.get(prevPageID)?.scrollIntoView();\r\n      scrolled.current = true;\r\n    });\r\n  }, [prevPageID, refMap]);\r\n\r\n  useEffect(() => {\r\n    if (!scrolled.current) return;\r\n    persistScroll(noteID, currPageID);\r\n  }, [noteID, currPageID]);\r\n\r\n  const sectionRef = (pageID: string) => (el: HTMLElement | null) => {\r\n    if (!el) return;\r\n    setRefMap((prev) => prev.set(pageID, el));\r\n  };\r\n\r\n  const taskID = useRef(0);\r\n  const [scrolling, setScrolling] = useState(false);\r\n  const scrollPage = (pageID: string) => {\r\n    const handleScroll = () => {\r\n      cancelAnimationFrame(taskID.current);\r\n      requestAnimationFrame(() => {\r\n        taskID.current = requestAnimationFrame(() => {\r\n          setScrolling(false);\r\n          document.removeEventListener(\"scroll\", handleScroll);\r\n        });\r\n      });\r\n    };\r\n    setScrolling(true);\r\n    document.addEventListener(\"scroll\", handleScroll);\r\n    refMap.get(pageID)?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  return { scrollPage, setInviewRatios, sectionRef, currPageID, scrolling };\r\n}\r\n\r\nconst largestKey = (map: Map<string, number>, order: string[]) => {\r\n  let result = \"\";\r\n  let maxRatio = 0;\r\n  for (let key of order) {\r\n    const ratio = map.get(key);\r\n    if (!ratio) continue;\r\n    if (ratio === 1) return key;\r\n    if (ratio > maxRatio) {\r\n      result = key;\r\n      maxRatio = ratio;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n","export function exchange<T>(list: T[], fromIndex: number, toIndex: number) {\r\n  const result = list.slice();\r\n  const [removed] = result.splice(fromIndex, 1);\r\n  if (!removed) return list;\r\n  result.splice(toIndex, 0, removed);\r\n  return result;\r\n}\r\n\r\nexport function insertAfter<T>(list: T[], prevItem: T, newItem: T) {\r\n  const prevIndex = list.indexOf(prevItem);\r\n  const curr = list.slice();\r\n  if (prevIndex === -1) return curr;\r\n  curr.splice(prevIndex + 1, 0, newItem);\r\n  return curr;\r\n}\r\n","import { Avatar } from \"antd\";\r\nimport { AvatarSize } from \"antd/lib/avatar/SizeContext\";\r\nimport { FC, useMemo } from \"react\";\r\nimport { getHashedColor } from \"lib/color\";\r\nimport { UserInfo } from \"lib/user\";\r\n\r\nexport const UserAvatar: FC<{\r\n  userInfo: UserInfo;\r\n  size?: AvatarSize;\r\n  onClick?: () => void;\r\n  chosen?: boolean;\r\n  className?: string;\r\n}> = ({\r\n  userInfo,\r\n  size = \"default\",\r\n  onClick = () => {},\r\n  chosen = false,\r\n  className,\r\n}) => {\r\n  const color = useMemo(() => getHashedColor(userInfo.userID), [userInfo]);\r\n  if (!userInfo) return null;\r\n  const { userName } = userInfo;\r\n\r\n  return (\r\n    <Avatar\r\n      className={className}\r\n      data-chosen={chosen}\r\n      size={size}\r\n      style={{ backgroundColor: color }}\r\n    >\r\n      <div className=\"avatar-wrapper\" onClick={onClick}>\r\n        {userName?.slice(0, 3)}\r\n      </div>\r\n    </Avatar>\r\n  );\r\n};\r\n","import { Button } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { FC } from \"react\";\n\nexport const AddPageButton: FC<{ addFinalPage: () => void }> = ({\n  addFinalPage,\n}) => {\n  return (\n    <div className=\"add-btn-wrapper\">\n      <Button\n        type=\"dashed\"\n        icon={<PlusOutlined />}\n        block\n        onClick={addFinalPage}\n      >\n        New page\n      </Button>\n    </div>\n  );\n};\n","import React, {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useContext,\r\n  useLayoutEffect,\r\n} from \"react\";\r\nimport {\r\n  MoreOutlined,\r\n  PlusOutlined,\r\n  CopyOutlined,\r\n  DeleteOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  Draggable,\r\n  Droppable,\r\n  DropResult,\r\n  DragDropContext,\r\n} from \"react-beautiful-dnd\";\r\nimport { Avatar, Menu, Popover, Tabs } from \"antd\";\r\nimport {\r\n  ActiveKeyProvider,\r\n  Setter,\r\n  useActiveKey,\r\n  useAsideOpen,\r\n} from \"lib/hooks\";\r\nimport { ReaderMethods, ReaderStates } from \"../Reader\";\r\nimport PageWrapper from \"component/PageWrapper\";\r\nimport { UserAvatar } from \"component/UserAvatar\";\r\nimport { exchange } from \"../lib/array\";\r\nimport IconFont from \"component/IconFont\";\r\nimport classNames from \"classnames\";\r\nimport { TeamCtx } from \"../Team\";\r\nimport { useMemoizedFn as useEvent } from \"ahooks\";\r\nimport { useSwipeable } from \"react-swipeable\";\r\nimport { NotePage } from \"lib/note/note\";\r\nimport { TeamState } from \"lib/draw/TeamState\";\r\nimport \"./preview.sass\";\r\nimport { AddPageButton } from \"../tools/AddButton\";\r\n\r\ntype PreviewProps = ReaderMethods & ReaderStates;\r\nexport const PageNav: FC<PreviewProps> = (props) => {\r\n  const [left, setLeft] = useState(false);\r\n  const [asideOpen] = useAsideOpen();\r\n\r\n  const opposite = (\r\n    <Draggable draggableId=\"opposite\" index={left ? 1 : 0}>\r\n      {({ innerRef, draggableProps, dragHandleProps }) => (\r\n        <div\r\n          className=\"opposite\"\r\n          ref={innerRef}\r\n          {...draggableProps}\r\n          {...dragHandleProps}\r\n        />\r\n      )}\r\n    </Draggable>\r\n  );\r\n\r\n  return (\r\n    <ActiveKeyProvider initKey=\"ALL\">\r\n      <DragDropContext\r\n        onDragEnd={({ draggableId, destination }) => {\r\n          if (draggableId !== \"CARD\") return;\r\n          if (destination?.index === 0) setLeft(true);\r\n          if (destination?.index === 1) setLeft(false);\r\n        }}\r\n      >\r\n        <Droppable droppableId=\"preview-drop\" direction=\"horizontal\">\r\n          {({ droppableProps, innerRef, placeholder }, { isDraggingOver }) => (\r\n            <aside\r\n              className=\"preview-drop\"\r\n              data-left={left}\r\n              data-open={asideOpen}\r\n              data-dragged={isDraggingOver}\r\n              ref={innerRef}\r\n              {...droppableProps}\r\n            >\r\n              {opposite}\r\n              <PreviewCard left={left} {...props} />\r\n              {placeholder}\r\n            </aside>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </ActiveKeyProvider>\r\n  );\r\n};\r\n\r\nconst PreviewCard: FC<{ left: boolean } & PreviewProps> = ({\r\n  left,\r\n  ...props\r\n}) => {\r\n  const [activeKey] = useActiveKey();\r\n  const [asideOpen, setAsideOpen] = useAsideOpen();\r\n\r\n  const title = {\r\n    ALL: \"All Pages\",\r\n    MARKED: \"Bookmarks\",\r\n    WRITTEN: \"Notes\",\r\n  }[activeKey];\r\n\r\n  const { ref: swipeRef, ...swipeHandler } = useSwipeable({\r\n    onSwipedLeft() {\r\n      if (left) setAsideOpen(false);\r\n    },\r\n    onSwipedRight() {\r\n      if (!left) setAsideOpen(false);\r\n    },\r\n    swipeDuration: 200,\r\n  });\r\n\r\n  return (\r\n    <Draggable draggableId={\"CARD\"} index={left ? 0 : 1}>\r\n      {(\r\n        { innerRef, draggableProps, dragHandleProps },\r\n        { isDragging, isDropAnimating }\r\n      ) => (\r\n        <div\r\n          className=\"preview-card\"\r\n          ref={(e) => {\r\n            innerRef(e);\r\n            swipeRef(e);\r\n          }}\r\n          data-open={asideOpen}\r\n          data-dragged={isDragging}\r\n          data-animating={isDropAnimating}\r\n          {...draggableProps}\r\n          {...swipeHandler}\r\n        >\r\n          <div className=\"drag-handle\" {...dragHandleProps} />\r\n          <h3>{title}</h3>\r\n          <PreviewTabs />\r\n          <PageList cardDragged={isDragging} {...props} />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nconst PageList: FC<PreviewProps & { cardDragged: boolean }> = React.memo(\r\n  ({ cardDragged, ...props }) => {\r\n    const refRec = useRef<Record<string, HTMLElement>>({});\r\n    const [activeKey] = useActiveKey();\r\n    const [asideOpen] = useAsideOpen();\r\n    const { pageOrder, currPageID } = props;\r\n    const { saveReorder, scrollPage, addFinalPage } = props;\r\n\r\n    const onDragEnd = ({ source, destination }: DropResult) => {\r\n      if (!destination || !pageOrder) return;\r\n      const { index: fromIndex } = source;\r\n      const { index: toIndex } = destination;\r\n      const pageID = pageOrder[fromIndex];\r\n      if (fromIndex === toIndex || !pageID) return;\r\n      const newOrder = exchange(pageOrder, fromIndex, toIndex);\r\n      saveReorder(newOrder, true);\r\n      requestAnimationFrame(() => scrollPage(pageID));\r\n    };\r\n\r\n    const initScroll = useEvent(() => {\r\n      refRec.current[currPageID]?.scrollIntoView();\r\n    });\r\n    useLayoutEffect(() => {\r\n      if (asideOpen) initScroll();\r\n    }, [asideOpen, activeKey, initScroll]);\r\n\r\n    return (\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"preview-list\">\r\n          {({ droppableProps, innerRef, placeholder }) => (\r\n            <div className=\"page-list\" ref={innerRef} {...droppableProps}>\r\n              {pageOrder?.map((uid, index) => (\r\n                <PagePreview\r\n                  key={uid}\r\n                  uid={uid}\r\n                  pageIndex={index}\r\n                  refRec={refRec.current}\r\n                  cardDragged={cardDragged}\r\n                  {...props}\r\n                />\r\n              ))}\r\n              {placeholder}\r\n              {activeKey === \"ALL\" && (\r\n                <AddPageButton addFinalPage={addFinalPage} />\r\n              )}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n);\r\nPageList.displayName = \"PageList\";\r\n\r\nconst PagePreview: FC<\r\n  {\r\n    uid: string;\r\n    pageIndex: number;\r\n    refRec: Record<string, HTMLElement>;\r\n    cardDragged: boolean;\r\n  } & PreviewProps\r\n> = ({ uid, pageIndex, refRec, cardDragged, ...props }) => {\r\n  const { stateSet, pageRec, currPageID, scrollPage } = props;\r\n  const { teamState, ignores } = useContext(TeamCtx);\r\n  const [activeKey] = useActiveKey();\r\n  const [chosen, setChosen] = useState(\"\");\r\n\r\n  const page = pageRec?.get(uid);\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStateMap = teamState?.getOnePageStateMap(uid);\r\n\r\n  const marked = useRef(false);\r\n  if (activeKey === \"MARKED\") {\r\n    marked.current = page?.marked || marked.current;\r\n  } else {\r\n    marked.current = false;\r\n  }\r\n\r\n  const userIDs = useMemo(\r\n    () => TeamState.getValidUsers(teamStateMap, ignores),\r\n    [teamStateMap, ignores]\r\n  );\r\n\r\n  if (!page || !drawState) return null;\r\n\r\n  if (\r\n    activeKey === \"WRITTEN\" &&\r\n    drawState.isEmpty() &&\r\n    TeamState.isEmpty(teamStateMap)\r\n  ) {\r\n    return null;\r\n  }\r\n  if (activeKey === \"MARKED\" && !marked.current) return null;\r\n  const curr = currPageID === uid;\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={uid}\r\n      index={pageIndex}\r\n      isDragDisabled={activeKey !== \"ALL\"}\r\n    >\r\n      {(\r\n        { innerRef, draggableProps, dragHandleProps },\r\n        { isDragging, isDropAnimating }\r\n      ) => (\r\n        <div\r\n          ref={(e) => {\r\n            innerRef(e);\r\n            if (e) refRec[uid] = e;\r\n          }}\r\n          className=\"page\"\r\n          data-curr={curr}\r\n          data-dragged={isDragging}\r\n          data-animating={isDropAnimating}\r\n          onClick={() => scrollPage(uid)}\r\n          {...draggableProps}\r\n          {...dragHandleProps}\r\n        >\r\n          <PageWrapper\r\n            drawState={teamStateMap?.get(chosen) || drawState}\r\n            teamStateMap={chosen ? undefined : teamStateMap}\r\n            thumbnail={page.image}\r\n            ignores={ignores}\r\n            preview\r\n            skipInView={isDragging || cardDragged}\r\n          />\r\n          <PreviewTools\r\n            uid={uid}\r\n            index={pageIndex}\r\n            chosen={chosen}\r\n            setChosen={setChosen}\r\n            page={page}\r\n            userIDs={userIDs}\r\n            {...props}\r\n          />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nconst PreviewTools: FC<\r\n  {\r\n    uid: string;\r\n    index: number;\r\n    chosen: string;\r\n    setChosen: Setter<string>;\r\n    page: NotePage;\r\n    userIDs: string[];\r\n  } & ReaderMethods\r\n> = React.memo(({ uid, index, chosen, setChosen, page, userIDs, ...props }) => {\r\n  const { switchPageMarked } = props;\r\n  return (\r\n    <div className=\"tools\" onClick={(e) => e.stopPropagation()}>\r\n      <div\r\n        className=\"bookmark\"\r\n        data-marked={page.marked}\r\n        onClick={() => switchPageMarked(uid)}\r\n      />\r\n      <div className=\"index\">{index + 1}</div>\r\n      <PreviewOption uid={uid} {...props} />\r\n      <TeamAvatars userIDs={userIDs} chosen={chosen} setChosen={setChosen} />\r\n    </div>\r\n  );\r\n});\r\nPreviewTools.displayName = \"PreviewTools\";\r\n\r\nconst TeamAvatars: FC<{\r\n  userIDs: string[];\r\n  chosen: string;\r\n  setChosen: Setter<string>;\r\n}> = ({ userIDs, chosen, setChosen }) => {\r\n  const { userRec } = useContext(TeamCtx);\r\n  return (\r\n    <Avatar.Group\r\n      maxCount={2}\r\n      size=\"default\"\r\n      className={classNames(\"team-group\", { chosen })}\r\n      maxPopoverPlacement=\"bottom\"\r\n    >\r\n      {userIDs.map((userID) => {\r\n        const userInfo = userRec[userID];\r\n        if (!userInfo) return null;\r\n        return (\r\n          <UserAvatar\r\n            key={userID}\r\n            size=\"default\"\r\n            userInfo={userInfo}\r\n            className=\"preview-avatar\"\r\n            chosen={chosen === userID}\r\n            onClick={() => setChosen((prev) => (prev === userID ? \"\" : userID))}\r\n          />\r\n        );\r\n      })}\r\n    </Avatar.Group>\r\n  );\r\n};\r\n\r\nconst PreviewOption: FC<{ uid: string } & ReaderMethods> = ({\r\n  uid,\r\n  addPage,\r\n  deletePage,\r\n}) => {\r\n  const menu = (\r\n    <Menu\r\n      items={[\r\n        {\r\n          key: \"ADD\",\r\n          icon: <PlusOutlined />,\r\n          label: \"Add page\",\r\n          onClick: () => addPage(uid),\r\n        },\r\n        {\r\n          key: \"COPY\",\r\n          icon: <CopyOutlined />,\r\n          label: \"Duplicate\",\r\n          onClick: () => addPage(uid, true),\r\n        },\r\n        {\r\n          key: \"DELETE\",\r\n          icon: <DeleteOutlined />,\r\n          label: \"Delete\",\r\n          danger: true,\r\n          onClick: () => deletePage(uid),\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n  return (\r\n    <Popover\r\n      content={menu}\r\n      trigger=\"click\"\r\n      placement=\"left\"\r\n      destroyTooltipOnHide\r\n      getPopupContainer={(e) => e.parentElement?.parentElement?.parentElement!}\r\n    >\r\n      <div className=\"option\">\r\n        <MoreOutlined />\r\n      </div>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst PreviewTabs: FC = React.memo(() => {\r\n  const [activeKey, setActiveKey] = useActiveKey();\r\n  const { TabPane } = Tabs;\r\n  return (\r\n    <Tabs\r\n      className=\"tabs\"\r\n      activeKey={activeKey}\r\n      onChange={setActiveKey}\r\n      tabBarGutter={0}\r\n      size=\"small\"\r\n      centered\r\n    >\r\n      <TabPane tab={<IconFont type=\"icon-uf_paper\" />} key=\"ALL\" />\r\n      <TabPane tab={<IconFont type=\"icon-bookmark2\" />} key=\"MARKED\" />\r\n      <TabPane tab={<IconFont type=\"icon-write\" />} key=\"WRITTEN\" />\r\n    </Tabs>\r\n  );\r\n});\r\nPreviewTabs.displayName = \"PreviewTabs\";\r\n","import { FC } from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { HomeFilled, SaveOutlined } from \"@ant-design/icons\";\r\n\r\nexport const HeaderLeft: FC<{\r\n  saved: boolean;\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ saved, instantSave }) => {\r\n  const nav = useNavigate();\r\n  return (\r\n    <div className=\"left\">\r\n      <Button\r\n        type=\"text\"\r\n        onClick={async () => {\r\n          await instantSave();\r\n          nav(\"/\");\r\n        }}\r\n        icon={<HomeFilled style={{ opacity: 0.8 }} />}\r\n      />\r\n      <Button\r\n        type=\"text\"\r\n        className=\"save\"\r\n        onClick={instantSave}\r\n        disabled={saved}\r\n        icon={<SaveOutlined />}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\nimport { Button, message, Popover, ButtonProps, Segmented } from \"antd\";\r\nimport {\r\n  BulbFilled,\r\n  BulbOutlined,\r\n  UndoOutlined,\r\n  RedoOutlined,\r\n  GatewayOutlined,\r\n  HighlightTwoTone,\r\n  HighlightOutlined,\r\n} from \"@ant-design/icons\";\r\nimport IconFont from \"component/IconFont\";\r\nimport { PenPanel, WidthSelect } from \"../tools/PenPanel\";\r\nimport { useForceLight } from \"lib/Dark\";\r\nimport { useDrawCtrl, useUpdateDrawCtrl } from \"lib/draw/DrawCtrl\";\r\n\r\nexport const HeaderMiddle: FC<{\r\n  handleUndo: () => void;\r\n  handleRedo: () => void;\r\n  undoable: boolean;\r\n  redoable: boolean;\r\n}> = ({ handleUndo, handleRedo, undoable, redoable }) => {\r\n  const { mode, finger } = useDrawCtrl();\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n  const [forceLight, setForceLight] = useForceLight();\r\n\r\n  return (\r\n    <div className=\"middle\" data-force-light={forceLight}>\r\n      <Button\r\n        type=\"text\"\r\n        icon={<UndoOutlined />}\r\n        onClick={handleUndo}\r\n        disabled={!undoable}\r\n      />\r\n      <Button\r\n        type=\"text\"\r\n        icon={<RedoOutlined />}\r\n        onClick={handleRedo}\r\n        disabled={!redoable}\r\n      />\r\n      <Button\r\n        type={finger ? \"link\" : \"text\"}\r\n        onClick={() => {\r\n          updateDrawCtrl({ finger: !finger });\r\n          message.destroy(\"FINGER\");\r\n          message.open({\r\n            content: finger ? \"Pencil only\" : \"Draw with finger\",\r\n            key: \"FINGER\",\r\n          });\r\n        }}\r\n        icon={<IconFont type=\"icon-finger\" />}\r\n      />\r\n      <Button\r\n        className=\"force-light-btn\"\r\n        type=\"text\"\r\n        icon={forceLight ? <BulbFilled /> : <BulbOutlined />}\r\n        onClick={() => setForceLight((prev) => !prev)}\r\n      />\r\n      <PenButton />\r\n      <EraserButton />\r\n      <Button\r\n        type={mode === \"text\" ? \"link\" : \"text\"}\r\n        onClick={() => updateDrawCtrl({ mode: \"text\" })}\r\n        icon={<IconFont type=\"icon-text1\" />}\r\n      />\r\n      <SelectButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PenButton = () => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const { mode, color } = drawCtrl;\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n\r\n  return mode === \"draw\" ? (\r\n    <Popover\r\n      content={<PenPanel updateDrawCtrl={updateDrawCtrl} drawCtrl={drawCtrl} />}\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button\r\n        type=\"link\"\r\n        icon={<HighlightTwoTone twoToneColor={color} className=\"pen-icon\" />}\r\n      />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      onClick={() => updateDrawCtrl({ mode: \"draw\" })}\r\n      icon={<HighlightOutlined />}\r\n    />\r\n  );\r\n};\r\n\r\nconst EraserButton = () => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const { mode, pixelEraser } = drawCtrl;\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n\r\n  const btnProps: ButtonProps = {\r\n    shape: \"circle\",\r\n    icon: <IconFont type=\"icon-eraser\" />,\r\n  };\r\n\r\n  return mode === \"erase\" ? (\r\n    <Popover\r\n      content={\r\n        <div className=\"width-seg-wrapper\">\r\n          <Segmented\r\n            block\r\n            size=\"small\"\r\n            className=\"pixel-seg\"\r\n            options={[\"Pixel\", \"Object\"]}\r\n            value={pixelEraser ? \"Pixel\" : \"Object\"}\r\n            onChange={(value) => {\r\n              if (value === \"Pixel\") updateDrawCtrl({ pixelEraser: true });\r\n              else updateDrawCtrl({ pixelEraser: false });\r\n            }}\r\n          />\r\n          <WidthSelect\r\n            drawCtrl={drawCtrl}\r\n            updateDrawCtrl={updateDrawCtrl}\r\n            field=\"eraserWidth\"\r\n          />\r\n        </div>\r\n      }\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button type=\"link\" {...btnProps} />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      onClick={() => updateDrawCtrl({ mode: \"erase\" })}\r\n      {...btnProps}\r\n    />\r\n  );\r\n};\r\n\r\nconst SelectButton = () => {\r\n  const { lasso, mode } = useDrawCtrl();\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n\r\n  const icon = lasso ? <IconFont type=\"icon-lasso1\" /> : <GatewayOutlined />;\r\n\r\n  return mode === \"select\" ? (\r\n    <Button\r\n      type=\"link\"\r\n      icon={icon}\r\n      onClick={() => updateDrawCtrl({ lasso: !lasso })}\r\n    />\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      icon={icon}\r\n      onClick={() => updateDrawCtrl({ mode: \"select\" })}\r\n    />\r\n  );\r\n};\r\n","import { FC, useMemo, useState, useEffect, useContext } from \"react\";\r\nimport { Badge, Alert, Modal, Button, Divider, message, Popover } from \"antd\";\r\nimport Search from \"antd/lib/input/Search\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { PasscodeInput } from \"antd-mobile\";\r\nimport { TeamCtx } from \"../Team\";\r\nimport { getUserID, saveUserName } from \"lib/user\";\r\nimport {\r\n  EyeOutlined,\r\n  MenuOutlined,\r\n  FormOutlined,\r\n  TeamOutlined,\r\n  CopyOutlined,\r\n  CheckOutlined,\r\n  ReloadOutlined,\r\n  ShareAltOutlined,\r\n  DisconnectOutlined,\r\n  EyeInvisibleOutlined,\r\n  UsergroupAddOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { editNoteData } from \"lib/note/archive\";\r\nimport { UserAvatar } from \"component/UserAvatar\";\r\nimport { putNote } from \"lib/network/http\";\r\nimport copy from \"clipboard-copy\";\r\nimport { useAsideOpen } from \"lib/hooks\";\r\n\r\nexport const HeaderRight: FC<{\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ instantSave }) => {\r\n  const { teamOn } = useContext(TeamCtx);\r\n  return (\r\n    <div className=\"right\">\r\n      {teamOn ? <RoomInfo /> : <JoinRoom instantSave={instantSave} />}\r\n      <PageNavButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PageNavButton = () => {\r\n  const [asideOpen, setAsideOpen] = useAsideOpen();\r\n  return (\r\n    <Button\r\n      type={asideOpen ? \"link\" : \"text\"}\r\n      icon={<MenuOutlined />}\r\n      onClick={() => setAsideOpen((prev) => !prev)}\r\n    />\r\n  );\r\n};\r\n\r\nconst UserCard: FC<{ userID: string }> = ({ userID }) => {\r\n  const [renaming, setRenaming] = useState(false);\r\n  const { ignores, setIgnores, resetIO, userRec } = useContext(TeamCtx);\r\n  const userInfo = userRec[userID];\r\n  useEffect(() => setRenaming(false), [userInfo]);\r\n  if (!userInfo) return null;\r\n\r\n  const { userName, online } = userInfo;\r\n  const self = userID === getUserID();\r\n  const ignored = ignores.has(userID) && !self;\r\n\r\n  const switchIgnore = () => {\r\n    setIgnores((prev) => {\r\n      if (prev.has(userID)) return prev.delete(userID);\r\n      return prev.add(userID);\r\n    });\r\n  };\r\n\r\n  const submitRename = (value: string) => {\r\n    const name = value.trim();\r\n    if (!name || name === userName) return setRenaming(false);\r\n    saveUserName(name);\r\n    resetIO();\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-item\" data-online={online}>\r\n      <UserAvatar userInfo={userInfo} size=\"small\" className=\"room-avatar\" />\r\n      {renaming || <span className=\"user-name\">{userName}</span>}\r\n      {renaming && (\r\n        <Search\r\n          autoFocus\r\n          className=\"rename-input\"\r\n          defaultValue={userName}\r\n          onSearch={submitRename}\r\n          enterButton={<Button icon={<CheckOutlined />} />}\r\n        />\r\n      )}\r\n      {self ? (\r\n        renaming || (\r\n          <Button\r\n            type=\"text\"\r\n            icon={<FormOutlined />}\r\n            onClick={() => setRenaming(true)}\r\n          />\r\n        )\r\n      ) : (\r\n        <Button\r\n          type=\"text\"\r\n          icon={ignored ? <EyeInvisibleOutlined /> : <EyeOutlined />}\r\n          onClick={switchIgnore}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst RoomInfo: FC = () => {\r\n  const { code, userRec, connected, loadInfo, loadState, resetIO } =\r\n    useContext(TeamCtx);\r\n  const link = window.location.href;\r\n  const share = async () => {\r\n    try {\r\n      await copy(`${document.title}\\n${link}`);\r\n      message.destroy(\"copy\");\r\n      message.success({\r\n        content: \"Link copied!\",\r\n        icon: <CopyOutlined />,\r\n        key: \"copy\",\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const userList = useMemo(() => {\r\n    const selfID = getUserID();\r\n    const { [selfID]: selfInfo, ...otherUsers } = userRec;\r\n    const list = selfInfo ? [selfInfo] : [];\r\n    const values = Object.values(otherUsers);\r\n    list.push(\r\n      ...values.filter(({ online }) => online),\r\n      ...values.filter(({ online }) => !online)\r\n    );\r\n    return list;\r\n  }, [userRec]);\r\n\r\n  const onlineNum = useMemo(\r\n    () => userList.filter(({ online }) => online).length,\r\n    [userList]\r\n  );\r\n\r\n  const teamPop = (\r\n    <div className=\"team-popover\">\r\n      {connected || (\r\n        <Alert\r\n          className=\"disconn-alert\"\r\n          message=\"Network failed.\"\r\n          icon={<DisconnectOutlined />}\r\n          type=\"error\"\r\n          showIcon\r\n          banner\r\n        />\r\n      )}\r\n      <PasscodeInput\r\n        className=\"code-display\"\r\n        value={String(code)}\r\n        length={4}\r\n        plain\r\n      />\r\n      <Button\r\n        icon={<ShareAltOutlined />}\r\n        className=\"share-btn\"\r\n        onClick={share}\r\n        block\r\n      >\r\n        Share\r\n      </Button>\r\n      <Divider />\r\n      <div className=\"user-list\">\r\n        {userList.map((u) => (\r\n          <UserCard key={u.userID} userID={u.userID} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const [reloading, setReloading] = useState(false);\r\n  const title = (\r\n    <div className=\"team-title\">\r\n      <span>Team info</span>\r\n      <Button\r\n        shape=\"circle\"\r\n        type=\"text\"\r\n        size=\"small\"\r\n        loading={reloading}\r\n        icon={<ReloadOutlined />}\r\n        onClick={async () => {\r\n          setReloading(true);\r\n          await loadInfo();\r\n          await loadState();\r\n          setReloading(false);\r\n          resetIO();\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Popover\r\n      content={teamPop}\r\n      trigger=\"click\"\r\n      placement=\"bottomRight\"\r\n      title={title}\r\n      getPopupContainer={(e) => e.parentElement!}\r\n    >\r\n      <Button\r\n        type=\"text\"\r\n        icon={\r\n          <Badge\r\n            status={connected ? \"success\" : \"error\"}\r\n            count={connected ? onlineNum : \"!\"}\r\n            size=\"small\"\r\n          >\r\n            <TeamOutlined />\r\n          </Badge>\r\n        }\r\n      />\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst JoinRoom: FC<{\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ instantSave }) => {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const nav = useNavigate();\r\n\r\n  const createRoom = async () => {\r\n    await instantSave();\r\n    const res = await putNote(noteID);\r\n    if (!res) return message.error(\"Can't create room.\");\r\n    await editNoteData(noteID, { team: true });\r\n    nav(\"/team/\" + noteID);\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      type=\"text\"\r\n      icon={<UsergroupAddOutlined />}\r\n      onClick={() => {\r\n        Modal.confirm({\r\n          title: \"Enable team editing\",\r\n          content: \"This will make your note public to anyone with the link.\",\r\n          icon: <TeamOutlined style={{ color: \"#555\" }} />,\r\n          onOk: createRoom,\r\n        });\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\nimport { HeaderLeft } from \"./Left\";\r\nimport { HeaderMiddle } from \"./Middle\";\r\nimport { HeaderRight } from \"./Right\";\r\nimport \"./header.sass\";\r\n\r\nexport const Header: FC<{\r\n  saved: boolean;\r\n  handleUndo: () => void;\r\n  handleRedo: () => void;\r\n  undoable: boolean;\r\n  redoable: boolean;\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ saved, instantSave, ...undoProps }) => (\r\n  <header>\r\n    <HeaderLeft saved={saved} instantSave={instantSave} />\r\n    <HeaderMiddle {...undoProps} />\r\n    <HeaderRight instantSave={instantSave} />\r\n  </header>\r\n);\r\n","import React, {\r\n  FC,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  useCallback,\r\n} from \"react\";\r\nimport { NoteInfo, NotePage, createPage, defaultNotePage } from \"lib/note/note\";\r\nimport { DrawCtrlProvider } from \"lib/draw/DrawCtrl\";\r\nimport { NewPageInfo, ReorderInfo, SyncInfo } from \"lib/network/io\";\r\nimport { DarkModeProvider } from \"lib/Dark\";\r\nimport { useMemoizedFn as useEvent, useSafeState } from \"ahooks\";\r\nimport { SetOperation, StateSet } from \"lib/draw/StateSet\";\r\nimport { loadNote, editNoteData } from \"lib/note/archive\";\r\nimport { showPageDelMsg } from \"./tools/Messages\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport PageWrapper from \"component/PageWrapper\";\r\nimport { DrawState } from \"lib/draw/DrawState\";\r\nimport { useScrollPage } from \"./lib/scroll\";\r\nimport { debounce, last } from \"lodash-es\";\r\nimport { insertAfter } from \"./lib/array\";\r\nimport { PageNav } from \"./PageNav\";\r\nimport { AsideOpenProvider, Setter } from \"lib/hooks\";\r\nimport { AddPageButton } from \"./tools/AddButton\";\r\nimport { Header } from \"./Header\";\r\nimport { TeamCtx } from \"./Team\";\r\nimport { Map } from \"immutable\";\r\nimport { message } from \"antd\";\r\nimport \"./reader.sass\";\r\n\r\nexport interface ReaderStates {\r\n  noteID: string;\r\n  currPageID: string;\r\n  stateSet?: StateSet;\r\n  pageRec?: Map<string, NotePage>;\r\n  pageOrder?: string[];\r\n}\r\n\r\nexport interface ReaderMethods {\r\n  scrollPage: (pageID: string) => void;\r\n  switchPageMarked: (pageID: string) => void;\r\n  addPage: (prevPageID: string, copy?: boolean) => void;\r\n  addFinalPage: () => void;\r\n  deletePage: (pageID: string) => void;\r\n  saveReorder: (order: string[], push: boolean) => Promise<void>;\r\n}\r\n\r\nexport default function Reader() {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const nav = useNavigate();\r\n\r\n  const [pageRec, setPageRec] = useState<Map<string, NotePage>>();\r\n  const [noteInfo, setNoteInfo] = useState<NoteInfo>();\r\n  const [stateSet, setStateSet] = useState<StateSet>();\r\n  const [pageOrder, setPageOrder] = useState<string[]>();\r\n  const [saved, setSaved] = useSafeState(true);\r\n\r\n  const { io, teamOn, addTeamStatePage } = useContext(TeamCtx);\r\n  const { setInviewRatios, scrollPage, sectionRef, currPageID, scrolling } =\r\n    useScrollPage(noteID, pageOrder);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const storedNote = await loadNote(noteID);\r\n      if (!storedNote) {\r\n        message.error(\"Note not found\");\r\n        return nav(\"/\");\r\n      }\r\n      const { pageRec, pdf, pageOrder, ...noteInfo } = storedNote;\r\n      setPageRec(Map(pageRec));\r\n      setPageOrder(pageOrder);\r\n      setNoteInfo(noteInfo);\r\n      setStateSet(StateSet.createFromPages(pageRec));\r\n    })();\r\n  }, [nav, noteID, teamOn]);\r\n\r\n  useEffect(() => {\r\n    if (!noteInfo) return;\r\n    document.title = noteInfo.name + \" - Multibility\";\r\n  }, [noteInfo]);\r\n\r\n  const saver = useEvent(async () => {\r\n    const pr = pageRec?.toObject();\r\n    await editNoteData(noteID, { pageRec: pr });\r\n    setSaved(true);\r\n  });\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const debouncedSave = useCallback(debounce(saver, 2000), [saver]);\r\n  const instantSave = debouncedSave.flush;\r\n\r\n  const savePageRec = (pageID: string, cb: (prev: NotePage) => NotePage) => {\r\n    setPageRec((prev) => prev?.update(pageID, defaultNotePage, cb));\r\n    setSaved(false);\r\n    debouncedSave();\r\n  };\r\n\r\n  const saveReorder = async (pageOrder: string[], push = false) => {\r\n    setPageOrder(pageOrder);\r\n    await editNoteData(noteID, { pageOrder });\r\n    await instantSave();\r\n    push && pushReorder(pageOrder);\r\n  };\r\n\r\n  const pushReorder = (pageOrder: string[]) =>\r\n    io?.emit(\"reorder\", { pageOrder });\r\n\r\n  const handleReorder = useEvent(\r\n    ({ deleted, pageOrder, prevOrder }: ReorderInfo) => {\r\n      saveReorder(pageOrder);\r\n      if (!deleted) return;\r\n      showPageDelMsg(() => saveReorder(prevOrder, true));\r\n    }\r\n  );\r\n\r\n  const handleNewPage = useEvent(\r\n    ({ pageOrder, pageID, newPage }: NewPageInfo) => {\r\n      saveReorder(pageOrder);\r\n      savePageRec(pageID, () => newPage);\r\n      setStateSet((prev) => prev?.addState(pageID, newPage));\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    io?.on(\"reorder\", handleReorder);\r\n    io?.on(\"newPage\", handleNewPage);\r\n    return () => void io?.removeAllListeners();\r\n  }, [io, handleReorder, handleNewPage]);\r\n\r\n  const pushOperation = (operation: SetOperation) => {\r\n    const handleSync = ({ pageID, stroke }: SyncInfo) =>\r\n      setStateSet((prev) => prev?.syncStrokeTime(pageID, stroke));\r\n\r\n    io?.emit(\"push\", { operation }, handleSync);\r\n  };\r\n\r\n  const pushNewPage = (\r\n    pageOrder: string[],\r\n    pageID: string,\r\n    newPage: NotePage\r\n  ) => {\r\n    const { image, marked, ...newTeamPage } = newPage;\r\n    io?.emit(\"newPage\", { pageOrder, pageID, newPage: newTeamPage });\r\n    addTeamStatePage(pageID, newPage);\r\n  };\r\n\r\n  const updatePageRec = (pageID: string, ds: DrawState) => {\r\n    const state = DrawState.flaten(ds);\r\n    savePageRec(pageID, (prev) => ({ ...prev, state }));\r\n  };\r\n\r\n  const updateStateSet = (cb: (prevSS: StateSet) => StateSet) => {\r\n    if (!stateSet) return;\r\n    const newSS = cb(stateSet);\r\n    if (newSS === stateSet) return;\r\n    setStateSet(newSS);\r\n    const lastDS = newSS.getLastDS();\r\n    const lastOp = newSS.lastOp;\r\n    if (!lastDS || !lastOp) return;\r\n    updatePageRec(...lastDS);\r\n    pushOperation(lastOp);\r\n  };\r\n\r\n  const switchPageMarked = (pageID: string) =>\r\n    savePageRec(pageID, (prev) => ({ ...prev, marked: !prev.marked }));\r\n\r\n  const addPage = (prevPageID: string, copy = false) => {\r\n    if (!pageOrder) return;\r\n    const prevPage = copy ? pageRec?.get(prevPageID) : undefined;\r\n    const [pageID, newPage] = createPage(prevPage);\r\n    const newOrder = insertAfter(pageOrder, prevPageID, pageID);\r\n    pushNewPage(newOrder, pageID, newPage);\r\n    saveReorder(newOrder);\r\n    savePageRec(pageID, () => newPage);\r\n    setStateSet((prev) => prev?.addState(pageID, newPage));\r\n  };\r\n\r\n  const addFinalPage = () => {\r\n    const lastPageID = last(pageOrder);\r\n    lastPageID && addPage(lastPageID);\r\n  };\r\n\r\n  const deletePage = (pageID: string) => {\r\n    const newOrder = pageOrder?.filter((id) => id !== pageID);\r\n    newOrder?.length && saveReorder(newOrder, true);\r\n  };\r\n\r\n  const readerStates = { noteID, pageRec, pageOrder, stateSet, currPageID };\r\n\r\n  const renderResult = (\r\n    <div className=\"reader container\">\r\n      <Header\r\n        saved={saved}\r\n        instantSave={instantSave}\r\n        handleUndo={() => updateStateSet((prev) => prev.undo())}\r\n        handleRedo={() => updateStateSet((prev) => prev.redo())}\r\n        undoable={stateSet?.isUndoable() ?? false}\r\n        redoable={stateSet?.isRedoable() ?? false}\r\n      />\r\n      <main>\r\n        {pageOrder?.map((uid) => (\r\n          <section key={uid} className=\"note-page\" ref={sectionRef(uid)}>\r\n            <PageContainer\r\n              uid={uid}\r\n              updateStateSet={updateStateSet}\r\n              setInviewRatios={setInviewRatios}\r\n              scrolling={scrolling}\r\n              {...readerStates}\r\n            />\r\n          </section>\r\n        ))}\r\n        <AddPageButton addFinalPage={addFinalPage} />\r\n      </main>\r\n      <PageNav\r\n        addPage={addPage}\r\n        addFinalPage={addFinalPage}\r\n        scrollPage={scrollPage}\r\n        deletePage={deletePage}\r\n        saveReorder={saveReorder}\r\n        switchPageMarked={switchPageMarked}\r\n        {...readerStates}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <AsideOpenProvider>\r\n      <DarkModeProvider>\r\n        <DrawCtrlProvider>{renderResult}</DrawCtrlProvider>\r\n      </DarkModeProvider>\r\n    </AsideOpenProvider>\r\n  );\r\n}\r\n\r\nconst PageContainer: FC<\r\n  {\r\n    uid: string;\r\n    updateStateSet: (cb: (prevSS: StateSet) => StateSet) => void;\r\n    setInviewRatios: Setter<Map<string, number>>;\r\n    scrolling: boolean;\r\n  } & ReaderStates\r\n> = ({\r\n  uid,\r\n  updateStateSet,\r\n  setInviewRatios,\r\n  scrolling,\r\n  pageRec,\r\n  stateSet,\r\n  currPageID,\r\n  pageOrder,\r\n  noteID,\r\n}) => {\r\n  const { teamState, ignores } = useContext(TeamCtx);\r\n\r\n  const page = pageRec?.get(uid);\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStateMap = teamState?.getOnePageStateMap(uid);\r\n  const updateState = useEvent((ds: DrawState) => {\r\n    updateStateSet((prev) => prev.setState(uid, ds));\r\n  });\r\n\r\n  const onViewChange = useEvent((ratio: number) => {\r\n    if (!ratio) return setInviewRatios((prev) => prev.delete(uid));\r\n    setInviewRatios((prev) => prev.set(uid, ratio));\r\n  });\r\n\r\n  const preload = useMemo(() => {\r\n    if (!pageOrder) return false;\r\n    const currIndex = pageOrder.indexOf(currPageID);\r\n    const selfIndex = pageOrder.indexOf(uid);\r\n    return Math.abs(selfIndex - currIndex) <= 1;\r\n  }, [currPageID, uid, pageOrder]);\r\n\r\n  if (!page || !drawState) return null;\r\n  return (\r\n    <PageWrapper\r\n      drawState={drawState}\r\n      teamStateMap={teamStateMap}\r\n      updateState={updateState}\r\n      pdfIndex={page.pdfIndex}\r\n      noteID={noteID}\r\n      ignores={ignores}\r\n      onViewChange={onViewChange}\r\n      preload={preload}\r\n      skipInView={scrolling}\r\n    />\r\n  );\r\n};\r\n","import { io } from \"socket.io-client\";\r\nimport { Stroke } from \"lib/draw/DrawState\";\r\nimport { NotePage } from \"lib/note/note\";\r\nimport { getUserID, getUserName } from \"lib/user\";\r\nimport { BASE_URL } from \"./http\";\r\n\r\nexport const IoFactory = (noteID: string) => () =>\r\n  io(BASE_URL, {\r\n    query: {\r\n      userID: getUserID(),\r\n      userName: getUserName(),\r\n      noteID,\r\n    },\r\n  });\r\n\r\nexport interface ReorderInfo {\r\n  pageOrder: string[];\r\n  prevOrder: string[];\r\n  deleted: boolean;\r\n}\r\n\r\nexport interface NewPageInfo {\r\n  pageOrder: string[];\r\n  pageID: string;\r\n  newPage: NotePage;\r\n}\r\n\r\nexport interface SyncInfo {\r\n  stroke: Stroke;\r\n  pageID: string;\r\n}\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  getTeamNoteState,\r\n  loadTeamNoteInfo,\r\n  updatePages,\r\n} from \"lib/network/http\";\r\nimport { IoFactory, NewPageInfo } from \"lib/network/io\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { showJoinMsg, showLeaveMsg } from \"./tools/Messages\";\r\nimport { TeamState } from \"lib/draw/TeamState\";\r\nimport { getUserID, UserInfo } from \"lib/user\";\r\nimport { NotePage } from \"lib/note/note\";\r\nimport { Socket } from \"socket.io-client\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport { Loading } from \"component/Loading\";\r\nimport { message } from \"antd\";\r\nimport { Set } from \"immutable\";\r\nimport Reader from \"./Reader\";\r\n\r\nexport const TeamCtx = React.createContext({\r\n  io: undefined as Socket | undefined,\r\n  code: 0,\r\n  teamOn: false,\r\n  connected: false,\r\n  ignores: Set<string>(),\r\n  userRec: {} as Record<string, UserInfo>,\r\n  teamState: undefined as TeamState | undefined,\r\n  resetIO: () => {},\r\n  loadInfo: async () => false,\r\n  loadState: async () => false,\r\n  setIgnores: (() => {}) as Setter<Set<string>>,\r\n  addTeamStatePage: (pageID: string, newPage: NotePage) => {},\r\n});\r\n\r\nexport default function Team() {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const [teamState, setTeamState] = useState<TeamState>();\r\n  const [code, setCode] = useState(-2);\r\n  const [userRec, setUserRec] = useState<Record<string, UserInfo>>({});\r\n  const [ignores, setIgnores] = useState(Set<string>());\r\n  const [io, setIO] = useState(IoFactory(noteID));\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [connected, setConnected] = useState(false);\r\n  const nav = useNavigate();\r\n\r\n  const loadInfo = useCallback(async () => {\r\n    const info = await loadTeamNoteInfo(noteID);\r\n    if (!info) {\r\n      message.error(\"Failed loading the team note info\");\r\n      return false;\r\n    }\r\n    setCode(info.code);\r\n    return true;\r\n  }, [noteID]);\r\n\r\n  const loadState = useCallback(async () => {\r\n    const teamNote = await getTeamNoteState(noteID);\r\n    if (!teamNote) {\r\n      message.error(\"Failed loading the team note state\");\r\n      return false;\r\n    }\r\n    setTeamState(TeamState.createFromTeamPages(teamNote));\r\n    return true;\r\n  }, [noteID]);\r\n\r\n  const updateSelfState = useCallback(() => {\r\n    updatePages(noteID);\r\n  }, [noteID]);\r\n\r\n  useEffect(() => {\r\n    const roomInit = async () => {\r\n      const infoLoaded = await loadInfo();\r\n      const stateLoaded = await loadState();\r\n      if (!infoLoaded || !stateLoaded) return nav(\"/\");\r\n      setLoaded(true);\r\n      updateSelfState();\r\n    };\r\n    roomInit();\r\n    return updateSelfState;\r\n  }, [loadInfo, loadState, nav, updateSelfState]);\r\n\r\n  useEffect(() => {\r\n    io.on(\"push\", ({ operation, userID }) => {\r\n      setTeamState((prev) => prev?.pushOperation(operation, userID));\r\n    });\r\n\r\n    io.on(\"join\", ({ joined, members }) => {\r\n      const { userID, userName } = joined;\r\n      setUserRec(members);\r\n      if (userID === getUserID()) return;\r\n      showJoinMsg(userID, userName);\r\n    });\r\n\r\n    io.on(\"leave\", ({ leaved, members }) => {\r\n      const { userID, userName } = leaved;\r\n      setUserRec(members);\r\n      if (userID === getUserID()) return io.emit(\"join\");\r\n      showLeaveMsg(userID, userName);\r\n    });\r\n\r\n    io.on(\"newPage\", (info: NewPageInfo) => {\r\n      const { pageID, newPage } = info;\r\n      setTeamState((prev) => prev?.addPage(pageID, newPage));\r\n    });\r\n\r\n    io.on(\"reset\", ({ userID, pageRec }) => {\r\n      if (userID === getUserID()) return;\r\n      setTeamState((prev) => prev?.resetUser(userID, pageRec));\r\n    });\r\n\r\n    io.on(\"connect_error\", console.error);\r\n    io.on(\"connect\", () => setConnected(true));\r\n    io.on(\"disconnect\", () => setConnected(false));\r\n\r\n    return () => {\r\n      io.removeAllListeners();\r\n      io.close();\r\n    };\r\n  }, [io]);\r\n\r\n  const addTeamStatePage = (pageID: string, newPage: NotePage) => {\r\n    setTeamState((prev) => prev?.addPage(pageID, newPage));\r\n  };\r\n\r\n  const resetIO = () => setIO(IoFactory(noteID));\r\n\r\n  return (\r\n    <Loading loading={!loaded}>\r\n      <TeamCtx.Provider\r\n        value={{\r\n          io,\r\n          code,\r\n          teamOn: true,\r\n          ignores,\r\n          userRec,\r\n          connected,\r\n          teamState,\r\n          resetIO,\r\n          loadInfo,\r\n          loadState,\r\n          setIgnores,\r\n          addTeamStatePage,\r\n        }}\r\n      >\r\n        <Reader />\r\n      </TeamCtx.Provider>\r\n    </Loading>\r\n  );\r\n}\r\n","import { Button, message } from \"antd\";\r\nimport { LoginOutlined, LogoutOutlined } from \"@ant-design/icons\";\r\n\r\nexport const showPageDelMsg = (onUndo: () => void) => {\r\n  message.warning({\r\n    content: (\r\n      <>\r\n        One page was deleted.\r\n        <Button\r\n          size=\"small\"\r\n          type=\"link\"\r\n          onClick={() => {\r\n            message.destroy(\"DELETE\");\r\n            onUndo();\r\n          }}\r\n        >\r\n          Undo\r\n        </Button>\r\n      </>\r\n    ),\r\n    key: \"DELETE\",\r\n    duration: 10,\r\n  });\r\n};\r\n\r\nexport const showJoinMsg = (userID: string, userName: string) => {\r\n  message.destroy(userID);\r\n  message.success({\r\n    content: `${userName} joined the room`,\r\n    icon: <LoginOutlined />,\r\n    key: userID,\r\n  });\r\n};\r\n\r\nexport const showLeaveMsg = (userID: string, userName: string) => {\r\n  message.destroy(userID);\r\n  message.warning({\r\n    content: `${userName} leaved the room`,\r\n    icon: <LogoutOutlined />,\r\n    key: userID,\r\n  });\r\n};\r\n"],"names":["defaultRecord","states","Map","editStack","List","undoStack","defaultFactory","Record","StateSet","immutable","lastOp","this","getImmutable","get","pageID","getStates","drawState","prevDS","getOneState","currRecord","update","s","set","l","push","delete","stroke","DrawState","notePage","state","ratio","newDS","getEditStack","size","getUndoStack","isUndoable","lastUid","last","lastSetOp","pop","isRedoable","ds","pageRec","map","scrollForage","localforage","name","persistScroll","debounce","noteID","currPageID","setItem","largestKey","order","result","maxRatio","key","insertAfter","list","prevItem","newItem","prevIndex","indexOf","curr","slice","splice","UserAvatar","userInfo","onClick","chosen","className","color","useMemo","getHashedColor","userID","userName","style","backgroundColor","AddPageButton","addFinalPage","type","icon","PlusOutlined","block","PageNav","props","useState","left","setLeft","useAsideOpen","asideOpen","opposite","draggableId","index","innerRef","draggableProps","dragHandleProps","ref","initKey","onDragEnd","destination","droppableId","direction","droppableProps","placeholder","isDraggingOver","PreviewCard","useActiveKey","activeKey","setAsideOpen","title","ALL","MARKED","WRITTEN","useSwipeable","onSwipedLeft","onSwipedRight","swipeDuration","swipeRef","swipeHandler","isDragging","isDropAnimating","e","PreviewTabs","PageList","cardDragged","React","refRec","useRef","pageOrder","saveReorder","scrollPage","initScroll","useEvent","current","scrollIntoView","useLayoutEffect","source","fromIndex","toIndex","newOrder","removed","exchange","requestAnimationFrame","uid","PagePreview","pageIndex","displayName","stateSet","useContext","TeamCtx","teamState","ignores","setChosen","page","teamStateMap","getOnePageStateMap","marked","userIDs","TeamState","isEmpty","isDragDisabled","PageWrapper","undefined","thumbnail","image","preview","skipInView","PreviewTools","switchPageMarked","stopPropagation","PreviewOption","TeamAvatars","userRec","maxCount","classNames","maxPopoverPlacement","prev","addPage","deletePage","menu","items","label","CopyOutlined","DeleteOutlined","danger","content","trigger","placement","destroyTooltipOnHide","getPopupContainer","parentElement","MoreOutlined","setActiveKey","TabPane","Tabs","onChange","tabBarGutter","centered","tab","IconFont","HeaderLeft","saved","instantSave","nav","useNavigate","HomeFilled","opacity","disabled","SaveOutlined","HeaderMiddle","handleUndo","handleRedo","undoable","redoable","useDrawCtrl","mode","finger","updateDrawCtrl","useUpdateDrawCtrl","useForceLight","forceLight","setForceLight","UndoOutlined","RedoOutlined","message","BulbFilled","BulbOutlined","PenButton","EraserButton","SelectButton","drawCtrl","PenPanel","HighlightTwoTone","twoToneColor","HighlightOutlined","pixelEraser","btnProps","shape","options","value","field","lasso","GatewayOutlined","HeaderRight","teamOn","RoomInfo","JoinRoom","PageNavButton","MenuOutlined","UserCard","renaming","setRenaming","setIgnores","resetIO","useEffect","online","self","getUserID","ignored","has","Search","autoFocus","defaultValue","onSearch","trim","saveUserName","enterButton","CheckOutlined","FormOutlined","EyeInvisibleOutlined","EyeOutlined","add","code","connected","loadInfo","loadState","link","window","location","href","share","copy","document","console","log","userList","selfID","selfInfo","otherUsers","values","Object","filter","onlineNum","length","teamPop","DisconnectOutlined","showIcon","banner","String","plain","ShareAltOutlined","u","reloading","setReloading","loading","ReloadOutlined","status","count","TeamOutlined","useParams","createRoom","putNote","editNoteData","team","UsergroupAddOutlined","Modal","onOk","Header","undoProps","Reader","setPageRec","noteInfo","setNoteInfo","setStateSet","setPageOrder","useSafeState","setSaved","io","addTeamStatePage","refMap","setRefMap","scrolled","prevPageID","setPrevPageID","inviewRatios","setInviewRatios","useDebugValue","getItem","stored","sectionRef","el","taskID","scrolling","setScrolling","addEventListener","handleScroll","cancelAnimationFrame","removeEventListener","behavior","useScrollPage","loadNote","storedNote","pdf","createFromPages","saver","pr","toObject","debouncedSave","useCallback","flush","savePageRec","cb","defaultNotePage","pushReorder","emit","handleReorder","deleted","prevOrder","showPageDelMsg","handleNewPage","newPage","addState","on","removeAllListeners","pushNewPage","newTeamPage","updatePageRec","updateStateSet","newSS","operation","lastDS","getLastDS","syncStrokeTime","prevPage","createPage","lastPageID","readerStates","renderResult","undo","redo","PageContainer","id","Dark","DrawCtrl","updateState","setState","onViewChange","preload","currIndex","selfIndex","Math","abs","pdfIndex","IoFactory","BASE_URL","query","getUserName","Set","Team","setTeamState","setCode","setUserRec","setIO","loaded","setLoaded","setConnected","loadTeamNoteInfo","info","getTeamNoteState","teamNote","updateSelfState","updatePages","roomInit","infoLoaded","stateLoaded","pushOperation","joined","members","showJoinMsg","leaved","showLeaveMsg","resetUser","error","close","Loading","Provider","onUndo","duration"],"sourceRoot":""}