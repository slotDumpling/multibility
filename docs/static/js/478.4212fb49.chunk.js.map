{"version":3,"file":"static/js/478.4212fb49.chunk.js","mappings":"+HAEA,KAAeA,EAAAA,EAAAA,GAAqB,CAClCC,UAAW,iD,sPCSPC,EAAwB,WAC5B,IAAMC,EAAQ,IAAIC,IAClB,GAA4BC,EAAAA,EAAAA,GAAoB,GAAI,IAA5CC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QACVC,EAAQ,IAAIC,MAElB,OADAD,EAAME,I,66DACC,SAACC,GACNA,EAAiC,GAAzBC,KAAKC,MAAMF,EAAQ,IAC3B,IAAMG,EAASX,EAAMY,IAAIJ,GACzB,GAAIG,EAAQ,OAAOA,EACnBP,EAAQS,UAAU,GAAI,IACtBT,EAAQU,OAAQN,EAAQC,KAAKM,GAAM,KACnCX,EAAQY,UAAUX,GAAQ,IAAK,IAC/B,IAAMY,EAAOd,EAAOe,YAIpB,OAHAd,EAAQe,WAAW,IAAK,GAAI,GAAI,IAChCf,EAAQgB,iBACRpB,EAAMqB,IAAIb,EAAOS,GACVA,CACR,CACF,CAlB6B,GAoBjBK,EAAkB,SAACd,GAC9B,MAAM,OAAN,OAAcT,EAAqBS,GAAnC,gBACD,ECtBM,SAASe,EACdC,GAEA,IAAMC,GAAUC,EAAAA,EAAAA,SAAO,GACjBC,EAAe,SAACC,GAAD,OACnBA,EAAEC,YAAcJ,EAAQK,QAA4B,UAAlBF,EAAEG,YADjB,EAQfC,EAAe,SAACJ,GAAD,OALA,SAACA,GAAD,OAClBH,EAAQK,SAbN,SAAuBF,GAC5B,IAAMK,EAAQL,EAAEM,QAAQ,GACxB,MAA4B,YAAhB,OAALD,QAAK,IAALA,OAAA,EAAAA,EAAOE,UACf,CAWGC,CAAcR,IACbJ,GAAoC,IAArBI,EAAEM,QAAQG,MAHP,CAMnBC,CAAaV,IAAMA,EAAEW,iBADF,EAGrB,MAAO,CACLC,qBAAsBb,EACtBc,qBAAsBd,EACtBe,oBAAqBV,EACrBW,mBAAoBX,EAEvB,CCjCM,IAcDY,EAAe,SAACC,GACpB,IAAQC,EAAyBD,EAAzBC,QAASC,EAAgBF,EAAhBE,YACjB,MAAO,CACLtC,KAAKuC,MAAMF,EAAQG,EAAI,KACvBxC,KAAKyC,KAAKH,EAAYE,EAAI,KAC1BxC,KAAKuC,MAAMF,EAAQK,EAAI,KACvB1C,KAAKyC,KAAKH,EAAYI,EAAI,KAE7B,EACYC,EAAc,SACzBC,EACAC,EACAC,GAIA,IAFA,IAAMV,GAAS,OAACU,QAAD,IAACA,EAAAA,EAAYD,GAAME,aAClC,EAAiCZ,EAAaC,GAA9C,eAAOY,EAAP,KAAaC,EAAb,KAAmBC,EAAnB,KAAyBC,EAAzB,KACSX,EAAIQ,EAAMR,GAAKS,EAAMT,GAAK,EACjC,IAAK,IAAIE,EAAIQ,EAAMR,GAAKS,EAAMT,GAAK,EAAG,CAAC,IAAD,QACpCI,IAAQ,UAAIF,EAAKJ,UAAT,iBAAI,EAAUE,UAAd,OAAI,EAAcU,OAAON,IACjC,UAAAF,EAAKJ,UAAL,mBAAUE,UAAV,SAAcW,IAAIR,EACnB,CAEJ,EACYS,EAAe,SAC1BV,EACAR,GAIA,IAFA,IAAMmB,EAAU,IAAIC,IACpB,EAAiCrB,EAAaC,GAA9C,eAAOY,EAAP,KAAaC,EAAb,KAAmBC,EAAnB,KAAyBC,EAAzB,KACSX,EAAIQ,EAAMR,GAAKS,EAAMT,GAAK,EACjC,IAAK,IAAIE,EAAIQ,EAAMR,GAAKS,EAAMT,GAAK,EAAG,CAAC,IAAD,IACpC,UAAAE,EAAKJ,UAAL,mBAAUE,UAAV,SAAce,SAAQ,SAACZ,GAAD,OAAUU,EAAQF,IAAIR,EAAtB,GACvB,CAEH,OAAOa,MAAMC,KAAKJ,EACnB,E,WCFYK,EAAS,IAAIC,EAAAA,MAAM,EAAG,GAE7BC,EAAUC,EAAAA,YACd,WAWEC,GACI,IAVFC,EAUC,EAVDA,UACAC,EASC,EATDA,YASC,IARDC,SAAAA,OAQC,MARU,WAAQ,EAQlB,MAPDC,SAAAA,OAOC,MAPUC,EAAAA,GAOV,MANDC,SAAAA,OAMC,SALDC,EAKC,EALDA,OAKC,IAJDC,iBAAAA,OAIC,MAJkB,WAAQ,EAI1B,MAHDC,eAAAA,OAGC,MAHgB,WAAQ,EAGxB,EACKC,EAAkBT,EAAlBS,MAAOC,EAAWV,EAAXU,OACTC,GAAWC,EAAAA,EAAAA,UAAQ,kBAAM,IAAIC,EAAAA,KAAKJ,EAAOC,EAAtB,GAA+B,CAACD,EAAOC,IACxDI,EAAqCX,EAArCW,KAAMC,EAA+BZ,EAA/BY,OAAQC,EAAuBb,EAAvBa,MAAOC,EAAgBd,EAAhBc,YAEvBC,GAAWlE,EAAAA,EAAAA,QAA0B,MACrCmE,GAAQnE,EAAAA,EAAAA,QAAO,IAAIoE,IAAAA,aACzB,IAA0BC,EAAAA,EAAAA,UAAuB,IAAjD,iBAAOC,GAAP,MAAcC,GAAd,MACA,GAAwBC,IAAxB,iBAAOC,GAAP,MAAaC,GAAb,MACA,GAAwBF,IAAxB,iBAAOG,GAAP,MAAaC,GAAb,MACA,GAAwCJ,IAAxC,iBAAOK,GAAP,MAAqBC,GAArB,OAEAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRC,EAAMd,EAAS9D,QACf6E,EAAMd,EAAM/D,QAClB,GAAK4E,EASL,OAPAC,EAAIC,MAAMF,GACVC,EAAIE,SAASC,WAAa,GAC1BH,EAAIE,SAASE,aAnCG,GAoChB,CAAC,EAAG,EAAG,GAAG7C,SAAQ,kBAAO,IAAI8C,EAAAA,OAAQC,SAAU,CAA7B,IAClB,UAAAN,EAAIO,QAAQC,OAAO,UAAnB,SAAuBC,WACvB,IAAIT,EAAIU,KAED,WAAO,IAAD,EACX,UAAAV,EAAIW,YAAJ,SAAUC,UACVC,EAAAA,EAAAA,GAAcd,EACf,CACF,GAAE,KAEHD,EAAAA,EAAAA,YAAU,WACRZ,EAAM/D,QAAQsF,WACd,IAAQD,EAAWtB,EAAM/D,QAAQoF,QAAzBC,OACFM,EAAQC,EAAWP,EAAQ9B,GACjC,OAAO,kBAAMoC,EAAMvD,SAAQ,SAACyD,GAAD,OAAOA,EAAEJ,QAAT,GAApB,CACR,GAAE,CAAClC,IAEJ,QAAsBuC,EAAAA,EAAAA,GAAQhC,GAAvBiC,IAAP,gBACMC,GAAQD,GAAc1C,GAC5BsB,EAAAA,EAAAA,YAAU,WACR,GAAKqB,GAAL,CACA,IAAMnB,EAAMd,EAAM/D,QAMlB,OALA6E,EAAIW,KAAKS,SAAW1C,EAAS2C,SAASF,IACtCnB,EAAIW,KAAKW,MAAMH,GAAOzD,GACtBsC,EAAIO,QAAQC,OAAOjD,SAAQ,SAACgE,GAAD,OAAQA,EAAEjB,SAAU,CAApB,IAC3BN,EAAIW,KAAKa,SAEF,kCAAMxB,EAAIW,YAAV,aAAM,EAAUW,MAAM,EAAIH,GAAOzD,EAAjC,CAPW,CAQnB,GAAE,CAACyD,GAAOzC,IAEX,OAAkCa,IAAlC,iBAAOkC,GAAP,MAAkBC,GAAlB,OACA5B,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACd,GAAKzB,EAAL,CACAa,EAAM/D,QAAQsF,WACd,IAAMkB,EAAS,IAAIC,EAAAA,OAAOvD,GAC1B,UAAAsD,EAAOpB,QAAQC,OAAO,UAAtB,SAA0BqB,SAASF,GACnCA,EAAOG,aACPH,EAAOI,OAAS,WACdJ,EAAOhB,KAAKa,SACZG,EAAOK,UAAU,IAAIC,EAAAA,UAAUvD,IAC/BiD,EAAOO,cACR,EACDR,GAAaC,EAVM,CAWpB,GAAE,CAACtD,EAAQK,EAAUgD,KAEtB,IAAMS,IAAgBxD,EAAAA,EAAAA,UACpB,kBACEX,EACIoE,EAAAA,GAAAA,YAAAA,MAAAA,EAAAA,GAAS,CAAarE,GAAb,eAA2BC,KACpCD,EAAUsE,eAHhB,GAIA,CAACtE,EAAWC,IAGRsE,IAAavH,EAAAA,EAAAA,SAAO,GACpBwH,IAAexH,EAAAA,EAAAA,QAAO,GACtByH,IAAczH,EAAAA,EAAAA,SAAO,GACrB0H,GAAW,kBAAOD,GAAYrH,QAAUmH,GAAWnH,OAAxC,EACbiD,GAAUqE,MAEd3C,EAAAA,EAAAA,YAAU,WACR,IAAS4C,GAAT,OAAexD,EAAM/D,QAAQoF,QAAQC,OAArC,MACA,GAAKkC,EAAL,CACA,IAAMC,EAAS,WACb,IAAMC,EAA0B,GAC1BC,EAAmBC,YAAYC,MACrC7D,EAAM/D,QAAQsF,WAEdiC,EAAGM,eAAe,GAClBb,GAAc5E,SAAQ,SAAC0F,GACrB,IAAMC,EAAOnF,EAAUoF,UAAUF,EAAOG,KAClCzG,EAAO0G,EAAYJ,EAAQP,GAAKQ,GAClCA,GAAMN,EAAUU,KAAK3G,EAC1B,IACD2C,GAASsD,GAETW,KACAf,GAAYrH,SAAU,EACtBqI,GAAWrI,QAAQoC,SAAQ,SAACkG,GAAD,OAAOA,EAAE7C,QAAT,IAC3B4C,GAAWrI,QAAU,GAErB+D,EAAM/D,QAAQwF,KAAKa,SACnB,IAAMkC,EAAWZ,YAAYC,MAAQF,EACrCP,GAAWnH,QAAUuI,EAAW,EACjC,EAOD,OALIlB,GAAYrH,QACdoH,GAAapH,QAAUwI,OAAOC,WAAWjB,EAAQ,KAC5CA,IAGA,kBAAMgB,OAAOE,aAAatB,GAAapH,QAAvC,CA7BQ,CA8BhB,GAAE,CAACgH,GAAepE,IAEnB,IAAM+F,IAAS/I,EAAAA,EAAAA,UACf,IAAgCqE,EAAAA,EAAAA,WAAS,GAAzC,iBAAO2E,GAAP,MAAiBC,GAAjB,MACMC,GAAqB,WAATpF,GAAqBkF,GAAW,WAAalF,EAC/D,IAAkCO,EAAAA,EAAAA,UAAmB,IAArD,iBAAO8E,GAAP,MAAkBC,GAAlB,MACMC,IAAczF,EAAAA,EAAAA,UAAQ,WAC1B,IAAM0F,EAAQ,IAAI/G,IAAI4G,IACtB,OAAO7E,GAAMiF,QAAO,SAAC3H,GAAD,OAAU0H,EAAME,IAAI5H,EAAK6H,KAAzB,GACrB,GAAE,CAACnF,GAAO6E,KAELO,IAAcC,EAAAA,EAAAA,cAAY,WAC9BV,IAAY,GACZvE,QAAQkF,GACRhF,QAAQgF,GACR9E,QAAgB8E,EACjB,GAAE,CAAClF,GAASE,GAASE,MAEtBC,EAAAA,EAAAA,YAAU,WACR,GAAa,WAATjB,EAAmB,OAAO4F,EAC/B,GAAE,CAAC5F,EAAM4F,MACV3E,EAAAA,EAAAA,YAAU,kBAAM2E,EAAN,GAAmB,CAAC1F,EAAO0F,MAErC3E,EAAAA,EAAAA,YAAU,WACR,GAAKiE,GACL,OAAO,WACLI,GAAa,IACb7F,GAAiB,EAClB,CACF,GAAE,CAACyF,GAAUzF,KACdwB,EAAAA,EAAAA,YAAU,WAER,GADAxB,GAAiB,GACbsG,GAAUzJ,QAAS,CACrB,IAAM0J,EAAU,IAAIC,MAAMF,GAAUzJ,QAAS,CAAC,GAC9CoD,EAAesG,EAASvC,GAAWnH,QACpC,CACF,GAAE,CAAC+F,GAAa5C,EAAkBC,IAEnC,IAAMwG,IAAchK,EAAAA,EAAAA,UACdiK,GAAiB,SAACC,GAAqC,IAAnBC,EAAkB,wDAC1D,GAAK5C,GAAWnH,SAAY+J,EAA5B,CACA,cAAiBhG,EAAM/D,QAAQoF,QAAQC,OAAvC,GAAO2E,EAAP,KAAWzC,EAAX,KACA,GAAKyC,GAAOzC,EAAZ,CACAA,EAAGpC,SAAU,EACb2E,EAAKG,UAAW,EAChB,IAAMC,EAAW3C,EAAG4C,WACpBD,EAASE,YAAYN,GACZ,OAATxD,SAAS,IAATA,IAAAA,GAAW+D,YAAYP,GAEvB,IAAMQ,EAAM,GAAKC,iBACXC,EAAczE,GAAc+D,EAAK/I,OAAOsC,MAASiH,EACnD9D,EAASoD,GAAY5J,SACzBwG,EAASoD,GAAY5J,QAAUuH,EAAGkD,UAAU,CAAEjE,OAAAA,EAAQgE,WAAAA,KAC/CrF,SAAU,EAEjBoC,EAAGpC,SAAU,EACb2E,EAAKM,YAAYF,GACR,OAAT5D,SAAS,IAATA,IAAAA,GAAWoE,MAAMV,EAfK,CAFmB,CAkB1C,EACKW,GAAmB,WACvB5G,EAAM/D,QAAQsF,WACd,IAASiC,GAAT,OAAexD,EAAM/D,QAAQoF,QAAQC,OAArC,MACMuF,EAAKhB,GAAY5J,QAClBuH,GAAOqD,IACZrD,EAAGpC,SAAU,EACbyF,EAAGzF,SAAU,EACd,EAEK0F,IAAejL,EAAAA,EAAAA,WAErB+E,EAAAA,EAAAA,YACE,kBAAM,WAAO,IAAD,EACV,UAAAkG,GAAa7K,eAAb,SAAsByF,SACtBoF,GAAa7K,aAAUwJ,CACxB,CAHD,GAIA,CAACzD,KAEH,IAAM+E,GAAkB,WAAO,IAAD,IAC5B,GAAK3D,GAAWnH,UAEsB,KAAlC,UAAA6K,GAAa7K,eAAb,eAAsBmF,SAA1B,CACApB,EAAM/D,QAAQsF,WACd,IAAQE,EAASzB,EAAM/D,QAAfwF,KAEFgB,EAAM,UAAIqE,GAAa7K,eAAjB,QAAI6K,GAAa7K,QAAY,IAAIyG,EAAAA,OAC3CjB,EAAKS,SAASC,SAASsC,OAAO+B,mBAEhC/D,EAAOtH,UAAUsG,EAAKuF,QAASxI,GAC/BiE,EAAOK,UAAUrB,EAAKzE,QACtByF,EAAOrB,SAAU,EACjBqB,EAAOwE,QAAkD,EACzD,IAASzD,GAAT,OAAexD,EAAM/D,QAAQoF,QAAQC,OAArC,MACAkC,IAAOA,EAAGpC,SAAU,EAZ8B,CAanD,EACKiD,GAAoB,WACxBrE,EAAM/D,QAAQsF,WACd,IAASiC,GAAT,OAAexD,EAAM/D,QAAQoF,QAAQC,OAArC,MACM4F,EAAKJ,GAAa7K,QAClB4K,EAAKhB,GAAY5J,QAClBuH,GAAO0D,IACZA,EAAG9F,SAAU,GAEO,KAAd,OAAFyF,QAAE,IAAFA,OAAA,EAAAA,EAAIzF,WAAkBoC,EAAGpC,SAAU,GACxC,EAEK+F,GAAW,SAACpL,GAChBgL,KACAxG,GAAQ6G,EAAYpI,EAAUjD,EAAEsL,MAAOjE,GAAWnH,SACnD,EACKqL,GAAW,SAACvL,GAChBgL,KACAtG,GAAQ8G,EAAUxL,EAAEsL,OACrB,EACKG,IAAkB3L,EAAAA,EAAAA,QAAO2C,GAEzBiJ,GAAa,CACjBC,KADiB,SACZ3L,GACHwH,KACA4D,GAASpL,EACV,EACD4L,MAAOR,GACPS,OAAQ/H,EAAQsH,GAAWG,GAC3BzC,SAPiB,SAOR9I,GAGP,GAFAqD,GAAiB,GACjBoI,GAAgBvL,QAAUF,EAAEsL,MACxBxH,EAAO,CAET,UAAIS,SAAJ,IAAIA,IAAAA,GAAMuH,SAAS9L,EAAEsL,OAAQ,OAC7BvC,IAAY,GACZqC,GAASpL,EACV,KAAM,CAAC,IAAD,EAED+L,EAAM,iBACRtH,SADQ,IACRA,QADQ,EACRA,GAAMuH,QAAQhM,EAAEsL,MAAO,CAAEW,UAAU,WAD3B,eAERtH,SAFQ,IAERA,QAFQ,EAERA,GAAcqH,QAAQhM,EAAEsL,MAAO,CAAEW,UAAU,EAAMnD,UAAU,IAE7D,GADAD,GAAO3I,QAAU6L,EACbA,EAAQ,OAGZ,UAAItH,SAAJ,IAAIA,IAAAA,GAAMqH,SAAS9L,EAAEsL,OAAQ,OAC7B1G,QAAgB8E,GAChBX,IAAY,GACZwC,GAASvL,EACV,CACF,EACDkM,KAAM,MACNlD,IAEImD,GAAW,SAACnM,GAEhB0I,OAAOE,aAAatB,GAAapH,SAC7B,OAAJqE,SAAI,IAAJA,IAAAA,GAAMrC,IAAIlC,EAAEsL,OACR,OAAJ/G,SAAI,IAAJA,IAAAA,GAAM6H,QACP,EAWKC,GAAe,SAACC,GACpBnD,GAAY7G,SAAQ,SAACZ,GAAD,OAAUA,EAAKzC,UAAUqN,EAAzB,IAChB,OAAJ/H,SAAI,IAAJA,IAAAA,GAAMtF,UAAUqN,GACZ,OAAJ7H,SAAI,IAAJA,IAAAA,GAAMxF,UAAUqN,GACJ,OAAZ3H,SAAY,IAAZA,IAAAA,GAAc1F,UAAUqN,EACzB,EAEKC,GAAa,CACjBZ,KAAMQ,GACNP,MAAOO,GACPN,OAAQ/H,EAAQqI,GApBC,SAACnM,GAClB,GAAKyE,GAAL,CACA,MAAiBzE,EAAEsL,MAAXjK,EAAR,EAAQA,EAAGE,EAAX,EAAWA,EACX,UAAuBkD,GAAKwH,SAA5B,GAASO,EAAT,KAAaC,EAAb,KAAiBC,EAAjB,KACKF,GAAOC,GAAOC,IACnBF,EAAGlB,MAAMjK,EAAIA,EACboL,EAAGnB,MAAQtL,EAAEsL,MACboB,EAAGpB,MAAM/J,EAAIA,EACbkD,GAAKqE,UAAW,EAPC,CAQlB,EAYCA,SAJiB,SAIR9I,GACP,IAAM+L,EAASlD,GAAO3I,QACtB,GAAU,OAAN6L,QAAM,IAANA,GAAAA,EAAQY,SAAWlI,IAAQE,GAAc,CAC3C,IAAMgI,EAAUZ,EAAOY,QAEvB,GADiBA,EAAQ7D,SACX,CAEZ,IAAQ8D,EAAWnI,GAAKxD,OAAhB2L,OACFC,EAAOF,EAAQrB,MAAMwB,SAASF,GAC9BG,EAAO/M,EAAEsL,MAAMwB,SAASF,GAC9BI,GAAUtN,EAAgBqN,EAAKnO,QAC/B,IAAMA,EAAQmO,EAAKnO,MAAQiO,EAAKjO,MAChC6F,GAAKvF,OAAON,EAAOgO,GACnBjI,GAAazF,OAAON,EAAOgO,GAC3BzD,GAAY7G,SAAQ,SAACZ,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMxC,OAAON,EAAOgO,EAA9B,GACrB,KAAM,CAAC,IAAD,EAECK,EAAQN,EAAQrB,MAChB4B,EAAQP,EAAQQ,KAAKA,KAAK7B,MAC1B8B,EAAWH,EAAMH,SAASI,GAE1B7G,EADarG,EAAEsL,MAAMwB,SAASI,GAAO5H,QAAQ8H,GAC1B/L,EAAI+L,EAAS/L,EACtC,GAAIgF,EAAQ,EAAG,OAEf5B,GAAK4B,MAAMA,EAAO6G,GAClB/D,GAAY7G,SAAQ,SAACZ,GACnBA,EAAK2E,MAAMA,EAAO6G,GAClBxL,EAAK2L,aAAehH,CACrB,IACD1B,GAAa0B,MAAMA,EAAO6G,GAC1B,IAAMI,EAAM,UAAG3I,GAAasH,SAAS,UAAzB,aAAG,EAA0BX,MACzC,IAAKgC,EAAQ,OACb3I,GAAa0B,MAAM,IAAM1B,GAAalE,OAAQ6M,EAC/C,CACF,MACCjB,GAAarM,EAAEsM,MAElB,EACDJ,KAAM,MACNlD,KAEFnE,EAAAA,EAAAA,YAAU,WACRZ,EAAM/D,QAAQqN,KAAKC,YAAczJ,CAClC,GAAE,CAACA,IACJ,IAAM0J,IAAS3N,EAAAA,EAAAA,QAAO,IAAIuC,KACpBV,IAAW7B,EAAAA,EAAAA,QAAO,IAAIzB,KAEtBqP,IAAWhK,EAAAA,EAAAA,UAAQ,WACvB,MAAK,mBAAmBiK,KAAK/J,GD5YN,SAC3BQ,EACAb,EACAC,GAEA,IAAMoK,EAAO/O,KAAKyC,KAAKiC,EAAQ,KACzBsK,EAAOhP,KAAKyC,KAAKkC,EAAS,KAC1B/B,EAAOc,MAAMC,KAAK,CAAE/B,OAAQmN,IAAQ,kBACxCrL,MAAMC,KAAK,CAAE/B,OAAQoN,IAAQ,kBAAM,IAAIxL,GAAV,GADW,IAI1C,OADA+B,EAAM9B,SAAQ,SAACZ,GAAD,OAAUF,EAAYC,EAAMC,EAA5B,IACPD,CACR,CCiYYqM,CAAc1J,GAAOb,EAAOC,GADQ,EAE5C,GAAE,CAACY,GAAOb,EAAOC,EAAQI,IAEpBmK,GAAiB,SAAC/N,GACtB,IAAMgO,EAAQ/J,EAAM/D,QAAQoF,QAAQC,OAAO,GAC3C,GAAkB,UAAdyD,IAA0BgF,EAA9B,CACA,IAAMC,EAAKlK,EAELmK,EAAY,CAAEC,MAAOjK,IAAAA,KAAY8D,QAAQ,EAAMoG,UAAWH,EAAK,GAC/DhN,EAAS,IAAI+F,EAAAA,UAAUhH,EAAEsL,MAAMwB,SAASmB,GAAK,IAAItK,EAAAA,KAAKsK,EAAIA,IAEhE9L,EAAauL,GAAUzM,GAAQqB,SAAQ,SAACZ,GAAU,IAAD,EAC3C+L,GAAOvN,QAAQoJ,IAAI5H,EAAK6H,OAC5B,UAAA7H,EAAK2M,WAAWrO,EAAEsL,MAAO4C,UAAzB,SAAqC5L,SAAQ,YAAe,IAAZZ,EAAW,EAAXA,KAC9C,GAAMA,aAAgBwC,IAAAA,KAAtB,CAEA,IADA,IAAIoK,EAA0B5M,EACvB4M,EAAQC,SAAWP,GAClBM,EAAQC,kBAAkBrK,IAAAA,UAChCoK,EAAUA,EAAQC,OAEpB,IAAQhF,EAAS+E,EAAT/E,KAER,GAAItG,EAASuL,YAAa,CACxB,IAAMC,GAAUR,EAAKvM,EAAK2L,aAAe,EACnCqB,EAAS,IAAIC,EAAAA,KAAAA,OAAY,CAC7B/B,OAAQ5M,EAAEsL,MACVmD,OAAAA,EACAG,QAAQ,IAGJC,EAAMnN,EAAKoL,SAAS4B,EAAQ,CAAEI,OAAO,IAC3CpN,EAAK4I,YAAYuE,GACbP,IAAY5M,IACdF,EAAYkM,GAAUmB,EAAKnN,GAC3B4M,EAAUO,GAEZlN,GAASzB,QAAQT,IAAI8J,EAAM+E,EAC5B,MACCA,EAAQpD,QAAU,GAClBoD,EAAQS,OAAQ,EAChBtB,GAAOvN,QAAQgC,IAAIqH,EA1BoB,CA4B1C,GACF,GAtC0C,CAuC5C,EAEKhB,IAAazI,EAAAA,EAAAA,QAAqB,IAClCkP,GAAW,CACfrD,KADe,WAEb,IAAKpH,IAAQA,GAAK0H,SAASxL,QAAU,EAE9B8H,GAAWrI,QAAQO,QAAQ6H,SAFlC,CAKA/D,GAAK0K,WACD5H,GAAWnH,SAASqI,GAAWrI,QAAQmI,KAAK9D,GAAK2K,SACrD,IAAMC,EAAW5K,GAAK6K,aACtBpM,GAAS,SAACqM,GAAD,OAAUlI,EAAAA,GAAAA,UAAoBkI,EAAMF,EAApC,IACT3K,QAAQkF,EALP,CAMF,EACDkC,MAbe,WAgBb,GAFAtD,KACA9D,QAAQkF,GACJzG,EAASuL,YAAa,CACxB,IAAMc,EAAQ/M,MAAMC,KAAKb,GAASzB,SAClCyB,GAASzB,QAAQqP,QACjB,IAAMC,EAAwBF,EAAMG,KAAI,YAAkB,IAAD,eAAftH,EAAe,KAAVzG,EAAU,KACjDgO,EAAQC,EAAUjO,GAExB,OADAgO,EAAMpN,SAAQ,SAACsN,GAAD,OAAQA,EAAErG,KAAO,EAAjB,IACP,CAACpB,EAAKuH,EAAMD,KAAI,SAACG,GAAD,OAAOA,EAAER,YAAT,IACxB,IACD,IAAKI,EAAU/O,OAAQ,OACvBuC,GAAS,SAACqM,GAAD,OAAUlI,EAAAA,GAAAA,aAAuBkI,EAAMG,EAAvC,GACV,KAAM,CACL,IAAMK,EAAatN,MAAMC,KAAKiL,GAAOvN,SAErC,GADAuN,GAAOvN,QAAQqP,SACVM,EAAWpP,OAAQ,OACxBuC,GAAS,SAACqM,GAAD,OAAUlI,EAAAA,GAAAA,aAAuBkI,EAAMQ,EAAvC,GACV,CACF,EACDhE,OAjCe,WAiCL,IAAD,EAEHiE,EADJxH,KAEA,IAAQ5C,EAASzB,EAAM/D,QAAfwF,KACR,GAAI5B,EAAO,CACT,IAAKS,IAAQ1F,KAAKkR,IAAIxL,GAAKyL,MAAQ,IAAO,OAAOxL,QAAQkF,GACzDnF,GAAK0L,YACL1L,GAAK0K,WACA5H,GAAWnH,SAASgQ,EAAS3L,IAClC,IAAM+K,EAAQnN,EAAauL,GAAUnJ,GAAKtD,QAC1C6O,EAAYK,EAAWb,EAAO/K,GAC/B,KAAM,CACL,IAAKE,IAAQ5F,KAAKkR,IAAItL,GAAKuL,MAAQ,IAAO,OAAOtL,QAAQgF,GACzD,IAAM4F,EAAQnN,EAAauL,GAAUjJ,GAAKxD,QAC1C6O,EAAYK,EAAWb,EAAO7K,IAC9B,IAAM2L,EAAO,IAAIzB,EAAAA,KACT0B,EAAc5L,GAAKxD,OAAnBoP,UACRD,EAAKlO,IAAImO,EAAWA,EAAUvD,SAAS,IAAIpK,EAAAA,MAAM,EAAG,OACpD0N,EAAKE,YAAYxH,UAAW,EAC5BlE,GAAgBwL,EACjB,CACDrH,IAAY,GACZG,GAAa4G,GACb,IAAMS,EAAE,iBAAI9L,SAAJ,IAAIA,GAAAA,GAAQF,UAAZ,aAAG,EAAgBtD,OAAOuP,aAClCD,GAAMlN,GAAiB,EAAMqC,EAAK+K,cAAcF,GACjD,EACDzH,SA3De,SA2DN9I,GAEP,GADA0Q,GAAqB1Q,GACH,aAAdgJ,GAAJ,CACA,IACM2H,EADW1M,EAAM/D,QAAfwF,KACgB+K,cAAczQ,EAAEsL,OACxCjI,GAAiB,EAAMsN,GACnBlF,GAAgBvL,QAAQ0Q,OAAO5Q,EAAEsL,QACrCuF,IALoC,CAMrC,EACD3E,KApEe,SAoEVlM,GAAsB,IAAD,EACxB,GAAI2J,GAAUzJ,QAEZ,OADA4Q,KACOC,GAAiB/Q,GAE1B,IAASyH,GAAT,OAAexD,EAAM/D,QAAQoF,QAAQC,OAArC,MACA,GAAKkC,EAAL,CACA,IAAMuJ,EAAC,UAAGC,EAAexJ,EAAIzH,EAAEsL,cAAxB,QAAkC4F,EAAUlR,EAAEsL,OACrD0F,EAAEG,cAAgB,OAClBxH,GAAUzJ,QAAU8Q,EACpBI,GAAalR,QAAU8Q,EAAE5B,aACzBpE,KACA1H,EAAe0N,EAAG3J,GAAWnH,QANd,CAOhB,GACD8I,IAEF,IAA4B7E,EAAAA,EAAAA,UAAS,QAArC,iBAAOkN,GAAP,MAAerE,GAAf,OACAnI,EAAAA,EAAAA,YAAU,WACU,SAAdmE,IAAsC,WAAdA,GAC1BgE,GAAU,aACa,aAAdhE,GACTgE,GAAUlJ,EAAQ,YAAc,eACT,SAAdkF,IAAsC,UAAdA,IACjCgE,GHnhBuB,SAAC/J,EAAoBiD,GAClD,IAAQoL,EAAiCrO,EAAjCqO,UAAWvN,EAAsBd,EAAtBc,YACbwN,EAAOrL,GAAkB,UADUjD,EAATW,KACSG,EAAcuN,GACvD,GAAIC,EAAO,EAAG,MAAO,YACrB,IAAMC,EAAOD,EAAO,EACpB,MAAM,+FAAN,OAAqGA,EAArG,qBAAsHA,EAAtH,wEAAyLC,EAAzL,YAAiMA,EAAjM,SACD,CG6gBiBC,CAAgBxO,EAAUiD,IAEvC,GAAE,CAAC8C,GAAWlF,EAAOb,EAAUiD,KAEhC,IAAMwK,GAAuB,SAAC1Q,GAAyB,IAAD,IAC9C+L,EAAM,iBACVtH,SADU,IACVA,QADU,EACVA,GAAMuH,QAAQhM,EAAEsL,MAAO,CAAEW,UAAU,WADzB,eAEVtH,SAFU,IAEVA,QAFU,EAEVA,GAAcqH,QAAQhM,EAAEsL,MAAO,CAAEW,UAAU,EAAMnD,UAAU,IAC7D,UAAIiD,QAAJ,IAAIA,GAAAA,EAAQY,QAAS,CACnB,GAAIZ,EAAOY,QAAQ7D,SAAU,CAC3B,IAAM8D,EAAM,OAAGnI,SAAH,IAAGA,QAAH,EAAGA,GAAMxD,OAAO2L,OAC5B,IAAKA,EAAQ,OACb,IAAMG,EAAOhB,EAAOY,QAAQrB,MAAMwB,SAASF,GAC3C,OAAOI,GAAUtN,EAAgBqN,EAAKnO,OACvC,CACD,IAAMqO,EAAQlB,EAAOY,QAAQrB,MACvB4B,EAAQnB,EAAOY,QAAQQ,KAAKA,KAAK7B,MACjC8B,EAAWH,EAAMH,SAASI,GACxB7L,EAAS+L,EAAT/L,EAAGE,EAAM6L,EAAN7L,EACX,OAAOyL,GAAU3L,EAAIE,EAAI,EAAI,cAAgB,cAC9C,CACD,oBAAKkD,SAAL,IAAKA,GAAAA,GAAQF,UAAb,OAAI,EAAgBuH,SAAS9L,EAAEsL,OAAQ,OAAO0B,GAAU,WACxDA,GAAU,YACX,EACK+D,GAAmB,SAAC/Q,GACxB,GAAI2J,GAAUzJ,QAAS,OAAO8M,GAAU,QACxC,IAAMgB,EAAQ/J,EAAM/D,QAAQoF,QAAQC,OAAO,GACtCyI,IACDiD,EAAejD,EAAOhO,EAAEsL,OAAQ0B,GAAU,QACzCA,GAAU,aAChB,EAEK0E,IAAa,QACjB5I,SAAU4H,GACVxE,KAAM6E,IACH,CAAElF,OAAQ,KAAMF,KAAM,KAAMC,MAAO,OACtC5C,IAEI2I,GAAgB,SAAC3R,GACrB,GAAkB,aAAdgJ,GAAJ,CACA,IAAMsD,EAAQ,CACZsF,GAAI,IAAIlP,EAAAA,MAAM,GAAI,IAClBmP,KAAM,IAAInP,EAAAA,MAAM,EAAG,IACnBoP,KAAM,IAAIpP,EAAAA,OAAO,GAAI,GACrBqP,MAAO,IAAIrP,EAAAA,MAAM,GAAI,IACrB1C,EAAEgS,KACC1F,IACLtM,EAAEiS,iBACF3F,GAASD,GAAaC,GACtBjJ,GAAiB,GAVmB,CAWrC,EAEK6O,IAAc,QAClBpJ,SADkB,SACT9I,GACH,uBAAuB2N,KAAK3N,EAAEgS,MAAMG,KACpC,yBAAyBxE,KAAK3N,EAAEgS,MAAMnB,KAC5B,WAAV7Q,EAAEgS,KAAkBxI,IACzB,EACD0C,KANkB,SAMblM,GACW,WAAVA,EAAEgS,KAAkBlB,IACzB,GACE,CAAEjF,OAAQ,KAAMF,KAAM,KAAMC,MAAO,OACtC5C,KAEFnE,EAAAA,EAAAA,YAAU,WACR,IAAI1B,EAAJ,CAGA,IAAMqC,EAAW,SAAK4M,GACpB,OAAO,SAACpS,GAEN,GADAiE,EAAM/D,QAAQsF,WACV4M,EAAS,OAAOA,EAAQpS,EAC7B,CACF,EACD,EAAuBiE,EAAM/D,QAArBwF,EAAR,EAAQA,KAAM6H,EAAd,EAAcA,KACd7H,EAAK2M,YAAc7M,EAASkG,IAC5BhG,EAAK4M,YAAc9M,EAAS+G,IAC5B7G,EAAK6M,UAAY/M,EAASwJ,IAC1BtJ,EAAK8M,YAAchN,EAASkM,IAC5BnE,EAAK+E,YAAc9M,EAASuI,IAC5BR,EAAKkF,UAAYjN,EAASmM,IAC1BpE,EAAKmF,QAAUlN,EAAS0M,GAhBJ,CAiBrB,IAED,IAAMrB,GAAiB,WACrB,GAAI,OAAC1H,SAAD,IAACA,IAAAA,GAAa1I,OAAlB,CACA,IAAMkS,EAAwBxJ,GAAYsG,KAAI,SAACG,GAC7C,IAAQrG,EAASqG,EAATrG,KAER,OADAqG,EAAErG,KAAO,GACF,CAACA,EAAMqG,EAAER,aACjB,IACDpM,GAAS,SAACqM,GAAD,OAAUlI,EAAAA,GAAAA,cAAwBkI,EAAMsD,EAAxC,GANuB,CAOjC,EAEKR,GAAiB,WACrB3I,KACKP,GAAUxI,QACfuC,GAAS,SAACqM,GAAD,OAAUlI,EAAAA,GAAAA,aAAuBkI,EAAMpG,GAAvC,GACV,EAEK2J,GAAc,SAACC,GACnB5O,EAAM/D,QAAQsF,WACdsN,EAAiB3J,GAAa0J,GAC9BhC,IACD,EAEKkC,GAAoB,WAAO,IAAD,EAC9B9O,EAAM/D,QAAQsF,WACd,IAAM+L,EAAI,UAAI9M,IAAQF,UAAZ,aAAG,EAAgBtD,OAAOsQ,KACpC,GAAKA,GAASpI,GAAY1I,OAA1B,CACA,IAAQ8C,EAAkBgO,EAAlBhO,MAAOC,EAAW+N,EAAX/N,OACTwP,EAAS,IAAItQ,EAAAA,MAAMa,EAAOC,GAAQyP,OAAO,IACzCC,EAAS/J,GAAYsG,KAAI,SAAC/N,GAAD,OAAUA,EAAKwN,OAAf,IAC/BgE,EAAO5Q,SAAQ,SAACZ,GAAD,OAAUA,EAAKzC,UAAU+T,EAAzB,IACX,OAAJvO,SAAI,IAAJA,IAAAA,GAAMxF,UAAU+T,GACZ,OAAJzO,SAAI,IAAJA,IAAAA,GAAMtF,UAAU+T,GACJ,OAAZrO,SAAY,IAAZA,IAAAA,GAAc1F,UAAU+T,GAExBE,EAAO5Q,SAAQ,SAACsN,GAAD,OAAQA,EAAErG,KAAO,EAAjB,IACf,IAAM4J,EAAeD,EAAOzD,KAAI,SAAC/N,GAAD,OAAUA,EAAK0N,YAAf,IAC1BgE,EAAgB,GACtBpQ,GAAS,SAACqM,GAAD,OAAUlI,EAAAA,GAAAA,WAAqBkI,EAAM8D,EAAcC,EAAnD,IACTlK,GAAakK,GACb/P,GAAiB,EAduB,CAezC,EAEKgQ,GAAoB,WAAO,IAAD,MAC9BpP,EAAM/D,QAAQsF,WACd,IAAMwE,EAAI,iBAAIvF,SAAJ,IAAIA,GAAAA,GAAQF,UAAZ,aAAG,EAAgB2K,QAG7B,OAFAlF,GAAQD,GAAeC,GAAM,GAC7Ba,KACA,oBAAOf,GAAY5J,eAAnB,aAAO,EAAqBZ,mBAA5B,QAA2C,EAC5C,EAEKqK,IAAY7J,EAAAA,EAAAA,UACZsR,IAAetR,EAAAA,EAAAA,QAAO,IACtBwT,IAAa7J,EAAAA,EAAAA,cAAY,WAAO,IAAD,EAEL,GAD9BnB,KACI,UAACqB,GAAUzJ,eAAX,OAAC,EAAmBqJ,QACtB,UAAAI,GAAUzJ,eAAV,SAAmByF,UAErBgE,GAAUzJ,aAAUwJ,EACpBpG,OAAeoG,EAAWrC,GAAWnH,QACtC,GAAE,CAACoD,IAEEwN,IAAarH,EAAAA,EAAAA,cAAY,WAC7B,IAAMuH,EAAIrH,GAAUzJ,QACpB,GAAK8Q,IACLsC,KACItC,EAAE5B,eAAiBgC,GAAalR,SAApC,CACA,IAAQqT,EAAkBvC,EAAlBuC,QAAShK,EAASyH,EAATzH,KACjB,IAAKgK,EAAS,CACZ,GAAIhK,EAAM,OACV,OAAOvG,GAAS,SAACqM,GAAD,OAAUlI,EAAAA,GAAAA,aAAuBkI,EAAM,CAAC9F,GAAxC,GACjB,CACDyH,EAAEzH,KAAO,GACT,IAAM4F,EAAW6B,EAAE5B,aAIjBpM,EAHGuG,EAGM,SAAC8F,GAAD,OAAUlI,EAAAA,GAAAA,cAAwBkI,EAAM,CAAC,CAAC9F,EAAM4F,IAAhD,EAFA,SAACE,GAAD,OAAUlI,EAAAA,GAAAA,UAAoBkI,EAAMF,EAApC,EATwC,CAapD,GAAE,CAACmE,GAAYtQ,IACVwQ,GAAkB,SAACC,GACvB,IAAMC,EAAK/J,GAAUzJ,QAChBwT,IACLzP,EAAM/D,QAAQsF,WACdiO,EAAGC,GACHpQ,EAAe,IAAIuG,MAAM6J,EAAI,CAAC,GAAIrM,GAAWnH,SAC9C,GAED2E,EAAAA,EAAAA,YAAU,WACR,GAAa,SAATjB,EAAiB,OAAOkN,EAC7B,GAAE,CAAClN,EAAMkN,MAEV6C,EAAAA,EAAAA,qBAAoB9Q,GAAK,iBAAO,CAC9BsP,eAAAA,GACAY,kBAAAA,GACAM,kBAAAA,GACAT,YAAAA,GACAY,gBAAAA,GALuB,KFlqB3B3O,EAAAA,EAAAA,YAAU,WACR,IAAMuN,EAAU,SAACpS,GAAD,OAAcA,EAAEiS,gBAAhB,EAIhB,OAHA2B,SAASC,iBAAiB,eAAgBzB,GAC1CwB,SAASC,iBAAiB,gBAAiBzB,GAC3CwB,SAASC,iBAAiB,aAAczB,GACjC,WACLwB,SAASE,oBAAoB,eAAgB1B,GAC7CwB,SAASE,oBAAoB,gBAAiB1B,GAC9CwB,SAASE,oBAAoB,aAAc1B,EAC5C,CACF,GAAE,KEiqBD2B,EAAAA,EAAAA,WACE,YAAqD,IAAlDC,EAAiD,EAAjDA,KAAe3N,GAAkC,SAA3C4N,OAA2C,MAA1BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACrCnQ,EAAM/D,QAAQsF,WACd,IAGI6O,EACAC,EAAYC,EAJR7O,EAASzB,EAAM/D,QAAfwF,KACF8O,EAAa,IAAItQ,IAAAA,OAAYkQ,GAInC,GAAIF,IAAUF,EAAM,CAClB,MAAiBtO,EAAKuF,QAAQwJ,wBAAtBpT,EAAR,EAAQA,EAAGE,EAAX,EAAWA,EACX8S,EAAY,EACZE,EAAQ,IAAI7R,EAAAA,MAAMrB,EAAGE,GACrB+S,EAAaE,EAAW1H,SAASyH,GACjClR,GAAiB,GACjBiQ,KACAvJ,GAAe,IAAI4E,EAAAA,KAAAA,UAAelM,EAAQgB,IAC1C6E,IACD,KAAM,CAAC,IAAD,UAC4B0L,EAD5B,GACJK,EADI,KACOC,EADP,KACmBC,EADnB,IAEN,CAED,IAAMG,EAAcF,EAAW1H,SAASyH,GAClCI,EAAcjP,EAAKkP,cAAcF,GAGjC1B,EADS0B,EAAY5H,SAASwH,GACdrB,OAAOvN,EAAKmP,MAClCnP,EAAKzG,UAAU+T,GAEf,IAAI8B,EAASZ,EAAQ,EAAI7N,EAAQgO,EAIjC,GAHApQ,EAAM/D,QAAQ+E,SAASE,cAAgB2P,EACvCpP,EAAKW,MAAMyO,EAAQH,IAEfR,EAOF,MAAO,CAAC9N,EAAOqO,EAAaH,GAN5BQ,QAAQC,IAAI,CACVC,EAAcvP,EAAMjC,GACpByR,EAAUxP,EAAMiP,EAAaG,KAC5BK,KAAKtK,IACRnF,EAAKW,MAAM,EAAIyO,EAAQH,EAI1B,GACD,CACES,YAAa,CAAEC,IAAK,EAAGC,IAAK,GAC5BC,WAAY,GACZC,OAAQxR,IAIZ,IAAMyR,GAAe9V,EAAgBkE,GACrC,OACE,gCACE6R,UAAU,eACVC,MAAO,CAAEtE,OAAAA,IACT,gBAAelO,GACXsS,IAJN,cAME,mBAAQ5S,IAAKmB,EAAU0R,UAAU,kBAGtC,IAGH/S,EAAQiT,YAAc,OACf,IAAMC,EAAOjT,EAAAA,KAAWD,GAE/B,SAAS2B,IACP,IAAMwR,GAAQ3R,EAAAA,EAAAA,YACPzC,GAAP,OAAeoU,EAAf,MAGA,OAFAC,EAAAA,EAAAA,eAAcrU,IACdmD,EAAAA,EAAAA,YAAU,kBAAM,WAAM,OAAKnD,QAAL,IAAKA,GAAAA,EAAMiE,QAAjB,CAAN,GAAiC,CAACjE,IACrCoU,CACR,CAED,IAAM1N,EAAe,WACnB,IAAM4N,EAAW,IAAIC,QAKrB,OAAO,SAACjO,EAAgBgG,GAA0C,IAAD,EAArB7K,EAAqB,wDACvDgM,EAAkBnH,EAAlBmH,SAAUhH,EAAQH,EAARG,IACZ/J,EAAK,UAAG4X,EAAShX,IAAIgP,UAAhB,QAA0B,IAAI3P,IACzC2X,EAASvW,IAAIuO,EAAO5P,GACpB,IACIsD,EADE3C,EAASX,EAAMY,IAAImJ,GAEzB,IAAU,OAANpJ,QAAM,IAANA,OAAA,EAAAA,EAAQiJ,UAAWA,EACrBgG,EAAMpH,SAAS7H,EAAO2C,MACtBA,EAAO3C,EAAO2C,SACT,CAAC,IAAD,EACL,IACEA,EAAOsM,EAAMkI,WAAW/G,EAGzB,CAFC,MAAOnP,GACPmW,QAAQC,MAAMpW,EACf,CACG,QAAJ,EAAA0B,SAAA,QAAAA,EAAS,IAAIwC,IAAAA,OACbxC,EAAK6H,KAAOpB,EACZ/J,EAAMqB,IAAI0I,EAAK,CAAEzG,KAAAA,EAAMsG,OAAAA,GACxB,CAGD,OAFAtG,EAAKwJ,QAAU,EACfxJ,EAAKqN,MAAQ5L,EACNzB,CACR,CACF,CA7BoB,GA+BfoE,EAAa,SAACP,EAAuB9B,GACzC,cAAqB8B,EAArB,GAAO2E,EAAP,KAAWzC,EAAX,KAAe4O,EAAf,KACA,IAAKnM,IAAOzC,IAAO4O,EAAI,MAAO,GAC9B,IAAMC,EAAS,IAAI3H,EAAAA,KAAAA,UAAelM,EAAQgB,GACpC8S,EAAQD,EAAOpH,QACfsH,EAAQF,EAAOpH,QAOrB,OANAoH,EAAOG,UAAY,IAAIC,EAAAA,MAAM,QAC7BxM,EAAGtD,SAAS0P,GACZ7O,EAAGb,SAAS2P,GACZF,EAAGzP,SAAS4P,GACZ/O,EAAGkP,SAAU,EACbN,EAAGM,SAAU,EACN,CAACL,EAAQC,EAAOC,EACxB,EAEKhL,EAAY,SAACF,GACjB,IAAM7G,EAAO,IAAIkK,EAAAA,KAAAA,UAAerD,EAAO,IAAI3H,EAAAA,KAAK,EAAG,IAEnD,OADAc,EAAKmS,QAAU,WAAQ,EAChBnS,CACR,EAEK4G,EAAc,SAACpI,EAAoBqI,GAAsC,IAAlBuL,EAAiB,wDACtEjT,EAAmDX,EAAnDW,KAAM0N,EAA6CrO,EAA7CqO,UAAWvN,EAAkCd,EAAlCc,YAAa+S,EAAqB7T,EAArB6T,MAAOC,EAAc9T,EAAd8T,UACrCxS,EAAO,IAAIoK,EAAAA,KACjBpK,EAAKrC,IAAIoJ,GACI,UAAT1H,IACFkT,EAAQ,OACRxF,EAAYvN,GAED,WAATH,IACFkT,EAAQ,UACRxF,EAAY,GAEd,IAAM0F,EAAc,IAAIN,EAAAA,MAAMI,GAU9B,OATc,SAATlT,GAAmBmT,GAAwB,UAATnT,IAAqBiT,KAC1DG,EAAYC,MAAQ,GACpB1S,EAAK2S,UAAY,YAEnB3S,EAAKyS,YAAcA,EACnBzS,EAAK8I,YAAciE,EACnB/M,EAAK4S,WAAa,QAClB5S,EAAK6S,UAAY,QACjB7S,EAAKwK,OAAQ,EACNxK,CACR,EAEK2L,EAAW,SAACxO,GAChBA,EAAK2V,WAAa,EAClB3V,EAAK4V,UAAY,CAAC,GAAI,IACtB5V,EAAKkV,QAAU,kBAAOlV,EAAK2V,YAAc,CAA1B,CAChB,EAEKnC,EAAY,SAChBxP,EACAiP,EACAG,GAHgB,OAKhB,IAAIC,SAAc,SAACwC,GACjB,GAAI1Y,KAAKkR,IAAI+E,EAAS,GAAK,IAEzB,OADApP,EAAKW,MAAMyO,EAAQH,GACZ4C,IAET,IAAIC,EAAW,GACf1C,EAASjW,KAAK4Y,IAAI3C,EAAQ,EAAI0C,IAChB,SAARnR,IACJX,EAAKW,MAAMyO,EAAQH,KACb6C,EAAW,EAAGE,sBAAsBrR,GACrCqR,uBAAsB,kBAAMH,GAAN,GAC5B,CACDlR,EACD,GAlBe,EA+BZ4O,EAAgB,SAACvP,EAAkBjC,GAAnB,OACpB,IAAIsR,SAAc,SAACwC,GACjB,IAAMI,EAbc,SAACjS,EAAkBjC,GACzC,MAAiBiC,EAAKkH,OAAdvL,EAAR,EAAQA,EAAGE,EAAX,EAAWA,EACLqW,EAAUjU,EAAAA,KAAAA,IAAS+B,EAAK6L,KAAM9N,GAAUwP,OAAO,GACtC4E,EAAuBD,EAA9BrU,MAAqBuU,EAASF,EAAjBpU,OACrB,EAAsCC,EAASqJ,SAAS8K,GAAzCG,EAAf,EAAQxU,MAAqByU,EAA7B,EAAqBxU,OAEfyU,EAAU5W,EAAIwW,EAAOA,EAAOxW,EAAI0W,EAAOA,EAAO1W,EAC9C6W,EAAU3W,EAAIuW,EAAOA,EAAOvW,EAAIyW,EAAOA,EAAOzW,EACpD,OAAO,IAAImB,EAAAA,MAAMuV,EAASC,EAC3B,CAIwBC,CAAgBzS,EAAMjC,GAC3C,GAAIiC,EAAKkH,OAAOgE,OAAO+G,GAAe,OAAOJ,IAC7C,IAAIC,EAAW,GAOfE,uBANa,SAAPU,IACJ,IAAM9L,EAAQ5G,EAAKkH,OAAOE,SAAS6K,GACnCjS,EAAKzG,UAAUqN,EAAM2G,OAAOuE,MACtBA,EAAW,EAAGE,sBAAsBU,GACrCV,uBAAsB,kBAAMH,GAAN,GAC5B,GAEF,GAZmB,EAchBpH,EAAa,SAACb,EAAqBQ,GACvC,IAAMuI,EAAW,SAACzI,GAChB,QAAkC,IAA9BE,EAAU7D,SAASxL,SAAgBmP,EAAEyI,SAASvI,EAAU7O,WAGpD2O,EAAE9C,SAASgD,EAAW,CAAElB,QAAQ,EAAOE,OAAO,IAASwJ,QAAQ1I,EACxE,EACD,OAAON,EACJjG,QAAO,SAAC3H,GACP,IAAKA,EAAK6H,KAAM,OAAO,EACvB,IAAK7H,EAAKT,OAAOsX,WAAWzI,EAAU7O,QAAS,OAAO,EACtD,GAAIS,aAAgBwC,IAAAA,KAClB,OAAOmU,EAAS3W,GAEhB,IAAM8W,EAAW,IAAI7J,EAAAA,KAAAA,UAAejN,EAAKT,QAEzC,OADAuX,EAAS7S,SACF0S,EAASG,IAAa1I,EAAUuI,SAAS3W,EAAKT,OAExD,IACAwO,KAAI,qBAAGlG,IAAH,GACR,EAEKuJ,EAAmB,SAACxD,EAAqBuD,GAC7C,IAAQvB,EAAgCuB,EAAhCvB,UAAWwF,EAAqBjE,EAArBiE,MAAOC,EAAclE,EAAdkE,UAC1BzH,EAAMhN,SAAQ,SAACZ,GACb,GAAIA,aAAgBwC,IAAAA,WAAmB4S,EAAO,CAC5C,IAAM2B,EAAW,IAAI/B,EAAAA,MAAMI,GAC3BpV,EAAK+U,UAAYgC,CAClB,CAED,GAAM/W,aAAgBwC,IAAAA,KAAtB,CAEA,GAAI4S,EAAO,CACT,IAAM2B,EAAW,IAAI/B,EAAAA,MAAMI,GACJ,aAAnBpV,EAAKwV,YAA0BuB,EAASxB,MAAQ,IACpDvV,EAAKsV,YAAcyB,CACpB,CAEGnH,IAAW5P,EAAK2L,YAAciE,GAE7B5P,EAAKsV,kBAA6BtN,IAAdqN,IACzBrV,EAAKsV,YAAYC,MAAQF,EAAY,GAAM,EAC3CrV,EAAKwV,UAAYH,EAAY,WAAa,SAZD,CAa1C,GACF,EAEK9F,EAAiB,SAACjD,EAAoB1C,GAC1C,IAAMS,EAASiC,EAAMhC,QAAQV,EAAO,CAAE6C,MAAOjK,IAAAA,UAAiBwU,MAAM,IACpE,IAAU,OAAN3M,QAAM,IAANA,OAAA,EAAAA,EAAQrK,gBAAgBwC,IAAAA,UAAiB,cAAO6H,QAAP,IAAOA,OAAP,EAAOA,EAAQrK,IAC7D,EAEKwP,EAAY,SAAC5F,GACjB,OAAO,IAAIpH,IAAAA,WAAgB,CACzBoH,MAAOA,EAAMpJ,IAAI,IAAIQ,EAAAA,MAAM,EAAG,KAC9B6Q,QAAS,GACToF,SAAU,IAEb,EAEKhJ,EAAY,SAAZA,EAAaiJ,GACjB,OAAIA,aAAc1U,IAAAA,KACT0U,EAAGC,UAAY,GAAK,CAACD,GAE1BA,aAAc1U,IAAAA,aACT0U,EAAGE,SAASrJ,IAAIE,GAAWoJ,OAE7B,EACR,E,0JCx8BKC,GAAwB,CAC5BC,KAAM,OACNC,MAAO,QACP3H,KAAM,SAGF4H,GAAa,SAAC9X,EAAWE,GAC7B,MAAO,CAAE,UAAWF,EAAI,KAAM,UAAWE,EAAI,KAC9C,EACK6X,GAAa,SAACC,EAAsCC,GACxD,IAAMC,EAA0C,CAAC,EAKjD,OAJAC,OAAOC,QAAQJ,GAAK/W,SAAQ,YAAmB,IAAD,eAAhB0P,EAAgB,KAAX0H,EAAW,KACxCJ,IAAMI,GAASJ,GACnBC,EAAO,KAAOvH,GAAO0H,CACtB,IACMH,CACR,EAEYI,GAIR,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,QAASvU,EAA0B,EAA1BA,QAASsL,EAAiB,EAAjBA,WACxB,GAAwCxM,EAAAA,EAAAA,UAA4B,CAAC,GAArE,eAAO0V,EAAP,KAAqBC,EAArB,KAeQzY,EAASsP,EAATtP,EAAGE,EAAMoP,EAANpP,EACX,OACE,iBACEmU,UAAU,2BACV,eAAcrQ,EACdsQ,MAAOwD,GAAW9X,EAAGE,GAHvB,WAKE,SAAC,IAAD,CACEwY,QAAQ,QACRC,UAAU,SACVC,iBAAiB,YACjBC,kBAAmB,SAACla,GAAD,OAAOA,EAAEma,aAAT,EACnBC,sBAAoB,EACpB7G,SACE,SAAC8G,EAAA,GAAD,CACEC,eAAgB,SAACzH,GAAa,IAAD,EAC3BiH,GAAgB,SAACzK,GAAD,eAAC,UAAeA,GAASwD,EAAzB,IAChB,UAAA+G,EAAQ1Z,eAAR,SAAiB0S,YAAYC,EAC9B,EACD5P,SAAU4W,IAZhB,UAgBE,SAAC,KAAD,QAAQU,MAAM,SAACC,EAAA,EAAD,KAA0BxB,QAE1C,SAAC,KAAD,QACEuB,MAAM,SAACE,EAAA,EAAD,IACNC,QAAS,kCAAMd,EAAQ1Z,eAAd,aAAM,EAAiB6S,mBAAvB,GACLiG,MAEN,SAAC,KAAD,QAAQuB,MAAM,SAACI,EAAA,EAAD,IAAqBD,QA3CrB,WAChB,GAAKd,EAAQ1Z,QAAb,CACA,IAAM0a,EAAYhB,EAAQ1Z,QAAQmT,oBAClCwH,EAAAA,EAAAA,QAAc,CACZC,MAAO,aACPvH,SAAS,gBAAKmC,UAAU,SAAS/W,IAAKic,EAAWG,IAAI,WACrDrF,UAAW,eACX6E,MAAM,SAACS,EAAA,EAAD,IACNC,OAAQ,OACRC,KAAM,kBAAMC,EAAAA,GAAAA,QAAOP,EAAWhH,SAASkH,MAAMM,MAAM,OAAO,GAAK,OAAzD,GARoB,CAU7B,GAgC8DpC,MAC3D,SAAC,KAAD,QACEqC,QAAM,EACNd,MAAM,SAACe,EAAA,EAAD,IACNZ,QAAS,kCAAMd,EAAQ1Z,eAAd,aAAM,EAAiBiS,gBAAvB,GACL6G,OAIX,EAEYuC,GAIR,SAAC,GAAwC,IAAD,MAArC5R,EAAqC,EAArCA,UAAWiQ,EAA0B,EAA1BA,QAASvS,EAAiB,EAAjBA,WAClB3B,EACNiE,EADMjE,KAAM8V,EACZ7R,EADY6R,SAAU7C,EACtBhP,EADsBgP,SAAU8C,EAChC9R,EADgC8R,WAAYC,EAC5C/R,EAD4C+R,QAASnI,EACrD5J,EADqD4J,QAASoI,EAC9DhS,EAD8DgS,SAEhE,EAAiBjW,EAAK+K,cAAc+K,GAA5Bna,EAAR,EAAQA,EAAGE,EAAX,EAAWA,EACX,EAAgCoI,EAAU1I,OAAlCC,EAAR,EAAQA,QAAS0a,EAAjB,EAAiBA,WACjB,EAAyBlW,EAAK+K,cAAcvP,GAAjC2a,EAAX,EAAQxa,EAAUya,EAAlB,EAAeva,EACf,EAA2BmE,EAAK+K,cAAcmL,GAAnCG,EAAX,EAAQ1a,EAAW2a,EAAnB,EAAgBza,EACV0a,EAAiBH,EAAK,GAEtBzV,EAAQsD,EAAUuS,WAAWC,QAAQ9a,EAC3C,EAA0BsI,EAAUyS,eAA5B7Y,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAET6Y,EAAU,WAAIX,GAAW/C,SAAf,QAA2B,IAErC7B,EAAK,oBAAGnN,EAAU8M,iBAAb,aAAG,EAAqB6F,OAAM,UAA9B,QAAuCC,EAAAA,GAAAA,GAC5CC,GACJ,SAAC,IAAD,CACEjJ,SACE,SAAC,KAAD,CACEuD,MAAOA,EACP2F,SAAU,SAACjU,GAAD,uBACRoR,EAAQ1Z,eADA,aACR,EAAiBsT,iBAAgB,SAACnE,GAChCA,EAAKoH,UAAY,IAAIC,EAAAA,MAAMlO,EAC5B,GAHO,IAOduR,QAAQ,QACR2C,aAAc,CAAEnZ,MAAO,KACvByW,UAAU,SACVE,kBAAmB,SAACla,GAAD,OAAOA,EAAEma,aAAT,EAdrB,UAgBE,SAAC,KAAD,kBAAYnB,IAAZ,IAAsBuB,MAAM,SAACC,EAAA,EAAD,SAIhC,OACE,iBACE9E,UAAU,YACVC,OAAK,kCACAyD,GAAW,CAAE/S,MAAAA,EAAOyQ,MAAAA,KACpBsC,GAAW,CAAEuC,SAAAA,GAAY,QACzBvC,GAAW,CAAE7V,MAAAA,EAAOC,OAAAA,GAAU,OAC9B2V,GAAW9X,EAAGE,IANrB,WASE,gBACEmU,UAAU,mBACV,YAAWrO,EACXsO,MAAO,CAAEgD,SAAAA,EAAU8C,WAAAA,EAAYY,WAAAA,GAHjC,UAKE,qBACEM,WAAYpJ,EACZqJ,YAAY,UACZlD,MAAOnG,EACPvQ,SAAU,SAAChD,GAAO,IAAD,EACf,UAAA4Z,EAAQ1Z,eAAR,SAAiBsT,iBAAgB,SAACnE,GAChCA,EAAKkE,QAAUvT,EAAEwV,OAAOkE,KACzB,GACF,OAGL,iBACEhE,UAAU,4BACV,cAAauG,EACbtG,OAAK,UACCsG,EAAiB9C,GAAW4C,EAAKC,GAAO7C,GAAW0C,EAAIC,IAJ/D,UAOGU,GACD,SAAC,KAAD,gBACE9B,QAAS,WAAO,IAAD,EACb,UAAAd,EAAQ1Z,eAAR,SAAiBsT,iBAAgB,SAACnE,GAChC,IAAMwN,EAA2B,SAApBxN,EAAKoM,WAClBpM,EAAKoM,WAAaoB,EAAO,SAAW,MACrC,GACF,GACG7D,IAPN,IAQEC,KAAqB,SAAfwC,EAAwB,OAAS,OACvClB,MAAM,SAACuC,EAAA,EAAD,QAER,SAAC,KAAD,kBACM9D,IADN,IAEEuB,MAAM,SAACwC,EAAAC,EAAD,IACNtC,QAAS,WAAO,IAAD,EACb,UAAAd,EAAQ1Z,eAAR,SAAiBsT,iBAAgB,SAACnE,GAChC,IAAQnO,EAAYmO,EAAKpO,OAAjBC,QACRmO,EAAKhJ,MAAM,GAAKnF,EACjB,GACF,MAEH,SAAC,KAAD,kBACM8X,IADN,IAEEuB,MAAM,SAAC0C,EAAAD,EAAD,IACNtC,QAAS,WAAO,IAAD,EACb,UAAAd,EAAQ1Z,eAAR,SAAiBsT,iBAAgB,SAACnE,GAChC,IAAQnO,EAAYmO,EAAKpO,OAAjBC,QACRmO,EAAKhJ,MAAM,IAAKnF,EACjB,GACF,UAKV,E,kCC7LKgc,GAYD,SAAC,GAYC,IAXLC,EAWI,EAXJA,UACAra,EAUI,EAVJA,UACAsa,EASI,EATJA,aACAC,EAQI,EARJA,YACAC,EAOI,EAPJA,SAOI,IANJC,OAAAA,OAMI,MANK,GAML,MALJC,QAAAA,OAKI,SAJJC,EAII,EAJJA,aAII,IAHJC,QAAAA,OAGI,aAFJC,QAAAA,OAEI,OAFMtb,EAAAA,GAAAA,MAEN,MADJub,WAAAA,OACI,SACEC,EAAYJ,IAAgBK,EAAAA,GAAAA,OAAM,EAAG,IAAK,IAChD,GAA8BC,EAAAA,GAAAA,IAAU,CAAEF,UAAAA,EAAWG,KAAMJ,IAA3D,eAAO/a,EAAP,KAAYwC,EAAZ,KAAqB4Y,EAArB,MACApZ,EAAAA,EAAAA,YAAU,WACR,GAAK4Y,EACL,OAAKQ,GAAU5Y,OACfoY,EAAaQ,EAAMC,mBADYT,EAAa,EAE7C,GAAE,CAACpY,EAAS4Y,EAAOR,IAEpB,OAA8BtZ,EAAAA,EAAAA,YAA9B,eAAOga,EAAP,KAAgBC,EAAhB,KAEMC,GAAY5U,EAAAA,EAAAA,cAChB6U,EAAAA,GAAAA,OAAI,iBAAC,yFACEhB,GAAaC,EADf,iEAEgC,uDAFhC,uBAEKgB,EAFL,EAEKA,iBAFL,KAGHH,EAHG,SAGcG,EAAiBhB,EAAQD,GAHvC,+EAKL,CAACA,EAAUC,IAGPiB,EAAOnZ,GAAWqY,GACxB7Y,EAAAA,EAAAA,YAAU,YACH2Y,GAAWgB,GAAMH,GACvB,GAAE,CAACG,EAAMhB,EAASa,IAEnB,IAAMtb,GAAcW,EAAAA,EAAAA,UAClB,yBAAM0Z,QAAN,IAAMA,OAAN,EAAMA,EAAcqB,UAAUd,GAASe,SAASC,SAAhD,GACA,CAACvB,EAAcO,IAGXiB,EAAcC,QAAQV,IAAYb,GAClCwB,EAAWN,GAAQI,EAGnB1Y,EADoBpD,EAAlBU,OAAkBV,EAAVS,MAGhB,OACE,iBAAKV,IAAKA,EAAK6S,UAAU,eAAzB,WACE,gBAAKA,UAAU,cAAcqJ,QAAO,kBAAqB,IAAR7Y,KAChD4Y,IACC,SAACE,GAAD,CACElc,UAAWA,EACXC,YAAaA,EACbsa,YAAaA,EACbja,OAAQ+a,GAAWhB,EACnBK,QAASA,MAKlB,EACDN,GAAetH,YAAc,cACtB,IAEDoJ,GAMD,SAAC,GAAsE,IAApElc,EAAmE,EAAnEA,UAAWua,EAAwD,EAAxDA,YAAata,EAA2C,EAA3CA,YAA2C,IAA9Bya,QAAAA,OAA8B,SAAbpa,EAAa,EAAbA,OACtDH,GAAWgc,EAAAA,EAAAA,MACXrF,GAAU9Z,EAAAA,EAAAA,QAAoB,MACpC,GAAoCqE,EAAAA,EAAAA,WAAS,GAA7C,eAAO+a,EAAP,KAAmBC,EAAnB,KACA,GAAoChb,EAAAA,EAAAA,UAAsB1B,GAA1D,eAAOkO,EAAP,KAAmByO,EAAnB,KACA,GAAkCjb,EAAAA,EAAAA,YAAlC,eAAOwF,EAAP,KAAkB0V,EAAlB,KACA,GAAoClb,EAAAA,EAAAA,WAAS,GAA7C,eAAOkD,EAAP,KAAmBiY,EAAnB,KAEMC,GAAeC,EAAAA,EAAAA,IACnB,SAACC,GACC,GAAKpC,EAAL,CACA,IAAMqC,EAAQD,aAAetY,EAAAA,GAAYsY,EAAMA,EAAI3c,GAC/C4c,IAAU5c,GACdua,EAAYqC,EAHY,CAIzB,IAGGrc,GAAmBmc,EAAAA,EAAAA,IACvB,SAACG,EAAiBhP,GAChByO,GAAc,SAACxP,GAAD,cAAOe,QAAP,IAAOA,EAAAA,EAAcf,CAArB,IACduP,EAAcQ,EACf,IAEGrc,GAAiBkc,EAAAA,EAAAA,IACrB,SAAC7V,EAAwCkN,GACvCwI,EAAa1V,GACb2V,EAAczI,EACf,IAGH,OAAO2G,GACL,SAAC3H,EAAD,CACE/S,UAAWA,EACXC,YAAaA,EACbK,OAAQA,EACRD,UAAQ,KAGV,iCACE,SAAC0S,EAAD,CACE/S,UAAWA,EACXC,YAAaA,EACbC,SAAUuc,EACVnc,OAAQA,EACRH,SAAUA,EACVJ,IAAK+W,EACLtW,eAAgBA,EAChBD,iBAAkBA,KAEpB,SAACsW,GAAD,CACEC,QAASA,EACTvU,QAAS6Z,EACTvO,WAAYA,IAEbhH,IACC,SAAC4R,GAAD,CACE3B,QAASA,EACTjQ,UAAWA,EACXtC,WAAYA,MAKrB,ECnKD,GD4F2BzE,EAAAA,KAAWsa,G,wQEzEzB0C,EAAmB,CAAC,GAAI,GAAI,GAAI,IAChC1c,EAAsC,CACjDU,KAAM,OACNC,QAAQ,EACRyN,UAAW,GACXvN,YAAa,GACb+S,MAAO,UACPC,WAAW,EACXjT,OAAO,EACP0K,aAAa,EACbqR,UAAWD,GAGEE,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,oGACuBC,IAAAA,QAA8B,aADrD,UACM9c,EADN,8BAGIA,EAAWC,EAHf,SAIU6c,IAAAA,QAAoB,YAAa9c,GAJ3C,gCAMSA,GANT,kEASe+c,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4B/c,GAA5B,iFACQ8c,IAAAA,QAAoB,YAAa9c,GADzC,kEAIA,IAAMgd,EAAkBrd,EAAAA,cAAoB,CAC1CK,SAAUC,EACVoX,eAAiB,WAAQ,IAGpB,SAAS2E,IACd,IAAQhc,GAAaid,EAAAA,EAAAA,YAAWD,GAAxBhd,SAER,OADA8S,EAAAA,EAAAA,eAAc9S,GACPA,CACR,CAEM,SAASkd,IAEd,OAD2BD,EAAAA,EAAAA,YAAWD,GAA9B3F,cAET,CAEM,IAAM8F,EAA0C,SAAC,GAAkB,IAAhBtH,EAAe,EAAfA,SACxD,GAAgC3U,EAAAA,EAAAA,UAASjB,GAAzC,eAAOD,EAAP,KAAiBod,EAAjB,MACAxb,EAAAA,EAAAA,YAAU,YA3CL,WAYQib,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAgCXA,GAAc3K,KAAKkL,EACpB,GAAE,IASH,OACE,SAACJ,EAAgBK,SAAjB,CAA0B5G,MAAO,CAAEzW,SAAAA,EAAUqX,eARxB,SAACzH,GACtBwN,GAAY,SAAChR,GACX,IAAMkR,GAAO,kBAAQlR,GAASwD,GAE9B,OAvCN,SASemN,GAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CA6BTA,CAAaO,GACNA,CACR,GACF,GAEC,SACGzH,GAGN,C,qCCjFM,SAASxa,EAAoBiF,EAAeC,GACjD,IAAMjF,EAASqV,SAAS4M,cAAc,UAChChiB,EAAUD,EAAOkiB,WAAW,MAClC,IAAKjiB,EACH,MAAM,IAAIkiB,MAAM,oCAIlB,OAFAniB,EAAOgF,MAAQA,EACfhF,EAAOiF,OAASA,EACT,CAAEjF,OAAAA,EAAQC,QAAAA,EAClB,CAEM,SAASoH,EAAcrH,GAC5BA,EAAOgF,MAAQ,EACfhF,EAAOiF,OAAS,EAChB,IAAMmd,EAAMpiB,EAAOkiB,WAAW,MAC3B,OAAHE,QAAG,IAAHA,GAAAA,EAAKphB,UAAU,EAAG,EAAG,EAAG,EACzB,C,wUCLY8a,EAGR,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,eAAgBrX,EAAe,EAAfA,SACd8T,EAAqB9T,EAArB8T,UAAWD,EAAU7T,EAAV6T,MACnB,GAAkC3S,EAAAA,EAAAA,WAAS,GAA3C,eAAOyc,EAAP,KAAkBC,EAAlB,KAEA,OACE,iBAAKnL,UAAU,YAAY,YAAWkL,EAAW,UAAS7J,EAA1D,WACE,iBAAKrB,UAAU,aAAf,WACE,SAACoL,EAAD,CACExG,eAAgBA,EAChBrX,SAAUA,EACV4d,aAAcA,KAEhB,SAACE,EAAD,CAAiBC,QAASjK,EAAWuD,eAAgBA,QAEvD,SAAC2G,EAAD,CACEnK,MAAOA,GAAS,GAChB2F,SAAU,SAACjU,GAAD,OAAO8R,EAAe,CAAExD,MAAOtO,GAA/B,MAIjB,EAEYsY,EAKR,SAAC,GAKC,IAAD,IAJJxG,EAII,EAJJA,eACArX,EAGI,EAHJA,SAGI,IAFJ4d,aAAAA,OAEI,MAFW,WAAQ,EAEnB,MADJK,MAAAA,OACI,MADI,YACJ,EACEC,EAAYle,EAASie,GACrBrB,EAAS,UAAG5c,EAAS4c,iBAAZ,QAAyBD,EAAAA,GAClC9I,EAAkB,cAAVoK,GAAA,UAAwBje,EAAS6T,aAAjC,QAAmD,OAE3DsK,GAAS1d,EAAAA,EAAAA,UACb,kBAAMmc,EAAUwB,QAAV,OAAkBF,QAAlB,IAAkBA,EAAAA,GAAc,EAAtC,GACA,CAACA,EAAWtB,IAGd,GAA8B1b,EAAAA,EAAAA,WAASmd,EAAAA,EAAAA,IAAK,EAAC,GAAO,GAAO,GAAO,KAAlE,eAAOC,EAAP,KAAgBC,EAAhB,MACA3c,EAAAA,EAAAA,YAAU,WACJ0c,EAAQE,UAAS,GAAOZ,GAAa,GACpCA,GAAa,EACnB,GAAE,CAACU,EAASV,IAEb,IAAMa,EAAgB,SAACne,GAAD,MACnB,CACC,cAAc,QAAd,OAAuB,IAAMoe,EAAAA,GAA7B,gBAA0Cpe,EAA1C,KAFkB,EAKhBqe,EAAO,CACX,CAAElI,OAAQ,EAAGmI,MAAO,OADT,eAERhC,EAAUpQ,KAAI,SAAClM,EAAOue,GAAR,MAAmB,CAClCpI,MAAOoI,EACPD,OACE,SAAC,IAAD,CACExc,QAASkc,EAAQviB,IAAI8iB,GACrBC,gBAAiB,SAACC,GAAD,OAAOR,GAAW,SAACnS,GAAD,OAAUA,EAAK5P,IAAIqiB,EAAOE,EAA1B,GAAlB,EACjBjI,QAASqH,IAAWU,EAAQ,CAAC,SAAW,GACxC9H,UAAU,SACVI,sBAAoB,EACpB7G,SACE,SAAC,IAAD,CACE+B,IAAK,EACLD,IAAK,IACLK,UAAU,cACVuM,aAAc1e,EACd2e,cAAe,SAACC,GACd,GAAItC,EAAU4B,SAASU,GAErB,OADAX,GAAW,SAACnS,GAAD,OAAUA,EAAK5P,IAAIqiB,GAAO,EAA1B,IACJxH,GAAe,UAAG4G,EAAQiB,IAEnC,IAAMC,EAAQvC,EAAUwC,QACxBD,EAAMN,GAASK,EACf7H,GAAe,QAAEuF,UAAWuC,GAAQlB,EAAQiB,GAC7C,IApBP,UAwBE,gBAAKzM,UAAU,iBAAiBC,MAAO+L,EAAcne,GAArD,UACE,SAAC,IAAD,CAAYmS,UAAW,gBAAkBwL,EAAOpK,MAAOA,QA5B9C,MAmCnB,OACE,SAAC,IAAD,CACEpB,UAAU,YACVgE,MAAO0H,EACPQ,QAASA,EACT5e,SAAU,SAACsf,GAAD,aAAOhI,GAAe,UAAG4G,EAAJ,UAAYrB,GAAWyC,UAAvB,QAA6B,IAAlD,GAGf,EAEKvB,EAGD,SAAC,GAAyC,IAAD,IAAtCC,QAAAA,OAAsC,SAArB1G,EAAqB,EAArBA,eACvB,OACE,mBAAO5E,UAAU,aAAjB,WACE,kBACEuD,KAAK,WACL1P,KAAK,YACLyX,QAASA,EACThe,SAAU,SAAChD,GAAD,OAAOsa,EAAe,CAAEvD,UAAW/W,EAAEwV,OAAOwL,SAA5C,KAEZ,gBAAKtL,UAAU,YAAf,UACE,SAAC6M,EAAA,EAAD,CAAUtJ,KAAK,uBAItB,EAEYgI,EAGR,SAAC,GAAD,IAAGxE,EAAH,EAAGA,SAAU3F,EAAb,EAAaA,MAAb,OACH,gBAAKpB,UAAU,eAAf,SACG6G,EAAAA,GAAAA,KAAc,SAAC/T,GAAD,OACb,8BACE,kBACEwY,QAASlK,IAAUtO,EACnByQ,KAAK,QACL1P,KAAK,QACLvG,SAAU,SAAChD,GAAD,OAAOA,EAAEwV,OAAOwL,SAAWvE,EAASjU,EAApC,KAEZ,gBACE,aAAYA,EACZkN,UAAU,SACVC,MAAO,CAAE6M,gBAAiBha,EAAGia,YAAaja,OAVlCA,EADC,KAFd,C","sources":["component/IconFont.tsx","component/Draw/cursor/cursor.ts","component/Draw/touch.ts","component/Draw/grid.tsx","component/Draw/Draw.tsx","pages/reader/tools/DrawTools.tsx","component/PageWrapper/PageWrapper.tsx","component/PageWrapper/index.tsx","lib/draw/DrawCtrl.tsx","lib/draw/canvas.ts","pages/reader/tools/PenPanel.tsx"],"sourcesContent":["import { createFromIconfontCN } from \"@ant-design/icons\";\r\n\r\nexport default createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_3181679_yo844n7qgns.js\",\r\n});\r\n","import { createVirtualCanvas } from \"lib/draw/canvas\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport rotateImg from \"./rotate.png\";\r\n\r\nexport const getCircleCursor = (drawCtrl: DrawCtrl, ratio: number) => {\r\n  const { lineWidth, eraserWidth, mode } = drawCtrl;\r\n  const size = ratio * (mode === \"erase\" ? eraserWidth : lineWidth);\r\n  if (size < 5) return \"crosshair\";\r\n  const half = size / 2;\r\n  return `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23FFF7\" width=\"${size}\" height=\"${size}\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"5\"/></svg>') ${half} ${half}, auto`;\r\n};\r\n\r\nconst getRotateCursorImage = (() => {\r\n  const cache = new Map<number, string>();\r\n  const { canvas, context } = createVirtualCanvas(44, 44);\r\n  const image = new Image();\r\n  image.src = rotateImg;\r\n  return (angle: number) => {\r\n    angle = Math.round(angle / 10) * 10;\r\n    const cached = cache.get(angle);\r\n    if (cached) return cached;\r\n    context.translate(22, 22);\r\n    context.rotate((angle * Math.PI) / 180);\r\n    context.drawImage(image, -22, -22);\r\n    const data = canvas.toDataURL();\r\n    context.clearRect(-22, -22, 44, 44);\r\n    context.resetTransform();\r\n    cache.set(angle, data);\r\n    return data;\r\n  };\r\n})();\r\n\r\nexport const getRotateCurcor = (angle: number) => {\r\n  return `url(${getRotateCursorImage(angle)}) 22 22, auto`;\r\n};\r\n","import { PointerEvent, TouchEvent, useEffect, useRef } from \"react\";\r\n\r\ntype iOSTouch = Touch & {\r\n  force?: number;\r\n  touchType?: \"stylus\" | \"direct\";\r\n};\r\n\r\nexport function isApplePencil(e: TouchEvent) {\r\n  const touch = e.touches[0] as iOSTouch;\r\n  return touch?.touchType === \"stylus\";\r\n}\r\n\r\nexport function usePreventTouch(\r\n  allowFinger: boolean\r\n): React.HTMLAttributes<HTMLDivElement> {\r\n  const isTouch = useRef(false);\r\n  const checkPoniter = (e: PointerEvent) =>\r\n    e.isPrimary && (isTouch.current = e.pointerType === \"touch\");\r\n\r\n  const isEventValid = (e: TouchEvent) =>\r\n    !isTouch.current ||\r\n    isApplePencil(e) ||\r\n    (allowFinger && e.touches.length === 1);\r\n\r\n  const preventTouch = (e: TouchEvent) =>\r\n    isEventValid(e) || e.stopPropagation();\r\n\r\n  return {\r\n    onPointerDownCapture: checkPoniter,\r\n    onPointerMoveCapture: checkPoniter,\r\n    onTouchStartCapture: preventTouch,\r\n    onTouchMoveCapture: preventTouch,\r\n  };\r\n}\r\n\r\nexport function usePreventGesture() {\r\n  useEffect(() => {\r\n    const handler = (e: Event) => e.preventDefault();\r\n    document.addEventListener(\"gesturestart\", handler);\r\n    document.addEventListener(\"gesturechange\", handler);\r\n    document.addEventListener(\"gestureend\", handler);\r\n    return () => {\r\n      document.removeEventListener(\"gesturestart\", handler);\r\n      document.removeEventListener(\"gesturechange\", handler);\r\n      document.removeEventListener(\"gestureend\", handler);\r\n    };\r\n  }, []);\r\n}\r\n","export const gernerateGrid = (\r\n  group: paper.Item[],\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const wnum = Math.ceil(width / 100);\r\n  const hnum = Math.ceil(height / 100);\r\n  const grid = Array.from({ length: wnum }, () =>\r\n    Array.from({ length: hnum }, () => new Set<paper.Item>())\r\n  );\r\n  group.forEach((item) => setGridItem(grid, item));\r\n  return grid;\r\n};\r\n\r\nconst getGridRange = (bounds: paper.Rectangle) => {\r\n  const { topLeft, bottomRight } = bounds;\r\n  return [\r\n    Math.floor(topLeft.x / 100),\r\n    Math.ceil(bottomRight.x / 100),\r\n    Math.floor(topLeft.y / 100),\r\n    Math.ceil(bottomRight.y / 100),\r\n  ] as [number, number, number, number];\r\n};\r\nexport const setGridItem = (\r\n  grid: Set<paper.Item>[][],\r\n  item: paper.Item,\r\n  replaced?: paper.Item\r\n) => {\r\n  const bounds = (replaced ?? item).strokeBounds;\r\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\r\n  for (let x = xmin; x <= xmax; x += 1) {\r\n    for (let y = ymin; y <= ymax; y += 1) {\r\n      replaced && grid[x]?.[y]?.delete(replaced);\r\n      grid[x]?.[y]?.add(item);\r\n    }\r\n  }\r\n};\r\nexport const getGridItems = (\r\n  grid: Set<paper.Item>[][],\r\n  bounds: paper.Rectangle\r\n) => {\r\n  const itemSet = new Set<paper.Item>();\r\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\r\n  for (let x = xmin; x <= xmax; x += 1) {\r\n    for (let y = ymin; y <= ymax; y += 1) {\r\n      grid[x]?.[y]?.forEach((item) => itemSet.add(item));\r\n    }\r\n  }\r\n  return Array.from(itemSet);\r\n};\r\n","import React, {\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n  useDebugValue,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport paper, {\r\n  Path,\r\n  Size,\r\n  Point,\r\n  Color,\r\n  Raster,\r\n  Layer,\r\n  Rectangle,\r\n} from \"paper/dist/paper-core\";\r\nimport { usePinch } from \"@use-gesture/react\";\r\nimport useSize from \"@react-hook/size\";\r\nimport { DrawState, Mutation, Splitter, Stroke } from \"lib/draw/DrawState\";\r\nimport { defaultDrawCtrl, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { releaseCanvas } from \"lib/draw/canvas\";\r\nimport { getCircleCursor, getRotateCurcor } from \"./cursor\";\r\nimport { usePreventTouch, usePreventGesture } from \"./touch\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport { setGridItem, getGridItems, gernerateGrid } from \"./grid\";\r\n\r\nexport interface DrawRefType {\r\n  deleteSelected: () => void;\r\n  duplicateSelected: () => void;\r\n  rasterizeSelected: () => string;\r\n  mutateStyle: (updated: Partial<DrawCtrl>) => void;\r\n  mutatePointText: (cb: (prev: paper.PointText) => void) => void;\r\n}\r\ninterface DrawPropType {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  onChange?: Setter<DrawState>;\r\n  toggleSelectTool?: (active: boolean, clickPoint?: paper.Point) => void;\r\n  toggleTextTool?: (pt: paper.PointText | undefined, slow: boolean) => void;\r\n  drawCtrl?: DrawCtrl;\r\n  readonly?: boolean;\r\n  imgSrc?: string;\r\n}\r\n\r\nconst HIT_TOLERANCE = 20;\r\nexport const P_ZERO = new Point(0, 0);\r\n\r\nconst DrawRaw = React.forwardRef<DrawRefType, DrawPropType>(\r\n  (\r\n    {\r\n      drawState,\r\n      otherStates,\r\n      onChange = () => {},\r\n      drawCtrl = defaultDrawCtrl,\r\n      readonly = false,\r\n      imgSrc,\r\n      toggleSelectTool = () => {},\r\n      toggleTextTool = () => {},\r\n    },\r\n    ref\r\n  ) => {\r\n    const { width, height } = drawState;\r\n    const projSize = useMemo(() => new Size(width, height), [width, height]);\r\n    const { mode, finger, lasso, eraserWidth } = drawCtrl;\r\n\r\n    const canvasEl = useRef<HTMLCanvasElement>(null);\r\n    const scope = useRef(new paper.PaperScope());\r\n    const [group, setGroup] = useState<paper.Item[]>([]);\r\n    const [path, setPath] = usePaperItem<paper.Path>();\r\n    const [rect, setRect] = usePaperItem<paper.Path.Rectangle>();\r\n    const [rotateHandle, setRotateHandle] = usePaperItem<paper.Path>();\r\n\r\n    useEffect(() => {\r\n      const cvs = canvasEl.current;\r\n      const scp = scope.current;\r\n      if (!cvs) return;\r\n\r\n      scp.setup(cvs);\r\n      scp.settings.handleSize = 10;\r\n      scp.settings.hitTolerance = HIT_TOLERANCE;\r\n      [0, 1, 2].forEach(() => (new Layer().visible = false));\r\n      scp.project.layers[2]?.activate();\r\n      new scp.Tool();\r\n\r\n      return () => {\r\n        scp.view?.remove();\r\n        releaseCanvas(cvs);\r\n      };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      scope.current.activate();\r\n      const { layers } = scope.current.project;\r\n      const rects = paintRects(layers, projSize);\r\n      return () => rects.forEach((r) => r.remove());\r\n    }, [projSize]);\r\n\r\n    const [canvasWidth] = useSize(canvasEl);\r\n    const ratio = canvasWidth / width;\r\n    useEffect(() => {\r\n      if (!ratio) return;\r\n      const scp = scope.current;\r\n      scp.view.viewSize = projSize.multiply(ratio);\r\n      scp.view.scale(ratio, P_ZERO);\r\n      scp.project.layers.forEach((l) => (l.visible = true));\r\n      scp.view.update();\r\n\r\n      return () => scp.view?.scale(1 / ratio, P_ZERO);\r\n    }, [ratio, projSize]);\r\n\r\n    const [imgRaster, setImgRaster] = usePaperItem();\r\n    useEffect(() => {\r\n      if (!imgSrc) return;\r\n      scope.current.activate();\r\n      const raster = new Raster(imgSrc);\r\n      raster.project.layers[0]?.addChild(raster);\r\n      raster.sendToBack();\r\n      raster.onLoad = () => {\r\n        raster.view.update();\r\n        raster.fitBounds(new Rectangle(projSize));\r\n        raster.bringToFront();\r\n      };\r\n      setImgRaster(raster);\r\n    }, [imgSrc, projSize, setImgRaster]);\r\n\r\n    const mergedStrokes = useMemo(\r\n      () =>\r\n        otherStates\r\n          ? DrawState.mergeStates(drawState, ...otherStates)\r\n          : drawState.getStrokeList(),\r\n      [drawState, otherStates]\r\n    );\r\n\r\n    const renderSlow = useRef(false);\r\n    const deferTimerID = useRef(0);\r\n    const deferRender = useRef(false);\r\n    const setDefer = () => (deferRender.current = renderSlow.current);\r\n    if (readonly) setDefer();\r\n\r\n    useEffect(() => {\r\n      const [, l1] = scope.current.project.layers;\r\n      if (!l1) return;\r\n      const render = () => {\r\n        const tempGroup: paper.Item[] = [];\r\n        const timeBeforeRender = performance.now();\r\n        scope.current.activate();\r\n        // clean-up layer_1 except the clip mask.\r\n        l1.removeChildren(1);\r\n        mergedStrokes.forEach((stroke) => {\r\n          const self = drawState.hasStroke(stroke.uid);\r\n          const item = paintStroke(stroke, l1, !self);\r\n          if (self) tempGroup.push(item);\r\n        });\r\n        setGroup(tempGroup);\r\n\r\n        unrasterizeCanvas();\r\n        deferRender.current = false;\r\n        pathClones.current.forEach((c) => c.remove());\r\n        pathClones.current = [];\r\n\r\n        scope.current.view.update();\r\n        const duration = performance.now() - timeBeforeRender;\r\n        renderSlow.current = duration > 16;\r\n      };\r\n\r\n      if (deferRender.current) {\r\n        deferTimerID.current = window.setTimeout(render, 1000);\r\n      } else render();\r\n\r\n      // cancel previous render timer.\r\n      return () => window.clearTimeout(deferTimerID.current);\r\n    }, [mergedStrokes, drawState]);\r\n\r\n    const hitRef = useRef<paper.HitResult>();\r\n    const [selected, setSelected] = useState(false);\r\n    const paperMode = mode === \"select\" && selected ? \"selected\" : mode;\r\n    const [chosenIDs, setChosenIDs] = useState<string[]>([]);\r\n    const chosenItems = useMemo(() => {\r\n      const IDSet = new Set(chosenIDs);\r\n      return group.filter((item) => IDSet.has(item.name));\r\n    }, [group, chosenIDs]);\r\n\r\n    const resetSelect = useCallback(() => {\r\n      setSelected(false);\r\n      setPath(undefined);\r\n      setRect(undefined);\r\n      setRotateHandle(undefined);\r\n    }, [setPath, setRect, setRotateHandle]);\r\n\r\n    useEffect(() => {\r\n      if (mode === \"select\") return resetSelect;\r\n    }, [mode, resetSelect]);\r\n    useEffect(() => resetSelect, [lasso, resetSelect]);\r\n\r\n    useEffect(() => {\r\n      if (!selected) return;\r\n      return () => {\r\n        setChosenIDs([]);\r\n        toggleSelectTool(false);\r\n      };\r\n    }, [selected, toggleSelectTool]);\r\n    useEffect(() => {\r\n      toggleSelectTool(false);\r\n      if (pointText.current) {\r\n        const ptProxy = new Proxy(pointText.current, {});\r\n        toggleTextTool(ptProxy, renderSlow.current);\r\n      }\r\n    }, [canvasWidth, toggleSelectTool, toggleTextTool]);\r\n\r\n    const layerRaster = useRef<paper.Raster>();\r\n    const rasterizeLayer = (clip: paper.Path, force = false) => {\r\n      if (!renderSlow.current && !force) return;\r\n      const [l0, l1] = scope.current.project.layers;\r\n      if (!l0 || !l1) return;\r\n      l1.visible = true;\r\n      clip.clipMask = true;\r\n      const prevClip = l1.firstChild;\r\n      prevClip.replaceWith(clip);\r\n      imgRaster?.insertAbove(clip);\r\n\r\n      const dpi = 72 * devicePixelRatio;\r\n      const resolution = (canvasWidth / clip.bounds.width) * dpi;\r\n      let raster = layerRaster.current;\r\n      raster = layerRaster.current = l1.rasterize({ raster, resolution });\r\n      raster.visible = true;\r\n\r\n      l1.visible = false;\r\n      clip.replaceWith(prevClip);\r\n      imgRaster?.addTo(l0);\r\n    };\r\n    const unrasterizeLayer = () => {\r\n      scope.current.activate();\r\n      const [, l1] = scope.current.project.layers;\r\n      const lr = layerRaster.current;\r\n      if (!l1 || !lr) return;\r\n      l1.visible = true;\r\n      lr.visible = false;\r\n    };\r\n\r\n    const canvasRaster = useRef<paper.Raster>();\r\n    // raster changes with the size of canvas element\r\n    useEffect(\r\n      () => () => {\r\n        canvasRaster.current?.remove();\r\n        canvasRaster.current = undefined;\r\n      },\r\n      [canvasWidth]\r\n    );\r\n    const rasterizeCanvas = () => {\r\n      if (!renderSlow.current) return;\r\n      // rasterize the canvas only once\r\n      if (canvasRaster.current?.visible === true) return;\r\n      scope.current.activate();\r\n      const { view } = scope.current;\r\n      // create a raster of the canvas element's size only once.\r\n      const raster = (canvasRaster.current ??= new Raster(\r\n        view.viewSize.multiply(window.devicePixelRatio)\r\n      ));\r\n      raster.drawImage(view.element, P_ZERO);\r\n      raster.fitBounds(view.bounds);\r\n      raster.visible = true;\r\n      raster.opacity = process.env.NODE_ENV === \"production\" ? 1 : 0.8;\r\n      const [, l1] = scope.current.project.layers;\r\n      l1 && (l1.visible = false);\r\n    };\r\n    const unrasterizeCanvas = () => {\r\n      scope.current.activate();\r\n      const [, l1] = scope.current.project.layers;\r\n      const cr = canvasRaster.current;\r\n      const lr = layerRaster.current;\r\n      if (!l1 || !cr) return;\r\n      cr.visible = false;\r\n      // keep layer_1 hidden unless all 2 raster is hidden.\r\n      if (lr?.visible !== true) l1.visible = true;\r\n    };\r\n\r\n    const downPath = (e: paper.MouseEvent) => {\r\n      rasterizeCanvas();\r\n      setPath(startStroke(drawCtrl, e.point, renderSlow.current));\r\n    };\r\n    const downRect = (e: paper.MouseEvent) => {\r\n      rasterizeCanvas();\r\n      setRect(startRect(e.point));\r\n    };\r\n    const pointBeforeDrag = useRef(P_ZERO);\r\n\r\n    const handleDown = {\r\n      draw(e: paper.MouseEvent) {\r\n        setDefer();\r\n        downPath(e);\r\n      },\r\n      erase: downPath,\r\n      select: lasso ? downPath : downRect,\r\n      selected(e: paper.MouseEvent) {\r\n        toggleSelectTool(false);\r\n        pointBeforeDrag.current = e.point;\r\n        if (lasso) {\r\n          // if the point is outside of selection, reset selection\r\n          if (path?.contains(e.point)) return;\r\n          setSelected(false);\r\n          downPath(e);\r\n        } else {\r\n          // check if the point hit the segment point.\r\n          let hitRes =\r\n            rect?.hitTest(e.point, { segments: true }) ??\r\n            rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n          hitRef.current = hitRes;\r\n          if (hitRes) return;\r\n\r\n          // if the point is outside of selection, reset selection\r\n          if (rect?.contains(e.point)) return;\r\n          setRotateHandle(undefined);\r\n          setSelected(false);\r\n          downRect(e);\r\n        }\r\n      },\r\n      text: null,\r\n    }[paperMode];\r\n\r\n    const dragPath = (e: paper.MouseEvent) => {\r\n      // cancel previous render timer.\r\n      window.clearTimeout(deferTimerID.current);\r\n      path?.add(e.point);\r\n      path?.smooth();\r\n    };\r\n    const resizeRect = (e: paper.MouseEvent) => {\r\n      if (!rect) return;\r\n      const { x, y } = e.point;\r\n      const [, s1, s2, s3] = rect.segments;\r\n      if (!s1 || !s2 || !s3) return;\r\n      s1.point.x = x;\r\n      s2.point = e.point;\r\n      s3.point.y = y;\r\n      rect.selected = true;\r\n    };\r\n    const moveSelected = (delta: paper.Point) => {\r\n      chosenItems.forEach((item) => item.translate(delta));\r\n      path?.translate(delta);\r\n      rect?.translate(delta);\r\n      rotateHandle?.translate(delta);\r\n    };\r\n\r\n    const handleDrag = {\r\n      draw: dragPath,\r\n      erase: dragPath,\r\n      select: lasso ? dragPath : resizeRect,\r\n      selected(e: paper.MouseEvent) {\r\n        const hitRes = hitRef.current;\r\n        if (hitRes?.segment && rect && rotateHandle) {\r\n          const segment = hitRes.segment;\r\n          const rotating = segment.selected;\r\n          if (rotating) {\r\n            // rotate select items\r\n            const { center } = rect.bounds;\r\n            const axis = segment.point.subtract(center);\r\n            const line = e.point.subtract(center);\r\n            setCursor(getRotateCurcor(line.angle));\r\n            const angle = line.angle - axis.angle;\r\n            rect.rotate(angle, center);\r\n            rotateHandle.rotate(angle, center);\r\n            chosenItems.forEach((item) => item?.rotate(angle, center));\r\n          } else {\r\n            // resize selected items\r\n            const moveP = segment.point;\r\n            const baseP = segment.next.next.point;\r\n            const diagonal = moveP.subtract(baseP);\r\n            const projection = e.point.subtract(baseP).project(diagonal);\r\n            const scale = projection.x / diagonal.x;\r\n            if (scale < 0) return;\r\n\r\n            rect.scale(scale, baseP);\r\n            chosenItems.forEach((item) => {\r\n              item.scale(scale, baseP);\r\n              item.strokeWidth *= scale;\r\n            });\r\n            rotateHandle.scale(scale, baseP);\r\n            const rBaseP = rotateHandle.segments[0]?.point;\r\n            if (!rBaseP) return;\r\n            rotateHandle.scale(100 / rotateHandle.length, rBaseP);\r\n          }\r\n        } else {\r\n          moveSelected(e.delta);\r\n        }\r\n      },\r\n      text: null,\r\n    }[paperMode];\r\n\r\n    useEffect(() => {\r\n      scope.current.tool.maxDistance = eraserWidth;\r\n    }, [eraserWidth]);\r\n    const erased = useRef(new Set<string>());\r\n    const replaced = useRef(new Map<string, paper.Item>());\r\n\r\n    const itemGrid = useMemo(() => {\r\n      if (!/^(erase|select)$/.test(mode)) return [];\r\n      return gernerateGrid(group, width, height);\r\n    }, [group, width, height, mode]);\r\n\r\n    const handleToolDrag = (e: paper.ToolEvent) => {\r\n      const layer = scope.current.project.layers[1];\r\n      if (paperMode !== \"erase\" || !layer) return;\r\n      const ew = eraserWidth;\r\n\r\n      const hitOption = { class: paper.Path, stroke: true, tolerance: ew / 2 };\r\n      const bounds = new Rectangle(e.point.subtract(ew), new Size(ew, ew));\r\n\r\n      getGridItems(itemGrid, bounds).forEach((item) => {\r\n        if (erased.current.has(item.name)) return;\r\n        item.hitTestAll(e.point, hitOption)?.forEach(({ item }) => {\r\n          if (!(item instanceof paper.Path)) return;\r\n          let topItem: paper.PathItem = item;\r\n          while (topItem.parent !== layer) {\r\n            if (!(topItem.parent instanceof paper.PathItem)) break;\r\n            topItem = topItem.parent;\r\n          }\r\n          const { name } = topItem;\r\n\r\n          if (drawCtrl.pixelEraser) {\r\n            const radius = (ew + item.strokeWidth) / 2;\r\n            const circle = new Path.Circle({\r\n              center: e.point,\r\n              radius,\r\n              insert: false,\r\n            });\r\n\r\n            const sub = item.subtract(circle, { trace: false });\r\n            item.replaceWith(sub);\r\n            if (topItem === item) {\r\n              setGridItem(itemGrid, sub, item);\r\n              topItem = sub;\r\n            }\r\n            replaced.current.set(name, topItem);\r\n          } else {\r\n            topItem.opacity = 0.5;\r\n            topItem.guide = true;\r\n            erased.current.add(name);\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    const pathClones = useRef<paper.Path[]>([]);\r\n    const handleUp = {\r\n      draw() {\r\n        if (!path || path.segments.length <= 1) {\r\n          // if canvas is clicked without any path in queue.\r\n          if (!pathClones.current.length) unrasterizeCanvas();\r\n          return;\r\n        }\r\n        path.simplify();\r\n        if (renderSlow.current) pathClones.current.push(path.clone());\r\n        const pathData = path.exportJSON();\r\n        onChange((prev) => DrawState.addStroke(prev, pathData));\r\n        setPath(undefined);\r\n      },\r\n      erase() {\r\n        unrasterizeCanvas();\r\n        setPath(undefined);\r\n        if (drawCtrl.pixelEraser) {\r\n          const items = Array.from(replaced.current);\r\n          replaced.current.clear();\r\n          const splitters: Splitter[] = items.map(([uid, item]) => {\r\n            const paths = flattenCP(item);\r\n            paths.forEach((p) => (p.name = \"\"));\r\n            return [uid, paths.map((p) => p.exportJSON())];\r\n          });\r\n          if (!splitters.length) return;\r\n          onChange((prev) => DrawState.splitStrokes(prev, splitters));\r\n        } else {\r\n          const erasedList = Array.from(erased.current);\r\n          erased.current.clear();\r\n          if (!erasedList.length) return;\r\n          onChange((prev) => DrawState.eraseStrokes(prev, erasedList));\r\n        }\r\n      },\r\n      select() {\r\n        unrasterizeCanvas();\r\n        let selection: string[];\r\n        const { view } = scope.current;\r\n        if (lasso) {\r\n          if (!path || Math.abs(path.area) < 1_000) return setPath(undefined);\r\n          path.closePath();\r\n          path.simplify();\r\n          if (!renderSlow.current) moveDash(path);\r\n          const items = getGridItems(itemGrid, path.bounds);\r\n          selection = checkLasso(items, path);\r\n        } else {\r\n          if (!rect || Math.abs(rect.area) < 1_000) return setRect(undefined);\r\n          const items = getGridItems(itemGrid, rect.bounds);\r\n          selection = checkLasso(items, rect);\r\n          const link = new Path();\r\n          const { topCenter } = rect.bounds;\r\n          link.add(topCenter, topCenter.subtract(new Point(0, 100)));\r\n          link.lastSegment.selected = true;\r\n          setRotateHandle(link);\r\n        }\r\n        setSelected(true);\r\n        setChosenIDs(selection);\r\n        const bc = (rect ?? path)?.bounds.bottomCenter;\r\n        bc && toggleSelectTool(true, view.projectToView(bc));\r\n      },\r\n      selected(e: paper.MouseEvent) {\r\n        handleSelectedCursor(e);\r\n        if (paperMode !== \"selected\") return;\r\n        const { view } = scope.current;\r\n        const clickPoint = view.projectToView(e.point);\r\n        toggleSelectTool(true, clickPoint);\r\n        if (pointBeforeDrag.current.equals(e.point)) return;\r\n        updateMutation();\r\n      },\r\n      text(e: paper.MouseEvent) {\r\n        if (pointText.current) {\r\n          submitText();\r\n          return handleTextCursor(e);\r\n        }\r\n        const [, l1] = scope.current.project.layers;\r\n        if (!l1) return;\r\n        const t = getClickedText(l1, e.point) ?? startText(e.point);\r\n        t.justification = \"left\";\r\n        pointText.current = t;\r\n        prevTextData.current = t.exportJSON();\r\n        rasterizeCanvas();\r\n        toggleTextTool(t, renderSlow.current);\r\n      },\r\n    }[paperMode];\r\n\r\n    const [cursor, setCursor] = useState(\"auto\");\r\n    useEffect(() => {\r\n      if (paperMode === \"text\" || paperMode === \"select\") {\r\n        setCursor(\"crosshair\");\r\n      } else if (paperMode === \"selected\") {\r\n        setCursor(lasso ? \"crosshair\" : \"nwse-resize\");\r\n      } else if (paperMode === \"draw\" || paperMode === \"erase\") {\r\n        setCursor(getCircleCursor(drawCtrl, ratio));\r\n      }\r\n    }, [paperMode, lasso, drawCtrl, ratio]);\r\n\r\n    const handleSelectedCursor = (e: paper.MouseEvent) => {\r\n      const hitRes =\r\n        rect?.hitTest(e.point, { segments: true }) ??\r\n        rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n      if (hitRes?.segment) {\r\n        if (hitRes.segment.selected) {\r\n          const center = rect?.bounds.center;\r\n          if (!center) return;\r\n          const line = hitRes.segment.point.subtract(center);\r\n          return setCursor(getRotateCurcor(line.angle));\r\n        }\r\n        const moveP = hitRes.segment.point;\r\n        const baseP = hitRes.segment.next.next.point;\r\n        const diagonal = moveP.subtract(baseP);\r\n        const { x, y } = diagonal;\r\n        return setCursor(x * y < 0 ? \"nesw-resize\" : \"nwse-resize\");\r\n      }\r\n      if ((rect ?? path)?.contains(e.point)) return setCursor(\"pointer\");\r\n      setCursor(\"crosshair\");\r\n    };\r\n    const handleTextCursor = (e: paper.MouseEvent) => {\r\n      if (pointText.current) return setCursor(\"auto\");\r\n      const layer = scope.current.project.layers[1];\r\n      if (!layer) return;\r\n      if (getClickedText(layer, e.point)) setCursor(\"text\");\r\n      else setCursor(\"crosshair\");\r\n    };\r\n\r\n    const handleMove = {\r\n      selected: handleSelectedCursor,\r\n      text: handleTextCursor,\r\n      ...{ select: null, draw: null, erase: null },\r\n    }[paperMode];\r\n\r\n    const handleKeyDown = (e: paper.KeyEvent) => {\r\n      if (paperMode !== \"selected\") return;\r\n      const delta = {\r\n        up: new Point(0, -10),\r\n        down: new Point(0, 10),\r\n        left: new Point(-10, 0),\r\n        right: new Point(10, 0),\r\n      }[e.key];\r\n      if (!delta) return;\r\n      e.preventDefault();\r\n      delta && moveSelected(delta);\r\n      toggleSelectTool(false);\r\n    };\r\n\r\n    const handleKeyUp = {\r\n      selected(e: paper.KeyEvent) {\r\n        if (/^(delete|backspace)$/.test(e.key)) deleteSelected();\r\n        if (/^(up|down|left|right)$/.test(e.key)) updateMutation();\r\n        if (e.key === \"escape\") resetSelect();\r\n      },\r\n      text(e: paper.KeyEvent) {\r\n        if (e.key === \"escape\") submitText();\r\n      },\r\n      ...{ select: null, draw: null, erase: null },\r\n    }[paperMode];\r\n\r\n    useEffect(() => {\r\n      if (readonly) return;\r\n\r\n      type Handler<E> = ((e: E) => boolean | void) | null;\r\n      const activate = <E,>(handler: Handler<E>): Handler<E> => {\r\n        return (e) => {\r\n          scope.current.activate();\r\n          if (handler) return handler(e);\r\n        };\r\n      };\r\n      const { view, tool } = scope.current;\r\n      view.onMouseDown = activate(handleDown);\r\n      view.onMouseDrag = activate(handleDrag);\r\n      view.onMouseUp = activate(handleUp);\r\n      view.onMouseMove = activate(handleMove);\r\n      tool.onMouseDrag = activate(handleToolDrag);\r\n      tool.onKeyDown = activate(handleKeyDown);\r\n      tool.onKeyUp = activate(handleKeyUp);\r\n    });\r\n\r\n    const updateMutation = () => {\r\n      if (!chosenItems?.length) return;\r\n      const mutations: Mutation[] = chosenItems.map((p) => {\r\n        const { name } = p;\r\n        p.name = \"\";\r\n        return [name, p.exportJSON()];\r\n      });\r\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\r\n    };\r\n\r\n    const deleteSelected = () => {\r\n      resetSelect();\r\n      if (!chosenIDs.length) return;\r\n      onChange((prev) => DrawState.eraseStrokes(prev, chosenIDs));\r\n    };\r\n\r\n    const mutateStyle = (updated: Partial<DrawCtrl>) => {\r\n      scope.current.activate();\r\n      updateGroupStyle(chosenItems, updated);\r\n      updateMutation();\r\n    };\r\n\r\n    const duplicateSelected = () => {\r\n      scope.current.activate();\r\n      const size = (rect || path)?.bounds.size;\r\n      if (!size || !chosenItems.length) return;\r\n      const { width, height } = size;\r\n      const transP = new Point(width, height).divide(10);\r\n      const copies = chosenItems.map((item) => item.clone());\r\n      copies.forEach((item) => item.translate(transP));\r\n      rect?.translate(transP);\r\n      path?.translate(transP);\r\n      rotateHandle?.translate(transP);\r\n\r\n      copies.forEach((p) => (p.name = \"\"));\r\n      const pathDataList = copies.map((item) => item.exportJSON());\r\n      const IDs: string[] = [];\r\n      onChange((prev) => DrawState.addStrokes(prev, pathDataList, IDs));\r\n      setChosenIDs(IDs);\r\n      toggleSelectTool(false);\r\n    };\r\n\r\n    const rasterizeSelected = () => {\r\n      scope.current.activate();\r\n      const clip = (rect ?? path)?.clone();\r\n      clip && rasterizeLayer(clip, true);\r\n      unrasterizeLayer();\r\n      return layerRaster.current?.toDataURL() ?? \"\";\r\n    };\r\n\r\n    const pointText = useRef<paper.PointText>();\r\n    const prevTextData = useRef(\"\");\r\n    const cancelText = useCallback(() => {\r\n      unrasterizeCanvas();\r\n      if (!pointText.current?.name) {\r\n        pointText.current?.remove();\r\n      }\r\n      pointText.current = undefined;\r\n      toggleTextTool(undefined, renderSlow.current);\r\n    }, [toggleTextTool]);\r\n\r\n    const submitText = useCallback(() => {\r\n      const t = pointText.current;\r\n      if (!t) return;\r\n      cancelText();\r\n      if (t.exportJSON() === prevTextData.current) return;\r\n      const { content, name } = t;\r\n      if (!content) {\r\n        if (name) return;\r\n        return onChange((prev) => DrawState.eraseStrokes(prev, [name]));\r\n      }\r\n      t.name = \"\";\r\n      const pathData = t.exportJSON();\r\n      if (!name) {\r\n        onChange((prev) => DrawState.addStroke(prev, pathData));\r\n      } else {\r\n        onChange((prev) => DrawState.mutateStrokes(prev, [[name, pathData]]));\r\n      }\r\n    }, [cancelText, onChange]);\r\n    const mutatePointText = (cb: (prev: paper.PointText) => void) => {\r\n      const pt = pointText.current;\r\n      if (!pt) return;\r\n      scope.current.activate();\r\n      cb(pt);\r\n      toggleTextTool(new Proxy(pt, {}), renderSlow.current);\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (mode === \"text\") return submitText;\r\n    }, [mode, submitText]);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      deleteSelected,\r\n      duplicateSelected,\r\n      rasterizeSelected,\r\n      mutateStyle,\r\n      mutatePointText,\r\n    }));\r\n\r\n    usePreventGesture();\r\n    usePinch(\r\n      ({ memo, offset: [scale], first, last, origin }) => {\r\n        scope.current.activate();\r\n        const { view } = scope.current;\r\n        const originRawP = new paper.Point(origin);\r\n\r\n        let lastScale: number;\r\n        let lastOrigin, elPos: paper.Point;\r\n        if (first || !memo) {\r\n          const { x, y } = view.element.getBoundingClientRect();\r\n          lastScale = 1;\r\n          elPos = new Point(x, y);\r\n          lastOrigin = originRawP.subtract(elPos);\r\n          toggleSelectTool(false);\r\n          cancelText();\r\n          rasterizeLayer(new Path.Rectangle(P_ZERO, projSize));\r\n          unrasterizeCanvas();\r\n        } else {\r\n          [lastScale, lastOrigin, elPos] = memo;\r\n        }\r\n\r\n        const originViewP = originRawP.subtract(elPos);\r\n        const originPorjP = view.viewToProject(originViewP);\r\n\r\n        const deltaP = originViewP.subtract(lastOrigin);\r\n        const transP = deltaP.divide(view.zoom);\r\n        view.translate(transP);\r\n\r\n        let dScale = first ? 1 : scale / lastScale;\r\n        scope.current.settings.hitTolerance /= dScale;\r\n        view.scale(dScale, originPorjP);\r\n\r\n        if (last) {\r\n          Promise.all([\r\n            putCenterBack(view, projSize),\r\n            scaleView(view, originPorjP, dScale),\r\n          ]).then(unrasterizeLayer);\r\n          view.scale(1 / dScale, originPorjP);\r\n        } else {\r\n          return [scale, originViewP, elPos];\r\n        }\r\n      },\r\n      {\r\n        scaleBounds: { max: 5, min: 1 },\r\n        rubberband: 0.5,\r\n        target: canvasEl,\r\n      }\r\n    );\r\n\r\n    const touchHandler = usePreventTouch(finger);\r\n    return (\r\n      <div\r\n        className=\"draw-wrapper\"\r\n        style={{ cursor }}\r\n        data-readonly={readonly}\r\n        {...touchHandler}\r\n      >\r\n        <canvas ref={canvasEl} className=\"draw-canvas\" />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nDrawRaw.displayName = \"Draw\";\r\nexport const Draw = React.memo(DrawRaw);\r\n\r\nfunction usePaperItem<T extends paper.Item>() {\r\n  const tuple = useState<T>();\r\n  const [item] = tuple;\r\n  useDebugValue(item);\r\n  useEffect(() => () => void item?.remove(), [item]);\r\n  return tuple;\r\n}\r\n\r\nconst paintStroke = (() => {\r\n  const cacheMap = new WeakMap<\r\n    paper.Layer,\r\n    Map<string, { stroke: Stroke; item: paper.Item }>\r\n  >();\r\n\r\n  return (stroke: Stroke, layer: paper.Layer, readonly = false) => {\r\n    const { pathData, uid } = stroke;\r\n    const cache = cacheMap.get(layer) ?? new Map();\r\n    cacheMap.set(layer, cache);\r\n    const cached = cache.get(uid);\r\n    let item: paper.Item;\r\n    if (cached?.stroke === stroke) {\r\n      layer.addChild(cached.item);\r\n      item = cached.item;\r\n    } else {\r\n      try {\r\n        item = layer.importJSON(pathData);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n      item ??= new paper.Item();\r\n      item.name = uid;\r\n      cache.set(uid, { item, stroke });\r\n    }\r\n    item.opacity = 1;\r\n    item.guide = readonly;\r\n    return item;\r\n  };\r\n})();\r\n\r\nconst paintRects = (layers: paper.Layer[], projSize: paper.Size) => {\r\n  const [l0, l1, l2] = layers;\r\n  if (!l0 || !l1 || !l2) return [];\r\n  const bgRect = new Path.Rectangle(P_ZERO, projSize);\r\n  const clip1 = bgRect.clone();\r\n  const clip2 = bgRect.clone();\r\n  bgRect.fillColor = new Color(\"#fff\");\r\n  l0.addChild(bgRect);\r\n  l1.addChild(clip1);\r\n  l2.addChild(clip2);\r\n  l1.clipped = true;\r\n  l2.clipped = true;\r\n  return [bgRect, clip1, clip2];\r\n};\r\n\r\nconst startRect = (point: paper.Point) => {\r\n  const rect = new Path.Rectangle(point, new Size(0, 0));\r\n  rect.onFrame = () => {}; // the handle size bug\r\n  return rect;\r\n};\r\n\r\nconst startStroke = (drawCtrl: DrawCtrl, point: paper.Point, slow = false) => {\r\n  let { mode, lineWidth, eraserWidth, color, highlight } = drawCtrl;\r\n  const path = new Path();\r\n  path.add(point);\r\n  if (mode === \"erase\") {\r\n    color = \"#ccc\";\r\n    lineWidth = eraserWidth;\r\n  }\r\n  if (mode === \"select\") {\r\n    color = \"#009dec\";\r\n    lineWidth = 5;\r\n  }\r\n  const strokeColor = new Color(color);\r\n  if ((mode === \"draw\" && highlight) || (mode === \"erase\" && !slow)) {\r\n    strokeColor.alpha = 0.5;\r\n    path.blendMode = \"multiply\";\r\n  }\r\n  path.strokeColor = strokeColor;\r\n  path.strokeWidth = lineWidth;\r\n  path.strokeJoin = \"round\";\r\n  path.strokeCap = \"round\";\r\n  path.guide = true;\r\n  return path;\r\n};\r\n\r\nconst moveDash = (item: paper.Item) => {\r\n  item.dashOffset = 0;\r\n  item.dashArray = [30, 20];\r\n  item.onFrame = () => (item.dashOffset += 3);\r\n};\r\n\r\nconst scaleView = (\r\n  view: paper.View,\r\n  originPorjP: paper.Point,\r\n  dScale: number\r\n) =>\r\n  new Promise<void>((resolve) => {\r\n    if (Math.abs(dScale - 1) < 0.05) {\r\n      view.scale(dScale, originPorjP);\r\n      return resolve();\r\n    }\r\n    let aniCount = 10;\r\n    dScale = Math.pow(dScale, 1 / aniCount);\r\n    const scale = () => {\r\n      view.scale(dScale, originPorjP);\r\n      if (--aniCount > 0) requestAnimationFrame(scale);\r\n      else requestAnimationFrame(() => resolve());\r\n    };\r\n    scale();\r\n  });\r\n\r\nconst getTargetCenter = (view: paper.View, projSize: paper.Size) => {\r\n  const { x, y } = view.center;\r\n  const minSize = Size.min(view.size, projSize).divide(2);\r\n  const { width: minX, height: minY } = minSize;\r\n  const { width: maxX, height: maxY } = projSize.subtract(minSize);\r\n\r\n  const targetX = x < minX ? minX : x > maxX ? maxX : x;\r\n  const targetY = y < minY ? minY : y > maxY ? maxY : y;\r\n  return new Point(targetX, targetY);\r\n};\r\n\r\nconst putCenterBack = (view: paper.View, projSize: paper.Size) =>\r\n  new Promise<void>((resolve) => {\r\n    const targetCenter = getTargetCenter(view, projSize);\r\n    if (view.center.equals(targetCenter)) return resolve();\r\n    let aniCount = 10;\r\n    const move = () => {\r\n      const delta = view.center.subtract(targetCenter);\r\n      view.translate(delta.divide(aniCount));\r\n      if (--aniCount > 0) requestAnimationFrame(move);\r\n      else requestAnimationFrame(() => resolve());\r\n    };\r\n    requestAnimationFrame(move);\r\n  });\r\n\r\nconst checkLasso = (items: paper.Item[], selection: paper.Path) => {\r\n  const isInside = (p: paper.Path) => {\r\n    if (selection.segments.length === 4 && p.isInside(selection.bounds)) {\r\n      return true;\r\n    }\r\n    return !p.subtract(selection, { insert: false, trace: false }).compare(p);\r\n  };\r\n  return items\r\n    .filter((item) => {\r\n      if (!item.name) return false;\r\n      if (!item.bounds.intersects(selection.bounds)) return false;\r\n      if (item instanceof paper.Path) {\r\n        return isInside(item);\r\n      } else {\r\n        const checkedP = new Path.Rectangle(item.bounds);\r\n        checkedP.remove();\r\n        return isInside(checkedP) || selection.isInside(item.bounds);\r\n      }\r\n    })\r\n    .map(({ name }) => name);\r\n};\r\n\r\nconst updateGroupStyle = (items: paper.Item[], updated: Partial<DrawCtrl>) => {\r\n  const { lineWidth, color, highlight } = updated;\r\n  items.forEach((item) => {\r\n    if (item instanceof paper.PointText && color) {\r\n      const newColor = new Color(color);\r\n      item.fillColor = newColor;\r\n    }\r\n\r\n    if (!(item instanceof paper.Path)) return;\r\n\r\n    if (color) {\r\n      const newColor = new Color(color);\r\n      if (item.blendMode === \"multiply\") newColor.alpha = 0.5;\r\n      item.strokeColor = newColor;\r\n    }\r\n\r\n    if (lineWidth) item.strokeWidth = lineWidth;\r\n\r\n    if (!item.strokeColor || highlight === undefined) return;\r\n    item.strokeColor.alpha = highlight ? 0.5 : 1;\r\n    item.blendMode = highlight ? \"multiply\" : \"normal\";\r\n  });\r\n};\r\n\r\nconst getClickedText = (layer: paper.Layer, point: paper.Point) => {\r\n  const hitRes = layer.hitTest(point, { class: paper.PointText, fill: true });\r\n  if (hitRes?.item instanceof paper.PointText) return hitRes?.item;\r\n};\r\n\r\nconst startText = (point: paper.Point) => {\r\n  return new paper.PointText({\r\n    point: point.add(new Point(0, 50)),\r\n    content: \"\",\r\n    fontSize: 50,\r\n  });\r\n};\r\n\r\nconst flattenCP = (cp: paper.Item): paper.Path[] => {\r\n  if (cp instanceof paper.Path) {\r\n    return cp.isEmpty() ? [] : [cp];\r\n  }\r\n  if (cp instanceof paper.CompoundPath) {\r\n    return cp.children.map(flattenCP).flat();\r\n  }\r\n  return [];\r\n};\r\n","import { CSSProperties, FC, RefObject, useState } from \"react\";\r\nimport {\r\n  CopyOutlined,\r\n  BoldOutlined,\r\n  DeleteOutlined,\r\n  PictureTwoTone,\r\n  PictureOutlined,\r\n  BgColorsOutlined,\r\n  ZoomOutOutlined,\r\n  ZoomInOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Button, ButtonProps, Modal, Popover } from \"antd\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\r\nimport { allColors } from \"lib/color\";\r\nimport { DrawRefType } from \"component/Draw\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { Color } from \"paper/dist/paper-core\";\r\nimport \"./draw-tools.sass\";\r\n\r\nconst btnProps: ButtonProps = {\r\n  type: \"text\",\r\n  shape: \"round\",\r\n  size: \"small\",\r\n};\r\n\r\nconst getPosVars = (x: number, y: number) => {\r\n  return { \"--pos-x\": x + \"px\", \"--pos-y\": y + \"px\" } as CSSProperties;\r\n};\r\nconst getObjVars = (obj: Record<string, string | number>, unit?: string) => {\r\n  const result: Record<string, string | number> = {};\r\n  Object.entries(obj).forEach(([key, value]) => {\r\n    if (unit) value += unit;\r\n    result[\"--\" + key] = value;\r\n  });\r\n  return result as CSSProperties;\r\n};\r\n\r\nexport const SelectTool: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n  visible: boolean;\r\n  clickPoint: paper.Point;\r\n}> = ({ drawRef, visible, clickPoint }) => {\r\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\r\n\r\n  const getRaster = () => {\r\n    if (!drawRef.current) return;\r\n    const imageData = drawRef.current.rasterizeSelected();\r\n    Modal.confirm({\r\n      title: \"Screenshot\",\r\n      content: <img className=\"raster\" src={imageData} alt=\"raster\" />,\r\n      className: \"raster-modal\",\r\n      icon: <PictureTwoTone />,\r\n      okText: \"Save\",\r\n      onOk: () => saveAs(imageData, document.title.split(\" - \")[0] + \".png\"),\r\n    });\r\n  };\r\n\r\n  const { x, y } = clickPoint;\r\n  return (\r\n    <div\r\n      className=\"select-tool tool-options\"\r\n      data-visible={visible}\r\n      style={getPosVars(x, y)}\r\n    >\r\n      <Popover\r\n        trigger=\"click\"\r\n        placement=\"bottom\"\r\n        overlayClassName=\"style-pop\"\r\n        getPopupContainer={(e) => e.parentElement!}\r\n        destroyTooltipOnHide\r\n        content={\r\n          <PenPanel\r\n            updateDrawCtrl={(updated) => {\r\n              setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\r\n              drawRef.current?.mutateStyle(updated);\r\n            }}\r\n            drawCtrl={currDrawCtrl}\r\n          />\r\n        }\r\n      >\r\n        <Button icon={<BgColorsOutlined />} {...btnProps} />\r\n      </Popover>\r\n      <Button\r\n        icon={<CopyOutlined />}\r\n        onClick={() => drawRef.current?.duplicateSelected()}\r\n        {...btnProps}\r\n      />\r\n      <Button icon={<PictureOutlined />} onClick={getRaster} {...btnProps} />\r\n      <Button\r\n        danger\r\n        icon={<DeleteOutlined />}\r\n        onClick={() => drawRef.current?.deleteSelected()}\r\n        {...btnProps}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const TextTool: FC<{\r\n  pointText: paper.PointText;\r\n  drawRef: RefObject<DrawRefType>;\r\n  renderSlow: boolean;\r\n}> = ({ pointText, drawRef, renderSlow }) => {\r\n  const { view, position, fontSize, fontWeight, leading, content, rotation } =\r\n    pointText;\r\n  const { x, y } = view.projectToView(position);\r\n  const { topLeft, bottomLeft } = pointText.bounds;\r\n  const { x: bx, y: by } = view.projectToView(topLeft);\r\n  const { x: bbx, y: bby } = view.projectToView(bottomLeft);\r\n  const optionAtBottom = by < 60;\r\n\r\n  const scale = pointText.viewMatrix.scaling.x;\r\n  const { width, height } = pointText.internalBounds;\r\n\r\n  const lineHeight = +leading / +fontSize ?? 1.2;\r\n\r\n  const color = pointText.fillColor?.toCSS(true) ?? allColors[0]!;\r\n  const fontColorBtn = (\r\n    <Popover\r\n      content={\r\n        <ColorSelect\r\n          color={color}\r\n          setColor={(c) =>\r\n            drawRef.current?.mutatePointText((prev) => {\r\n              prev.fillColor = new Color(c);\r\n            })\r\n          }\r\n        />\r\n      }\r\n      trigger=\"click\"\r\n      overlayStyle={{ width: 200 }}\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n    >\r\n      <Button {...btnProps} icon={<BgColorsOutlined />} />\r\n    </Popover>\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className=\"text-tool\"\r\n      style={{\r\n        ...getObjVars({ scale, color }),\r\n        ...getObjVars({ rotation }, \"deg\"),\r\n        ...getObjVars({ width, height }, \"px\"),\r\n        ...getPosVars(x, y),\r\n      }}\r\n    >\r\n      <div\r\n        className=\"textarea-wrapper\"\r\n        data-slow={renderSlow}\r\n        style={{ fontSize, fontWeight, lineHeight }}\r\n      >\r\n        <textarea\r\n          autoFocus={!content}\r\n          placeholder=\"Text...\"\r\n          value={content}\r\n          onChange={(e) => {\r\n            drawRef.current?.mutatePointText((prev) => {\r\n              prev.content = e.target.value;\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n      <div\r\n        className=\"tool-options text-options\"\r\n        data-bottom={optionAtBottom}\r\n        style={{\r\n          ...(optionAtBottom ? getPosVars(bbx, bby) : getPosVars(bx, by)),\r\n        }}\r\n      >\r\n        {fontColorBtn}\r\n        <Button\r\n          onClick={() => {\r\n            drawRef.current?.mutatePointText((prev) => {\r\n              const bold = prev.fontWeight === \"bold\";\r\n              prev.fontWeight = bold ? \"normal\" : \"bold\";\r\n            });\r\n          }}\r\n          {...btnProps}\r\n          type={fontWeight === \"bold\" ? \"link\" : \"text\"}\r\n          icon={<BoldOutlined />}\r\n        />\r\n        <Button\r\n          {...btnProps}\r\n          icon={<ZoomOutOutlined />}\r\n          onClick={() => {\r\n            drawRef.current?.mutatePointText((prev) => {\r\n              const { topLeft } = prev.bounds;\r\n              prev.scale(0.9, topLeft);\r\n            });\r\n          }}\r\n        />\r\n        <Button\r\n          {...btnProps}\r\n          icon={<ZoomInOutlined />}\r\n          onClick={() => {\r\n            drawRef.current?.mutatePointText((prev) => {\r\n              const { topLeft } = prev.bounds;\r\n              prev.scale(1.1, topLeft);\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport { useDrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { useMemoizedFn as useEvent } from \"ahooks\";\r\nimport { Draw, DrawRefType } from \"component/Draw\";\r\nimport { SelectTool, TextTool } from \"pages/reader/tools/DrawTools\";\r\nimport { once, range } from \"lodash\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { DrawState } from \"lib/draw/DrawState\";\r\nimport { Map, Set } from \"immutable\";\r\nimport { P_ZERO } from \"component/Draw/Draw\";\r\n\r\nconst PageWrapperRaw: FC<{\r\n  drawState: DrawState;\r\n  teamStateMap?: Map<string, DrawState>;\r\n  thumbnail?: string;\r\n  pdfIndex?: number;\r\n  noteID?: string;\r\n  updateState?: (ds: DrawState) => void;\r\n  onViewChange?: (ratio: number) => void;\r\n  preview?: boolean;\r\n  preload?: boolean;\r\n  ignores?: Set<string>;\r\n  skipInView?: boolean;\r\n}> = ({\r\n  thumbnail,\r\n  drawState,\r\n  teamStateMap,\r\n  updateState,\r\n  pdfIndex,\r\n  noteID = \"\",\r\n  preview = false,\r\n  onViewChange,\r\n  preload = false,\r\n  ignores = Set<string>(),\r\n  skipInView = false,\r\n}) => {\r\n  const threshold = onViewChange && range(0, 1.2, 0.2);\r\n  const [ref, visible, entry] = useInView({ threshold, skip: skipInView });\r\n  useEffect(() => {\r\n    if (!onViewChange) return;\r\n    if (!entry || !visible) return onViewChange(0);\r\n    onViewChange(entry.intersectionRatio);\r\n  }, [visible, entry, onViewChange]);\r\n\r\n  const [fullImg, setFullImg] = useState<string>();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const loadImage = useCallback(\r\n    once(async () => {\r\n      if (!pdfIndex || !noteID) return;\r\n      const { getNotePageImage } = await import(\"lib/note/pdfImage\");\r\n      setFullImg(await getNotePageImage(noteID, pdfIndex));\r\n    }),\r\n    [pdfIndex, noteID]\r\n  );\r\n\r\n  const show = visible || preload;\r\n  useEffect(() => {\r\n    if (!preview && show) loadImage();\r\n  }, [show, preview, loadImage]);\r\n\r\n  const otherStates = useMemo(\r\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\r\n    [teamStateMap, ignores]\r\n  );\r\n\r\n  const imageLoaded = Boolean(fullImg || !pdfIndex);\r\n  const drawShow = show && imageLoaded;\r\n\r\n  const { height, width } = drawState;\r\n  const ratio = height / width;\r\n\r\n  return (\r\n    <div ref={ref} className=\"page-wrapper\">\r\n      <svg className=\"size-holder\" viewBox={`0 0 100 ${ratio * 100}`} />\r\n      {drawShow && (\r\n        <DrawWrapper\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          updateState={updateState}\r\n          imgSrc={fullImg || thumbnail}\r\n          preview={preview}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nPageWrapperRaw.displayName = \"PageWrapper\";\r\nexport const PageWrapper = React.memo(PageWrapperRaw);\r\n\r\nconst DrawWrapper: FC<{\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}> = ({ drawState, updateState, otherStates, preview = false, imgSrc }) => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const drawRef = useRef<DrawRefType>(null);\r\n  const [selectShow, setSelectShow] = useState(false);\r\n  const [clickPoint, setClickPoint] = useState<paper.Point>(P_ZERO);\r\n  const [pointText, setPointText] = useState<paper.PointText>();\r\n  const [renderSlow, setRenderSlow] = useState(false);\r\n\r\n  const handleChange = useEvent(\r\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\r\n      if (!updateState) return;\r\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\r\n      if (newDS === drawState) return;\r\n      updateState(newDS);\r\n    }\r\n  );\r\n\r\n  const toggleSelectTool = useEvent(\r\n    (active: boolean, clickPoint?: paper.Point) => {\r\n      setClickPoint((p) => clickPoint ?? p);\r\n      setSelectShow(active);\r\n    }\r\n  );\r\n  const toggleTextTool = useEvent(\r\n    (pointText: paper.PointText | undefined, slow: boolean) => {\r\n      setPointText(pointText);\r\n      setRenderSlow(slow);\r\n    }\r\n  );\r\n\r\n  return preview ? (\r\n    <Draw\r\n      drawState={drawState}\r\n      otherStates={otherStates}\r\n      imgSrc={imgSrc}\r\n      readonly\r\n    />\r\n  ) : (\r\n    <>\r\n      <Draw\r\n        drawState={drawState}\r\n        otherStates={otherStates}\r\n        onChange={handleChange}\r\n        imgSrc={imgSrc}\r\n        drawCtrl={drawCtrl}\r\n        ref={drawRef}\r\n        toggleTextTool={toggleTextTool}\r\n        toggleSelectTool={toggleSelectTool}\r\n      />\r\n      <SelectTool\r\n        drawRef={drawRef}\r\n        visible={selectShow}\r\n        clickPoint={clickPoint}\r\n      />\r\n      {pointText && (\r\n        <TextTool\r\n          drawRef={drawRef}\r\n          pointText={pointText}\r\n          renderSlow={renderSlow}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { PageWrapper } from \"./PageWrapper\";\r\nimport \"./page-wrapper.sass\";\r\nexport default PageWrapper;\r\n","import localforage from \"localforage\";\r\nimport React, {\r\n  FC,\r\n  PropsWithChildren,\r\n  useContext,\r\n  useDebugValue,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nexport interface DrawCtrl {\r\n  mode: \"draw\" | \"erase\" | \"select\" | \"text\";\r\n  finger: boolean;\r\n  lineWidth: number;\r\n  eraserWidth: number;\r\n  color: string;\r\n  highlight: boolean;\r\n  lasso: boolean;\r\n  pixelEraser: boolean;\r\n  widthList: number[];\r\n}\r\n\r\nexport const defaultWidthList = [10, 20, 30, 50];\r\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\r\n  mode: \"draw\",\r\n  finger: true,\r\n  lineWidth: 10,\r\n  eraserWidth: 10,\r\n  color: \"#000000\",\r\n  highlight: false,\r\n  lasso: true,\r\n  pixelEraser: false,\r\n  widthList: defaultWidthList,\r\n};\r\n\r\nasync function getDrawCtrl() {\r\n  let drawCtrl = await localforage.getItem<DrawCtrl>(\"DRAW_CTRL\");\r\n  if (!drawCtrl) {\r\n    drawCtrl = defaultDrawCtrl;\r\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n  }\r\n  return drawCtrl;\r\n}\r\n\r\nasync function saveDrawCtrl(drawCtrl: DrawCtrl) {\r\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n}\r\n\r\nconst DrawCtrlContext = React.createContext({\r\n  drawCtrl: defaultDrawCtrl,\r\n  updateDrawCtrl: (() => {}) as (updated: Partial<DrawCtrl>) => void,\r\n});\r\n\r\nexport function useDrawCtrl() {\r\n  const { drawCtrl } = useContext(DrawCtrlContext);\r\n  useDebugValue(drawCtrl);\r\n  return drawCtrl;\r\n}\r\n\r\nexport function useUpdateDrawCtrl() {\r\n  const { updateDrawCtrl } = useContext(DrawCtrlContext);\r\n  return updateDrawCtrl;\r\n}\r\n\r\nexport const DrawCtrlProvider: FC<PropsWithChildren> = ({ children }) => {\r\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\r\n  useEffect(() => {\r\n    getDrawCtrl().then(setDrawCtrl);\r\n  }, []);\r\n\r\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\r\n    setDrawCtrl((prev) => {\r\n      const newCtrl = { ...prev, ...updated };\r\n      saveDrawCtrl(newCtrl);\r\n      return newCtrl;\r\n    });\r\n  };\r\n  return (\r\n    <DrawCtrlContext.Provider value={{ drawCtrl, updateDrawCtrl }}>\r\n      {children}\r\n    </DrawCtrlContext.Provider>\r\n  );\r\n};\r\n","export function createVirtualCanvas(width: number, height: number) {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const context = canvas.getContext(\"2d\");\r\n  if (!context) {\r\n    throw new Error(\"can't get virtual canvas context\");\r\n  }\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  return { canvas, context };\r\n}\r\n\r\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  const ctx = canvas.getContext('2d');\r\n  ctx?.clearRect(0, 0, 1, 1);\r\n}\r\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\r\nimport { defaultWidthList, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorCirle } from \"component/ColorCircle\";\r\nimport { WIDTH } from \"lib/draw/DrawState\";\r\nimport { Popover, Segmented, Slider } from \"antd\";\r\nimport { allColors } from \"lib/color\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport IconFont from \"component/IconFont\";\r\nimport { List } from \"immutable\";\r\nimport \"./pen-panel.sass\";\r\n\r\nexport const PenPanel: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n}> = ({ updateDrawCtrl, drawCtrl }) => {\r\n  const { highlight, color } = drawCtrl;\r\n  const [panelBlur, setPanelBlur] = useState(false);\r\n\r\n  return (\r\n    <div className=\"pen-panel\" data-blur={panelBlur} data-hi={highlight}>\r\n      <div className=\"pen-status\">\r\n        <WidthSelect\r\n          updateDrawCtrl={updateDrawCtrl}\r\n          drawCtrl={drawCtrl}\r\n          setPanelBlur={setPanelBlur}\r\n        />\r\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\r\n      </div>\r\n      <ColorSelect\r\n        color={color || \"\"}\r\n        setColor={(c) => updateDrawCtrl({ color: c })}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const WidthSelect: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n  setPanelBlur?: Setter<boolean>;\r\n  field?: \"lineWidth\" | \"eraserWidth\";\r\n}> = ({\r\n  updateDrawCtrl,\r\n  drawCtrl,\r\n  setPanelBlur = () => {},\r\n  field = \"lineWidth\",\r\n}) => {\r\n  const currWidth = drawCtrl[field];\r\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\r\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\r\n\r\n  const chosen = useMemo(\r\n    () => widthList.indexOf(currWidth ?? -1),\r\n    [currWidth, widthList]\r\n  );\r\n\r\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\r\n  useEffect(() => {\r\n    if (popShow.includes(true)) setPanelBlur(true);\r\n    else setPanelBlur(false);\r\n  }, [popShow, setPanelBlur]);\r\n\r\n  const realSizeStyle = (width: number) =>\r\n    ({\r\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width})`,\r\n    } as CSSProperties);\r\n\r\n  const options = [\r\n    { value: -1, label: null },\r\n    ...widthList.map((width, index) => ({\r\n      value: index,\r\n      label: (\r\n        <Popover\r\n          visible={popShow.get(index)}\r\n          onVisibleChange={(v) => setPopShow((prev) => prev.set(index, v))}\r\n          trigger={chosen === index ? [\"click\"] : []}\r\n          placement=\"bottom\"\r\n          destroyTooltipOnHide\r\n          content={\r\n            <Slider\r\n              min={5}\r\n              max={100}\r\n              className=\"ctrl-slider\"\r\n              defaultValue={width}\r\n              onAfterChange={(w) => {\r\n                if (widthList.includes(w)) {\r\n                  setPopShow((prev) => prev.set(index, false));\r\n                  return updateDrawCtrl({ [field]: w });\r\n                }\r\n                const newWL = widthList.slice();\r\n                newWL[index] = w;\r\n                updateDrawCtrl({ widthList: newWL, [field]: w });\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          <div className=\"circle-wrapper\" style={realSizeStyle(width)}>\r\n            <ColorCirle className={\"width-circle \" + field} color={color} />\r\n          </div>\r\n        </Popover>\r\n      ),\r\n    })),\r\n  ];\r\n\r\n  return (\r\n    <Segmented\r\n      className=\"width-seg\"\r\n      value={chosen}\r\n      options={options}\r\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 10 })}\r\n    />\r\n  );\r\n};\r\n\r\nconst HighlightSwitch: FC<{\r\n  checked?: boolean;\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ checked = false, updateDrawCtrl }) => {\r\n  return (\r\n    <label className=\"hi-wrapper\">\r\n      <input\r\n        type=\"checkbox\"\r\n        name=\"highlight\"\r\n        checked={checked}\r\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\r\n      />\r\n      <div className=\"hi-switch\">\r\n        <IconFont type=\"icon-Highlight\" />\r\n      </div>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport const ColorSelect: FC<{\r\n  color: string;\r\n  setColor: (color: string) => void;\r\n}> = ({ setColor, color }) => (\r\n  <div className=\"color-select\">\r\n    {allColors.map((c) => (\r\n      <label key={c}>\r\n        <input\r\n          checked={color === c}\r\n          type=\"radio\"\r\n          name=\"color\"\r\n          onChange={(e) => e.target.checked && setColor(c)}\r\n        />\r\n        <div\r\n          data-color={c}\r\n          className=\"circle\"\r\n          style={{ backgroundColor: c, borderColor: c }}\r\n        />\r\n      </label>\r\n    ))}\r\n  </div>\r\n);\r\n"],"names":["createFromIconfontCN","scriptUrl","getRotateCursorImage","cache","Map","createVirtualCanvas","canvas","context","image","Image","src","angle","Math","round","cached","get","translate","rotate","PI","drawImage","data","toDataURL","clearRect","resetTransform","set","getRotateCurcor","usePreventTouch","allowFinger","isTouch","useRef","checkPoniter","e","isPrimary","current","pointerType","preventTouch","touch","touches","touchType","isApplePencil","length","isEventValid","stopPropagation","onPointerDownCapture","onPointerMoveCapture","onTouchStartCapture","onTouchMoveCapture","getGridRange","bounds","topLeft","bottomRight","floor","x","ceil","y","setGridItem","grid","item","replaced","strokeBounds","xmin","xmax","ymin","ymax","delete","add","getGridItems","itemSet","Set","forEach","Array","from","P_ZERO","Point","DrawRaw","React","ref","drawState","otherStates","onChange","drawCtrl","defaultDrawCtrl","readonly","imgSrc","toggleSelectTool","toggleTextTool","width","height","projSize","useMemo","Size","mode","finger","lasso","eraserWidth","canvasEl","scope","paper","useState","group","setGroup","usePaperItem","path","setPath","rect","setRect","rotateHandle","setRotateHandle","useEffect","cvs","scp","setup","settings","handleSize","hitTolerance","Layer","visible","project","layers","activate","Tool","view","remove","releaseCanvas","rects","paintRects","r","useSize","canvasWidth","ratio","viewSize","multiply","scale","l","update","imgRaster","setImgRaster","raster","Raster","addChild","sendToBack","onLoad","fitBounds","Rectangle","bringToFront","mergedStrokes","DrawState","getStrokeList","renderSlow","deferTimerID","deferRender","setDefer","l1","render","tempGroup","timeBeforeRender","performance","now","removeChildren","stroke","self","hasStroke","uid","paintStroke","push","unrasterizeCanvas","pathClones","c","duration","window","setTimeout","clearTimeout","hitRef","selected","setSelected","paperMode","chosenIDs","setChosenIDs","chosenItems","IDSet","filter","has","name","resetSelect","useCallback","undefined","pointText","ptProxy","Proxy","layerRaster","rasterizeLayer","clip","force","l0","clipMask","prevClip","firstChild","replaceWith","insertAbove","dpi","devicePixelRatio","resolution","rasterize","addTo","unrasterizeLayer","lr","canvasRaster","rasterizeCanvas","element","opacity","cr","downPath","startStroke","point","downRect","startRect","pointBeforeDrag","handleDown","draw","erase","select","contains","hitRes","hitTest","segments","text","dragPath","smooth","moveSelected","delta","handleDrag","s1","s2","s3","segment","center","axis","subtract","line","setCursor","moveP","baseP","next","diagonal","strokeWidth","rBaseP","tool","maxDistance","erased","itemGrid","test","wnum","hnum","gernerateGrid","handleToolDrag","layer","ew","hitOption","class","tolerance","hitTestAll","topItem","parent","pixelEraser","radius","circle","Path","insert","sub","trace","guide","handleUp","simplify","clone","pathData","exportJSON","prev","items","clear","splitters","map","paths","flattenCP","p","erasedList","selection","abs","area","closePath","moveDash","checkLasso","link","topCenter","lastSegment","bc","bottomCenter","projectToView","handleSelectedCursor","clickPoint","equals","updateMutation","submitText","handleTextCursor","t","getClickedText","startText","justification","prevTextData","cursor","lineWidth","size","half","getCircleCursor","handleMove","handleKeyDown","up","down","left","right","key","preventDefault","handleKeyUp","deleteSelected","handler","onMouseDown","onMouseDrag","onMouseUp","onMouseMove","onKeyDown","onKeyUp","mutations","mutateStyle","updated","updateGroupStyle","duplicateSelected","transP","divide","copies","pathDataList","IDs","rasterizeSelected","cancelText","content","mutatePointText","cb","pt","useImperativeHandle","document","addEventListener","removeEventListener","usePinch","memo","offset","first","last","origin","lastScale","lastOrigin","elPos","originRawP","getBoundingClientRect","originViewP","originPorjP","viewToProject","zoom","dScale","Promise","all","putCenterBack","scaleView","then","scaleBounds","max","min","rubberband","target","touchHandler","className","style","displayName","Draw","tuple","useDebugValue","cacheMap","WeakMap","importJSON","console","error","l2","bgRect","clip1","clip2","fillColor","Color","clipped","onFrame","slow","color","highlight","strokeColor","alpha","blendMode","strokeJoin","strokeCap","dashOffset","dashArray","resolve","aniCount","pow","requestAnimationFrame","targetCenter","minSize","minX","minY","maxX","maxY","targetX","targetY","getTargetCenter","move","isInside","compare","intersects","checkedP","newColor","fill","fontSize","cp","isEmpty","children","flat","btnProps","type","shape","getPosVars","getObjVars","obj","unit","result","Object","entries","value","SelectTool","drawRef","currDrawCtrl","setCurrDrawCtrl","trigger","placement","overlayClassName","getPopupContainer","parentElement","destroyTooltipOnHide","PenPanel","updateDrawCtrl","icon","BgColorsOutlined","CopyOutlined","onClick","PictureOutlined","imageData","Modal","title","alt","PictureTwoTone","okText","onOk","saveAs","split","danger","DeleteOutlined","TextTool","position","fontWeight","leading","rotation","bottomLeft","bx","by","bbx","bby","optionAtBottom","viewMatrix","scaling","internalBounds","lineHeight","toCSS","allColors","fontColorBtn","setColor","overlayStyle","autoFocus","placeholder","bold","BoldOutlined","ZoomOutOutlined","Z","ZoomInOutlined","PageWrapperRaw","thumbnail","teamStateMap","updateState","pdfIndex","noteID","preview","onViewChange","preload","ignores","skipInView","threshold","range","useInView","skip","entry","intersectionRatio","fullImg","setFullImg","loadImage","once","getNotePageImage","show","deleteAll","toList","toArray","imageLoaded","Boolean","drawShow","viewBox","DrawWrapper","useDrawCtrl","selectShow","setSelectShow","setClickPoint","setPointText","setRenderSlow","handleChange","useEvent","arg","newDS","active","defaultWidthList","widthList","getDrawCtrl","localforage","saveDrawCtrl","DrawCtrlContext","useContext","useUpdateDrawCtrl","DrawCtrlProvider","setDrawCtrl","Provider","newCtrl","createElement","getContext","Error","ctx","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","field","currWidth","chosen","indexOf","List","popShow","setPopShow","includes","realSizeStyle","WIDTH","options","label","index","onVisibleChange","v","defaultValue","onAfterChange","w","newWL","slice","i","IconFont","backgroundColor","borderColor"],"sourceRoot":""}