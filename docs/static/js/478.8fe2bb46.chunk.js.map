{"version":3,"file":"static/js/478.8fe2bb46.chunk.js","mappings":"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","sources":["component/IconFont.tsx","component/Draw/cursor/cursor.ts","component/Draw/touch.ts","component/Draw/grid.tsx","component/Draw/Draw.tsx","pages/reader/tools/DrawTools.tsx","component/PageWrapper/PageWrapper.tsx","component/PageWrapper/index.tsx","lib/draw/DrawCtrl.tsx","lib/draw/canvas.ts","pages/reader/tools/PenPanel.tsx"],"sourcesContent":["import { createFromIconfontCN } from \"@ant-design/icons\";\r\n\r\nexport default createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_3181679_yo844n7qgns.js\",\r\n});\r\n","import { createVirtualCanvas } from \"lib/draw/canvas\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport rotateImg from \"./rotate.png\";\r\n\r\nexport const getCircleCursor = (drawCtrl: DrawCtrl, ratio: number) => {\r\n  const { lineWidth, eraserWidth, mode } = drawCtrl;\r\n  const size = ratio * (mode === \"erase\" ? eraserWidth : lineWidth);\r\n  if (size < 5) return \"crosshair\";\r\n  const half = size / 2;\r\n  return `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23FFF7\" width=\"${size}\" height=\"${size}\" viewBox=\"0 0 10 10\"><circle cx=\"5\" cy=\"5\" r=\"5\"/></svg>') ${half} ${half}, auto`;\r\n};\r\n\r\nconst getRotateCursorImage = (() => {\r\n  const cache = new Map<number, string>();\r\n  const { canvas, context } = createVirtualCanvas(44, 44);\r\n  const image = new Image();\r\n  image.src = rotateImg;\r\n  return (angle: number) => {\r\n    angle = Math.round(angle / 10) * 10;\r\n    const cached = cache.get(angle);\r\n    if (cached) return cached;\r\n    context.translate(22, 22);\r\n    context.rotate((angle * Math.PI) / 180);\r\n    context.drawImage(image, -22, -22);\r\n    const data = canvas.toDataURL();\r\n    context.clearRect(-22, -22, 44, 44);\r\n    context.resetTransform();\r\n    cache.set(angle, data);\r\n    return data;\r\n  };\r\n})();\r\n\r\nexport const getRotateCurcor = (angle: number) => {\r\n  return `url(${getRotateCursorImage(angle)}) 22 22, auto`;\r\n};\r\n","import { PointerEvent, TouchEvent, useEffect, useRef } from \"react\";\r\n\r\ntype iOSTouch = Touch & {\r\n  force?: number;\r\n  touchType?: \"stylus\" | \"direct\";\r\n};\r\n\r\nexport function isApplePencil(e: TouchEvent) {\r\n  const touch = e.touches[0] as iOSTouch;\r\n  return touch?.touchType === \"stylus\";\r\n}\r\n\r\nexport function usePreventTouch(\r\n  allowFinger: boolean\r\n): React.HTMLAttributes<HTMLDivElement> {\r\n  const isTouch = useRef(false);\r\n  const checkPoniter = (e: PointerEvent) =>\r\n    e.isPrimary && (isTouch.current = e.pointerType === \"touch\");\r\n\r\n  const isEventValid = (e: TouchEvent) =>\r\n    !isTouch.current ||\r\n    isApplePencil(e) ||\r\n    (allowFinger && e.touches.length === 1);\r\n\r\n  const preventTouch = (e: TouchEvent) =>\r\n    isEventValid(e) || e.stopPropagation();\r\n\r\n  return {\r\n    onPointerDownCapture: checkPoniter,\r\n    onPointerMoveCapture: checkPoniter,\r\n    onTouchStartCapture: preventTouch,\r\n    onTouchMoveCapture: preventTouch,\r\n  };\r\n}\r\n\r\nexport function usePreventGesture() {\r\n  useEffect(() => {\r\n    const handler = (e: Event) => e.preventDefault();\r\n    document.addEventListener(\"gesturestart\", handler);\r\n    document.addEventListener(\"gesturechange\", handler);\r\n    document.addEventListener(\"gestureend\", handler);\r\n    return () => {\r\n      document.removeEventListener(\"gesturestart\", handler);\r\n      document.removeEventListener(\"gesturechange\", handler);\r\n      document.removeEventListener(\"gestureend\", handler);\r\n    };\r\n  }, []);\r\n}\r\n","export const gernerateGrid = (\r\n  group: paper.Item[],\r\n  width: number,\r\n  height: number\r\n) => {\r\n  const wnum = Math.ceil(width / 100);\r\n  const hnum = Math.ceil(height / 100);\r\n  const grid = Array.from({ length: wnum }, () =>\r\n    Array.from({ length: hnum }, () => new Set<paper.Item>())\r\n  );\r\n  group.forEach((item) => setGridItem(grid, item));\r\n  return grid;\r\n};\r\n\r\nconst getGridRange = (bounds: paper.Rectangle) => {\r\n  const { topLeft, bottomRight } = bounds;\r\n  return [\r\n    Math.floor(topLeft.x / 100),\r\n    Math.ceil(bottomRight.x / 100),\r\n    Math.floor(topLeft.y / 100),\r\n    Math.ceil(bottomRight.y / 100),\r\n  ] as [number, number, number, number];\r\n};\r\nexport const setGridItem = (\r\n  grid: Set<paper.Item>[][],\r\n  item: paper.Item,\r\n  replaced?: paper.Item\r\n) => {\r\n  const bounds = (replaced ?? item).strokeBounds;\r\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\r\n  for (let x = xmin; x <= xmax; x += 1) {\r\n    for (let y = ymin; y <= ymax; y += 1) {\r\n      replaced && grid[x]?.[y]?.delete(replaced);\r\n      grid[x]?.[y]?.add(item);\r\n    }\r\n  }\r\n};\r\nexport const getGridItems = (\r\n  grid: Set<paper.Item>[][],\r\n  bounds: paper.Rectangle\r\n) => {\r\n  const itemSet = new Set<paper.Item>();\r\n  const [xmin, xmax, ymin, ymax] = getGridRange(bounds);\r\n  for (let x = xmin; x <= xmax; x += 1) {\r\n    for (let y = ymin; y <= ymax; y += 1) {\r\n      grid[x]?.[y]?.forEach((item) => itemSet.add(item));\r\n    }\r\n  }\r\n  return Array.from(itemSet);\r\n};\r\n","import React, {\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useDebugValue,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport paper, {\r\n  Path,\r\n  Size,\r\n  Point,\r\n  Color,\r\n  Raster,\r\n  Layer,\r\n  Rectangle,\r\n} from \"paper/dist/paper-core\";\r\nimport { usePinch } from \"@use-gesture/react\";\r\nimport useSize from \"@react-hook/size\";\r\nimport { useMemoizedFn as useEvent } from \"ahooks\";\r\nimport { DrawState, Mutation, Splitter, Stroke } from \"lib/draw/DrawState\";\r\nimport { defaultDrawCtrl, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { releaseCanvas } from \"lib/draw/canvas\";\r\nimport { getCircleCursor, getRotateCurcor } from \"./cursor\";\r\nimport { usePreventTouch, usePreventGesture } from \"./touch\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport { setGridItem, getGridItems, gernerateGrid } from \"./grid\";\r\n\r\nexport interface DrawRefType {\r\n  deleteSelected: () => void;\r\n  duplicateSelected: () => void;\r\n  rasterizeSelected: () => string;\r\n  mutateStyle: (updated: Partial<DrawCtrl>) => void;\r\n  mutatePointText: (cb: (prev: paper.PointText) => void) => void;\r\n}\r\ninterface DrawPropType {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  onChange?: Setter<DrawState>;\r\n  toggleSelectTool?: (active: boolean, clickPoint?: paper.Point) => void;\r\n  toggleTextTool?: (pt: paper.PointText | undefined, slow: boolean) => void;\r\n  drawCtrl?: DrawCtrl;\r\n  readonly?: boolean;\r\n  imgSrc?: string;\r\n}\r\n\r\nconst HIT_TOLERANCE = 20;\r\nexport const P_ZERO = new Point(0, 0);\r\n\r\nconst DrawRaw = React.forwardRef<DrawRefType, DrawPropType>(\r\n  (\r\n    {\r\n      drawState,\r\n      otherStates,\r\n      onChange = () => {},\r\n      drawCtrl = defaultDrawCtrl,\r\n      readonly = false,\r\n      imgSrc,\r\n      toggleSelectTool = () => {},\r\n      toggleTextTool = () => {},\r\n    },\r\n    ref\r\n  ) => {\r\n    const { width, height } = drawState;\r\n    const projSize = useMemo(() => new Size(width, height), [width, height]);\r\n    const { mode, finger, lasso, eraserWidth } = drawCtrl;\r\n\r\n    const canvasEl = useRef<HTMLCanvasElement>(null);\r\n    const scope = useRef(new paper.PaperScope());\r\n    const [group, setGroup] = useState<paper.Item[]>([]);\r\n    const [path, setPath] = usePaperItem<paper.Path>();\r\n    const [rotateHandle, setRotateHandle] = usePaperItem<paper.Path>();\r\n\r\n    toggleSelectTool = useEvent(toggleSelectTool);\r\n    toggleTextTool = useEvent(toggleTextTool);\r\n\r\n    useEffect(() => {\r\n      const cvs = canvasEl.current;\r\n      const scp = scope.current;\r\n      if (!cvs) return;\r\n\r\n      scp.setup(cvs);\r\n      scp.settings.handleSize = 10;\r\n      scp.settings.hitTolerance = HIT_TOLERANCE;\r\n      [0, 1, 2].forEach(() => (new Layer().visible = false));\r\n      scp.project.layers[2]?.activate();\r\n      new scp.Tool();\r\n\r\n      return () => {\r\n        scp.view?.remove();\r\n        releaseCanvas(cvs);\r\n      };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      scope.current.activate();\r\n      const { layers } = scope.current.project;\r\n      const rects = paintRects(layers, projSize);\r\n\r\n      return () => rects.forEach((r) => r.remove());\r\n    }, [projSize]);\r\n\r\n    const [canvasWidth] = useSize(canvasEl);\r\n    const ratio = canvasWidth / width;\r\n    useEffect(() => {\r\n      if (!ratio) return;\r\n      const scp = scope.current;\r\n      scp.view.viewSize = projSize.multiply(ratio);\r\n      scp.view.scale(ratio, P_ZERO);\r\n      scp.project.layers.forEach((l) => (l.visible = true));\r\n      scp.view.update();\r\n\r\n      return () => scp.view?.scale(1 / ratio, P_ZERO);\r\n    }, [ratio, projSize]);\r\n\r\n    const [imgRaster, setImgRaster] = usePaperItem();\r\n    useEffect(() => {\r\n      if (!imgSrc) return;\r\n      scope.current.activate();\r\n      const raster = new Raster(imgSrc);\r\n      raster.project.layers[0]?.addChild(raster);\r\n      raster.sendToBack();\r\n      raster.onLoad = () => {\r\n        raster.view.update();\r\n        raster.fitBounds(new Rectangle(projSize));\r\n        raster.bringToFront();\r\n      };\r\n      setImgRaster(raster);\r\n    }, [imgSrc, projSize, setImgRaster]);\r\n\r\n    const mergedStrokes = useMemo(\r\n      () =>\r\n        otherStates\r\n          ? DrawState.mergeStates(drawState, ...otherStates)\r\n          : drawState.getStrokeList(),\r\n      [drawState, otherStates]\r\n    );\r\n\r\n    const renderSlow = useRef(false);\r\n    const deferTimerID = useRef(0);\r\n    const deferRender = useRef(false);\r\n    const setDefer = () => (deferRender.current = renderSlow.current);\r\n    if (readonly) setDefer();\r\n\r\n    useEffect(() => {\r\n      const [, l1] = scope.current.project.layers;\r\n      if (!l1) return;\r\n      const render = () => {\r\n        const tempGroup: paper.Item[] = [];\r\n        const timeBeforeRender = performance.now();\r\n        scope.current.activate();\r\n        // clean-up layer_1 except the clip mask.\r\n        l1.removeChildren(1);\r\n        mergedStrokes.forEach((stroke) => {\r\n          const self = drawState.hasStroke(stroke.uid);\r\n          const item = paintStroke(stroke, l1, !self);\r\n          if (self) tempGroup.push(item);\r\n        });\r\n        setGroup(tempGroup);\r\n\r\n        unrasterizeCanvas();\r\n        deferRender.current = false;\r\n        pathClones.current.forEach((c) => c.remove());\r\n        pathClones.current = [];\r\n\r\n        scope.current.view.update();\r\n        const duration = performance.now() - timeBeforeRender;\r\n        renderSlow.current = duration > 16;\r\n      };\r\n\r\n      if (deferRender.current) {\r\n        deferTimerID.current = window.setTimeout(render, 1000);\r\n      } else render();\r\n\r\n      // cancel previous render timer.\r\n      return () => window.clearTimeout(deferTimerID.current);\r\n    }, [mergedStrokes, drawState]);\r\n\r\n    const hitRef = useRef<paper.HitResult>();\r\n    const [selected, setSelected] = useState(false);\r\n    const paperMode = mode === \"select\" && selected ? \"selected\" : mode;\r\n    const [chosenIDs, setChosenIDs] = useState<string[]>([]);\r\n    const chosenItems = useMemo(() => {\r\n      const IDSet = new Set(chosenIDs);\r\n      return group.filter((item) => IDSet.has(item.name));\r\n    }, [group, chosenIDs]);\r\n\r\n    const resetSelect = useEvent(() => {\r\n      setSelected(false);\r\n      setPath(undefined);\r\n      setRotateHandle(undefined);\r\n      setChosenIDs([]);\r\n      toggleSelectTool(false);\r\n    });\r\n\r\n    useEffect(() => {\r\n      if (mode === \"select\") return resetSelect;\r\n    }, [mode, resetSelect]);\r\n    useEffect(() => resetSelect, [lasso, resetSelect]);\r\n\r\n    // reset selection after redo/undo\r\n    useEffect(() => {\r\n      const type = drawState.lastOp?.type ?? \"\";\r\n      if (/^redo|undo$/.test(type)) resetSelect();\r\n    }, [drawState, resetSelect]);\r\n\r\n    useEffect(() => {\r\n      toggleSelectTool(false);\r\n      if (pointText.current) {\r\n        const ptProxy = new Proxy(pointText.current, {});\r\n        toggleTextTool(ptProxy, renderSlow.current);\r\n      }\r\n    }, [canvasWidth, toggleSelectTool, toggleTextTool]);\r\n\r\n    const layerRaster = useRef<paper.Raster>();\r\n    const rasterizeLayer = (clip: paper.Path, force = false) => {\r\n      if (!renderSlow.current && !force) return;\r\n      const [l0, l1] = scope.current.project.layers;\r\n      if (!l0 || !l1) return;\r\n      l1.visible = true;\r\n      clip.clipMask = true;\r\n      const prevClip = l1.firstChild;\r\n      prevClip.replaceWith(clip);\r\n      imgRaster?.insertAbove(clip);\r\n\r\n      const dpi = 72 * devicePixelRatio;\r\n      const resolution = (canvasWidth / clip.bounds.width) * dpi;\r\n      let raster = layerRaster.current;\r\n      raster = layerRaster.current = l1.rasterize({ raster, resolution });\r\n      raster.visible = true;\r\n\r\n      l1.visible = false;\r\n      clip.replaceWith(prevClip);\r\n      imgRaster?.addTo(l0);\r\n    };\r\n    const unrasterizeLayer = () => {\r\n      scope.current.activate();\r\n      const [, l1] = scope.current.project.layers;\r\n      const lr = layerRaster.current;\r\n      if (!l1 || !lr) return;\r\n      l1.visible = true;\r\n      lr.visible = false;\r\n    };\r\n\r\n    const canvasRaster = useRef<paper.Raster>();\r\n    // raster changes with the size of canvas element\r\n    useEffect(\r\n      () => () => {\r\n        canvasRaster.current?.remove();\r\n        canvasRaster.current = undefined;\r\n      },\r\n      [canvasWidth]\r\n    );\r\n    const rasterizeCanvas = () => {\r\n      if (!renderSlow.current) return;\r\n      // rasterize the canvas only once\r\n      if (canvasRaster.current?.visible === true) return;\r\n      scope.current.activate();\r\n      const { view } = scope.current;\r\n      // create a raster of the canvas element's size only once.\r\n      const raster = (canvasRaster.current ??= new Raster(\r\n        view.viewSize.multiply(devicePixelRatio)\r\n      ));\r\n      raster.drawImage(view.element, P_ZERO);\r\n      raster.fitBounds(view.bounds);\r\n      raster.visible = true;\r\n      raster.opacity = process.env.NODE_ENV === \"production\" ? 1 : 0.8;\r\n      const [, l1] = scope.current.project.layers;\r\n      l1 && (l1.visible = false);\r\n    };\r\n    const unrasterizeCanvas = () => {\r\n      scope.current.activate();\r\n      const [, l1] = scope.current.project.layers;\r\n      const cr = canvasRaster.current;\r\n      const lr = layerRaster.current;\r\n      if (!l1 || !cr) return;\r\n      cr.visible = false;\r\n      // keep layer_1 hidden unless all 2 raster is hidden.\r\n      if (lr?.visible !== true) l1.visible = true;\r\n    };\r\n\r\n    const downPath = (e: paper.MouseEvent) => {\r\n      rasterizeCanvas();\r\n      setPath(startStroke(drawCtrl, e.point, renderSlow.current));\r\n    };\r\n    const downRect = (e: paper.MouseEvent) => {\r\n      rasterizeCanvas();\r\n      setPath(startRect(e.point));\r\n    };\r\n    const pointBeforeDrag = useRef(P_ZERO);\r\n\r\n    const handleDown = {\r\n      draw(e: paper.MouseEvent) {\r\n        setDefer();\r\n        downPath(e);\r\n      },\r\n      erase: downPath,\r\n      select: lasso ? downPath : downRect,\r\n      selected(e: paper.MouseEvent) {\r\n        toggleSelectTool(false);\r\n        pointBeforeDrag.current = e.point;\r\n        if (!path) return;\r\n        if (!lasso) {\r\n          // check if the point hit the segment point.\r\n          let hitRes =\r\n            path.hitTest(e.point, { segments: true }) ??\r\n            rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n          hitRef.current = hitRes;\r\n          if (hitRes) return;\r\n        }\r\n\r\n        // if click outside, reset the selection.\r\n        if (!path.contains(e.point)) {\r\n          resetSelect();\r\n          setRotateHandle(undefined);\r\n          lasso ? downPath(e) : downRect(e);\r\n        }\r\n      },\r\n      text: null,\r\n    }[paperMode];\r\n\r\n    const dragPath = (e: paper.MouseEvent) => {\r\n      // cancel previous render timer.\r\n      window.clearTimeout(deferTimerID.current);\r\n      path?.add(e.point);\r\n      path?.smooth();\r\n    };\r\n    const resizeRect = (e: paper.MouseEvent) => {\r\n      if (!path) return;\r\n      const { x, y } = e.point;\r\n      const [, s1, s2, s3] = path.segments;\r\n      if (!s1 || !s2 || !s3) return;\r\n      s1.point.x = x;\r\n      s2.point = e.point;\r\n      s3.point.y = y;\r\n      path.selected = true;\r\n    };\r\n    const moveSelected = (delta: paper.Point) => {\r\n      chosenItems.forEach((item) => item.translate(delta));\r\n      path?.translate(delta);\r\n      rotateHandle?.translate(delta);\r\n    };\r\n\r\n    const handleDrag = {\r\n      draw: dragPath,\r\n      erase: dragPath,\r\n      select: lasso ? dragPath : resizeRect,\r\n      selected(e: paper.MouseEvent) {\r\n        const hitRes = hitRef.current;\r\n        if (!path) return;\r\n        if (hitRes?.segment) {\r\n          const segment = hitRes.segment;\r\n          const rotating = segment.selected;\r\n          if (rotating) {\r\n            // rotate select items\r\n            const { center } = path.bounds;\r\n            const axis = segment.point.subtract(center);\r\n            const line = e.point.subtract(center);\r\n            setCursor(getRotateCurcor(line.angle));\r\n            const angle = line.angle - axis.angle;\r\n            path.rotate(angle, center);\r\n            rotateHandle?.rotate(angle, center);\r\n            chosenItems.forEach((item) => item?.rotate(angle, center));\r\n          } else {\r\n            // resize selected items\r\n            const moveP = segment.point;\r\n            const baseP = segment.next.next.point;\r\n            const diagonal = moveP.subtract(baseP);\r\n            const projection = e.point.subtract(baseP).project(diagonal);\r\n            const scale = projection.x / diagonal.x;\r\n            if (scale < 0) return;\r\n\r\n            path.scale(scale, baseP);\r\n            chosenItems.forEach((item) => {\r\n              item.scale(scale, baseP);\r\n              item.strokeWidth *= scale;\r\n            });\r\n\r\n            // reposition the rotate handle.\r\n            if (!rotateHandle) return;\r\n            rotateHandle.scale(scale, baseP);\r\n            const rBaseP = rotateHandle.segments[0]?.point;\r\n            if (!rBaseP) return;\r\n            rotateHandle.scale(100 / rotateHandle.length, rBaseP);\r\n          }\r\n        } else {\r\n          moveSelected(e.delta);\r\n        }\r\n      },\r\n      text: null,\r\n    }[paperMode];\r\n\r\n    useEffect(() => {\r\n      scope.current.tool.maxDistance = eraserWidth;\r\n    }, [eraserWidth]);\r\n    const erased = useRef(new Set<string>());\r\n    const replaced = useRef(new Map<string, paper.Item>());\r\n\r\n    const itemGrid = useMemo(() => {\r\n      if (!/^(erase|select)$/.test(mode)) return [];\r\n      return gernerateGrid(group, width, height);\r\n    }, [group, width, height, mode]);\r\n\r\n    const handleToolDrag = (e: paper.ToolEvent) => {\r\n      const layer = scope.current.project.layers[1];\r\n      if (paperMode !== \"erase\" || !layer) return;\r\n      const ew = eraserWidth;\r\n\r\n      const hitOption = { class: paper.Path, stroke: true, tolerance: ew / 2 };\r\n      const bounds = new Rectangle(e.point.subtract(ew), new Size(ew, ew));\r\n\r\n      getGridItems(itemGrid, bounds).forEach((item) => {\r\n        if (erased.current.has(item.name)) return;\r\n        item.hitTestAll(e.point, hitOption)?.forEach(({ item }) => {\r\n          if (!(item instanceof paper.Path)) return;\r\n          let topItem: paper.PathItem = item;\r\n          while (topItem.parent !== layer) {\r\n            if (!(topItem.parent instanceof paper.PathItem)) break;\r\n            topItem = topItem.parent;\r\n          }\r\n          const { name } = topItem;\r\n\r\n          if (drawCtrl.pixelEraser) {\r\n            const radius = (ew + item.strokeWidth) / 2;\r\n            const circle = new Path.Circle({\r\n              center: e.point,\r\n              radius,\r\n              insert: false,\r\n            });\r\n\r\n            const sub = item.subtract(circle, { trace: false });\r\n            item.replaceWith(sub);\r\n            if (topItem === item) {\r\n              setGridItem(itemGrid, sub, item);\r\n              topItem = sub;\r\n            }\r\n            replaced.current.set(name, topItem);\r\n          } else {\r\n            topItem.opacity = 0.5;\r\n            topItem.guide = true;\r\n            erased.current.add(name);\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    const pathClones = useRef<paper.Path[]>([]);\r\n    const handleUp = {\r\n      draw() {\r\n        if (!path || path.segments.length <= 1) {\r\n          // if canvas is clicked without any path in queue.\r\n          if (!pathClones.current.length) unrasterizeCanvas();\r\n          return;\r\n        }\r\n        path.simplify();\r\n        if (renderSlow.current) pathClones.current.push(path.clone());\r\n        const pathData = path.exportJSON();\r\n        onChange((prev) => DrawState.addStroke(prev, pathData));\r\n        setPath(undefined);\r\n      },\r\n      erase() {\r\n        unrasterizeCanvas();\r\n        setPath(undefined);\r\n        if (drawCtrl.pixelEraser) {\r\n          const items = Array.from(replaced.current);\r\n          replaced.current.clear();\r\n          const splitters: Splitter[] = items.map(([uid, item]) => {\r\n            const paths = flattenCP(item);\r\n            paths.forEach((p) => (p.name = \"\"));\r\n            return [uid, paths.map((p) => p.exportJSON())];\r\n          });\r\n          if (!splitters.length) return;\r\n          onChange((prev) => DrawState.splitStrokes(prev, splitters));\r\n        } else {\r\n          const erasedList = Array.from(erased.current);\r\n          erased.current.clear();\r\n          if (!erasedList.length) return;\r\n          onChange((prev) => DrawState.eraseStrokes(prev, erasedList));\r\n        }\r\n      },\r\n      select() {\r\n        unrasterizeCanvas();\r\n        if (!path) return;\r\n        if (Math.abs(path.area) < 1_000) return setPath(undefined);\r\n\r\n        let selection: string[];\r\n        const { view } = scope.current;\r\n        if (lasso) {\r\n          path.closePath();\r\n          path.simplify();\r\n          if (!renderSlow.current) moveDash(path);\r\n          const items = getGridItems(itemGrid, path.bounds);\r\n          selection = checkLasso(items, path);\r\n        } else {\r\n          const items = getGridItems(itemGrid, path.bounds);\r\n          selection = checkLasso(items, path);\r\n          const link = new Path();\r\n          const { topCenter } = path.bounds;\r\n          link.add(topCenter, topCenter.subtract(new Point(0, 100)));\r\n          link.lastSegment.selected = true;\r\n          setRotateHandle(link);\r\n        }\r\n        setSelected(true);\r\n        setChosenIDs(selection);\r\n        const bc = path.bounds.bottomCenter;\r\n        bc && toggleSelectTool(true, view.projectToView(bc));\r\n      },\r\n      selected(e: paper.MouseEvent) {\r\n        handleSelectedCursor(e);\r\n        if (paperMode !== \"selected\") return;\r\n        const { view } = scope.current;\r\n        const clickPoint = view.projectToView(e.point);\r\n        const rotating = hitRef.current?.segment.selected;\r\n        if (!rotating) toggleSelectTool(true, clickPoint);\r\n        if (pointBeforeDrag.current.equals(e.point)) return;\r\n        updateMutation();\r\n      },\r\n      text(e: paper.MouseEvent) {\r\n        if (pointText.current) {\r\n          submitText();\r\n          return handleTextCursor(e);\r\n        }\r\n        const [, l1] = scope.current.project.layers;\r\n        if (!l1) return;\r\n        const t = getClickedText(l1, e.point) ?? startText(e.point);\r\n        t.justification = \"left\";\r\n        pointText.current = t;\r\n        prevTextData.current = t.exportJSON();\r\n        rasterizeCanvas();\r\n        toggleTextTool(t, renderSlow.current);\r\n      },\r\n    }[paperMode];\r\n\r\n    const [cursor, setCursor] = useState(\"auto\");\r\n    useEffect(() => {\r\n      if (paperMode === \"text\" || paperMode === \"select\") {\r\n        setCursor(\"crosshair\");\r\n      } else if (paperMode === \"selected\") {\r\n        setCursor(lasso ? \"crosshair\" : \"nwse-resize\");\r\n      } else if (paperMode === \"draw\" || paperMode === \"erase\") {\r\n        setCursor(getCircleCursor(drawCtrl, ratio));\r\n      }\r\n    }, [paperMode, lasso, drawCtrl, ratio]);\r\n\r\n    const handleSelectedCursor = (e: paper.MouseEvent) => {\r\n      if (!path) return;\r\n      const hitRes =\r\n        path.hitTest(e.point, { segments: true }) ??\r\n        rotateHandle?.hitTest(e.point, { segments: true, selected: true });\r\n      if (hitRes?.segment) {\r\n        if (hitRes.segment.selected) {\r\n          const center = path.bounds.center;\r\n          if (!center) return;\r\n          const line = hitRes.segment.point.subtract(center);\r\n          return setCursor(getRotateCurcor(line.angle));\r\n        }\r\n        const moveP = hitRes.segment.point;\r\n        const baseP = hitRes.segment.next.next.point;\r\n        const diagonal = moveP.subtract(baseP);\r\n        const { x, y } = diagonal;\r\n        return setCursor(x * y < 0 ? \"nesw-resize\" : \"nwse-resize\");\r\n      }\r\n      if (path.contains(e.point)) return setCursor(\"pointer\");\r\n      setCursor(\"crosshair\");\r\n    };\r\n    const handleTextCursor = (e: paper.MouseEvent) => {\r\n      if (pointText.current) return setCursor(\"auto\");\r\n      const layer = scope.current.project.layers[1];\r\n      if (!layer) return;\r\n      if (getClickedText(layer, e.point)) setCursor(\"text\");\r\n      else setCursor(\"crosshair\");\r\n    };\r\n\r\n    const handleMove = {\r\n      selected: handleSelectedCursor,\r\n      text: handleTextCursor,\r\n      ...{ select: null, draw: null, erase: null },\r\n    }[paperMode];\r\n\r\n    const handleKeyDown = (e: paper.KeyEvent) => {\r\n      if (paperMode !== \"selected\") return;\r\n      const delta = {\r\n        up: new Point(0, -10),\r\n        down: new Point(0, 10),\r\n        left: new Point(-10, 0),\r\n        right: new Point(10, 0),\r\n      }[e.key];\r\n      if (!delta) return;\r\n      e.preventDefault();\r\n      delta && moveSelected(delta);\r\n      toggleSelectTool(false);\r\n    };\r\n\r\n    const handleKeyUp = {\r\n      selected(e: paper.KeyEvent) {\r\n        if (/^(delete|backspace)$/.test(e.key)) deleteSelected();\r\n        if (/^(up|down|left|right)$/.test(e.key)) updateMutation();\r\n        if (/escape/.test(e.key)) resetSelect();\r\n      },\r\n      text(e: paper.KeyEvent) {\r\n        if (/escape/.test(e.key)) submitText();\r\n      },\r\n      ...{ select: null, draw: null, erase: null },\r\n    }[paperMode];\r\n\r\n    useEffect(() => {\r\n      if (readonly) return;\r\n\r\n      type Handler<E> = ((e: E) => boolean | void) | null;\r\n      const activate = <E,>(handler: Handler<E>): Handler<E> => {\r\n        return (e) => {\r\n          scope.current.activate();\r\n          if (handler) return handler(e);\r\n        };\r\n      };\r\n      const { view, tool } = scope.current;\r\n      view.onMouseDown = activate(handleDown);\r\n      view.onMouseDrag = activate(handleDrag);\r\n      view.onMouseUp = activate(handleUp);\r\n      view.onMouseMove = activate(handleMove);\r\n      tool.onMouseDrag = activate(handleToolDrag);\r\n      tool.onKeyDown = activate(handleKeyDown);\r\n      tool.onKeyUp = activate(handleKeyUp);\r\n    });\r\n\r\n    const updateMutation = () => {\r\n      if (!chosenItems?.length) return;\r\n      const mutations: Mutation[] = chosenItems.map((p) => {\r\n        const { name } = p;\r\n        p.name = \"\";\r\n        return [name, p.exportJSON()];\r\n      });\r\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\r\n    };\r\n\r\n    const deleteSelected = () => {\r\n      resetSelect();\r\n      if (!chosenIDs.length) return;\r\n      onChange((prev) => DrawState.eraseStrokes(prev, chosenIDs));\r\n    };\r\n\r\n    const mutateStyle = (updated: Partial<DrawCtrl>) => {\r\n      scope.current.activate();\r\n      updateGroupStyle(chosenItems, updated);\r\n      updateMutation();\r\n    };\r\n\r\n    const duplicateSelected = () => {\r\n      scope.current.activate();\r\n      if (!path || !chosenItems.length) return;\r\n      const size = path.bounds.size;\r\n      const { width, height } = size;\r\n      const transP = new Point(width, height).divide(10);\r\n      const copies = chosenItems.map((item) => item.clone());\r\n      copies.forEach((item) => item.translate(transP));\r\n      path.translate(transP);\r\n      rotateHandle?.translate(transP);\r\n\r\n      copies.forEach((p) => (p.name = \"\"));\r\n      const pathDataList = copies.map((item) => item.exportJSON());\r\n      const IDs: string[] = [];\r\n      onChange((prev) => DrawState.addStrokes(prev, pathDataList, IDs));\r\n      setChosenIDs(IDs);\r\n      toggleSelectTool(false);\r\n    };\r\n\r\n    const rasterizeSelected = () => {\r\n      scope.current.activate();\r\n      const clip = path?.clone();\r\n      clip && rasterizeLayer(clip, true);\r\n      unrasterizeLayer();\r\n      return layerRaster.current?.toDataURL() ?? \"\";\r\n    };\r\n\r\n    const pointText = useRef<paper.PointText>();\r\n    const prevTextData = useRef(\"\");\r\n    const cancelText = useEvent(() => {\r\n      unrasterizeCanvas();\r\n      if (!pointText.current?.name) {\r\n        pointText.current?.remove();\r\n      }\r\n      pointText.current = undefined;\r\n      toggleTextTool(undefined, renderSlow.current);\r\n    });\r\n\r\n    const submitText = useEvent(() => {\r\n      const t = pointText.current;\r\n      if (!t) return;\r\n      cancelText();\r\n      if (t.exportJSON() === prevTextData.current) return;\r\n      const { content, name } = t;\r\n      t.name = \"\";\r\n      // if text content empty\r\n      if (!content) {\r\n        // erase existing text item\r\n        if (name) onChange((prev) => DrawState.eraseStrokes(prev, [name]));\r\n        return;\r\n      }\r\n      const pathData = t.exportJSON();\r\n      if (!name) {\r\n        // add new text item\r\n        onChange((prev) => DrawState.addStroke(prev, pathData));\r\n      } else {\r\n        // mutate existing text item\r\n        onChange((prev) => DrawState.mutateStrokes(prev, [[name, pathData]]));\r\n      }\r\n    });\r\n    const mutatePointText = (cb: (prev: paper.PointText) => void) => {\r\n      const pt = pointText.current;\r\n      if (!pt) return;\r\n      scope.current.activate();\r\n      cb(pt);\r\n      toggleTextTool(new Proxy(pt, {}), renderSlow.current);\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (mode === \"text\") return submitText;\r\n    }, [mode, submitText]);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      deleteSelected,\r\n      duplicateSelected,\r\n      rasterizeSelected,\r\n      mutateStyle,\r\n      mutatePointText,\r\n    }));\r\n\r\n    usePreventGesture();\r\n    usePinch(\r\n      ({ memo, offset: [scale], first, last, origin }) => {\r\n        scope.current.activate();\r\n        const { view } = scope.current;\r\n        const originRawP = new paper.Point(origin);\r\n\r\n        let lastScale: number;\r\n        let lastOrigin, elPos: paper.Point;\r\n        if (first || !memo) {\r\n          const { x, y } = view.element.getBoundingClientRect();\r\n          lastScale = 1;\r\n          elPos = new Point(x, y);\r\n          lastOrigin = originRawP.subtract(elPos);\r\n          toggleSelectTool(false);\r\n          cancelText();\r\n          rasterizeLayer(new Path.Rectangle(P_ZERO, projSize));\r\n          unrasterizeCanvas();\r\n        } else {\r\n          [lastScale, lastOrigin, elPos] = memo;\r\n        }\r\n\r\n        const originViewP = originRawP.subtract(elPos);\r\n        const originPorjP = view.viewToProject(originViewP);\r\n\r\n        const deltaP = originViewP.subtract(lastOrigin);\r\n        const transP = deltaP.divide(view.zoom);\r\n        view.translate(transP);\r\n\r\n        let dScale = first ? 1 : scale / lastScale;\r\n        scope.current.settings.hitTolerance /= dScale;\r\n        view.scale(dScale, originPorjP);\r\n\r\n        if (last) {\r\n          Promise.all([\r\n            putCenterBack(view, projSize),\r\n            scaleView(view, originPorjP, dScale),\r\n          ]).then(unrasterizeLayer);\r\n          view.scale(1 / dScale, originPorjP);\r\n        } else {\r\n          return [scale, originViewP, elPos];\r\n        }\r\n      },\r\n      {\r\n        scaleBounds: { max: 5, min: 1 },\r\n        rubberband: 0.5,\r\n        target: canvasEl,\r\n      }\r\n    );\r\n\r\n    const touchHandler = usePreventTouch(finger);\r\n    return (\r\n      <div\r\n        className=\"draw-wrapper\"\r\n        style={{ cursor }}\r\n        data-readonly={readonly}\r\n        {...touchHandler}\r\n      >\r\n        <canvas ref={canvasEl} className=\"draw-canvas\" />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nDrawRaw.displayName = \"Draw\";\r\nexport const Draw = React.memo(DrawRaw);\r\n\r\nfunction usePaperItem<T extends paper.Item>() {\r\n  const tuple = useState<T>();\r\n  const [item] = tuple;\r\n  useDebugValue(item);\r\n  useEffect(() => () => void item?.remove(), [item]);\r\n  return tuple;\r\n}\r\n\r\nconst paintStroke = (() => {\r\n  const cacheMap = new WeakMap<\r\n    paper.Layer,\r\n    Map<string, { stroke: Stroke; item: paper.Item }>\r\n  >();\r\n\r\n  return (stroke: Stroke, layer: paper.Layer, readonly = false) => {\r\n    const { pathData, uid } = stroke;\r\n    const cache = cacheMap.get(layer) ?? new Map();\r\n    cacheMap.set(layer, cache);\r\n    const cached = cache.get(uid);\r\n    let item: paper.Item;\r\n    if (cached?.stroke === stroke) {\r\n      layer.addChild(cached.item);\r\n      item = cached.item;\r\n    } else {\r\n      try {\r\n        item = layer.importJSON(pathData);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n      item ??= new paper.Item();\r\n      item.name = uid;\r\n      cache.set(uid, { item, stroke });\r\n    }\r\n    item.opacity = 1;\r\n    item.guide = readonly;\r\n    return item;\r\n  };\r\n})();\r\n\r\nconst paintRects = (layers: paper.Layer[], projSize: paper.Size) => {\r\n  const [l0, l1, l2] = layers;\r\n  if (!l0 || !l1 || !l2) return [];\r\n  const bgRect = new Path.Rectangle(P_ZERO, projSize);\r\n  const clip1 = bgRect.clone();\r\n  const clip2 = bgRect.clone();\r\n  bgRect.fillColor = new Color(\"#fff\");\r\n  l0.addChild(bgRect);\r\n  l1.addChild(clip1);\r\n  l2.addChild(clip2);\r\n  l1.clipped = true;\r\n  l2.clipped = true;\r\n  return [bgRect, clip1, clip2];\r\n};\r\n\r\nconst startRect = (point: paper.Point) => {\r\n  const rect = new Path.Rectangle(point, new Size(0, 0));\r\n  rect.onFrame = () => {}; // the handle size bug\r\n  return rect;\r\n};\r\n\r\nconst startStroke = (drawCtrl: DrawCtrl, point: paper.Point, slow = false) => {\r\n  let { mode, lineWidth, eraserWidth, color, highlight } = drawCtrl;\r\n  const path = new Path();\r\n  path.add(point);\r\n  if (mode === \"erase\") {\r\n    color = \"#ccc\";\r\n    lineWidth = eraserWidth;\r\n  }\r\n  if (mode === \"select\") {\r\n    color = \"#009dec\";\r\n    lineWidth = 5;\r\n  }\r\n  const strokeColor = new Color(color);\r\n  if ((mode === \"draw\" && highlight) || (mode === \"erase\" && !slow)) {\r\n    strokeColor.alpha = 0.5;\r\n    path.blendMode = \"multiply\";\r\n  }\r\n  path.strokeColor = strokeColor;\r\n  path.strokeWidth = lineWidth;\r\n  path.strokeJoin = \"round\";\r\n  path.strokeCap = \"round\";\r\n  path.guide = true;\r\n  return path;\r\n};\r\n\r\nconst moveDash = (item: paper.Item) => {\r\n  item.dashOffset = 0;\r\n  item.dashArray = [30, 20];\r\n  item.onFrame = () => (item.dashOffset += 3);\r\n};\r\n\r\nconst scaleView = (\r\n  view: paper.View,\r\n  originPorjP: paper.Point,\r\n  dScale: number\r\n) =>\r\n  new Promise<void>((resolve) => {\r\n    if (Math.abs(dScale - 1) < 0.05) {\r\n      view.scale(dScale, originPorjP);\r\n      return resolve();\r\n    }\r\n    let aniCount = 10;\r\n    dScale = Math.pow(dScale, 1 / aniCount);\r\n    const scale = () => {\r\n      view.scale(dScale, originPorjP);\r\n      if (--aniCount > 0) requestAnimationFrame(scale);\r\n      else requestAnimationFrame(() => resolve());\r\n    };\r\n    scale();\r\n  });\r\n\r\nconst getTargetCenter = (view: paper.View, projSize: paper.Size) => {\r\n  const { x, y } = view.center;\r\n  const minSize = Size.min(view.size, projSize).divide(2);\r\n  const { width: minX, height: minY } = minSize;\r\n  const { width: maxX, height: maxY } = projSize.subtract(minSize);\r\n\r\n  const targetX = x < minX ? minX : x > maxX ? maxX : x;\r\n  const targetY = y < minY ? minY : y > maxY ? maxY : y;\r\n  return new Point(targetX, targetY);\r\n};\r\n\r\nconst putCenterBack = (view: paper.View, projSize: paper.Size) =>\r\n  new Promise<void>((resolve) => {\r\n    const targetCenter = getTargetCenter(view, projSize);\r\n    if (view.center.equals(targetCenter)) return resolve();\r\n    let aniCount = 10;\r\n    const move = () => {\r\n      const delta = view.center.subtract(targetCenter);\r\n      view.translate(delta.divide(aniCount));\r\n      if (--aniCount > 0) requestAnimationFrame(move);\r\n      else requestAnimationFrame(() => resolve());\r\n    };\r\n    requestAnimationFrame(move);\r\n  });\r\n\r\nconst checkLasso = (items: paper.Item[], selection: paper.Path) => {\r\n  const isInside = (p: paper.Path) => {\r\n    if (selection.segments.length === 4 && p.isInside(selection.bounds)) {\r\n      return true;\r\n    }\r\n    return !p.subtract(selection, { insert: false, trace: false }).compare(p);\r\n  };\r\n  return items\r\n    .filter((item) => {\r\n      if (!item.name) return false;\r\n      if (!item.bounds.intersects(selection.bounds)) return false;\r\n      if (item instanceof paper.Path) {\r\n        return isInside(item);\r\n      } else {\r\n        const checkedP = new Path.Rectangle(item.bounds);\r\n        checkedP.remove();\r\n        return isInside(checkedP) || selection.isInside(item.bounds);\r\n      }\r\n    })\r\n    .map(({ name }) => name);\r\n};\r\n\r\nconst updateGroupStyle = (items: paper.Item[], updated: Partial<DrawCtrl>) => {\r\n  const { lineWidth, color, highlight } = updated;\r\n  items.forEach((item) => {\r\n    if (item instanceof paper.PointText && color) {\r\n      const newColor = new Color(color);\r\n      item.fillColor = newColor;\r\n    }\r\n\r\n    if (!(item instanceof paper.Path)) return;\r\n\r\n    if (color) {\r\n      const newColor = new Color(color);\r\n      if (item.blendMode === \"multiply\") newColor.alpha = 0.5;\r\n      item.strokeColor = newColor;\r\n    }\r\n\r\n    if (lineWidth) item.strokeWidth = lineWidth;\r\n\r\n    if (!item.strokeColor || highlight === undefined) return;\r\n    item.strokeColor.alpha = highlight ? 0.5 : 1;\r\n    item.blendMode = highlight ? \"multiply\" : \"normal\";\r\n  });\r\n};\r\n\r\nconst getClickedText = (layer: paper.Layer, point: paper.Point) => {\r\n  const hitRes = layer.hitTest(point, { class: paper.PointText, fill: true });\r\n  if (hitRes?.item instanceof paper.PointText) return hitRes?.item;\r\n};\r\n\r\nconst startText = (point: paper.Point) => {\r\n  return new paper.PointText({\r\n    point: point.add(new Point(0, 50)),\r\n    content: \"\",\r\n    fontSize: 50,\r\n  });\r\n};\r\n\r\nconst flattenCP = (cp: paper.Item): paper.Path[] => {\r\n  if (cp instanceof paper.Path) {\r\n    return cp.isEmpty() ? [] : [cp];\r\n  }\r\n  if (cp instanceof paper.CompoundPath) {\r\n    return cp.children.map(flattenCP).flat();\r\n  }\r\n  return [];\r\n};\r\n","import { CSSProperties, FC, RefObject, useState } from \"react\";\r\nimport {\r\n  CopyOutlined,\r\n  BoldOutlined,\r\n  DeleteOutlined,\r\n  PictureTwoTone,\r\n  PictureOutlined,\r\n  BgColorsOutlined,\r\n  ZoomOutOutlined,\r\n  ZoomInOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Button, ButtonProps, Modal, Popover, Select } from \"antd\";\r\nimport { DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\r\nimport { allColors } from \"lib/color\";\r\nimport { DrawRefType } from \"component/Draw\";\r\nimport { saveAs } from \"file-saver\";\r\nimport { Color } from \"paper/dist/paper-core\";\r\nimport \"./draw-tools.sass\";\r\n\r\nconst btnProps: ButtonProps = {\r\n  type: \"text\",\r\n  shape: \"round\",\r\n  size: \"small\",\r\n};\r\n\r\nconst getPosVars = (x: number, y: number) => {\r\n  return { \"--pos-x\": x + \"px\", \"--pos-y\": y + \"px\" } as CSSProperties;\r\n};\r\nconst getObjVars = (obj: Record<string, string | number>, unit?: string) => {\r\n  const result: Record<string, string | number> = {};\r\n  Object.entries(obj).forEach(([key, value]) => {\r\n    if (unit) value += unit;\r\n    result[\"--\" + key] = value;\r\n  });\r\n  return result as CSSProperties;\r\n};\r\n\r\nexport const SelectTool: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n  visible: boolean;\r\n  clickPoint: paper.Point;\r\n}> = ({ drawRef, visible, clickPoint }) => {\r\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\r\n\r\n  const getRaster = () => {\r\n    if (!drawRef.current) return;\r\n    const imageData = drawRef.current.rasterizeSelected();\r\n    Modal.confirm({\r\n      title: \"Screenshot\",\r\n      content: <img className=\"raster\" src={imageData} alt=\"raster\" />,\r\n      className: \"raster-modal\",\r\n      icon: <PictureTwoTone />,\r\n      okText: \"Save\",\r\n      onOk: () => saveAs(imageData, document.title.split(\" - \")[0] + \".png\"),\r\n    });\r\n  };\r\n\r\n  const { x, y } = clickPoint;\r\n  return (\r\n    <div\r\n      className=\"select-tool tool-options\"\r\n      data-visible={visible}\r\n      style={getPosVars(x, y)}\r\n    >\r\n      <Popover\r\n        trigger=\"click\"\r\n        placement=\"bottom\"\r\n        overlayClassName=\"style-pop\"\r\n        getPopupContainer={(e) => e.parentElement!}\r\n        destroyTooltipOnHide\r\n        content={\r\n          <PenPanel\r\n            updateDrawCtrl={(updated) => {\r\n              setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\r\n              drawRef.current?.mutateStyle(updated);\r\n            }}\r\n            drawCtrl={currDrawCtrl}\r\n          />\r\n        }\r\n      >\r\n        <Button icon={<BgColorsOutlined />} {...btnProps} />\r\n      </Popover>\r\n      <Button\r\n        icon={<CopyOutlined />}\r\n        onClick={() => drawRef.current?.duplicateSelected()}\r\n        {...btnProps}\r\n      />\r\n      <Button icon={<PictureOutlined />} onClick={getRaster} {...btnProps} />\r\n      <Button\r\n        danger\r\n        icon={<DeleteOutlined />}\r\n        onClick={() => drawRef.current?.deleteSelected()}\r\n        {...btnProps}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const TextTool: FC<{\r\n  pointText: paper.PointText;\r\n  drawRef: RefObject<DrawRefType>;\r\n  renderSlow: boolean;\r\n}> = ({ pointText, drawRef, renderSlow }) => {\r\n  const { view, position, leading, content, rotation } = pointText;\r\n  const { fontFamily, fontWeight, fontSize } = pointText;\r\n\r\n  const { x, y } = view.projectToView(position);\r\n  const { topLeft, bottomLeft } = pointText.bounds;\r\n  const { x: bx, y: by } = view.projectToView(topLeft);\r\n  const { x: bbx, y: bby } = view.projectToView(bottomLeft);\r\n  const optionAtBottom = by < 60;\r\n\r\n  const scale = pointText.viewMatrix.scaling.x;\r\n  const { width, height } = pointText.internalBounds;\r\n\r\n  const lineHeight = +leading / +fontSize ?? 1.2;\r\n\r\n  const color = pointText.fillColor?.toCSS(true) ?? allColors[0]!;\r\n  const fontColorBtn = (\r\n    <Popover\r\n      content={\r\n        <ColorSelect\r\n          color={color}\r\n          setColor={(c) =>\r\n            drawRef.current?.mutatePointText((prev) => {\r\n              prev.fillColor = new Color(c);\r\n            })\r\n          }\r\n        />\r\n      }\r\n      trigger=\"click\"\r\n      overlayStyle={{ width: 200 }}\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n    >\r\n      <Button {...btnProps} icon={<BgColorsOutlined />} />\r\n    </Popover>\r\n  );\r\n\r\n  const fontFamilyBtn = (\r\n    <Select\r\n      value={fontFamily}\r\n      size=\"small\"\r\n      onChange={(v) => {\r\n        drawRef.current?.mutatePointText((prev) => {\r\n          prev.fontFamily = v;\r\n        });\r\n      }}\r\n      bordered={false}\r\n      virtual={false}\r\n      showArrow={false}\r\n      getPopupContainer={(e) => e.parentElement.parentElement!}\r\n      dropdownMatchSelectWidth={90}\r\n      options={[\r\n        { value: \"sans-serif\", name: \"Default\" },\r\n        { value: \"'Times New Roman', serif\", name: \"Times\" },\r\n        { value: \"Georgia, serif\", name: \"Georgia\" },\r\n        { value: \"'Courier New', monospace\", name: \"Courier\" },\r\n      ].map(({ value, name }) => ({\r\n        value,\r\n        label: <span style={{ fontFamily: value, fontWeight }}>{name}</span>,\r\n      }))}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className=\"text-tool\"\r\n      style={{\r\n        ...getObjVars({ scale, color }),\r\n        ...getObjVars({ rotation }, \"deg\"),\r\n        ...getObjVars({ width, height }, \"px\"),\r\n        ...getPosVars(x, y),\r\n      }}\r\n    >\r\n      <div\r\n        className=\"textarea-wrapper\"\r\n        data-slow={renderSlow}\r\n        style={{ fontSize, fontWeight, fontFamily, lineHeight }}\r\n      >\r\n        <textarea\r\n          autoFocus={!content}\r\n          placeholder=\"Text...\"\r\n          value={content}\r\n          onChange={(e) => {\r\n            drawRef.current?.mutatePointText((prev) => {\r\n              prev.content = e.target.value;\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n      <div\r\n        className=\"tool-options text-options\"\r\n        data-bottom={optionAtBottom}\r\n        style={{\r\n          ...(optionAtBottom ? getPosVars(bbx, bby) : getPosVars(bx, by)),\r\n        }}\r\n      >\r\n        {fontFamilyBtn}\r\n        {fontColorBtn}\r\n        <Button\r\n          onClick={() => {\r\n            drawRef.current?.mutatePointText((prev) => {\r\n              const bold = prev.fontWeight === \"bold\";\r\n              prev.fontWeight = bold ? \"normal\" : \"bold\";\r\n            });\r\n          }}\r\n          {...btnProps}\r\n          type={fontWeight === \"bold\" ? \"link\" : \"text\"}\r\n          icon={<BoldOutlined />}\r\n        />\r\n        <Button\r\n          {...btnProps}\r\n          icon={<ZoomOutOutlined />}\r\n          onClick={() => {\r\n            drawRef.current?.mutatePointText((prev) => {\r\n              const { topLeft } = prev.bounds;\r\n              prev.scale(0.9, topLeft);\r\n            });\r\n          }}\r\n        />\r\n        <Button\r\n          {...btnProps}\r\n          icon={<ZoomInOutlined />}\r\n          onClick={() => {\r\n            drawRef.current?.mutatePointText((prev) => {\r\n              const { topLeft } = prev.bounds;\r\n              prev.scale(1.1, topLeft);\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport { useDrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { useMemoizedFn as useEvent } from \"ahooks\";\r\nimport { Draw, DrawRefType } from \"component/Draw\";\r\nimport { SelectTool, TextTool } from \"pages/reader/tools/DrawTools\";\r\nimport { once, range } from \"lodash\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { DrawState } from \"lib/draw/DrawState\";\r\nimport { Map, Set } from \"immutable\";\r\nimport { P_ZERO } from \"component/Draw/Draw\";\r\n\r\nconst PageWrapperRaw: FC<{\r\n  drawState: DrawState;\r\n  teamStateMap?: Map<string, DrawState>;\r\n  thumbnail?: string;\r\n  pdfIndex?: number;\r\n  noteID?: string;\r\n  updateState?: (ds: DrawState) => void;\r\n  onViewChange?: (ratio: number) => void;\r\n  preview?: boolean;\r\n  preload?: boolean;\r\n  ignores?: Set<string>;\r\n  skipInView?: boolean;\r\n}> = ({\r\n  thumbnail,\r\n  drawState,\r\n  teamStateMap,\r\n  updateState,\r\n  pdfIndex,\r\n  noteID = \"\",\r\n  preview = false,\r\n  onViewChange,\r\n  preload = false,\r\n  ignores = Set<string>(),\r\n  skipInView = false,\r\n}) => {\r\n  const threshold = onViewChange && range(0, 1.2, 0.2);\r\n  const [ref, visible, entry] = useInView({ threshold, skip: skipInView });\r\n  useEffect(() => {\r\n    if (!onViewChange) return;\r\n    if (!entry || !visible) return onViewChange(0);\r\n    onViewChange(entry.intersectionRatio);\r\n  }, [visible, entry, onViewChange]);\r\n\r\n  const [fullImg, setFullImg] = useState<string>();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const loadImage = useCallback(\r\n    once(async () => {\r\n      if (!pdfIndex || !noteID) return;\r\n      const { getNotePageImage } = await import(\"lib/note/pdfImage\");\r\n      setFullImg(await getNotePageImage(noteID, pdfIndex));\r\n    }),\r\n    [pdfIndex, noteID]\r\n  );\r\n\r\n  const show = visible || preload;\r\n  useEffect(() => {\r\n    if (!preview && show) loadImage();\r\n  }, [show, preview, loadImage]);\r\n\r\n  const otherStates = useMemo(\r\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\r\n    [teamStateMap, ignores]\r\n  );\r\n\r\n  const imageLoaded = Boolean(fullImg || !pdfIndex);\r\n  const drawShow = show && imageLoaded;\r\n\r\n  const { height, width } = drawState;\r\n  const ratio = height / width;\r\n\r\n  return (\r\n    <div ref={ref} className=\"page-wrapper\">\r\n      <svg className=\"size-holder\" viewBox={`0 0 100 ${ratio * 100}`} />\r\n      {drawShow && (\r\n        <DrawWrapper\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          updateState={updateState}\r\n          imgSrc={fullImg || thumbnail}\r\n          preview={preview}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nPageWrapperRaw.displayName = \"PageWrapper\";\r\nexport const PageWrapper = React.memo(PageWrapperRaw);\r\n\r\nconst DrawWrapper: FC<{\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}> = ({ drawState, updateState, otherStates, preview = false, imgSrc }) => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const drawRef = useRef<DrawRefType>(null);\r\n  const [selectShow, setSelectShow] = useState(false);\r\n  const [clickPoint, setClickPoint] = useState<paper.Point>(P_ZERO);\r\n  const [pointText, setPointText] = useState<paper.PointText>();\r\n  const [renderSlow, setRenderSlow] = useState(false);\r\n\r\n  const handleChange = useEvent(\r\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\r\n      if (!updateState) return;\r\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\r\n      if (newDS === drawState) return;\r\n      updateState(newDS);\r\n    }\r\n  );\r\n\r\n  const toggleSelectTool = (active: boolean, clickPoint?: paper.Point) => {\r\n    setClickPoint((p) => clickPoint ?? p);\r\n    setSelectShow(active);\r\n  };\r\n\r\n  const toggleTextTool = (\r\n    pointText: paper.PointText | undefined,\r\n    slow: boolean\r\n  ) => {\r\n    setPointText(pointText);\r\n    setRenderSlow(slow);\r\n  };\r\n\r\n  return preview ? (\r\n    <Draw\r\n      drawState={drawState}\r\n      otherStates={otherStates}\r\n      imgSrc={imgSrc}\r\n      readonly\r\n    />\r\n  ) : (\r\n    <>\r\n      <Draw\r\n        drawState={drawState}\r\n        otherStates={otherStates}\r\n        onChange={handleChange}\r\n        imgSrc={imgSrc}\r\n        drawCtrl={drawCtrl}\r\n        ref={drawRef}\r\n        toggleTextTool={toggleTextTool}\r\n        toggleSelectTool={toggleSelectTool}\r\n      />\r\n      <SelectTool\r\n        drawRef={drawRef}\r\n        visible={selectShow}\r\n        clickPoint={clickPoint}\r\n      />\r\n      {pointText && (\r\n        <TextTool\r\n          drawRef={drawRef}\r\n          pointText={pointText}\r\n          renderSlow={renderSlow}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { PageWrapper } from \"./PageWrapper\";\r\nimport \"./page-wrapper.sass\";\r\nexport default PageWrapper;\r\n","import React, {\r\n  FC,\r\n  PropsWithChildren,\r\n  useContext,\r\n  useDebugValue,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\nimport { Button, message } from \"antd\";\r\nimport { EditOutlined, EyeInvisibleOutlined } from \"@ant-design/icons\";\r\nimport localforage from \"localforage\";\r\nimport { once } from \"lodash\";\r\nimport \"./draw-ctrl.sass\";\r\n\r\nexport interface DrawCtrl {\r\n  mode: \"draw\" | \"erase\" | \"select\" | \"text\";\r\n  finger: boolean;\r\n  lineWidth: number;\r\n  eraserWidth: number;\r\n  color: string;\r\n  highlight: boolean;\r\n  lasso: boolean;\r\n  pixelEraser: boolean;\r\n  widthList: number[];\r\n}\r\n\r\nexport const defaultWidthList = [10, 20, 30, 50];\r\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\r\n  mode: \"draw\",\r\n  finger: true,\r\n  lineWidth: 10,\r\n  eraserWidth: 10,\r\n  color: \"#000000\",\r\n  highlight: false,\r\n  lasso: true,\r\n  pixelEraser: false,\r\n  widthList: defaultWidthList,\r\n};\r\n\r\nasync function getDrawCtrl() {\r\n  let drawCtrl = await localforage.getItem<DrawCtrl>(\"DRAW_CTRL\");\r\n  if (!drawCtrl) {\r\n    drawCtrl = defaultDrawCtrl;\r\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n  }\r\n  return drawCtrl;\r\n}\r\n\r\nasync function saveDrawCtrl(drawCtrl: DrawCtrl) {\r\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n}\r\n\r\nconst DrawCtrlContext = React.createContext({\r\n  drawCtrl: defaultDrawCtrl,\r\n  updateDrawCtrl: (() => {}) as (updated: Partial<DrawCtrl>) => void,\r\n});\r\n\r\nexport function useDrawCtrl() {\r\n  const { drawCtrl } = useContext(DrawCtrlContext);\r\n  useDebugValue(drawCtrl);\r\n  return drawCtrl;\r\n}\r\n\r\nexport function useUpdateDrawCtrl() {\r\n  const { updateDrawCtrl } = useContext(DrawCtrlContext);\r\n  return updateDrawCtrl;\r\n}\r\n\r\nexport const DrawCtrlProvider: FC<PropsWithChildren> = ({ children }) => {\r\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\r\n  useEffect(() => {\r\n    getDrawCtrl().then(setDrawCtrl);\r\n  }, []);\r\n\r\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\r\n    setDrawCtrl((prev) => {\r\n      const newCtrl = { ...prev, ...updated };\r\n      saveDrawCtrl(newCtrl);\r\n      return newCtrl;\r\n    });\r\n  };\r\n\r\n  const { finger } = drawCtrl;\r\n  useEffect(() => {\r\n    const detectPen = (e: PointerEvent) => {\r\n      const isPen = e.isPrimary && e.pointerType === \"pen\";\r\n      if (!isPen || !finger) return;\r\n      showPencilMsg(() => updateDrawCtrl({ finger: false }));\r\n    };\r\n    document.addEventListener(\"pointerup\", detectPen);\r\n    return () => document.removeEventListener(\"pointerup\", detectPen);\r\n  }, [finger]);\r\n\r\n  return (\r\n    <DrawCtrlContext.Provider value={{ drawCtrl, updateDrawCtrl }}>\r\n      {children}\r\n    </DrawCtrlContext.Provider>\r\n  );\r\n};\r\n\r\nconst showPencilMsg = once(async (cb: () => void) => {\r\n  const hide = () => {\r\n    message.destroy(\"DETECT_PENCIL\");\r\n    localforage.setItem(\"SKIP_PENCIL_MSG\", true);\r\n  };\r\n  if (await localforage.getItem(\"SKIP_PENCIL_MSG\")) return;\r\n  message.info({\r\n    content: (\r\n      <>\r\n        Your device supports\r\n        <Button\r\n          shape=\"round\"\r\n          size=\"small\"\r\n          icon={<EditOutlined />}\r\n          onClick={() => {\r\n            cb();\r\n            hide();\r\n          }}\r\n        >\r\n          Pencil only\r\n        </Button>\r\n        <Button\r\n          size=\"small\"\r\n          type=\"text\"\r\n          shape=\"circle\"\r\n          icon={<EyeInvisibleOutlined style={{ color: \"#999\" }} />}\r\n          onClick={hide}\r\n        />\r\n      </>\r\n    ),\r\n    key: \"DETECT_PENCIL\",\r\n    className: \"pencil-msg\",\r\n  });\r\n});\r\n","export function createVirtualCanvas(width: number, height: number) {\r\n  const canvas = document.createElement(\"canvas\");\r\n  const context = canvas.getContext(\"2d\");\r\n  if (!context) {\r\n    throw new Error(\"can't get virtual canvas context\");\r\n  }\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  return { canvas, context };\r\n}\r\n\r\nexport function releaseCanvas(canvas: HTMLCanvasElement) {\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  const ctx = canvas.getContext('2d');\r\n  ctx?.clearRect(0, 0, 1, 1);\r\n}\r\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\r\nimport { defaultWidthList, DrawCtrl } from \"lib/draw/DrawCtrl\";\r\nimport { ColorCirle } from \"component/ColorCircle\";\r\nimport { WIDTH } from \"lib/draw/DrawState\";\r\nimport { Popover, Segmented, Slider } from \"antd\";\r\nimport { allColors } from \"lib/color\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport IconFont from \"component/IconFont\";\r\nimport { List } from \"immutable\";\r\nimport \"./pen-panel.sass\";\r\n\r\nexport const PenPanel: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n}> = ({ updateDrawCtrl, drawCtrl }) => {\r\n  const { highlight, color } = drawCtrl;\r\n  const [panelBlur, setPanelBlur] = useState(false);\r\n\r\n  return (\r\n    <div className=\"pen-panel\" data-blur={panelBlur} data-hi={highlight}>\r\n      <div className=\"pen-status\">\r\n        <WidthSelect\r\n          updateDrawCtrl={updateDrawCtrl}\r\n          drawCtrl={drawCtrl}\r\n          setPanelBlur={setPanelBlur}\r\n        />\r\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\r\n      </div>\r\n      <ColorSelect\r\n        color={color || \"\"}\r\n        setColor={(c) => updateDrawCtrl({ color: c })}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const WidthSelect: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n  setPanelBlur?: Setter<boolean>;\r\n  field?: \"lineWidth\" | \"eraserWidth\";\r\n}> = ({\r\n  updateDrawCtrl,\r\n  drawCtrl,\r\n  setPanelBlur = () => {},\r\n  field = \"lineWidth\",\r\n}) => {\r\n  const currWidth = drawCtrl[field];\r\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\r\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\r\n\r\n  const chosen = useMemo(\r\n    () => widthList.indexOf(currWidth ?? -1),\r\n    [currWidth, widthList]\r\n  );\r\n\r\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\r\n  useEffect(() => {\r\n    if (popShow.includes(true)) setPanelBlur(true);\r\n    else setPanelBlur(false);\r\n  }, [popShow, setPanelBlur]);\r\n\r\n  const realSizeStyle = (width: number) =>\r\n    ({\r\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width})`,\r\n    } as CSSProperties);\r\n\r\n  const options = [\r\n    { value: -1, label: null },\r\n    ...widthList.map((width, index) => ({\r\n      value: index,\r\n      label: (\r\n        <Popover\r\n          visible={popShow.get(index)}\r\n          onVisibleChange={(v) => setPopShow((prev) => prev.set(index, v))}\r\n          trigger={chosen === index ? [\"click\"] : []}\r\n          placement=\"bottom\"\r\n          destroyTooltipOnHide\r\n          content={\r\n            <Slider\r\n              min={5}\r\n              max={100}\r\n              className=\"ctrl-slider\"\r\n              defaultValue={width}\r\n              onAfterChange={(w) => {\r\n                if (widthList.includes(w)) {\r\n                  setPopShow((prev) => prev.set(index, false));\r\n                  return updateDrawCtrl({ [field]: w });\r\n                }\r\n                const newWL = widthList.slice();\r\n                newWL[index] = w;\r\n                updateDrawCtrl({ widthList: newWL, [field]: w });\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          <div className=\"circle-wrapper\" style={realSizeStyle(width)}>\r\n            <ColorCirle className={\"width-circle \" + field} color={color} />\r\n          </div>\r\n        </Popover>\r\n      ),\r\n    })),\r\n  ];\r\n\r\n  return (\r\n    <Segmented\r\n      className=\"width-seg\"\r\n      value={chosen}\r\n      options={options}\r\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 10 })}\r\n    />\r\n  );\r\n};\r\n\r\nconst HighlightSwitch: FC<{\r\n  checked?: boolean;\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ checked = false, updateDrawCtrl }) => {\r\n  return (\r\n    <label className=\"hi-wrapper\">\r\n      <input\r\n        type=\"checkbox\"\r\n        name=\"highlight\"\r\n        checked={checked}\r\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\r\n      />\r\n      <div className=\"hi-switch\">\r\n        <IconFont type=\"icon-Highlight\" />\r\n      </div>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport const ColorSelect: FC<{\r\n  color: string;\r\n  setColor: (color: string) => void;\r\n}> = ({ setColor, color }) => (\r\n  <div className=\"color-select\">\r\n    {allColors.map((c) => (\r\n      <label key={c}>\r\n        <input\r\n          checked={color === c}\r\n          type=\"radio\"\r\n          name=\"color\"\r\n          onChange={(e) => e.target.checked && setColor(c)}\r\n        />\r\n        <div\r\n          data-color={c}\r\n          className=\"circle\"\r\n          style={{ backgroundColor: c, borderColor: c }}\r\n        />\r\n      </label>\r\n    ))}\r\n  </div>\r\n);\r\n"],"names":["createFromIconfontCN","scriptUrl","getRotateCursorImage","cache","Map","createVirtualCanvas","canvas","context","image","Image","src","angle","Math","round","cached","get","translate","rotate","PI","drawImage","data","toDataURL","clearRect","resetTransform","set","getRotateCurcor","usePreventTouch","allowFinger","isTouch","useRef","checkPoniter","e","isPrimary","current","pointerType","preventTouch","touch","touches","touchType","isApplePencil","length","isEventValid","stopPropagation","onPointerDownCapture","onPointerMoveCapture","onTouchStartCapture","onTouchMoveCapture","getGridRange","bounds","topLeft","bottomRight","floor","x","ceil","y","setGridItem","grid","item","replaced","strokeBounds","xmin","xmax","ymin","ymax","delete","add","getGridItems","itemSet","Set","forEach","Array","from","P_ZERO","Point","DrawRaw","React","ref","drawState","otherStates","onChange","drawCtrl","defaultDrawCtrl","readonly","imgSrc","toggleSelectTool","toggleTextTool","width","height","projSize","useMemo","Size","mode","finger","lasso","eraserWidth","canvasEl","scope","paper","useState","group","setGroup","usePaperItem","path","setPath","rotateHandle","setRotateHandle","useEvent","useEffect","cvs","scp","setup","settings","handleSize","hitTolerance","Layer","visible","project","layers","activate","Tool","view","remove","releaseCanvas","rects","paintRects","r","useSize","canvasWidth","ratio","viewSize","multiply","scale","l","update","imgRaster","setImgRaster","raster","Raster","addChild","sendToBack","onLoad","fitBounds","Rectangle","bringToFront","mergedStrokes","DrawState","getStrokeList","renderSlow","deferTimerID","deferRender","setDefer","l1","render","tempGroup","timeBeforeRender","performance","now","removeChildren","stroke","self","hasStroke","uid","paintStroke","push","unrasterizeCanvas","pathClones","c","duration","window","setTimeout","clearTimeout","hitRef","selected","setSelected","paperMode","chosenIDs","setChosenIDs","chosenItems","IDSet","filter","has","name","resetSelect","undefined","type","lastOp","test","pointText","ptProxy","Proxy","layerRaster","rasterizeLayer","clip","force","l0","clipMask","prevClip","firstChild","replaceWith","insertAbove","dpi","devicePixelRatio","resolution","rasterize","addTo","unrasterizeLayer","lr","canvasRaster","rasterizeCanvas","element","opacity","cr","downPath","startStroke","point","downRect","startRect","pointBeforeDrag","handleDown","draw","erase","select","hitRes","hitTest","segments","contains","text","dragPath","smooth","moveSelected","delta","handleDrag","s1","s2","s3","segment","center","axis","subtract","line","setCursor","moveP","baseP","next","diagonal","strokeWidth","rBaseP","tool","maxDistance","erased","itemGrid","wnum","hnum","gernerateGrid","handleToolDrag","layer","ew","hitOption","class","tolerance","hitTestAll","topItem","parent","pixelEraser","radius","circle","Path","insert","sub","trace","guide","handleUp","simplify","clone","pathData","exportJSON","prev","items","clear","splitters","map","paths","flattenCP","p","erasedList","abs","area","selection","closePath","moveDash","checkLasso","link","topCenter","lastSegment","bc","bottomCenter","projectToView","handleSelectedCursor","clickPoint","equals","updateMutation","submitText","handleTextCursor","t","getClickedText","startText","justification","prevTextData","cursor","lineWidth","size","half","getCircleCursor","handleMove","handleKeyDown","up","down","left","right","key","preventDefault","handleKeyUp","deleteSelected","handler","onMouseDown","onMouseDrag","onMouseUp","onMouseMove","onKeyDown","onKeyUp","mutations","mutateStyle","updated","updateGroupStyle","duplicateSelected","transP","divide","copies","pathDataList","IDs","rasterizeSelected","cancelText","content","mutatePointText","cb","pt","useImperativeHandle","document","addEventListener","removeEventListener","usePinch","memo","offset","first","last","origin","lastScale","lastOrigin","elPos","originRawP","getBoundingClientRect","originViewP","originPorjP","viewToProject","zoom","dScale","Promise","all","putCenterBack","scaleView","then","scaleBounds","max","min","rubberband","target","touchHandler","className","style","displayName","Draw","tuple","useDebugValue","cacheMap","WeakMap","importJSON","console","error","l2","bgRect","clip1","clip2","fillColor","Color","clipped","rect","onFrame","slow","color","highlight","strokeColor","alpha","blendMode","strokeJoin","strokeCap","dashOffset","dashArray","resolve","aniCount","pow","requestAnimationFrame","targetCenter","minSize","minX","minY","maxX","maxY","targetX","targetY","getTargetCenter","move","isInside","compare","intersects","checkedP","newColor","fill","fontSize","cp","isEmpty","children","flat","btnProps","shape","getPosVars","getObjVars","obj","unit","result","Object","entries","value","SelectTool","drawRef","currDrawCtrl","setCurrDrawCtrl","trigger","placement","overlayClassName","getPopupContainer","parentElement","destroyTooltipOnHide","PenPanel","updateDrawCtrl","icon","BgColorsOutlined","CopyOutlined","onClick","PictureOutlined","imageData","Modal","title","alt","PictureTwoTone","okText","onOk","saveAs","split","danger","DeleteOutlined","TextTool","position","leading","rotation","fontFamily","fontWeight","bottomLeft","bx","by","bbx","bby","optionAtBottom","viewMatrix","scaling","internalBounds","lineHeight","toCSS","allColors","fontColorBtn","setColor","overlayStyle","fontFamilyBtn","v","bordered","virtual","showArrow","dropdownMatchSelectWidth","options","label","autoFocus","placeholder","bold","BoldOutlined","ZoomOutOutlined","Z","ZoomInOutlined","PageWrapperRaw","thumbnail","teamStateMap","updateState","pdfIndex","noteID","preview","onViewChange","preload","ignores","skipInView","threshold","range","useInView","skip","entry","intersectionRatio","fullImg","setFullImg","loadImage","useCallback","once","getNotePageImage","show","deleteAll","toList","toArray","imageLoaded","Boolean","drawShow","viewBox","DrawWrapper","useDrawCtrl","selectShow","setSelectShow","setClickPoint","setPointText","setRenderSlow","handleChange","arg","newDS","active","defaultWidthList","widthList","getDrawCtrl","localforage","saveDrawCtrl","DrawCtrlContext","useContext","useUpdateDrawCtrl","DrawCtrlProvider","setDrawCtrl","newCtrl","detectPen","showPencilMsg","Provider","hide","message","EditOutlined","EyeInvisibleOutlined","createElement","getContext","Error","ctx","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","field","currWidth","chosen","indexOf","List","popShow","setPopShow","includes","realSizeStyle","WIDTH","index","onVisibleChange","defaultValue","onAfterChange","w","newWL","slice","i","IconFont","backgroundColor","borderColor"],"sourceRoot":""}