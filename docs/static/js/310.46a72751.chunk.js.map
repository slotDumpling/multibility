{"version":3,"file":"static/js/310.46a72751.chunk.js","mappings":"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","sources":["lib/draw/StateSet.ts","pages/reader/ReaderUtils.tsx","pages/reader/lib/scroll.ts","pages/reader/lib/array.ts","component/UserAvatar.tsx","pages/reader/PageNav/PageNav.tsx","pages/reader/header/Left.tsx","pages/reader/header/Middle.tsx","pages/reader/header/Right.tsx","pages/reader/header/index.tsx","pages/reader/Reader.tsx","lib/network/io.ts","pages/reader/Team.tsx"],"sourcesContent":["import { DrawState, Operation, Stroke } from \"./DrawState\";\r\nimport { List, Map, Record } from \"immutable\";\r\nimport { NotePage } from \"lib/note/note\";\r\n\r\ninterface StateSetRecordType {\r\n  states: Map<string, DrawState>;\r\n  editStack: List<string>;\r\n  undoStack: List<string>;\r\n}\r\n\r\nconst defaultRecord: Readonly<StateSetRecordType> = {\r\n  states: Map(),\r\n  editStack: List(),\r\n  undoStack: List(),\r\n};\r\n\r\ntype StateSetRecord = Record<StateSetRecordType>;\r\nconst defaultFactory = Record(defaultRecord);\r\n\r\nexport type SetOperation = Operation & { pageID: string };\r\n\r\nexport class StateSet {\r\n  constructor(\r\n    private immutable: StateSetRecord,\r\n    public lastOp?: SetOperation\r\n  ) {}\r\n\r\n  static createFromPages(pageRec: globalThis.Record<string, NotePage>) {\r\n    return new StateSet(\r\n      defaultFactory().set(\r\n        \"states\",\r\n        Map(pageRec).map(({ state, ratio }) =>\r\n          DrawState.loadFromFlat(state, ratio)\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  getImmutable() {\r\n    return this.immutable;\r\n  }\r\n\r\n  getStates() {\r\n    return this.getImmutable().get(\"states\");\r\n  }\r\n\r\n  getOneState(pageID: string) {\r\n    return this.getStates().get(pageID);\r\n  }\r\n\r\n  getEditStack() {\r\n    return this.getImmutable().get(\"editStack\");\r\n  }\r\n\r\n  getUndoStack() {\r\n    return this.getImmutable().get(\"undoStack\");\r\n  }\r\n\r\n  setState(pageID: string, drawState: DrawState) {\r\n    const prevDS = this.getOneState(pageID);\r\n    if (!prevDS || prevDS === drawState) return this;\r\n    let currRecord = this.getImmutable()\r\n      .update(\"states\", (s) => s.set(pageID, drawState))\r\n      .update(\"editStack\", (l) => l.push(pageID))\r\n      .delete(\"undoStack\");\r\n\r\n    const { lastOp } = drawState;\r\n    const lastSetOp = lastOp && { ...lastOp, pageID };\r\n\r\n    return new StateSet(currRecord, lastSetOp);\r\n  }\r\n\r\n  // sync with mutation.\r\n  syncStrokeTime(pageID: string, stroke: Stroke) {\r\n    const prevDS = this.getOneState(pageID);\r\n    prevDS && DrawState.syncStrokeTime(prevDS, stroke);\r\n    return this;\r\n  }\r\n\r\n  addState(pageID: string, notePage: NotePage) {\r\n    const { state, ratio } = notePage;\r\n    const newDS = DrawState.loadFromFlat(state, ratio);\r\n    const currRecord = this.getImmutable().update(\"states\", (s) =>\r\n      s.set(pageID, newDS)\r\n    );\r\n    return new StateSet(currRecord);\r\n  }\r\n\r\n  deleteState(pageID: string) {\r\n    return new StateSet(\r\n      this.getImmutable().update(\"states\", (s) => s.delete(pageID))\r\n    );\r\n  }\r\n\r\n  isUndoable() {\r\n    return this.getEditStack().size > 0;\r\n  }\r\n\r\n  isRedoable() {\r\n    return this.getUndoStack().size > 0;\r\n  }\r\n\r\n  undo() {\r\n    if (!this.isUndoable()) return this;\r\n    const lastUid = this.getEditStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.undo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"editStack\", (s) => s.pop())\r\n        .update(\"undoStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  redo() {\r\n    if (!this.isRedoable()) return this;\r\n    const lastUid = this.getUndoStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.redo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"undoStack\", (s) => s.pop())\r\n        .update(\"editStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  getLastDS(): [string, DrawState] | undefined {\r\n    const pageID = this.lastOp?.pageID;\r\n    const ds = pageID && this.getOneState(pageID);\r\n    if (ds) return [pageID, ds];\r\n  }\r\n}\r\n","import { Button, message } from \"antd\";\r\nimport { useContext } from \"react\";\r\nimport { ReaderMethodCtx } from \"./Reader\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\n\r\nexport const AddPageButton = () => {\r\n  const { addFinalPage } = useContext(ReaderMethodCtx);\r\n  return (\r\n    <div className=\"add-btn-wrapper\">\r\n      <Button\r\n        type=\"dashed\"\r\n        icon={<PlusOutlined />}\r\n        block\r\n        onClick={addFinalPage}\r\n      >\r\n        New page\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const showPageDelMsg = (onUndo: () => void) => {\r\n  message.warning({\r\n    content: (\r\n      <>\r\n        One page was deleted.\r\n        <Button\r\n          size=\"small\"\r\n          type=\"link\"\r\n          onClick={() => {\r\n            message.destroy(\"DELETE\");\r\n            onUndo();\r\n          }}\r\n        >\r\n          Undo\r\n        </Button>\r\n      </>\r\n    ),\r\n    key: \"DELETE\",\r\n    duration: 10,\r\n  });\r\n};\r\n","import { useDebugValue, useEffect, useMemo, useRef, useState } from \"react\";\r\nimport localforage from \"localforage\";\r\nimport { Map } from \"immutable\";\r\n\r\nconst scrollForage = localforage.createInstance({ name: \"scroll\" });\r\n\r\nexport function useScrollPage(noteID: string, pageOrder = [] as string[]) {\r\n  const [refMap, setRefMap] = useState(Map<string, HTMLElement>());\r\n  const scrolled = useRef(false);\r\n  const [prevPageID, setPrevPageID] = useState(\"\");\r\n  const [inviewRatios, setInviewRatios] = useState(Map<string, number>());\r\n  const currPageID = useMemo(\r\n    () => largestKey(inviewRatios, pageOrder),\r\n    [inviewRatios, pageOrder]\r\n  );\r\n  useDebugValue(currPageID);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const stored = await scrollForage.getItem<string>(noteID);\r\n      if (!stored) return (scrolled.current = true);\r\n      setPrevPageID(stored);\r\n    })();\r\n  }, [noteID]);\r\n\r\n  useEffect(() => {\r\n    if (scrolled.current || !refMap.has(prevPageID)) return;\r\n    requestAnimationFrame(() => {\r\n      refMap.get(prevPageID)?.scrollIntoView();\r\n      scrolled.current = true;\r\n    });\r\n  }, [prevPageID, refMap]);\r\n\r\n  useEffect(() => {\r\n    if (!scrolled.current) return;\r\n    scrollForage.setItem(noteID, currPageID);\r\n  }, [noteID, currPageID]);\r\n\r\n  const sectionRef = (pageID: string) => (el: HTMLElement | null) => {\r\n    if (!el) return;\r\n    setRefMap((prev) => prev.set(pageID, el));\r\n  };\r\n\r\n  const scrollPage = (pageID: string) => {\r\n    refMap.get(pageID)?.scrollIntoView();\r\n  };\r\n\r\n  return { scrollPage, setInviewRatios, sectionRef, currPageID };\r\n}\r\n\r\nconst largestKey = (map: Map<string, number>, order: string[]) => {\r\n  let result = \"\";\r\n  let maxRatio = 0;\r\n  for (let key of order) {\r\n    const ratio = map.get(key);\r\n    if (!ratio) continue;\r\n    if (ratio === 1) return key;\r\n    if (ratio > maxRatio) {\r\n      result = key;\r\n      maxRatio = ratio;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n","export function exchange<T>(list: T[], fromIndex: number, toIndex: number) {\r\n  const result = list.slice();\r\n  const [removed] = result.splice(fromIndex, 1);\r\n  if (!removed) return list;\r\n  result.splice(toIndex, 0, removed);\r\n  return result;\r\n}\r\n\r\nexport function insertAfter<T>(list: T[], prevItem: T, newItem: T) {\r\n  const prevIndex = list.indexOf(prevItem);\r\n  const curr = list.slice();\r\n  if (prevIndex === -1) return curr;\r\n  curr.splice(prevIndex + 1, 0, newItem);\r\n  return curr;\r\n}\r\n","import { Avatar } from \"antd\";\r\nimport { AvatarSize } from \"antd/lib/avatar/SizeContext\";\r\nimport { FC, useMemo } from \"react\";\r\nimport { getHashedColor } from \"lib/color\";\r\nimport { UserInfo } from \"lib/user\";\r\n\r\nexport const UserAvatar: FC<{\r\n  userInfo: UserInfo;\r\n  size?: AvatarSize;\r\n  onClick?: () => void;\r\n  chosen?: boolean;\r\n  className?: string;\r\n}> = ({\r\n  userInfo,\r\n  size = \"default\",\r\n  onClick = () => {},\r\n  chosen = false,\r\n  className,\r\n}) => {\r\n  const color = useMemo(() => getHashedColor(userInfo.userID), [userInfo]);\r\n  if (!userInfo) return null;\r\n  const { userName } = userInfo;\r\n\r\n  return (\r\n    <Avatar\r\n      className={className}\r\n      data-chosen={chosen}\r\n      size={size}\r\n      style={{ backgroundColor: color }}\r\n    >\r\n      <div className=\"avatar-wrapper\" onClick={onClick}>\r\n        {userName?.slice(0, 3)}\r\n      </div>\r\n    </Avatar>\r\n  );\r\n};\r\n","import { FC, useRef, useMemo, useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  MenuOutlined,\r\n  MoreOutlined,\r\n  PlusOutlined,\r\n  CopyOutlined,\r\n  DeleteOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  Draggable,\r\n  Droppable,\r\n  DropResult,\r\n  DragDropContext,\r\n} from \"react-beautiful-dnd\";\r\nimport { Avatar, Button, Menu, Popover, Tabs } from \"antd\";\r\nimport {\r\n  ActiveKeyProvider,\r\n  Setter,\r\n  useActiveKey,\r\n  useAsideOpen,\r\n} from \"lib/hooks\";\r\nimport { ReaderMethodCtx, ReaderStateCtx } from \"../Reader\";\r\nimport PageWrapper from \"component/PageWrapper\";\r\nimport { UserAvatar } from \"component/UserAvatar\";\r\nimport { useForceLight } from \"lib/Dark\";\r\nimport { AddPageButton } from \"../ReaderUtils\";\r\nimport { exchange } from \"../lib/array\";\r\nimport IconFont from \"component/IconFont\";\r\nimport classNames from \"classnames\";\r\nimport { TeamCtx } from \"../Team\";\r\nimport \"./preview.sass\";\r\n\r\nconst PreviewCard: FC<{ left: boolean }> = ({ left }) => {\r\n  const [forceLight] = useForceLight();\r\n\r\n  const [activeKey] = useActiveKey();\r\n  const title = {\r\n    ALL: \"All Pages\",\r\n    MARKED: \"Bookmarks\",\r\n    WRITTEN: \"Notes\",\r\n  }[activeKey];\r\n\r\n  return (\r\n    <Draggable draggableId={\"CARD\"} index={left ? 0 : 1}>\r\n      {({ innerRef, draggableProps, dragHandleProps }) => (\r\n        <div\r\n          className=\"preview-card\"\r\n          ref={innerRef}\r\n          data-force-light={forceLight}\r\n          {...draggableProps}\r\n        >\r\n          <div className=\"drag-handle\" {...dragHandleProps} />\r\n          <h3>{title}</h3>\r\n          <PreviewTabs />\r\n          <PageList />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nconst PageList: FC = () => {\r\n  const { pageOrder, currPageID } = useContext(ReaderStateCtx);\r\n  const { scrollPage, saveReorder } = useContext(ReaderMethodCtx);\r\n  const refRec = useRef<Record<string, HTMLElement>>({});\r\n  const [activeKey] = useActiveKey();\r\n  const [asideOpen] = useAsideOpen();\r\n\r\n  const onDragEnd = ({ source, destination }: DropResult) => {\r\n    if (!destination || !pageOrder) return;\r\n    const { index: fromIndex } = source;\r\n    const { index: toIndex } = destination;\r\n    const pageID = pageOrder[fromIndex];\r\n    if (fromIndex === toIndex || !pageID) return;\r\n    const newOrder = exchange(pageOrder, fromIndex, toIndex);\r\n    saveReorder(newOrder, true);\r\n    requestAnimationFrame(() => scrollPage(pageID));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (asideOpen) return;\r\n    refRec.current[currPageID]?.scrollIntoView();\r\n  }, [asideOpen, currPageID]);\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Droppable droppableId=\"preview-list\">\r\n        {({ droppableProps, innerRef, placeholder }) => (\r\n          <div className=\"page-list\" ref={innerRef} {...droppableProps}>\r\n            {pageOrder?.map((uid, index) => (\r\n              <PagePreview\r\n                key={uid}\r\n                uid={uid}\r\n                pageIndex={index}\r\n                refRec={refRec.current}\r\n              />\r\n            ))}\r\n            {placeholder}\r\n            {activeKey === \"ALL\" && <AddPageButton />}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nconst PagePreview: FC<{\r\n  uid: string;\r\n  pageIndex: number;\r\n  refRec: Record<string, HTMLElement>;\r\n}> = ({ uid, pageIndex, refRec }) => {\r\n  const { stateSet, pageRec, currPageID } = useContext(ReaderStateCtx);\r\n  const { teamState, ignores } = useContext(TeamCtx);\r\n  const { scrollPage } = useContext(ReaderMethodCtx);\r\n  const [activeKey] = useActiveKey();\r\n  const [chosen, setChosen] = useState(\"\");\r\n\r\n  const page = pageRec?.get(uid);\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStateMap = teamState?.getOnePageStateMap(uid);\r\n\r\n  if (!page || !drawState) return null;\r\n  const { image, marked } = page;\r\n\r\n  if (\r\n    activeKey === \"WRITTEN\" &&\r\n    drawState.isEmpty() &&\r\n    (!teamStateMap || teamStateMap.every((ds) => ds.isEmpty()))\r\n  ) {\r\n    return null;\r\n  }\r\n  if (activeKey === \"MARKED\" && !marked) return null;\r\n  const curr = currPageID === uid;\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={uid}\r\n      index={pageIndex}\r\n      isDragDisabled={activeKey !== \"ALL\"}\r\n    >\r\n      {(\r\n        { innerRef, draggableProps, dragHandleProps },\r\n        { isDragging: dragged }\r\n      ) => (\r\n        <div\r\n          ref={(e) => {\r\n            innerRef(e);\r\n            if (e) refRec[uid] = e;\r\n          }}\r\n          className=\"page\"\r\n          data-curr={curr}\r\n          data-dragged={dragged}\r\n          onClick={() => scrollPage(uid)}\r\n          {...draggableProps}\r\n          {...dragHandleProps}\r\n        >\r\n          <PageWrapper\r\n            drawState={teamStateMap?.get(chosen) || drawState}\r\n            teamStateMap={chosen ? undefined : teamStateMap}\r\n            thumbnail={image}\r\n            ignores={ignores}\r\n            preview\r\n          />\r\n          <PreviewTools\r\n            uid={uid}\r\n            index={pageIndex}\r\n            chosen={chosen}\r\n            setChosen={setChosen}\r\n          />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nconst PreviewTools: FC<{\r\n  uid: string;\r\n  index: number;\r\n  chosen: string;\r\n  setChosen: Setter<string>;\r\n}> = ({ uid, index, chosen, setChosen }) => {\r\n  const { switchPageMarked } = useContext(ReaderMethodCtx);\r\n  const { pageRec } = useContext(ReaderStateCtx);\r\n  const { ignores, teamState } = useContext(TeamCtx);\r\n  const userIDs = useMemo(\r\n    () =>\r\n      teamState\r\n        ?.getPageValidUsers(uid)\r\n        .filter((userID) => !ignores.has(userID)) || [],\r\n    [teamState, ignores, uid]\r\n  );\r\n  const page = pageRec?.get(uid);\r\n  if (!page) return null;\r\n  const { marked } = page;\r\n\r\n  return (\r\n    <div className=\"tools\" onClick={(e) => e.stopPropagation()}>\r\n      <div\r\n        className=\"bookmark\"\r\n        data-marked={marked}\r\n        onClick={() => switchPageMarked(uid)}\r\n      />\r\n      <div className=\"index\">{index + 1}</div>\r\n      <PreviewOption uid={uid} />\r\n      <TeamAvatars userIDs={userIDs} chosen={chosen} setChosen={setChosen} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TeamAvatars: FC<{\r\n  userIDs: string[];\r\n  chosen: string;\r\n  setChosen: Setter<string>;\r\n}> = ({ userIDs, chosen, setChosen }) => {\r\n  const { userRec } = useContext(TeamCtx);\r\n  return (\r\n    <Avatar.Group\r\n      maxCount={2}\r\n      size=\"default\"\r\n      className={classNames(\"team-group\", { chosen })}\r\n      maxPopoverPlacement=\"bottom\"\r\n    >\r\n      {userIDs.map((userID) => {\r\n        const userInfo = userRec[userID];\r\n        if (!userInfo) return null;\r\n        return (\r\n          <UserAvatar\r\n            key={userID}\r\n            size=\"default\"\r\n            userInfo={userInfo}\r\n            className=\"preview-avatar\"\r\n            chosen={chosen === userID}\r\n            onClick={() => setChosen((prev) => (prev === userID ? \"\" : userID))}\r\n          />\r\n        );\r\n      })}\r\n    </Avatar.Group>\r\n  );\r\n};\r\n\r\nconst PreviewOption = ({ uid }: { uid: string }) => {\r\n  const { addPage, deletePage } = useContext(ReaderMethodCtx);\r\n\r\n  const menu = (\r\n    <Menu\r\n      onClick={({ key }) => {\r\n        if (key === \"ADD\") {\r\n          addPage(uid);\r\n        } else if (key === \"COPY\") {\r\n          addPage(uid, true);\r\n        } else if (key === \"DELETE\") {\r\n          deletePage(uid);\r\n        }\r\n      }}\r\n      items={[\r\n        { key: \"ADD\", icon: <PlusOutlined />, label: \"Add page\" },\r\n        { key: \"COPY\", icon: <CopyOutlined />, label: \"Duplicate\" },\r\n        {\r\n          key: \"DELETE\",\r\n          icon: <DeleteOutlined />,\r\n          label: \"Delete\",\r\n          danger: true,\r\n        },\r\n      ]}\r\n    ></Menu>\r\n  );\r\n  return (\r\n    <Popover\r\n      content={menu}\r\n      trigger=\"click\"\r\n      placement=\"left\"\r\n      destroyTooltipOnHide\r\n    >\r\n      <div className=\"option\">\r\n        <MoreOutlined />\r\n      </div>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst PreviewTabs = () => {\r\n  const [activeKey, setActiveKey] = useActiveKey();\r\n  const { TabPane } = Tabs;\r\n  return (\r\n    <Tabs\r\n      className=\"tabs\"\r\n      activeKey={activeKey}\r\n      onChange={setActiveKey}\r\n      tabBarGutter={0}\r\n      size=\"small\"\r\n      centered\r\n    >\r\n      <TabPane tab={<IconFont type=\"icon-uf_paper\" />} key=\"ALL\" />\r\n      <TabPane tab={<IconFont type=\"icon-bookmark2\" />} key=\"MARKED\" />\r\n      <TabPane tab={<IconFont type=\"icon-write\" />} key=\"WRITTEN\" />\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport const PageNav = () => {\r\n  const [left, setLeft] = useState(false);\r\n  const [asideOpen] = useAsideOpen();\r\n\r\n  const previewBody = <PreviewCard left={left} key=\"preview-drag\" />;\r\n\r\n  const opposite = (\r\n    <Draggable key=\"opposite\" draggableId=\"opposite\" index={left ? 1 : 0}>\r\n      {({ innerRef, draggableProps, dragHandleProps }) => (\r\n        <div\r\n          className=\"opposite\"\r\n          ref={innerRef}\r\n          {...draggableProps}\r\n          {...dragHandleProps}\r\n        />\r\n      )}\r\n    </Draggable>\r\n  );\r\n\r\n  return (\r\n    <ActiveKeyProvider initKey=\"ALL\">\r\n      <DragDropContext\r\n        onDragEnd={({ draggableId, destination }) => {\r\n          if (draggableId !== \"CARD\") return;\r\n          if (destination?.index === 0) setLeft(true);\r\n          if (destination?.index === 1) setLeft(false);\r\n        }}\r\n      >\r\n        <Droppable droppableId=\"preview-drop\" direction=\"horizontal\">\r\n          {({ droppableProps, innerRef, placeholder }) => (\r\n            <div\r\n              className=\"preview-drop\"\r\n              data-left={left}\r\n              data-open={asideOpen}\r\n              ref={innerRef}\r\n              {...droppableProps}\r\n            >\r\n              {left ? [previewBody, opposite] : [opposite, previewBody]}\r\n              {placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </ActiveKeyProvider>\r\n  );\r\n};\r\n\r\nexport const PageNavButton = () => {\r\n  const [, setAsideOpen] = useAsideOpen();\r\n  return (\r\n    <Button\r\n      type=\"text\"\r\n      icon={<MenuOutlined />}\r\n      onClick={() => setAsideOpen((prev) => !prev)}\r\n    />\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { HomeFilled, SaveOutlined } from \"@ant-design/icons\";\r\n\r\nexport const HeaderLeft: FC<{\r\n  saved: boolean;\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ saved, instantSave }) => {\r\n  const nav = useNavigate();\r\n  return (\r\n    <div className=\"left\">\r\n      <Button\r\n        type=\"text\"\r\n        onClick={async () => {\r\n          await instantSave();\r\n          nav(\"/\");\r\n        }}\r\n        icon={<HomeFilled style={{ opacity: 0.8 }} />}\r\n      />\r\n      <Button\r\n        type=\"text\"\r\n        className=\"save\"\r\n        onClick={instantSave}\r\n        disabled={saved}\r\n        icon={<SaveOutlined />}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { FC, useContext } from \"react\";\r\nimport { Button, message, Popover, ButtonProps, Segmented } from \"antd\";\r\nimport { ReaderStateCtx } from \"../Reader\";\r\nimport {\r\n  BulbFilled,\r\n  BulbOutlined,\r\n  UndoOutlined,\r\n  RedoOutlined,\r\n  GatewayOutlined,\r\n  HighlightOutlined,\r\n} from \"@ant-design/icons\";\r\nimport IconFont from \"component/IconFont\";\r\nimport { PenPanel, WidthSelect } from \"../tools/PenPanel\";\r\nimport { useForceLight } from \"lib/Dark\";\r\nimport { useDrawCtrl, useUpdateDrawCtrl } from \"lib/draw/DrawCtrl\";\r\n\r\nexport const HeaderMiddle: FC<{\r\n  handleUndo: () => void;\r\n  handleRedo: () => void;\r\n}> = ({ handleUndo, handleRedo }) => {\r\n  const { stateSet } = useContext(ReaderStateCtx);\r\n  const { mode, finger } = useDrawCtrl();\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n  const [forceLight, setForceLight] = useForceLight();\r\n\r\n  return (\r\n    <div className=\"middle\">\r\n      <Button\r\n        type=\"text\"\r\n        shape=\"circle\"\r\n        icon={<UndoOutlined />}\r\n        onClick={handleUndo}\r\n        disabled={!stateSet?.isUndoable()}\r\n      />\r\n      <Button\r\n        type=\"text\"\r\n        shape=\"circle\"\r\n        icon={<RedoOutlined />}\r\n        onClick={handleRedo}\r\n        disabled={!stateSet?.isRedoable()}\r\n      />\r\n      <Button\r\n        type={finger ? \"default\" : \"text\"}\r\n        shape=\"circle\"\r\n        onClick={() => {\r\n          updateDrawCtrl({ finger: !finger });\r\n          message.destroy(\"FINGER\");\r\n          message.open({\r\n            content: finger ? \"Pencil only\" : \"Draw with finger\",\r\n            key: \"FINGER\",\r\n          });\r\n        }}\r\n        icon={<IconFont type=\"icon-finger\" />}\r\n      />\r\n      <Button\r\n        className=\"force-light-btn\"\r\n        type=\"text\"\r\n        shape=\"circle\"\r\n        icon={forceLight ? <BulbFilled /> : <BulbOutlined />}\r\n        onClick={() => setForceLight((prev) => !prev)}\r\n      />\r\n      <PenButton />\r\n      <EraserButton />\r\n      <Button\r\n        type={mode === \"text\" ? \"default\" : \"text\"}\r\n        shape=\"circle\"\r\n        onClick={() => updateDrawCtrl({ mode: \"text\" })}\r\n        icon={<IconFont type=\"icon-text1\" />}\r\n      />\r\n      <SelectButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PenButton = () => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n\r\n  const btnProps: ButtonProps = {\r\n    shape: \"circle\",\r\n    icon: <HighlightOutlined />,\r\n  };\r\n  return drawCtrl.mode === \"draw\" ? (\r\n    <Popover\r\n      content={<PenPanel updateDrawCtrl={updateDrawCtrl} drawCtrl={drawCtrl} />}\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button type=\"default\" {...btnProps} />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      onClick={() => updateDrawCtrl({ mode: \"draw\" })}\r\n      {...btnProps}\r\n    />\r\n  );\r\n};\r\n\r\nconst EraserButton = () => {\r\n  const drawCtrl = useDrawCtrl();\r\n  const { mode, pixelEraser } = drawCtrl;\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n\r\n  const btnProps: ButtonProps = {\r\n    shape: \"circle\",\r\n    icon: <IconFont type=\"icon-eraser\" />,\r\n  };\r\n\r\n  return mode === \"erase\" ? (\r\n    <Popover\r\n      content={\r\n        <div className=\"width-seg-wrapper\">\r\n          <Segmented\r\n            block\r\n            size=\"small\"\r\n            className=\"pixel-seg\"\r\n            options={[\"Pixel\", \"Object\"]}\r\n            value={pixelEraser ? \"Pixel\" : \"Object\"}\r\n            onChange={(value) => {\r\n              if (value === \"Pixel\") updateDrawCtrl({ pixelEraser: true });\r\n              else updateDrawCtrl({ pixelEraser: false });\r\n            }}\r\n          />\r\n          <WidthSelect\r\n            drawCtrl={drawCtrl}\r\n            updateDrawCtrl={updateDrawCtrl}\r\n            field=\"eraserWidth\"\r\n          />\r\n        </div>\r\n      }\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button type=\"default\" {...btnProps} />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      onClick={() => updateDrawCtrl({ mode: \"erase\" })}\r\n      {...btnProps}\r\n    />\r\n  );\r\n};\r\n\r\nconst SelectButton = () => {\r\n  const { lasso, mode } = useDrawCtrl();\r\n  const updateDrawCtrl = useUpdateDrawCtrl();\r\n\r\n  const icon = lasso ? <IconFont type=\"icon-lasso1\" /> : <GatewayOutlined />;\r\n\r\n  return mode === \"select\" ? (\r\n    <Button\r\n      type=\"default\"\r\n      shape=\"circle\"\r\n      icon={icon}\r\n      onClick={() => updateDrawCtrl({ lasso: !lasso })}\r\n    />\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      shape=\"circle\"\r\n      icon={icon}\r\n      onClick={() => updateDrawCtrl({ mode: \"select\" })}\r\n    />\r\n  );\r\n};\r\n","import { FC, useMemo, useState, useEffect, useContext } from \"react\";\r\nimport { Badge, Alert, Modal, Button, Divider, message, Popover } from \"antd\";\r\nimport Search from \"antd/lib/input/Search\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { PasscodeInput } from \"antd-mobile\";\r\nimport { ReaderStateCtx } from \"../Reader\";\r\nimport { TeamCtx } from \"../Team\";\r\nimport { getUserID, saveUserName } from \"lib/user\";\r\nimport { PageNavButton } from \"../PageNav\";\r\nimport {\r\n  EyeOutlined,\r\n  FormOutlined,\r\n  TeamOutlined,\r\n  CopyOutlined,\r\n  CheckOutlined,\r\n  ReloadOutlined,\r\n  ShareAltOutlined,\r\n  DisconnectOutlined,\r\n  EyeInvisibleOutlined,\r\n  UsergroupAddOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { editNoteData } from \"lib/note/archive\";\r\nimport { UserAvatar } from \"component/UserAvatar\";\r\nimport { putNote } from \"lib/network/http\";\r\nimport copy from \"clipboard-copy\";\r\n\r\nexport const HeaderRight: FC<{\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ instantSave }) => {\r\n  const { teamOn } = useContext(TeamCtx);\r\n  return (\r\n    <div className=\"right\">\r\n      {teamOn ? <RoomInfo /> : <JoinRoom instantSave={instantSave} />}\r\n      <PageNavButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst UserCard: FC<{ userID: string }> = ({ userID }) => {\r\n  const [renaming, setRenaming] = useState(false);\r\n  const { ignores, setIgnores, resetIO, userRec } = useContext(TeamCtx);\r\n  const userInfo = userRec[userID];\r\n  useEffect(() => setRenaming(false), [userInfo]);\r\n  if (!userInfo) return null;\r\n\r\n  const { userName, online } = userInfo;\r\n  const self = userID === getUserID();\r\n  const ignored = ignores.has(userID) && !self;\r\n\r\n  const switchIgnore = () => {\r\n    setIgnores((prev) => {\r\n      if (prev.has(userID)) return prev.delete(userID);\r\n      return prev.add(userID);\r\n    });\r\n  };\r\n\r\n  const submitRename = (value: string) => {\r\n    const name = value.trim();\r\n    if (!name || name === userName) return setRenaming(false);\r\n    saveUserName(name);\r\n    resetIO();\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-item\" data-online={online}>\r\n      <UserAvatar userInfo={userInfo} size=\"small\" className=\"room-avatar\" />\r\n      {renaming || <span className=\"user-name\">{userName}</span>}\r\n      {renaming && (\r\n        <Search\r\n          autoFocus\r\n          className=\"rename-input\"\r\n          defaultValue={userName}\r\n          onSearch={submitRename}\r\n          enterButton={<Button icon={<CheckOutlined />} />}\r\n        />\r\n      )}\r\n      {self ? (\r\n        renaming || (\r\n          <Button\r\n            type=\"text\"\r\n            icon={<FormOutlined />}\r\n            onClick={() => setRenaming(true)}\r\n          />\r\n        )\r\n      ) : (\r\n        <Button\r\n          type=\"text\"\r\n          icon={ignored ? <EyeInvisibleOutlined /> : <EyeOutlined />}\r\n          onClick={switchIgnore}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst RoomInfo: FC = () => {\r\n  const { code, userRec, connected, loadInfo, loadState, resetIO } =\r\n    useContext(TeamCtx);\r\n  const { noteInfo } = useContext(ReaderStateCtx);\r\n  const link = window.location.href;\r\n  const share = async () => {\r\n    const selfName = userRec[getUserID()]?.userName;\r\n    try {\r\n      if (!noteInfo) return;\r\n      await copy(`${noteInfo.name} - ${selfName} - Multibility\\n${link}`);\r\n      message.destroy(\"copy\");\r\n      message.success({\r\n        content: \"Link copied!\",\r\n        icon: <CopyOutlined />,\r\n        key: \"copy\",\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const userList = useMemo(() => {\r\n    const selfID = getUserID();\r\n    const { [selfID]: selfInfo, ...otherUsers } = userRec;\r\n    const list = selfInfo ? [selfInfo] : [];\r\n    const values = Object.values(otherUsers);\r\n    list.push(\r\n      ...values.filter(({ online }) => online),\r\n      ...values.filter(({ online }) => !online)\r\n    );\r\n    return list;\r\n  }, [userRec]);\r\n\r\n  const onlineNum = useMemo(\r\n    () => userList.filter(({ online }) => online).length,\r\n    [userList]\r\n  );\r\n\r\n  const teamPop = (\r\n    <div className=\"team-popover\">\r\n      {connected || (\r\n        <Alert\r\n          className=\"disconn-alert\"\r\n          message=\"Network failed.\"\r\n          icon={<DisconnectOutlined />}\r\n          type=\"error\"\r\n          showIcon\r\n          banner\r\n        />\r\n      )}\r\n      <PasscodeInput\r\n        className=\"code-display\"\r\n        value={String(code)}\r\n        length={4}\r\n        plain\r\n      />\r\n      <Button\r\n        icon={<ShareAltOutlined />}\r\n        className=\"share-btn\"\r\n        onClick={share}\r\n        block\r\n      >\r\n        Share\r\n      </Button>\r\n      <Divider />\r\n      <div className=\"user-list\">\r\n        {userList.map((u) => (\r\n          <UserCard key={u.userID} userID={u.userID} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const [reloading, setReloading] = useState(false);\r\n  const title = (\r\n    <div className=\"team-title\">\r\n      <span>Team info</span>\r\n      <Button\r\n        shape=\"circle\"\r\n        type=\"text\"\r\n        size=\"small\"\r\n        loading={reloading}\r\n        icon={<ReloadOutlined />}\r\n        onClick={async () => {\r\n          setReloading(true);\r\n          await loadInfo();\r\n          await loadState();\r\n          setReloading(false);\r\n          resetIO();\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Popover\r\n      content={teamPop}\r\n      trigger=\"click\"\r\n      placement=\"bottomRight\"\r\n      title={title}\r\n      getPopupContainer={(e) => e.parentElement!}\r\n    >\r\n      <Button\r\n        type=\"text\"\r\n        icon={\r\n          <Badge\r\n            status={connected ? \"success\" : \"error\"}\r\n            count={connected ? onlineNum : \"!\"}\r\n            size=\"small\"\r\n          >\r\n            <TeamOutlined />\r\n          </Badge>\r\n        }\r\n      />\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst JoinRoom: FC<{\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ instantSave }) => {\r\n  const { noteID } = useContext(ReaderStateCtx);\r\n  const nav = useNavigate();\r\n\r\n  const createRoom = async () => {\r\n    await instantSave();\r\n    const res = await putNote(noteID);\r\n    if (!res) return message.error(\"Can't create room.\");\r\n    await editNoteData(noteID, { team: true });\r\n    nav(\"/team/\" + noteID);\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      type=\"text\"\r\n      icon={<UsergroupAddOutlined />}\r\n      onClick={() => {\r\n        Modal.confirm({\r\n          title: \"Enable team editing\",\r\n          content: \"This will make your note public to anyone with the link.\",\r\n          icon: <TeamOutlined style={{ color: \"#555\" }} />,\r\n          onOk: createRoom,\r\n        });\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\nimport { HeaderLeft } from \"./Left\";\r\nimport { HeaderMiddle } from \"./Middle\";\r\nimport { HeaderRight } from \"./Right\";\r\nimport \"./header.sass\";\r\n\r\nexport const Header: FC<{\r\n  saved: boolean;\r\n  handleUndo: () => void;\r\n  handleRedo: () => void;\r\n  instantSave: () => Promise<void> | undefined;\r\n}> = ({ saved, handleUndo, handleRedo, instantSave }) => {\r\n  return (\r\n    <header>\r\n      <HeaderLeft saved={saved} instantSave={instantSave} />\r\n      <HeaderMiddle handleUndo={handleUndo} handleRedo={handleRedo} />\r\n      <HeaderRight instantSave={instantSave} />\r\n    </header>\r\n  );\r\n};\r\n","import React, {\r\n  FC,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  useCallback,\r\n} from \"react\";\r\nimport { NoteInfo, NotePage, createPage, defaultNotePage } from \"lib/note/note\";\r\nimport { DrawCtrlProvider } from \"lib/draw/DrawCtrl\";\r\nimport { NewPageInfo, ReorderInfo, SyncInfo } from \"lib/network/io\";\r\nimport { DarkModeProvider } from \"lib/Dark\";\r\nimport { useMemoizedFn as useEvent, useSafeState } from \"ahooks\";\r\nimport { SetOperation, StateSet } from \"lib/draw/StateSet\";\r\nimport { loadNote, editNoteData } from \"lib/note/archive\";\r\nimport { AddPageButton, showPageDelMsg } from \"./ReaderUtils\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport PageWrapper from \"component/PageWrapper\";\r\nimport { DrawState } from \"lib/draw/DrawState\";\r\nimport { useScrollPage } from \"./lib/scroll\";\r\nimport { debounce, last } from \"lodash-es\";\r\nimport { insertAfter } from \"./lib/array\";\r\nimport { PageNav } from \"./PageNav\";\r\nimport { AsideOpenProvider, Setter } from \"lib/hooks\";\r\nimport { Header } from \"./header\";\r\nimport { TeamCtx } from \"./Team\";\r\nimport { Map } from \"immutable\";\r\nimport { message } from \"antd\";\r\nimport \"./reader.sass\";\r\n\r\nexport const ReaderStateCtx = React.createContext<{\r\n  noteID: string;\r\n  noteInfo?: NoteInfo;\r\n  stateSet?: StateSet;\r\n  pageRec?: Map<string, NotePage>;\r\n  pageOrder?: string[];\r\n  currPageID: string;\r\n}>({ noteID: \"\", currPageID: \"\" });\r\n\r\nexport const ReaderMethodCtx = React.createContext({\r\n  scrollPage: (pageID: string) => {},\r\n  switchPageMarked: (pageID: string) => {},\r\n  addPage: (prevPageID: string, copy?: boolean) => {},\r\n  addFinalPage: () => {},\r\n  deletePage: (pageID: string) => {},\r\n  saveReorder: async (order: string[], push: boolean) => {},\r\n});\r\n\r\nexport default function Reader() {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const nav = useNavigate();\r\n\r\n  const [pageRec, setPageRec] = useState<Map<string, NotePage>>();\r\n  const [noteInfo, setNoteInfo] = useState<NoteInfo>();\r\n  const [stateSet, setStateSet] = useState<StateSet>();\r\n  const [pageOrder, setPageOrder] = useState<string[]>();\r\n  const [saved, setSaved] = useSafeState(true);\r\n\r\n  const { io, teamOn, addTeamStatePage } = useContext(TeamCtx);\r\n  const { setInviewRatios, scrollPage, sectionRef, currPageID } = useScrollPage(\r\n    noteID,\r\n    pageOrder\r\n  );\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const storedNote = await loadNote(noteID);\r\n      if (!storedNote) {\r\n        message.error(\"Note not found\");\r\n        return nav(\"/\");\r\n      }\r\n      const { pageRec, pdf, pageOrder, ...noteInfo } = storedNote;\r\n      setPageRec(Map(pageRec));\r\n      setPageOrder(pageOrder);\r\n      setNoteInfo(noteInfo);\r\n      setStateSet(StateSet.createFromPages(pageRec));\r\n    })();\r\n  }, [nav, noteID, teamOn]);\r\n\r\n  useEffect(() => {\r\n    if (!noteInfo) return;\r\n    document.title = noteInfo.name + \" - Multibility\";\r\n  }, [noteInfo]);\r\n\r\n  const saver = useEvent(async () => {\r\n    const pr = pageRec?.toObject();\r\n    await editNoteData(noteID, { pageRec: pr });\r\n    setSaved(true);\r\n  });\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const debouncedSave = useCallback(debounce(saver, 2000), [saver]);\r\n  const instantSave = debouncedSave.flush;\r\n\r\n  const savePageRec = (pageID: string, cb: (prev: NotePage) => NotePage) => {\r\n    setPageRec((prev) => prev?.update(pageID, defaultNotePage, cb));\r\n    setSaved(false);\r\n    debouncedSave();\r\n  };\r\n\r\n  const saveReorder = async (pageOrder: string[], push = false) => {\r\n    setPageOrder(pageOrder);\r\n    await editNoteData(noteID, { pageOrder });\r\n    await instantSave();\r\n    push && pushReorder(pageOrder);\r\n  };\r\n\r\n  const pushReorder = (pageOrder: string[]) =>\r\n    io?.emit(\"reorder\", { pageOrder });\r\n\r\n  const handleReorder = useEvent(\r\n    ({ deleted, pageOrder, prevOrder }: ReorderInfo) => {\r\n      saveReorder(pageOrder);\r\n      if (!deleted) return;\r\n      showPageDelMsg(() => saveReorder(prevOrder, true));\r\n    }\r\n  );\r\n\r\n  const handleNewPage = useEvent(\r\n    ({ pageOrder, pageID, newPage }: NewPageInfo) => {\r\n      saveReorder(pageOrder);\r\n      savePageRec(pageID, () => newPage);\r\n      setStateSet((prev) => prev?.addState(pageID, newPage));\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    io?.on(\"reorder\", handleReorder);\r\n    io?.on(\"newPage\", handleNewPage);\r\n    return () => void io?.removeAllListeners();\r\n  }, [io, handleReorder, handleNewPage]);\r\n\r\n  const pushOperation = (operation: SetOperation) => {\r\n    const handleSync = ({ pageID, stroke }: SyncInfo) =>\r\n      setStateSet((prev) => prev?.syncStrokeTime(pageID, stroke));\r\n\r\n    io?.emit(\"push\", { operation }, handleSync);\r\n  };\r\n\r\n  const pushNewPage = (\r\n    pageOrder: string[],\r\n    pageID: string,\r\n    newPage: NotePage\r\n  ) => {\r\n    const { image, marked, ...newTeamPage } = newPage;\r\n    io?.emit(\"newPage\", { pageOrder, pageID, newPage: newTeamPage });\r\n    addTeamStatePage(pageID, newPage);\r\n  };\r\n\r\n  const updatePageRec = (pageID: string, ds: DrawState) => {\r\n    const state = DrawState.flaten(ds);\r\n    savePageRec(pageID, (prev) => ({ ...prev, state }));\r\n  };\r\n\r\n  const updateStateSet = (cb: (prevSS: StateSet) => StateSet) => {\r\n    if (!stateSet) return;\r\n    const newSS = cb(stateSet);\r\n    if (newSS === stateSet) return;\r\n    setStateSet(newSS);\r\n    const lastDS = newSS.getLastDS();\r\n    const lastOp = newSS.lastOp;\r\n    if (!lastDS || !lastOp) return;\r\n    updatePageRec(...lastDS);\r\n    pushOperation(lastOp);\r\n  };\r\n\r\n  const switchPageMarked = (pageID: string) =>\r\n    savePageRec(pageID, (prev) => ({ ...prev, marked: !prev.marked }));\r\n\r\n  const addPage = (prevPageID: string, copy = false) => {\r\n    if (!pageOrder) return;\r\n    const prevPage = copy ? pageRec?.get(prevPageID) : undefined;\r\n    const [pageID, newPage] = createPage(prevPage);\r\n    const newOrder = insertAfter(pageOrder, prevPageID, pageID);\r\n    pushNewPage(newOrder, pageID, newPage);\r\n    saveReorder(newOrder);\r\n    savePageRec(pageID, () => newPage);\r\n    setStateSet((prev) => prev?.addState(pageID, newPage));\r\n  };\r\n\r\n  const addFinalPage = () => {\r\n    const lastPageID = last(pageOrder);\r\n    lastPageID && addPage(lastPageID);\r\n  };\r\n\r\n  const deletePage = (pageID: string) => {\r\n    const newOrder = pageOrder?.filter((id) => id !== pageID);\r\n    newOrder?.length && saveReorder(newOrder, true);\r\n  };\r\n\r\n  const renderResult = (\r\n    <div className=\"reader container\">\r\n      <Header\r\n        saved={saved}\r\n        instantSave={instantSave}\r\n        handleUndo={() => updateStateSet((prev) => prev.undo())}\r\n        handleRedo={() => updateStateSet((prev) => prev.redo())}\r\n      />\r\n      <main>\r\n        {pageOrder?.map((uid) => (\r\n          <section key={uid} className=\"note-page\" ref={sectionRef(uid)}>\r\n            <PageContainer\r\n              uid={uid}\r\n              updateStateSet={updateStateSet}\r\n              setInviewRatios={setInviewRatios}\r\n            />\r\n          </section>\r\n        ))}\r\n        <AddPageButton />\r\n      </main>\r\n      <PageNav />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <DarkModeProvider>\r\n      <ReaderStateCtx.Provider\r\n        value={{\r\n          noteID,\r\n          pageRec,\r\n          noteInfo,\r\n          stateSet,\r\n          pageOrder,\r\n          currPageID,\r\n        }}\r\n      >\r\n        <ReaderMethodCtx.Provider\r\n          value={{\r\n            addPage,\r\n            scrollPage,\r\n            deletePage,\r\n            saveReorder,\r\n            addFinalPage,\r\n            switchPageMarked,\r\n          }}\r\n        >\r\n          <DrawCtrlProvider>\r\n            <AsideOpenProvider>{renderResult}</AsideOpenProvider>\r\n          </DrawCtrlProvider>\r\n        </ReaderMethodCtx.Provider>\r\n      </ReaderStateCtx.Provider>\r\n    </DarkModeProvider>\r\n  );\r\n}\r\n\r\nconst PageContainer: FC<{\r\n  uid: string;\r\n  updateStateSet: (cb: (prevSS: StateSet) => StateSet) => void;\r\n  setInviewRatios: Setter<Map<string, number>>;\r\n}> = ({ uid, updateStateSet, setInviewRatios }) => {\r\n  const { pageRec, stateSet, currPageID, pageOrder, noteID } =\r\n    useContext(ReaderStateCtx);\r\n  const { teamState, ignores } = useContext(TeamCtx);\r\n\r\n  const page = pageRec?.get(uid);\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStateMap = teamState?.getOnePageStateMap(uid);\r\n  const updateState = (ds: DrawState) => {\r\n    updateStateSet((prev) => prev.setState(uid, ds));\r\n  };\r\n\r\n  const onViewChange = (visible: boolean, ratio: number) => {\r\n    if (!visible) return setInviewRatios((prev) => prev.delete(uid));\r\n    setInviewRatios((prev) => prev.set(uid, ratio));\r\n  };\r\n\r\n  const preload = useMemo(() => {\r\n    if (!pageOrder) return false;\r\n    const currIndex = pageOrder.indexOf(currPageID);\r\n    const selfIndex = pageOrder.indexOf(uid);\r\n    return Math.abs(selfIndex - currIndex) <= 1;\r\n  }, [currPageID, uid, pageOrder]);\r\n\r\n  if (!page || !drawState) return null;\r\n  return (\r\n    <PageWrapper\r\n      drawState={drawState}\r\n      teamStateMap={teamStateMap}\r\n      updateState={updateState}\r\n      pdfIndex={page.pdfIndex}\r\n      noteID={noteID}\r\n      ignores={ignores}\r\n      onViewChange={onViewChange}\r\n      preload={preload}\r\n    />\r\n  );\r\n};\r\n","import { io } from \"socket.io-client\";\r\nimport { Stroke } from \"lib/draw/DrawState\";\r\nimport { NotePage } from \"lib/note/note\";\r\nimport { getUserID, getUserName } from \"lib/user\";\r\nimport { BASE_URL } from \"./http\";\r\n\r\nexport const IoFactory = (noteID: string) => () =>\r\n  io(BASE_URL, {\r\n    query: {\r\n      userID: getUserID(),\r\n      userName: getUserName(),\r\n      noteID,\r\n    },\r\n  });\r\n\r\nexport interface ReorderInfo {\r\n  pageOrder: string[];\r\n  prevOrder: string[];\r\n  deleted: boolean;\r\n}\r\n\r\nexport interface NewPageInfo {\r\n  pageOrder: string[];\r\n  pageID: string;\r\n  newPage: NotePage;\r\n}\r\n\r\nexport interface SyncInfo {\r\n  stroke: Stroke;\r\n  pageID: string;\r\n}\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  getTeamNoteState,\r\n  loadTeamNoteInfo,\r\n  updatePages,\r\n} from \"lib/network/http\";\r\nimport { LoginOutlined, LogoutOutlined } from \"@ant-design/icons\";\r\nimport { IoFactory, NewPageInfo } from \"lib/network/io\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { TeamState } from \"lib/draw/TeamState\";\r\nimport { getUserID, UserInfo } from \"lib/user\";\r\nimport { NotePage } from \"lib/note/note\";\r\nimport { Socket } from \"socket.io-client\";\r\nimport { Setter } from \"lib/hooks\";\r\nimport { Loading } from \"component/Loading\";\r\nimport { message } from \"antd\";\r\nimport { Set } from \"immutable\";\r\nimport Reader from \"./Reader\";\r\n\r\nexport const TeamCtx = React.createContext({\r\n  io: undefined as Socket | undefined,\r\n  code: 0,\r\n  teamOn: false,\r\n  connected: false,\r\n  ignores: Set<string>(),\r\n  userRec: {} as Record<string, UserInfo>,\r\n  teamState: undefined as TeamState | undefined,\r\n  resetIO: () => {},\r\n  loadInfo: async () => false,\r\n  loadState: async () => false,\r\n  setIgnores: (() => {}) as Setter<Set<string>>,\r\n  addTeamStatePage: (pageID: string, newPage: NotePage) => {},\r\n});\r\n\r\nexport default function Team() {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const [teamState, setTeamState] = useState<TeamState>();\r\n  const [code, setCode] = useState(-2);\r\n  const [userRec, setUserRec] = useState<Record<string, UserInfo>>({});\r\n  const [ignores, setIgnores] = useState(Set<string>());\r\n  const [io, setIO] = useState(IoFactory(noteID));\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [connected, setConnected] = useState(false);\r\n  const nav = useNavigate();\r\n\r\n  const loadInfo = useCallback(async () => {\r\n    const info = await loadTeamNoteInfo(noteID);\r\n    if (!info) {\r\n      message.error(\"Failed loading the team note info\");\r\n      return false;\r\n    }\r\n    setCode(info.code);\r\n    return true;\r\n  }, [noteID]);\r\n\r\n  const loadState = useCallback(async () => {\r\n    const teamNote = await getTeamNoteState(noteID);\r\n    if (!teamNote) {\r\n      message.error(\"Failed loading the team note state\");\r\n      return false;\r\n    }\r\n    setTeamState(TeamState.createFromTeamPages(teamNote));\r\n    return true;\r\n  }, [noteID]);\r\n\r\n  const updateSelfState = useCallback(() => {\r\n    updatePages(noteID);\r\n  }, [noteID]);\r\n\r\n  useEffect(() => {\r\n    const roomInit = async () => {\r\n      const infoLoaded = await loadInfo();\r\n      const stateLoaded = await loadState();\r\n      if (!infoLoaded || !stateLoaded) return nav(\"/\");\r\n      setLoaded(true);\r\n      updateSelfState();\r\n    };\r\n    roomInit();\r\n    return updateSelfState;\r\n  }, [loadInfo, loadState, nav, updateSelfState]);\r\n\r\n  useEffect(() => {\r\n    io.on(\"push\", ({ operation, userID }) => {\r\n      setTeamState((prev) => prev?.pushOperation(operation, userID));\r\n    });\r\n\r\n    io.on(\"join\", ({ joined, members }) => {\r\n      const { userID, userName } = joined;\r\n      setUserRec(members);\r\n      if (userID === getUserID()) return;\r\n      showJoinMsg(userID, userName);\r\n    });\r\n\r\n    io.on(\"leave\", ({ leaved, members }) => {\r\n      const { userID, userName } = leaved;\r\n      setUserRec(members);\r\n      if (userID === getUserID()) return io.emit(\"join\");\r\n      showLeaveMsg(userID, userName);\r\n    });\r\n\r\n    io.on(\"newPage\", (info: NewPageInfo) => {\r\n      const { pageID, newPage } = info;\r\n      setTeamState((prev) => prev?.addPage(pageID, newPage));\r\n    });\r\n\r\n    io.on(\"reset\", ({ userID, pageRec }) => {\r\n      if (userID === getUserID()) return;\r\n      setTeamState((prev) => prev?.resetUser(userID, pageRec));\r\n    });\r\n\r\n    io.on(\"connect_error\", console.error);\r\n    io.on(\"connect\", () => setConnected(true));\r\n    io.on(\"disconnect\", () => setConnected(false));\r\n\r\n    return () => {\r\n      io.removeAllListeners();\r\n      io.close();\r\n    };\r\n  }, [io]);\r\n\r\n  const addTeamStatePage = (pageID: string, newPage: NotePage) => {\r\n    setTeamState((prev) => prev?.addPage(pageID, newPage));\r\n  };\r\n\r\n  const resetIO = () => setIO(IoFactory(noteID));\r\n\r\n  return (\r\n    <Loading loading={!loaded}>\r\n      <TeamCtx.Provider\r\n        value={{\r\n          io,\r\n          code,\r\n          teamOn: true,\r\n          ignores,\r\n          userRec,\r\n          connected,\r\n          teamState,\r\n          resetIO,\r\n          loadInfo,\r\n          loadState,\r\n          setIgnores,\r\n          addTeamStatePage,\r\n        }}\r\n      >\r\n        <Reader />\r\n      </TeamCtx.Provider>\r\n    </Loading>\r\n  );\r\n}\r\n\r\nconst showJoinMsg = (userID: string, userName: string) => {\r\n  message.destroy(userID);\r\n  message.success({\r\n    content: `${userName} joined room`,\r\n    icon: <LoginOutlined />,\r\n    key: userID,\r\n  });\r\n};\r\n\r\nconst showLeaveMsg = (userID: string, userName: string) => {\r\n  message.destroy(userID);\r\n  message.warning({\r\n    content: `${userName} leaved room`,\r\n    icon: <LogoutOutlined />,\r\n    key: userID,\r\n  });\r\n};\r\n"],"names":["defaultRecord","states","Map","editStack","List","undoStack","defaultFactory","Record","StateSet","immutable","lastOp","this","getImmutable","get","pageID","getStates","drawState","prevDS","getOneState","currRecord","update","s","set","l","push","delete","stroke","DrawState","notePage","state","ratio","newDS","getEditStack","size","getUndoStack","isUndoable","lastUid","last","lastSetOp","pop","isRedoable","ds","pageRec","map","AddPageButton","addFinalPage","useContext","ReaderMethodCtx","className","type","icon","PlusOutlined","block","onClick","scrollForage","localforage","name","largestKey","order","result","maxRatio","key","insertAfter","list","prevItem","newItem","prevIndex","indexOf","curr","slice","splice","UserAvatar","userInfo","chosen","color","useMemo","getHashedColor","userID","userName","style","backgroundColor","PreviewCard","left","useForceLight","forceLight","useActiveKey","title","ALL","MARKED","WRITTEN","draggableId","index","innerRef","draggableProps","dragHandleProps","ref","PreviewTabs","PageList","ReaderStateCtx","pageOrder","currPageID","scrollPage","saveReorder","refRec","useRef","activeKey","useAsideOpen","asideOpen","useEffect","current","scrollIntoView","onDragEnd","source","destination","fromIndex","toIndex","newOrder","removed","exchange","requestAnimationFrame","droppableId","droppableProps","placeholder","uid","PagePreview","pageIndex","stateSet","TeamCtx","teamState","ignores","useState","setChosen","page","teamStateMap","getOnePageStateMap","image","marked","isEmpty","every","isDragDisabled","dragged","isDragging","e","PageWrapper","undefined","thumbnail","preview","PreviewTools","switchPageMarked","userIDs","getPageValidUsers","filter","has","stopPropagation","PreviewOption","TeamAvatars","userRec","maxCount","classNames","maxPopoverPlacement","prev","addPage","deletePage","menu","items","label","CopyOutlined","DeleteOutlined","danger","content","trigger","placement","destroyTooltipOnHide","MoreOutlined","setActiveKey","TabPane","Tabs","onChange","tabBarGutter","centered","tab","IconFont","PageNav","setLeft","previewBody","opposite","initKey","direction","PageNavButton","setAsideOpen","MenuOutlined","HeaderLeft","saved","instantSave","nav","useNavigate","HomeFilled","opacity","disabled","SaveOutlined","HeaderMiddle","handleUndo","handleRedo","useDrawCtrl","mode","finger","updateDrawCtrl","useUpdateDrawCtrl","setForceLight","shape","UndoOutlined","RedoOutlined","message","BulbFilled","BulbOutlined","PenButton","EraserButton","SelectButton","drawCtrl","btnProps","HighlightOutlined","PenPanel","getPopupContainer","parentElement","pixelEraser","options","value","field","lasso","GatewayOutlined","HeaderRight","teamOn","RoomInfo","JoinRoom","UserCard","renaming","setRenaming","setIgnores","resetIO","online","self","getUserID","ignored","Search","autoFocus","defaultValue","onSearch","trim","saveUserName","enterButton","CheckOutlined","FormOutlined","EyeInvisibleOutlined","EyeOutlined","add","code","connected","loadInfo","loadState","noteInfo","link","window","location","href","share","selfName","copy","console","log","userList","selfID","selfInfo","otherUsers","values","Object","onlineNum","length","teamPop","DisconnectOutlined","showIcon","banner","String","plain","ShareAltOutlined","u","reloading","setReloading","loading","ReloadOutlined","status","count","TeamOutlined","noteID","createRoom","putNote","editNoteData","team","UsergroupAddOutlined","Modal","onOk","Header","React","prevPageID","Reader","useParams","setPageRec","setNoteInfo","setStateSet","setPageOrder","useSafeState","setSaved","io","addTeamStatePage","refMap","setRefMap","scrolled","setPrevPageID","inviewRatios","setInviewRatios","useDebugValue","getItem","stored","setItem","sectionRef","el","useScrollPage","loadNote","storedNote","pdf","createFromPages","document","saver","useEvent","pr","toObject","debouncedSave","useCallback","debounce","flush","savePageRec","cb","defaultNotePage","pushReorder","emit","handleReorder","onUndo","deleted","prevOrder","duration","handleNewPage","newPage","addState","on","removeAllListeners","pushNewPage","newTeamPage","updatePageRec","updateStateSet","newSS","operation","lastDS","getLastDS","syncStrokeTime","prevPage","createPage","renderResult","undo","redo","PageContainer","Dark","Provider","id","lastPageID","DrawCtrl","preload","currIndex","selfIndex","Math","abs","updateState","setState","pdfIndex","onViewChange","visible","IoFactory","BASE_URL","query","getUserName","Set","Team","setTeamState","setCode","setUserRec","setIO","loaded","setLoaded","setConnected","loadTeamNoteInfo","info","getTeamNoteState","teamNote","TeamState","updateSelfState","updatePages","roomInit","infoLoaded","stateLoaded","pushOperation","joined","members","showJoinMsg","leaved","showLeaveMsg","resetUser","error","close","Loading","LoginOutlined","LogoutOutlined"],"sourceRoot":""}