{"version":3,"file":"static/js/542.6f3c1cd1.chunk.js","mappings":"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","sources":["component/ColorCircle/ColorCircle.tsx","lib/color.ts","lib/draw/DrawState.ts","lib/draw/TeamState.ts","lib/hooks.tsx","lib/network/http.ts","lib/note/archive.ts","lib/note/note.ts","lib/user.ts"],"sourcesContent":["import classNames from \"classnames\";\r\nimport { FC } from \"react\";\r\n\r\nexport const ColorCirle: FC<{ color: string; className?: string }> = ({\r\n  color,\r\n  className,\r\n}) => {\r\n  const style = { backgroundColor: color };\r\n  return (\r\n    <div className={classNames(\"color-circle\", className)} style={style} />\r\n  );\r\n};\r\n","import { CSSProperties } from \"react\";\r\nimport hash from \"string-hash\";\r\nexport const colors = [\r\n  \"#f97316\",\r\n  \"#eab308\",\r\n  \"#84cc16\",\r\n  \"#22c55e\",\r\n  \"#10b981\",\r\n  \"#14b8a6\",\r\n  \"#06b6d4\",\r\n  \"#0ea5e9\",\r\n  \"#3b82f6\",\r\n  \"#6366f1\",\r\n  \"#8b5cf6\",\r\n  \"#a855f7\",\r\n  \"#d946ef\",\r\n  \"#ec4899\",\r\n  \"#f43f5e\",\r\n  \"#ef4444\",\r\n];\r\n\r\nexport const grayColors = [\"#000000\", \"#9ca3af\", \"#64748b\", \"#78716c\"];\r\nexport const allColors = [...grayColors, ...colors];\r\n\r\nexport const getRandomColor = () => {\r\n  const index = Math.floor(Math.random() * colors.length);\r\n  return colors[index]!;\r\n};\r\n\r\nexport const getHashedColor = (str: string) => {\r\n  const index = hash(str) % colors.length;\r\n  return colors[index];\r\n};\r\n\r\nconst colorPalette: Record<string, { light: string; dark: string }> = {\r\n  \"#f97316\": { light: \"#FFEDD5\", dark: \"#9A3412\" },\r\n  \"#eab308\": { light: \"#FEF9C3\", dark: \"#854D0E\" },\r\n  \"#84cc16\": { light: \"#ECFCCB\", dark: \"#3F6212\" },\r\n  \"#22c55e\": { light: \"#DCFCE7\", dark: \"#166534\" },\r\n  \"#10b981\": { light: \"#D1FAE5\", dark: \"#065F46\" },\r\n  \"#14b8a6\": { light: \"#CCFBF1\", dark: \"#115E59\" },\r\n  \"#06b6d4\": { light: \"#CFFAFE\", dark: \"#155E75\" },\r\n  \"#0ea5e9\": { light: \"#E0F2FE\", dark: \"#075985\" },\r\n  \"#3b82f6\": { light: \"#DBEAFE\", dark: \"#1E40AF\" },\r\n  \"#6366f1\": { light: \"#E0E7FF\", dark: \"#3730A3\" },\r\n  \"#8b5cf6\": { light: \"#EDE9FE\", dark: \"#5B21B6\" },\r\n  \"#a855f7\": { light: \"#F3E8FF\", dark: \"#6B21A8\" },\r\n  \"#d946ef\": { light: \"#FAE8FF\", dark: \"#86198F\" },\r\n  \"#ec4899\": { light: \"#FCE7F3\", dark: \"#9D174D\" },\r\n  \"#f43f5e\": { light: \"#FFE4E6\", dark: \"#9F1239\" },\r\n  \"#ef4444\": { light: \"#FEE2E2\", dark: \"#991B1B\" },\r\n};\r\n\r\nexport const getColorPalette = (color: string) => {\r\n  const palette = colorPalette[color] ?? { light: \"#E5E7EB\", dark: \"#374151\" };\r\n  return {\r\n    \"--light-color\": palette.light,\r\n    \"--dark-color\": palette.dark,\r\n  } as CSSProperties;\r\n};\r\n","import { List, Record, OrderedMap, Map } from \"immutable\";\r\nimport { NIL, v4, v5, validate } from \"uuid\";\r\nimport Heap from \"heap\";\r\n\r\nexport const WIDTH = 2000;\r\n\r\nexport interface Stroke {\r\n  uid: string;\r\n  pathData: string;\r\n  timestamp: number;\r\n}\r\n\r\nexport type StrokeRecord = globalThis.Record<string, Stroke>;\r\nexport type Mutation = [string, string];\r\nexport type Splitter = [string, string[]];\r\n\r\nexport type Operation =\r\n  | {\r\n      type: \"add\";\r\n      stroke: Stroke;\r\n    }\r\n  | {\r\n      type: \"erase\";\r\n      erased: string[];\r\n    }\r\n  | {\r\n      type: \"mutate\";\r\n      mutations: Mutation[];\r\n    }\r\n  | {\r\n      type: \"split\";\r\n      splitters: Splitter[];\r\n    }\r\n  | {\r\n      type: \"undo\";\r\n    }\r\n  | {\r\n      type: \"redo\";\r\n    };\r\n\r\ninterface DrawStateRecordType {\r\n  strokes: OrderedMap<string, Stroke>;\r\n  undoStack: List<DrawStateRecord>;\r\n  historyStack: List<DrawStateRecord>;\r\n}\r\n\r\ntype DrawStateRecord = Record<DrawStateRecordType>;\r\n\r\nconst defaultRecord: Readonly<DrawStateRecordType> = {\r\n  strokes: OrderedMap(),\r\n  undoStack: List(),\r\n  historyStack: List(),\r\n};\r\n\r\nconst defaultFactory = Record(defaultRecord);\r\n\r\nexport interface FlatState {\r\n  strokes: StrokeRecord;\r\n  operations?: Operation[];\r\n}\r\n\r\nexport const getDefaultFlatState = (): FlatState => {\r\n  return { strokes: {} };\r\n};\r\n\r\nexport class DrawState {\r\n  constructor(\r\n    private immutable: DrawStateRecord,\r\n    public readonly width: number,\r\n    public readonly height: number,\r\n    public lastOp?: Operation\r\n  ) {}\r\n\r\n  getImmutable() {\r\n    return this.immutable;\r\n  }\r\n\r\n  getUndoStack() {\r\n    return this.getImmutable().get(\"undoStack\");\r\n  }\r\n\r\n  getHistoryStack() {\r\n    return this.getImmutable().get(\"historyStack\");\r\n  }\r\n\r\n  getStrokeMap() {\r\n    return this.getImmutable().get(\"strokes\");\r\n  }\r\n\r\n  getStrokeList(): Stroke[] {\r\n    return this.getStrokeMap()\r\n      .toArray()\r\n      .map(([_, stroke]) => stroke);\r\n  }\r\n\r\n  getLastStroke() {\r\n    return this.getStrokeMap().last();\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.getStrokeMap().size === 0;\r\n  }\r\n\r\n  hasStroke(uid: string) {\r\n    return this.getStrokeMap().has(uid);\r\n  }\r\n\r\n  static createEmpty(ratio: number, width = WIDTH) {\r\n    return new DrawState(defaultFactory(), width, width * ratio);\r\n  }\r\n\r\n  static undo(drawState: DrawState) {\r\n    const lastOp: Operation = { type: \"undo\" };\r\n    const lastRecord = drawState.getHistoryStack().last();\r\n    if (!lastRecord) return drawState;\r\n    const undoStack = drawState\r\n      .getUndoStack()\r\n      .unshift(drawState.getImmutable());\r\n    return new DrawState(\r\n      lastRecord.set(\"undoStack\", undoStack),\r\n      drawState.width,\r\n      drawState.height,\r\n      lastOp\r\n    );\r\n  }\r\n\r\n  static redo(drawState: DrawState) {\r\n    const lastOp: Operation = { type: \"redo\" };\r\n\r\n    const nextRecord = drawState.getUndoStack().first();\r\n    if (!nextRecord) return drawState;\r\n    return new DrawState(nextRecord, drawState.width, drawState.height, lastOp);\r\n  }\r\n\r\n  static addStroke(drawState: DrawState, pathData: string) {\r\n    const uid = v4();\r\n    const timestamp = Date.now();\r\n    const stroke = { pathData, uid, timestamp };\r\n    return DrawState.pushStroke(drawState, stroke);\r\n  }\r\n\r\n  static addStrokes(\r\n    drawState: DrawState,\r\n    pathDataList: string[],\r\n    IDs?: string[]\r\n  ) {\r\n    return DrawState.mutateStrokes(\r\n      drawState,\r\n      pathDataList.map((pathData) => {\r\n        const uid = v4();\r\n        IDs?.push(uid);\r\n        return [uid, pathData];\r\n      })\r\n    );\r\n  }\r\n\r\n  static pushStroke(drawState: DrawState, stroke: Stroke) {\r\n    const { uid } = stroke;\r\n    const prevRecord = drawState.getImmutable();\r\n    const currRecord = prevRecord\r\n      .update(\"strokes\", (s) => s.set(uid, stroke))\r\n      .update(\"historyStack\", (s) => s.push(prevRecord))\r\n      .delete(\"undoStack\");\r\n\r\n    const lastOp: Operation = { type: \"add\", stroke };\r\n\r\n    return new DrawState(currRecord, drawState.width, drawState.height, lastOp);\r\n  }\r\n\r\n  static eraseStrokes(drawState: DrawState, erased: string[]) {\r\n    if (erased.length === 0) return drawState;\r\n    const prevRecord = drawState.getImmutable();\r\n    const currRecord = prevRecord\r\n      .update(\"strokes\", (m) => m.deleteAll(erased))\r\n      .update(\"historyStack\", (s) => s.push(prevRecord))\r\n      .delete(\"undoStack\");\r\n\r\n    const lastOp: Operation = { type: \"erase\", erased };\r\n\r\n    return new DrawState(currRecord, drawState.width, drawState.height, lastOp);\r\n  }\r\n\r\n  static mutateStrokes(drawState: DrawState, mutations: Mutation[]) {\r\n    if (mutations.length === 0) return drawState;\r\n    const prevRecord = drawState.getImmutable();\r\n    let strokes = drawState.getStrokeMap();\r\n    mutations.forEach(\r\n      ([uid, pathData]) =>\r\n        (strokes = strokes.update(\r\n          uid,\r\n          { uid, pathData, timestamp: Date.now() },\r\n          (s) => ({ ...s, pathData })\r\n        ))\r\n    );\r\n    const currRecord = prevRecord\r\n      .set(\"strokes\", strokes)\r\n      .update(\"historyStack\", (s) => s.push(prevRecord))\r\n      .delete(\"undoStack\");\r\n\r\n    const lastOp: Operation = { type: \"mutate\", mutations };\r\n\r\n    return new DrawState(currRecord, drawState.width, drawState.height, lastOp);\r\n  }\r\n\r\n  static splitStrokes(drawState: DrawState, splitters: Splitter[]) {\r\n    if (splitters.length === 0) return drawState;\r\n    const splitMap = Map(splitters);\r\n    let strokes = OrderedMap<string, Stroke>();\r\n    const prevStrokes = drawState.getStrokeMap();\r\n    prevStrokes.forEach((stroke, prevUid) => {\r\n      const splitStrokes = splitMap.get(prevUid);\r\n      if (splitStrokes) {\r\n        strokes = strokes.merge(\r\n          splitStrokes.map((pathData, index) => {\r\n            // update legacy uid solution.\r\n            if (!validate(prevUid)) prevUid = v5(prevUid, NIL);\r\n\r\n            const uid = v5(String(index), prevUid);\r\n            const { timestamp } = stroke;\r\n            return [uid, { pathData, timestamp, uid }];\r\n          })\r\n        );\r\n      } else {\r\n        strokes = strokes.set(prevUid, stroke);\r\n      }\r\n    });\r\n    const prevRecord = drawState.getImmutable();\r\n    const currRecord = prevRecord\r\n      .set(\"strokes\", strokes)\r\n      .update(\"historyStack\", (s) => s.push(prevRecord));\r\n    const lastOp: Operation = { type: \"split\", splitters };\r\n    return new DrawState(currRecord, drawState.width, drawState.height, lastOp);\r\n  }\r\n\r\n  // sync with mutation.\r\n  static syncStrokeTime(drawState: DrawState, uid: string, timestamp: number) {\r\n    const prevStroke = drawState.getStrokeMap().get(uid);\r\n    if (!prevStroke) return;\r\n    prevStroke.timestamp = timestamp;\r\n  }\r\n\r\n  static pushOperation(drawState: DrawState, op: Operation) {\r\n    switch (op.type) {\r\n      case \"add\":\r\n        return DrawState.pushStroke(drawState, op.stroke);\r\n      case \"erase\":\r\n        return DrawState.eraseStrokes(drawState, op.erased);\r\n      case \"mutate\":\r\n        return DrawState.mutateStrokes(drawState, op.mutations);\r\n      case \"undo\":\r\n        return DrawState.undo(drawState);\r\n      case \"redo\":\r\n        return DrawState.redo(drawState);\r\n      case \"split\":\r\n        return DrawState.splitStrokes(drawState, op.splitters);\r\n    }\r\n  }\r\n\r\n  static flaten(drawState: DrawState): FlatState {\r\n    const strokes = drawState.getImmutable().get(\"strokes\").toObject();\r\n    return { strokes };\r\n  }\r\n\r\n  static loadFromFlat(\r\n    flatState: FlatState,\r\n    ratio: number,\r\n    width = WIDTH\r\n  ): DrawState {\r\n    const { strokes, operations } = flatState;\r\n    let ds = new DrawState(\r\n      defaultFactory().set(\"strokes\", OrderedMap(strokes)),\r\n      width,\r\n      width * ratio\r\n    );\r\n    operations?.forEach((op) => (ds = DrawState.pushOperation(ds, op)));\r\n    return ds;\r\n  }\r\n\r\n  static mergeStates(...states: DrawState[]): Stroke[] {\r\n    const iterators = states.map((ds) => ds.getStrokeMap().values());\r\n    const mergedStrokes = [];\r\n    const heap = new Heap<[Stroke, number]>(\r\n      ([s0], [s1]) => s0.timestamp - s1.timestamp\r\n    );\r\n\r\n    iterators.forEach((iter, index) => {\r\n      const { value, done } = iter.next();\r\n      done || heap.push([value, index]);\r\n    });\r\n\r\n    while (heap.size() > 0) {\r\n      const record = heap.pop();\r\n      if (!record) break;\r\n      const [stroke, index] = record;\r\n      mergedStrokes.push(stroke);\r\n\r\n      const iterator = iterators[index];\r\n      if (!iterator) break;\r\n      const { value, done } = iterator.next();\r\n      done || heap.push([value, index]);\r\n    }\r\n    return mergedStrokes;\r\n  }\r\n}\r\n","import { NotePage, TeamPageInfo, TeamPageRec } from \"lib/note/note\";\r\nimport { DrawState } from \"./DrawState\";\r\nimport { SetOperation } from \"./StateSet\";\r\nimport { Map, Record, Set } from \"immutable\";\r\n\r\ninterface TeamStateRecordType {\r\n  pageStates: Map<string, Map<string, DrawState>>;\r\n  pageInfos: Map<string, TeamPageInfo>;\r\n}\r\n\r\nconst defaultRecord: Readonly<TeamStateRecordType> = {\r\n  pageStates: Map(),\r\n  pageInfos: Map(),\r\n};\r\n\r\ntype TeamStateRecord = Record<TeamStateRecordType>;\r\nconst defaultFactory = Record(defaultRecord);\r\n\r\nexport class TeamState {\r\n  constructor(private immutable: TeamStateRecord) {}\r\n\r\n  getImmutable() {\r\n    return this.immutable;\r\n  }\r\n\r\n  getPageStates() {\r\n    return this.getImmutable().get(\"pageStates\");\r\n  }\r\n\r\n  getPageInfos() {\r\n    return this.getImmutable().get(\"pageInfos\");\r\n  }\r\n\r\n  getOneState(pageID: string, userID: string) {\r\n    return this.getPageStates().get(pageID)?.get(userID);\r\n  }\r\n\r\n  getOnePageStateMap(pageID: string) {\r\n    return this.getPageStates().get(pageID);\r\n  }\r\n\r\n  getPageRatio(pageID: string) {\r\n    return this.getPageInfos().get(pageID)?.ratio;\r\n  }\r\n\r\n  includesPage(pageID: string) {\r\n    return this.getPageStates().has(pageID);\r\n  }\r\n\r\n  setState(pageID: string, userID: string, drawState: DrawState) {\r\n    const pageMap = this.getPageStates().get(pageID);\r\n    if (!pageMap) return this;\r\n    return new TeamState(\r\n      this.getImmutable().update(\"pageStates\", (m) =>\r\n        m.set(pageID, pageMap.set(userID, drawState))\r\n      )\r\n    );\r\n  }\r\n\r\n  static createFromTeamPages(teamPages: TeamPageRec) {\r\n    let record = defaultFactory();\r\n    Object.entries(teamPages).forEach(([pageID, teamPage]) => {\r\n      const { states, ratio } = teamPage;\r\n      const pageMap = Map(\r\n        Object.entries(states).map(([userID, flatState]) => [\r\n          userID,\r\n          DrawState.loadFromFlat(flatState, ratio),\r\n        ])\r\n      );\r\n      record = record\r\n        .update(\"pageStates\", (m) => m.set(pageID, pageMap))\r\n        .update(\"pageInfos\", (m) => m.set(pageID, { ratio }));\r\n    });\r\n    return new TeamState(record);\r\n  }\r\n\r\n  addPage(pageID: string, notePage: NotePage) {\r\n    const { ratio } = notePage;\r\n    return new TeamState(\r\n      this.getImmutable()\r\n        .update(\"pageStates\", (m) => m.set(pageID, Map()))\r\n        .update(\"pageInfos\", (m) => m.set(pageID, { ratio }))\r\n    );\r\n  }\r\n\r\n  pushOperation(setOp: SetOperation, userID: string) {\r\n    const { pageID, ...op } = setOp;\r\n    const ratio = this.getPageRatio(pageID);\r\n    if (!this.includesPage(pageID) || !ratio) return this;\r\n    const prevDs =\r\n      this.getOneState(pageID, userID) || DrawState.createEmpty(ratio);\r\n\r\n    const ds = DrawState.pushOperation(prevDs, op);\r\n    return this.setState(pageID, userID, ds);\r\n  }\r\n\r\n  resetUser(userID: string, pageRec: globalThis.Record<string, NotePage>) {\r\n    let newTS: TeamState = this;\r\n    for (let [pageID, { state, ratio }] of Object.entries(pageRec)) {\r\n      const prevDS = newTS.getOneState(pageID, userID);\r\n      if (!prevDS) continue;\r\n      newTS = newTS.setState(\r\n        pageID,\r\n        userID,\r\n        DrawState.loadFromFlat(state, ratio)\r\n      );\r\n    }\r\n    return newTS;\r\n  }\r\n\r\n  static getValidUsers(\r\n    teamStateMap?: Map<string, DrawState>,\r\n    ignores = Set<string>()\r\n  ) {\r\n    if (!teamStateMap) return [];\r\n    return Array.from(\r\n      teamStateMap\r\n        .filter((ds) => !ds.isEmpty())\r\n        .deleteAll(ignores)\r\n        .keys()\r\n    );\r\n  }\r\n  static isEmpty(teamStateMap?: Map<string, DrawState>) {\r\n    return !teamStateMap || teamStateMap.every((ds) => ds.isEmpty());\r\n  }\r\n}\r\n","import React, {\r\n  createContext,\r\n  Dispatch,\r\n  FC,\r\n  PropsWithChildren,\r\n  SetStateAction,\r\n  TransitionEventHandler,\r\n  useContext,\r\n  useDebugValue,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\n\r\nexport type Setter<T> = Dispatch<SetStateAction<T>>;\r\n\r\nexport function useTransitionEnd({\r\n  propertyName,\r\n  active = true,\r\n}: {\r\n  propertyName: string;\r\n  active?: boolean;\r\n}): [Promise<void>, TransitionEventHandler] {\r\n  const resRef = useRef(() => {});\r\n  const [promise] = useState(\r\n    () => new Promise<void>((res) => (resRef.current = res))\r\n  );\r\n  return [\r\n    promise,\r\n    (e) => {\r\n      if (e.propertyName === propertyName && active) resRef.current();\r\n    },\r\n  ];\r\n}\r\n\r\nconst ActiveKeyCtx = createContext<[string, Setter<string>]>([\"\", () => {}]);\r\nexport function useActiveKey() {\r\n  const tuple = useContext(ActiveKeyCtx);\r\n  useDebugValue(tuple[0]);\r\n  return tuple;\r\n}\r\n\r\nexport const ActiveKeyProvider: FC<PropsWithChildren<{ initKey: string }>> = ({\r\n  children,\r\n  initKey,\r\n}) => {\r\n  const tuple = useState(initKey);\r\n  return (\r\n    <ActiveKeyCtx.Provider value={tuple}>{children}</ActiveKeyCtx.Provider>\r\n  );\r\n};\r\n\r\nconst AsideOpenCtx = createContext<[boolean, Setter<boolean>]>([\r\n  false,\r\n  () => {},\r\n]);\r\nexport function useAsideOpen() {\r\n  const tuple = useContext(AsideOpenCtx);\r\n  useDebugValue(tuple[0]);\r\n  return tuple;\r\n}\r\n\r\nexport const AsideOpenProvider: FC<PropsWithChildren> = ({ children }) => {\r\n  const tuple = useState(false);\r\n  return (\r\n    <AsideOpenCtx.Provider value={tuple}>{children}</AsideOpenCtx.Provider>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\nimport {\r\n  removePageTimg,\r\n  TeamNoteInfo,\r\n  TeamPageInfo,\r\n  TeamPageRec,\r\n} from \"lib/note/note\";\r\nimport { loadNote, saveTeamNote, updateTeamNote } from \"lib/note/archive\";\r\nimport { getUserID } from \"lib/user\";\r\nimport localforage from \"localforage\";\r\nimport md5 from \"md5\";\r\n\r\nexport const BASE_URL = process.env.REACT_APP_PUBLIC_SERVER_URL ?? \"\";\r\n// export const BASE_URL = process.env.REACT_APP_LOCAL_SERVER_URL ?? \"\";\r\naxios.defaults.baseURL = BASE_URL;\r\n\r\nexport async function getNoteID(roomCode: string) {\r\n  try {\r\n    const { data } = await axios.get(`code/${roomCode}`);\r\n    if (data.statusCode !== 200) return null;\r\n    return data.noteID as string;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return null;\r\n  }\r\n}\r\n\r\ninterface InfoRes {\r\n  statusCode: number;\r\n  code: number;\r\n  noteInfo: TeamNoteInfo;\r\n  pageInfos: Record<string, TeamPageInfo>;\r\n}\r\n\r\nexport async function getTeamNoteInfo(noteID: string) {\r\n  try {\r\n    const { data } = await axios.get(`info/${noteID}`);\r\n    const { statusCode, ...res } = data as InfoRes;\r\n    if (statusCode !== 200) return null;\r\n    return res;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function loadTeamNoteInfo(\r\n  noteID: string,\r\n  cb?: (len: number) => void\r\n) {\r\n  try {\r\n    const infoRes = await getTeamNoteInfo(noteID);\r\n    if (!infoRes) return null;\r\n    const { noteInfo, pageInfos } = infoRes;\r\n\r\n    if (await updateTeamNote(noteID, noteInfo, pageInfos)) return infoRes;\r\n\r\n    if (noteInfo.withImg) {\r\n      const { data } = await axios({\r\n        method: \"GET\",\r\n        url: noteID,\r\n        responseType: \"blob\",\r\n        onDownloadProgress({ loaded }: ProgressEvent) {\r\n          cb?.(loaded);\r\n        },\r\n      });\r\n      const file = new Blob([data], { type: \"application/pdf\" });\r\n      await saveTeamNote(noteID, noteInfo, pageInfos, file);\r\n    } else {\r\n      await saveTeamNote(noteID, noteInfo, pageInfos);\r\n    }\r\n    return infoRes;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function putNote(noteID: string) {\r\n  const note = await loadNote(noteID);\r\n  if (!note) return false;\r\n  const { uid, name, withImg, pdf, pageOrder, pageRec } = note;\r\n  removePageTimg(pageRec);\r\n\r\n  try {\r\n    const { data } = await axios.put(`create/${noteID}`, {\r\n      userID: getUserID(),\r\n      pageRec,\r\n      noteInfo: { uid, name, withImg, pageOrder },\r\n    });\r\n\r\n    if (pdf) {\r\n      const formData = new FormData();\r\n      const ab = await pdf.arrayBuffer();\r\n      const file = new Blob([ab]);\r\n      formData.append(\"file\", file, noteID);\r\n      await axios({\r\n        method: \"POST\",\r\n        url: \"upload\",\r\n        data: formData,\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      });\r\n    }\r\n\r\n    if (data.statusCode !== 201) return false;\r\n    return true;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return false;\r\n  }\r\n}\r\n\r\nconst hashForage = localforage.createInstance({ name: \"updateHash\" });\r\nexport async function updatePages(noteID: string) {\r\n  const note = await loadNote(noteID);\r\n  if (!note) return null;\r\n  const { uid, name, withImg, pageOrder, pageRec } = note;\r\n  removePageTimg(pageRec);\r\n  const noteInfo = { uid, name, withImg, pageOrder };\r\n\r\n  const hash = md5(JSON.stringify([pageRec, noteInfo]));\r\n  const lastHash = await hashForage.getItem<string>(noteID);\r\n  if (hash === lastHash) return true;\r\n\r\n  try {\r\n    const body = { userID: getUserID(), pageRec, noteInfo };\r\n    const { data } = await axios.put(`update/${noteID}`, body);\r\n    if (data.statusCode !== 201) return false;\r\n    await hashForage.setItem(noteID, hash);\r\n    return true;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return false;\r\n  }\r\n}\r\n\r\nconst teamForage = localforage.createInstance({ name: \"teamState\" });\r\nexport async function getTeamNoteState(\r\n  noteID: string,\r\n  cb?: (len: number) => void\r\n) {\r\n  const cachedState = await loadCachedTeamState(noteID);\r\n  const hash = cachedState && md5(JSON.stringify(cachedState));\r\n\r\n  try {\r\n    const { data } = await axios.get(`state/${noteID}`, {\r\n      params: { userID: getUserID(), hash },\r\n      onDownloadProgress({ loaded }: ProgressEvent) {\r\n        cb?.(loaded);\r\n      },\r\n    });\r\n    const { statusCode, modified, teamPages } = data;\r\n    if (statusCode === 200 && modified) {\r\n      await teamForage.setItem(noteID, teamPages);\r\n      return teamPages as TeamPageRec;\r\n    }\r\n    return cachedState;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return cachedState;\r\n  }\r\n}\r\n\r\nexport async function loadCachedTeamState(noteID: string) {\r\n  return (await teamForage.getItem<TeamPageRec>(noteID)) ?? undefined;\r\n}\r\n","import { Note, NoteInfo, NotePage, TeamNoteInfo, TeamPageInfo } from \"./note\";\r\nimport { getDefaultFlatState } from \"lib/draw/DrawState\";\r\nimport localforage from \"localforage\";\r\nimport { v4 as getUid } from \"uuid\";\r\nimport { pickBy } from \"lodash\";\r\n\r\nexport interface NoteTag {\r\n  uid: string;\r\n  name: string;\r\n  color: string;\r\n  notes: string[];\r\n}\r\n\r\nexport async function getAllNotes() {\r\n  const allNotes = await localforage.getItem<Record<string, NoteInfo>>(\r\n    \"ALL_NOTES\"\r\n  );\r\n  if (allNotes) return allNotes;\r\n  localforage.setItem(\"ALL_NOTES\", {});\r\n  return {};\r\n}\r\n\r\nexport async function getAllTags() {\r\n  const tags = await localforage.getItem<Record<string, NoteTag>>(\"ALL_TAGS\");\r\n  if (tags) return tags;\r\n  localforage.setItem(\"ALL_TAGS\", {});\r\n  return {};\r\n}\r\n\r\nexport async function addNewTag(name: string, color: string) {\r\n  const uid = getUid();\r\n  const newTag: NoteTag = {\r\n    uid,\r\n    name,\r\n    color,\r\n    notes: [],\r\n  };\r\n  const prevTags = await getAllTags();\r\n  const tags = { ...prevTags, [uid]: newTag };\r\n  await localforage.setItem(\"ALL_TAGS\", tags);\r\n\r\n  return tags;\r\n}\r\n\r\nexport async function deleteTag(uid: string) {\r\n  const prevTags = await getAllTags();\r\n  const { [uid]: _, ...tags } = prevTags;\r\n  await localforage.setItem(\"ALL_TAGS\", tags);\r\n\r\n  return tags;\r\n}\r\n\r\nexport async function editTag(tag: NoteTag) {\r\n  const prevTags = await getAllTags();\r\n  const tags = { ...prevTags, [tag.uid]: tag };\r\n  await localforage.setItem(\"ALL_TAGS\", tags);\r\n  return tags;\r\n}\r\n\r\nexport async function loadNote(uid: string) {\r\n  const note = await localforage.getItem<Note>(uid);\r\n  if (!note) return;\r\n  const pdf = await localforage.getItem<Blob>(`PDF_${uid}`);\r\n  if (pdf) return { ...note, pdf };\r\n  else return note;\r\n}\r\n\r\nexport async function editNoteData(uid: string, noteData: Partial<Note>) {\r\n  noteData = pickBy(noteData, (v) => v !== undefined);\r\n  if (\"pageRec\" in noteData) noteData.lastTime = Date.now();\r\n\r\n  const allNotes = await getAllNotes();\r\n  const { pageRec, pageOrder, ...noteInfo } = noteData;\r\n  const prevNoteInfo = allNotes[uid];\r\n  if (!prevNoteInfo) return;\r\n  allNotes[uid] = { ...prevNoteInfo, ...noteInfo };\r\n\r\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\r\n  const prevNote = await loadNote(uid);\r\n  if (!prevNote) return;\r\n  await localforage.setItem(uid, { ...prevNote, ...noteData });\r\n}\r\n\r\nexport async function saveNoteInfo(noteInfo: NoteInfo) {\r\n  const { uid, tagID } = noteInfo;\r\n  const allNotes = await getAllNotes();\r\n  allNotes[uid] = noteInfo;\r\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\r\n  const tags = await getAllTags();\r\n  const tag = tags[tagID];\r\n  if (tag) {\r\n    tag.notes.push(noteInfo.uid);\r\n    await localforage.setItem(\"ALL_TAGS\", tags);\r\n  }\r\n  return { tags, allNotes };\r\n}\r\n\r\nexport async function createNewNote(noteWithPdf: Note) {\r\n  const { pdf, ...note } = noteWithPdf;\r\n  await localforage.setItem(note.uid, note);\r\n  if (pdf) await localforage.setItem(`PDF_${note.uid}`, pdf);\r\n  const { pageRec, pageOrder, ...noteInfo } = note;\r\n  return await saveNoteInfo(noteInfo);\r\n}\r\n\r\nexport async function deleteNote(uid: string) {\r\n  const note = await loadNote(uid);\r\n  const allNotes = await getAllNotes();\r\n  const tags = await getAllTags();\r\n  if (!note) return { tags, allNotes };\r\n  await localforage.removeItem(uid);\r\n  await localforage.removeItem(`PDF_${uid}`);\r\n  delete allNotes[uid];\r\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\r\n\r\n  const { tagID } = note;\r\n  const prevTag = tags[tagID];\r\n  if (prevTag) {\r\n    prevTag.notes = prevTag.notes.filter((id) => id !== uid);\r\n    await localforage.setItem(\"ALL_TAGS\", tags);\r\n  }\r\n  return { tags, allNotes };\r\n}\r\n\r\nexport async function moveNoteTag(noteID: string, tagID: string) {\r\n  const note = await loadNote(noteID);\r\n  const allNotes = await getAllNotes();\r\n  const tags = await getAllTags();\r\n  const noteInfo = allNotes[noteID];\r\n  if (!note || !noteInfo) return { tags, allNotes };\r\n\r\n  const { tagID: prevTagId } = note;\r\n  note.tagID = tagID;\r\n  await localforage.setItem(noteID, note);\r\n  noteInfo.tagID = tagID;\r\n  await localforage.setItem(\"ALL_NOTES\", allNotes);\r\n\r\n  const prevTag = tags[prevTagId];\r\n  if (prevTag) {\r\n    prevTag.notes = prevTag.notes.filter((id) => id !== noteID);\r\n  }\r\n  tags[tagID]?.notes.push(noteID);\r\n  await localforage.setItem(\"ALL_TAGS\", tags);\r\n  return { tags, allNotes };\r\n}\r\n\r\nexport async function saveTeamNote(\r\n  noteID: string,\r\n  noteInfo: TeamNoteInfo,\r\n  teamPages: Record<string, TeamPageInfo>,\r\n  file?: Blob\r\n) {\r\n  let note = await loadNote(noteID);\r\n  if (note) return;\r\n  const time = Date.now();\r\n  const pageRec: Record<string, NotePage> = {};\r\n  note = {\r\n    ...noteInfo,\r\n    tagID: \"DEFAULT\",\r\n    team: true,\r\n    pageRec,\r\n    pdf: file,\r\n    createTime: time,\r\n    lastTime: time,\r\n  };\r\n\r\n  // set empty state for each page\r\n  Object.entries(teamPages).forEach(([pageID, page]) => {\r\n    pageRec[pageID] = { ...page, state: getDefaultFlatState() };\r\n  });\r\n\r\n  // parse timg for each page\r\n  if (file) {\r\n    const { getPDFImages } = await import(\"./pdfImage\");\r\n    const { images } = await getPDFImages(file, 0.5);\r\n    Object.values(pageRec).forEach((page) => {\r\n      const { pdfIndex } = page;\r\n      if (!pdfIndex) return;\r\n      page.image = images[pdfIndex - 1];\r\n    });\r\n  }\r\n\r\n  await createNewNote(note);\r\n}\r\n\r\nexport async function updateTeamNote(\r\n  noteID: string,\r\n  noteInfo: TeamNoteInfo,\r\n  pageInfos: Record<string, TeamPageInfo>\r\n) {\r\n  let note = await loadNote(noteID);\r\n  if (!note) return false;\r\n  const { pageOrder } = noteInfo;\r\n  const { pageRec, pdf } = note;\r\n  const { getOneImage } = await import(\"./pdfImage\");\r\n\r\n  // parse timgs & set empty states for new pages.\r\n  for (let [pageID, teamPage] of Object.entries(pageInfos)) {\r\n    if (pageID in pageRec) continue;\r\n    const { pdfIndex } = teamPage;\r\n    const state = getDefaultFlatState();\r\n    const notePage: NotePage = { ...teamPage, state };\r\n    pageRec[pageID] = notePage;\r\n    if (pdf && pdfIndex) {\r\n      notePage.image = await getOneImage(pdf, pdfIndex, 0.5);\r\n    }\r\n  }\r\n  await editNoteData(noteID, { pageOrder, pageRec });\r\n  return true;\r\n}\r\n","import { getDefaultFlatState, FlatState } from \"lib/draw/DrawState\";\r\nimport { v4 as getUid } from \"uuid\";\r\nimport dayjs from \"dayjs\";\r\n\r\nexport interface NotePage {\r\n  ratio: number;\r\n  state: FlatState;\r\n  image?: string;\r\n  marked?: boolean;\r\n  pdfIndex?: number;\r\n}\r\n\r\nexport const defaultNotePage: Readonly<NotePage> = {\r\n  ratio: 1.5,\r\n  state: { strokes: {} },\r\n};\r\n\r\nexport interface TeamPageState {\r\n  states: Record<string, FlatState>;\r\n}\r\n\r\nexport interface TeamPageInfo {\r\n  ratio: number;\r\n  pdfIndex?: number;\r\n}\r\n\r\nexport type TeamPage = TeamPageInfo & TeamPageState;\r\nexport type TeamPageRec = Record<string, TeamPage>;\r\nexport interface TeamNote {\r\n  uid: string;\r\n  pageRec: TeamPageRec;\r\n}\r\n\r\nexport interface NoteInfo {\r\n  uid: string;\r\n  name: string;\r\n  tagID: string;\r\n  team: boolean;\r\n  withImg: boolean;\r\n  createTime: number;\r\n  lastTime: number;\r\n}\r\n\r\nexport type Note = NoteInfo & {\r\n  pdf?: Blob;\r\n  pageRec: Record<string, NotePage>;\r\n  pageOrder: string[];\r\n};\r\n\r\nexport interface TeamNoteInfo {\r\n  uid: string;\r\n  name: string;\r\n  pageOrder: string[];\r\n  withImg: boolean;\r\n}\r\n\r\nexport function createEmptyNote(): Note {\r\n  const pageID = getUid();\r\n  const time = Date.now();\r\n  return {\r\n    uid: getUid(),\r\n    name: `Note ${dayjs(time).format(\"HH:mm, ddd MMM D\")}`,\r\n    tagID: \"DEFAULT\",\r\n    team: false,\r\n    withImg: false,\r\n    createTime: time,\r\n    lastTime: time,\r\n    pageRec: {\r\n      [pageID]: {\r\n        ratio: 1.5,\r\n        state: getDefaultFlatState(),\r\n      },\r\n    },\r\n    pageOrder: [pageID],\r\n  };\r\n}\r\n\r\nexport function createPage(page?: NotePage): [string, NotePage] {\r\n  const pageID = getUid();\r\n  const newPage = page ?? {\r\n    ratio: 1.5,\r\n    state: getDefaultFlatState(),\r\n  };\r\n  return [pageID, newPage];\r\n}\r\n\r\nexport function removePageTimg(pageRec: Record<string, NotePage>) {\r\n  Object.values(pageRec).forEach((page) => {\r\n    delete page.image;\r\n    delete page.marked;\r\n  });\r\n}\r\n","import { v4 as getUid } from \"uuid\";\r\n\r\nexport interface UserInfo {\r\n  userID: string;\r\n  userName: string;\r\n  online: boolean;\r\n}\r\n\r\nexport const getUserID = (() => {\r\n  let cached: string;\r\n  return () => {\r\n    if (cached) return cached;\r\n    let userID = localStorage.getItem(\"USER_ID\");\r\n    if (!userID) {\r\n      userID = getUid();\r\n      localStorage.setItem(\"USER_ID\", userID);\r\n    }\r\n    cached = userID;\r\n    return userID;\r\n  };\r\n})();\r\n\r\nexport const getUserName = () => {\r\n  let name = localStorage.getItem(\"USER_NAME\");\r\n  if (!name) {\r\n    name = getUid().slice(0, 8);\r\n    localStorage.setItem(\"USER_NAME\", name);\r\n  }\r\n  return name;\r\n};\r\n\r\nexport const saveUserName = (name: string) => {\r\n  name = name.trim();\r\n  if (!name) return false;\r\n  else localStorage.setItem(\"USER_NAME\", name);\r\n  return true;\r\n};\r\n"],"names":["ColorCirle","color","className","style","backgroundColor","classNames","colors","allColors","getRandomColor","index","Math","floor","random","length","getHashedColor","str","hash","colorPalette","light","dark","getColorPalette","palette","WIDTH","defaultRecord","strokes","OrderedMap","undoStack","List","historyStack","defaultFactory","Record","getDefaultFlatState","DrawState","immutable","width","height","lastOp","this","getImmutable","get","getStrokeMap","toArray","map","last","size","uid","has","ratio","drawState","lastRecord","getHistoryStack","getUndoStack","unshift","set","type","nextRecord","first","pathData","stroke","v4","timestamp","Date","now","pushStroke","pathDataList","IDs","mutateStrokes","push","prevRecord","currRecord","update","s","delete","erased","m","deleteAll","mutations","forEach","splitters","splitMap","Map","prevUid","splitStrokes","merge","validate","v5","NIL","String","prevStroke","op","eraseStrokes","undo","redo","toObject","flatState","operations","ds","pushOperation","states","iterators","values","mergedStrokes","heap","Heap","s0","s1","iter","next","value","done","record","pop","iterator","pageStates","pageInfos","TeamState","pageID","userID","getPageStates","getPageInfos","pageMap","notePage","setOp","getPageRatio","includesPage","prevDs","getOneState","setState","pageRec","newTS","Object","entries","state","teamPages","teamPage","teamStateMap","ignores","Set","Array","from","filter","isEmpty","keys","every","useTransitionEnd","propertyName","active","resRef","useRef","useState","Promise","res","current","e","ActiveKeyCtx","createContext","useActiveKey","tuple","useContext","useDebugValue","ActiveKeyProvider","children","initKey","Provider","AsideOpenCtx","useAsideOpen","AsideOpenProvider","BASE_URL","process","getNoteID","roomCode","axios","data","statusCode","noteID","console","error","getTeamNoteInfo","loadTeamNoteInfo","cb","infoRes","noteInfo","updateTeamNote","withImg","method","url","responseType","onDownloadProgress","loaded","file","Blob","saveTeamNote","putNote","loadNote","note","name","pdf","pageOrder","removePageTimg","getUserID","formData","FormData","arrayBuffer","ab","append","headers","hashForage","localforage","updatePages","md5","JSON","stringify","getItem","lastHash","body","setItem","teamForage","getTeamNoteState","loadCachedTeamState","cachedState","params","modified","undefined","getAllNotes","allNotes","getAllTags","tags","addNewTag","getUid","newTag","notes","prevTags","deleteTag","editTag","tag","editNoteData","noteData","pickBy","v","lastTime","prevNoteInfo","prevNote","saveNoteInfo","tagID","createNewNote","noteWithPdf","deleteNote","prevTag","id","moveNoteTag","prevTagId","time","team","createTime","page","getPDFImages","images","pdfIndex","image","getOneImage","defaultNotePage","createEmptyNote","dayjs","format","createPage","marked","cached","localStorage","getUserName","slice","saveUserName","trim"],"sourceRoot":""}