{"version":3,"file":"static/js/703.6a3c8e12.chunk.js","mappings":"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","sources":["lib/draw/drawCtrl.ts","lib/draw/StateSet.ts","component/reader/ReaderUtils.tsx","component/ui/IconFont.tsx","component/reader/tools/PenPanel.tsx","component/reader/tools/DrawTools.tsx","lib/array.ts","component/reader/header/Middle.tsx","component/widgets/UserAvatar.tsx","component/reader/PageNav.tsx","component/reader/header/Right.tsx","component/reader/header/Header.tsx","lib/touch/touch.ts","component/draw/Draw.tsx","component/reader/Reader.tsx","lib/network/io.ts","lib/draw/TeamState.ts","component/reader/Team.tsx"],"sourcesContent":["import localforage from \"localforage\";\r\nexport interface DrawCtrl {\r\n  mode: \"draw\" | \"erase\" | \"select\" | \"text\";\r\n  finger: boolean;\r\n  lineWidth: number;\r\n  eraserWidth: number;\r\n  color: string;\r\n  highlight: boolean;\r\n  lasso: boolean;\r\n  widthList: number[];\r\n}\r\n\r\nexport const defaultWidthList = [10, 20, 30, 50];\r\nexport const defaultDrawCtrl: Readonly<DrawCtrl> = {\r\n  mode: \"draw\",\r\n  finger: true,\r\n  lineWidth: 10,\r\n  eraserWidth: 10,\r\n  color: \"#000000\",\r\n  highlight: false,\r\n  lasso: true,\r\n  widthList: defaultWidthList,\r\n};\r\n\r\nexport async function getDrawCtrl() {\r\n  let drawCtrl = (await localforage.getItem(\"DRAW_CTRL\")) as DrawCtrl | null;\r\n  if (!drawCtrl) {\r\n    drawCtrl = defaultDrawCtrl;\r\n    await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n  }\r\n  return drawCtrl;\r\n}\r\n\r\nexport async function saveDrawCtrl(drawCtrl: DrawCtrl) {\r\n  await localforage.setItem(\"DRAW_CTRL\", drawCtrl);\r\n}\r\n","import { DrawState, Operation, Stroke, WIDTH } from \"./DrawState\";\r\nimport { List, Map, Record } from \"immutable\";\r\nimport { NotePage } from \"../note/note\";\r\n\r\ninterface StateSetRecordType {\r\n  states: Map<string, DrawState>;\r\n  editStack: List<string>;\r\n  undoStack: List<string>;\r\n}\r\n\r\nconst defaultRecord: Readonly<StateSetRecordType> = {\r\n  states: Map(),\r\n  editStack: List(),\r\n  undoStack: List(),\r\n};\r\n\r\ntype StateSetRecord = Record<StateSetRecordType>;\r\nconst defaultFactory = Record(defaultRecord);\r\n\r\nexport type SetOperation = Operation & { pageID: string };\r\n\r\nexport class StateSet {\r\n  constructor(\r\n    private immutable: StateSetRecord,\r\n    public lastOp?: SetOperation\r\n  ) {}\r\n\r\n  static createFromPages(\r\n    pageRec: globalThis.Record<string, NotePage>,\r\n    width = WIDTH\r\n  ) {\r\n    return new StateSet(\r\n      defaultFactory().set(\r\n        \"states\",\r\n        Map(pageRec).map(({ state, ratio }) =>\r\n          DrawState.loadFromFlat(state, width, width * ratio)\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  getImmutable() {\r\n    return this.immutable;\r\n  }\r\n\r\n  getStates() {\r\n    return this.getImmutable().get(\"states\");\r\n  }\r\n\r\n  getOneState(pageID: string) {\r\n    return this.getStates().get(pageID);\r\n  }\r\n\r\n  getEditStack() {\r\n    return this.getImmutable().get(\"editStack\");\r\n  }\r\n\r\n  getUndoStack() {\r\n    return this.getImmutable().get(\"undoStack\");\r\n  }\r\n\r\n  setState(pageID: string, drawState: DrawState) {\r\n    const prevDS = this.getOneState(pageID);\r\n    if (!prevDS || prevDS === drawState) return this;\r\n    let currRecord = this.getImmutable()\r\n      .update(\"states\", (s) => s.set(pageID, drawState))\r\n      .update(\"editStack\", (l) => l.push(pageID))\r\n      .delete(\"undoStack\");\r\n\r\n    const { lastOp } = drawState;\r\n    const lastSetOp = lastOp && { ...lastOp, pageID };\r\n\r\n    return new StateSet(currRecord, lastSetOp);\r\n  }\r\n\r\n  // sync with mutation.\r\n  syncStrokeTime(pageID: string, stroke: Stroke) {\r\n    const prevDS = this.getOneState(pageID);\r\n    prevDS && DrawState.syncStrokeTime(prevDS, stroke);\r\n    return this;\r\n  }\r\n\r\n  addState(pageID: string, notePage: NotePage, width = WIDTH) {\r\n    const { state, ratio } = notePage;\r\n    const newDS = DrawState.loadFromFlat(state, width, width * ratio);\r\n    const currRecord = this.getImmutable().update(\"states\", (s) =>\r\n      s.set(pageID, newDS)\r\n    );\r\n    return new StateSet(currRecord);\r\n  }\r\n\r\n  deleteState(pageID: string) {\r\n    return new StateSet(\r\n      this.getImmutable().update(\"states\", (s) => s.delete(pageID))\r\n    );\r\n  }\r\n\r\n  isUndoable() {\r\n    return this.getEditStack().size > 0;\r\n  }\r\n\r\n  isRedoable() {\r\n    return this.getUndoStack().size > 0;\r\n  }\r\n\r\n  undo() {\r\n    if (!this.isUndoable()) return this;\r\n    const lastUid = this.getEditStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.undo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"editStack\", (s) => s.pop())\r\n        .update(\"undoStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  redo() {\r\n    if (!this.isRedoable()) return this;\r\n    const lastUid = this.getUndoStack().last();\r\n    const prevDS = lastUid && this.getOneState(lastUid);\r\n    if (!prevDS) return this;\r\n\r\n    const newDS = DrawState.redo(prevDS);\r\n    const { lastOp } = newDS;\r\n    const lastSetOp = lastOp && { pageID: lastUid, ...lastOp };\r\n\r\n    return new StateSet(\r\n      this.getImmutable()\r\n        .update(\"undoStack\", (s) => s.pop())\r\n        .update(\"editStack\", (s) => s.push(lastUid))\r\n        .update(\"states\", (s) => s.set(lastUid, newDS)),\r\n      lastSetOp\r\n    );\r\n  }\r\n\r\n  getLastDS(): [string, DrawState] | undefined {\r\n    const pageID = this.lastOp?.pageID;\r\n    const ds = pageID && this.getOneState(pageID);\r\n    if (ds) return [pageID, ds];\r\n  }\r\n}\r\n","import { Button, message } from \"antd\";\r\nimport React, { useContext } from \"react\";\r\nimport { ReaderMethodCtx } from \"./Reader\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\n\r\nexport const AddPageButton = () => {\r\n  const { addFinalPage } = useContext(ReaderMethodCtx);\r\n  return (\r\n    <div className=\"add-btn-wrapper\">\r\n      <Button\r\n        type=\"dashed\"\r\n        icon={<PlusOutlined />}\r\n        block\r\n        onClick={addFinalPage}\r\n      >\r\n        New page\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const showPageDelMsg = (onUndo: () => void) => {\r\n  message.warning({\r\n    content: (\r\n      <>\r\n        One page was deleted.\r\n        <Button\r\n          size=\"small\"\r\n          type=\"link\"\r\n          onClick={() => {\r\n            message.destroy(\"DELETE\");\r\n            onUndo();\r\n          }}\r\n        >\r\n          Undo\r\n        </Button>\r\n      </>\r\n    ),\r\n    key: \"DELETE\",\r\n    duration: 10,\r\n  });\r\n};\r\n","import { createFromIconfontCN } from \"@ant-design/icons\";\r\n\r\nexport default createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_3181679_yo844n7qgns.js\",\r\n});\r\n","import { CSSProperties, FC, useEffect, useMemo, useState } from \"react\";\r\nimport { defaultWidthList, DrawCtrl } from \"../../../lib/draw/drawCtrl\";\r\nimport { ColorCirle } from \"../../widgets/ColorCircle\";\r\nimport { WIDTH } from \"../../../lib/draw/DrawState\";\r\nimport { Popover, Segmented, Slider } from \"antd\";\r\nimport { allColors } from \"../../../lib/color\";\r\nimport { Setter } from \"../../../lib/hooks\";\r\nimport IconFont from \"../../ui/IconFont\";\r\nimport { List } from \"immutable\";\r\nimport \"./penPanel.sass\";\r\n\r\nexport const PenPanel: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n}> = ({ updateDrawCtrl, drawCtrl }) => {\r\n  const { highlight, color } = drawCtrl;\r\n  const [panelBlur, setPanelBlur] = useState(false);\r\n\r\n  return (\r\n    <div className=\"pen-panel\" data-blur={panelBlur} data-hi={highlight}>\r\n      <div className=\"pen-status\">\r\n        <WidthSelect\r\n          updateDrawCtrl={updateDrawCtrl}\r\n          drawCtrl={drawCtrl}\r\n          setPanelBlur={setPanelBlur}\r\n        />\r\n        <HighlightSwitch checked={highlight} updateDrawCtrl={updateDrawCtrl} />\r\n      </div>\r\n      <ColorSelect\r\n        color={color || \"\"}\r\n        setColor={(c) => updateDrawCtrl({ color: c })}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const WidthSelect: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n  drawCtrl: Partial<DrawCtrl>;\r\n  setPanelBlur?: Setter<boolean>;\r\n  field?: \"lineWidth\" | \"eraserWidth\";\r\n}> = ({\r\n  updateDrawCtrl,\r\n  drawCtrl,\r\n  setPanelBlur = () => {},\r\n  field = \"lineWidth\",\r\n}) => {\r\n  const currWidth = drawCtrl[field];\r\n  const widthList = drawCtrl.widthList ?? defaultWidthList;\r\n  const color = field === \"lineWidth\" ? drawCtrl.color ?? \"#aaa\" : \"#aaa\";\r\n\r\n  const chosen = useMemo(\r\n    () => Math.max(0, widthList.indexOf(currWidth ?? 0)),\r\n    [currWidth, widthList]\r\n  );\r\n\r\n  const [popShow, setPopShow] = useState(List([false, false, false, false]));\r\n  useEffect(() => {\r\n    if (popShow.includes(true)) setPanelBlur(true);\r\n    else setPanelBlur(false);\r\n  }, [popShow, setPanelBlur]);\r\n\r\n  const getRealSizeStyle = (width: number) =>\r\n    ({\r\n      \"--real-size\": `calc(${100 / WIDTH}vw * ${width})`,\r\n    } as CSSProperties);\r\n\r\n  const options = widthList.map((width, index) => ({\r\n    value: index,\r\n    label: (\r\n      <Popover\r\n        visible={popShow.get(index)}\r\n        onVisibleChange={(v) => setPopShow((prev) => prev.set(index, v))}\r\n        trigger={chosen === index ? [\"click\"] : []}\r\n        placement=\"bottom\"\r\n        destroyTooltipOnHide\r\n        content={\r\n          <Slider\r\n            min={5}\r\n            max={100}\r\n            className=\"ctrl-slider\"\r\n            defaultValue={width}\r\n            onAfterChange={(w) => {\r\n              if (widthList.includes(w)) {\r\n                setPopShow((prev) => prev.set(index, false));\r\n                return updateDrawCtrl({ [field]: w });\r\n              }\r\n              const newWL = widthList.slice();\r\n              newWL[index] = w;\r\n              updateDrawCtrl({ widthList: newWL, [field]: w });\r\n            }}\r\n          />\r\n        }\r\n      >\r\n        <div className=\"circle-wrapper\" style={getRealSizeStyle(width)}>\r\n          <ColorCirle className={\"width-circle \" + field} color={color} />\r\n        </div>\r\n      </Popover>\r\n    ),\r\n  }));\r\n\r\n  return (\r\n    <Segmented\r\n      className=\"width-seg\"\r\n      value={chosen}\r\n      options={options}\r\n      onChange={(i) => updateDrawCtrl({ [field]: widthList[+i] ?? 5 })}\r\n    />\r\n  );\r\n};\r\n\r\nconst HighlightSwitch: FC<{\r\n  checked?: boolean;\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ checked = false, updateDrawCtrl }) => {\r\n  return (\r\n    <label className=\"hi-wrapper\">\r\n      <input\r\n        type=\"checkbox\"\r\n        name=\"highlight\"\r\n        checked={checked}\r\n        onChange={(e) => updateDrawCtrl({ highlight: e.target.checked })}\r\n      />\r\n      <div className=\"hi-switch\">\r\n        <IconFont type=\"icon-Highlight\" />\r\n      </div>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport const ColorSelect: FC<{\r\n  color: string;\r\n  setColor: (color: string) => void;\r\n}> = ({ setColor, color }) => {\r\n  return (\r\n    <div className=\"color-select\">\r\n      {allColors.map((c) => (\r\n        <label key={c}>\r\n          <input\r\n            checked={color === c}\r\n            type=\"radio\"\r\n            name=\"color\"\r\n            onChange={(e) => e.target.checked && setColor(c)}\r\n          />\r\n          <div\r\n            data-color={c}\r\n            className=\"circle\"\r\n            style={{ backgroundColor: c, borderColor: c }}\r\n          />\r\n        </label>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { FC, RefObject, useContext, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  CopyOutlined,\r\n  DeleteOutlined,\r\n  BgColorsOutlined,\r\n  FontSizeOutlined,\r\n  CaretLeftOutlined,\r\n  FontColorsOutlined,\r\n  CaretRightOutlined,\r\n  RotateRightOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Button, ButtonProps, InputNumber, Modal, Popover } from \"antd\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { DrawCtrl } from \"../../../lib/draw/drawCtrl\";\r\nimport { createWorker, Worker } from \"tesseract.js\";\r\nimport { ColorSelect, PenPanel } from \"./PenPanel\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { DrawRefType } from \"../../draw/Draw\";\r\nimport { useDrag } from \"@use-gesture/react\";\r\nimport { colors } from \"../../../lib/color\";\r\nimport { ReaderStateCtx } from \"../Reader\";\r\nimport IconFont from \"../../ui/IconFont\";\r\nimport copy from \"clipboard-copy\";\r\nimport \"./drawTools.sass\";\r\n\r\nconst getOcrWorker = (() => {\r\n  let worker: Worker;\r\n  return async () => {\r\n    if (worker) return worker;\r\n    worker = createWorker({ logger: console.log });\r\n    await worker.load();\r\n    await worker.loadLanguage(\"eng+chi_sim\");\r\n    await worker.initialize(\"eng+chi_sim\");\r\n    return worker;\r\n  };\r\n})();\r\n\r\nexport const SelectTool: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n  visible: boolean;\r\n}> = ({ drawRef, visible }) => {\r\n  const btnProps: ButtonProps = {\r\n    type: \"text\",\r\n    shape: \"round\",\r\n    size: \"small\",\r\n  };\r\n\r\n  const [currDrawCtrl, setCurrDrawCtrl] = useState<Partial<DrawCtrl>>({});\r\n  useEffect(() => setCurrDrawCtrl({}), [visible]);\r\n  const rotateEl = useRef<HTMLDivElement>(null);\r\n  const [dragged, setDragged] = useState(false);\r\n  const [transX, setTransX] = useState(0);\r\n  const gearStyle = { transform: `translateX(${transX}px)` };\r\n\r\n  useDrag(\r\n    ({ first, last, offset, delta }) => {\r\n      setTransX(offset[0]);\r\n      drawRef.current?.rotateSelected(delta[0] / 2, last);\r\n      first && setDragged(true);\r\n      last && setDragged(false);\r\n    },\r\n    {\r\n      target: rotateEl,\r\n      filterTaps: true,\r\n      rubberband: 0.05,\r\n      bounds: { left: -90, right: 90 },\r\n    }\r\n  );\r\n\r\n  const [recoginzing, setRecoginzing] = useState(false);\r\n  const recognizeText = async () => {\r\n    setRecoginzing(true);\r\n    if (!drawRef.current) return;\r\n    const imageData = drawRef.current.rasterize();\r\n    try {\r\n      const worker = await getOcrWorker();\r\n      const { text } = (await worker.recognize(imageData)).data;\r\n      Modal.confirm({\r\n        title: \"OCR Result\",\r\n        content: <TextArea defaultValue={text} />,\r\n        icon: <IconFont type=\"icon-OCR\" />,\r\n        okText: \"Copy\",\r\n        onOk: () => copy(text),\r\n      });\r\n    } catch (e) {\r\n      console.error(e);\r\n    } finally {\r\n      setRecoginzing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CSSTransition timeout={300} in={visible} unmountOnExit>\r\n      <div className=\"select-tool\">\r\n        <Popover\r\n          trigger=\"click\"\r\n          placement=\"bottom\"\r\n          getPopupContainer={(e) => e.parentElement!}\r\n          destroyTooltipOnHide\r\n          content={\r\n            <PenPanel\r\n              updateDrawCtrl={(updated) => {\r\n                setCurrDrawCtrl((prev) => ({ ...prev, ...updated }));\r\n                drawRef.current?.mutateStyle(updated);\r\n              }}\r\n              drawCtrl={currDrawCtrl}\r\n            />\r\n          }\r\n        >\r\n          <Button icon={<BgColorsOutlined />} {...btnProps} />\r\n        </Popover>\r\n        <div className=\"rotate-wrapper\" data-dragged={dragged} ref={rotateEl}>\r\n          <Button\r\n            icon={<RotateRightOutlined />}\r\n            onClick={() => drawRef.current?.rotateSelected(90, true)}\r\n            {...btnProps}\r\n          />\r\n          <CaretLeftOutlined className=\"arrow left\" />\r\n          <CaretRightOutlined className=\"arrow right\" />\r\n          <div className=\"gear\" style={gearStyle} />\r\n        </div>\r\n        <Button\r\n          icon={<CopyOutlined />}\r\n          onClick={() => drawRef.current?.duplicateSelected()}\r\n          {...btnProps}\r\n        />\r\n        <Button\r\n          icon={<IconFont type=\"icon-OCR\" />}\r\n          loading={recoginzing}\r\n          onClick={recognizeText}\r\n          {...btnProps}\r\n        />\r\n        <Button\r\n          danger\r\n          icon={<DeleteOutlined />}\r\n          onClick={() => drawRef.current?.deleteSelected()}\r\n          {...btnProps}\r\n        />\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport const TextTool: FC<{\r\n  drawRef: RefObject<DrawRefType>;\r\n  visible: boolean;\r\n}> = ({ visible, drawRef }) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [fontSize, setFontSize] = useState(5);\r\n  const [color, setColor] = useState(colors[0]);\r\n  const { forceLight } = useContext(ReaderStateCtx);\r\n\r\n  const fontSizeInput = (\r\n    <span className=\"font-size\">\r\n      <FontSizeOutlined />\r\n      <span>Font size: </span>\r\n      <InputNumber\r\n        min={1}\r\n        size=\"small\"\r\n        value={fontSize}\r\n        onChange={setFontSize}\r\n      />\r\n    </span>\r\n  );\r\n\r\n  const fontColorBtn = (\r\n    <Popover\r\n      content={<ColorSelect color={color} setColor={setColor} />}\r\n      overlayStyle={{ width: 200 }}\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n    >\r\n      <Button\r\n        size=\"small\"\r\n        icon={<FontColorsOutlined className=\"font-icon\" style={{ color }} />}\r\n      >\r\n        Font color\r\n      </Button>\r\n    </Popover>\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      visible={visible}\r\n      title=\"Insert text\"\r\n      onCancel={() => drawRef.current?.cancelText()}\r\n      onOk={() => {\r\n        const content = text.trim();\r\n        if (!content) return drawRef.current?.cancelText();\r\n        drawRef.current?.submitText(content, fontSize, color);\r\n      }}\r\n      bodyStyle={{ paddingTop: 0 }}\r\n      destroyOnClose\r\n    >\r\n      <div className=\"insert-option\" data-force-light={forceLight}>\r\n        {fontSizeInput}\r\n        {fontColorBtn}\r\n      </div>\r\n      <TextArea\r\n        autoFocus\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n      />\r\n    </Modal>\r\n  );\r\n};\r\n","import { Map } from \"immutable\";\r\n\r\nexport function exchange<T>(list: T[], fromIndex: number, toIndex: number) {\r\n  const result = list.slice();\r\n  const [removed] = result.splice(fromIndex, 1);\r\n  result.splice(toIndex, 0, removed);\r\n  return result;\r\n}\r\n\r\nexport function insertAfter<T>(list: T[], prevItem: T, newItem: T) {\r\n  const prevIndex = list.indexOf(prevItem);\r\n  const curr = list.slice();\r\n  if (prevIndex === -1) return curr;\r\n  curr.splice(prevIndex + 1, 0, newItem);\r\n  return curr;\r\n}\r\n\r\nexport function getLargestKey(map: Map<string, number>) {\r\n  let result = \"\";\r\n  let maxRatio = 0;\r\n  map.forEach((ratio, pageID) => {\r\n    if (ratio > maxRatio) {\r\n      result = pageID;\r\n      maxRatio = ratio;\r\n    }\r\n  });\r\n  return result;\r\n}\r\n","import { FC, useContext } from \"react\";\r\nimport { Button, message, Popover, ButtonProps } from \"antd\";\r\nimport { ReaderMethodCtx, ReaderStateCtx } from \"../Reader\";\r\nimport { DrawCtrl, saveDrawCtrl } from \"../../../lib/draw/drawCtrl\";\r\nimport {\r\n  BulbFilled,\r\n  BulbOutlined,\r\n  UndoOutlined,\r\n  RedoOutlined,\r\n  GatewayOutlined,\r\n  HighlightOutlined,\r\n} from \"@ant-design/icons\";\r\nimport IconFont from \"../../ui/IconFont\";\r\nimport { PenPanel, WidthSelect } from \"../tools/PenPanel\";\r\n\r\nexport const HeaderMiddle = () => {\r\n  const { stateSet, drawCtrl, forceLight } = useContext(ReaderStateCtx);\r\n  const { setDrawCtrl, handleUndo, handleRedo, setForceLight } =\r\n    useContext(ReaderMethodCtx);\r\n  const { mode, finger } = drawCtrl;\r\n\r\n  const updateDrawCtrl = (updated: Partial<DrawCtrl>) => {\r\n    setDrawCtrl((prev) => {\r\n      const newCtrl = { ...prev, ...updated };\r\n      saveDrawCtrl(newCtrl);\r\n      return newCtrl;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"middle\">\r\n      <Button\r\n        type=\"text\"\r\n        shape=\"circle\"\r\n        icon={<UndoOutlined />}\r\n        onClick={handleUndo}\r\n        disabled={!stateSet?.isUndoable()}\r\n      />\r\n      <Button\r\n        type=\"text\"\r\n        shape=\"circle\"\r\n        icon={<RedoOutlined />}\r\n        onClick={handleRedo}\r\n        disabled={!stateSet?.isRedoable()}\r\n      />\r\n      <Button\r\n        type={finger ? \"default\" : \"text\"}\r\n        shape=\"circle\"\r\n        onClick={() => {\r\n          updateDrawCtrl({ finger: !finger });\r\n          message.destroy(\"FINGER\");\r\n          message.open({\r\n            content: finger ? \"Pencil only\" : \"Draw with finger\",\r\n            key: \"FINGER\",\r\n          });\r\n        }}\r\n        icon={<IconFont type=\"icon-finger\" />}\r\n      />\r\n      <Button\r\n        className=\"force-light-btn\"\r\n        type=\"text\"\r\n        shape=\"circle\"\r\n        icon={forceLight ? <BulbFilled /> : <BulbOutlined />}\r\n        onClick={() => setForceLight((prev) => !prev)}\r\n      />\r\n      <PenButton updateDrawCtrl={updateDrawCtrl} />\r\n      <EraserButton updateDrawCtrl={updateDrawCtrl} />\r\n      <Button\r\n        type={mode === \"text\" ? \"default\" : \"text\"}\r\n        shape=\"circle\"\r\n        onClick={() => updateDrawCtrl({ mode: \"text\" })}\r\n        icon={<IconFont type=\"icon-text1\" />}\r\n      />\r\n      <SelectButton updateDrawCtrl={updateDrawCtrl} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PenButton: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ updateDrawCtrl }) => {\r\n  const { drawCtrl } = useContext(ReaderStateCtx);\r\n  const { mode } = drawCtrl;\r\n\r\n  const btnProps: ButtonProps = {\r\n    shape: \"circle\",\r\n    icon: <HighlightOutlined />,\r\n  };\r\n  return mode === \"draw\" ? (\r\n    <Popover\r\n      content={<PenPanel updateDrawCtrl={updateDrawCtrl} drawCtrl={drawCtrl} />}\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button type=\"default\" {...btnProps} />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      onClick={() => updateDrawCtrl({ mode: \"draw\" })}\r\n      {...btnProps}\r\n    />\r\n  );\r\n};\r\n\r\nconst EraserButton: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ updateDrawCtrl }) => {\r\n  const { drawCtrl } = useContext(ReaderStateCtx);\r\n\r\n  const btnProps: ButtonProps = {\r\n    shape: \"circle\",\r\n    icon: <IconFont type=\"icon-eraser\" />,\r\n  };\r\n\r\n  return drawCtrl.mode === \"erase\" ? (\r\n    <Popover\r\n      content={\r\n        <WidthSelect\r\n          drawCtrl={drawCtrl}\r\n          updateDrawCtrl={updateDrawCtrl}\r\n          field=\"eraserWidth\"\r\n        />\r\n      }\r\n      trigger=\"click\"\r\n      placement=\"bottom\"\r\n      getPopupContainer={(e) => e.parentElement!}\r\n      destroyTooltipOnHide\r\n    >\r\n      <Button type=\"default\" {...btnProps} />\r\n    </Popover>\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      onClick={() => updateDrawCtrl({ mode: \"erase\" })}\r\n      {...btnProps}\r\n    />\r\n  );\r\n};\r\n\r\nconst SelectButton: FC<{\r\n  updateDrawCtrl: (updated: Partial<DrawCtrl>) => void;\r\n}> = ({ updateDrawCtrl }) => {\r\n  const {\r\n    drawCtrl: { lasso, mode },\r\n  } = useContext(ReaderStateCtx);\r\n\r\n  const icon = lasso ? <IconFont type=\"icon-lasso1\" /> : <GatewayOutlined />;\r\n\r\n  return mode === \"select\" ? (\r\n    <Button\r\n      type=\"default\"\r\n      shape=\"circle\"\r\n      icon={icon}\r\n      onClick={() => updateDrawCtrl({ lasso: !lasso })}\r\n    />\r\n  ) : (\r\n    <Button\r\n      type=\"text\"\r\n      shape=\"circle\"\r\n      icon={icon}\r\n      onClick={() => updateDrawCtrl({ mode: \"select\" })}\r\n    />\r\n  );\r\n};\r\n","import { Avatar } from \"antd\";\nimport { AvatarSize } from \"antd/lib/avatar/SizeContext\";\nimport { FC, useContext, useMemo } from \"react\";\nimport { getHashedColor } from \"../../lib/color\";\nimport { TeamCtx } from \"../reader/Team\";\n\nexport const UserAvatar: FC<{\n  userID: string;\n  size?: AvatarSize;\n  onClick?: () => void;\n  chosen?: boolean;\n  className?: string;\n}> = ({\n  userID,\n  size = \"default\",\n  onClick = () => {},\n  chosen = false,\n  className,\n}) => {\n  const { userRec } = useContext(TeamCtx);\n  const color = useMemo(() => getHashedColor(userID), [userID]);\n  const userInfo = userRec[userID];\n  if (!userInfo) return null;\n  const { userName } = userInfo;\n\n  return (\n    <Avatar\n      className={className}\n      data-chosen={chosen}\n      size={size}\n      style={{ backgroundColor: color }}\n    >\n      <div className=\"avatar-wrapper\" onClick={onClick}>\n        {userName?.slice(0, 3)}\n      </div>\n    </Avatar>\n  );\n};\n","import React, {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n} from \"react\";\r\nimport {\r\n  MoreOutlined,\r\n  PlusOutlined,\r\n  CopyOutlined,\r\n  DeleteOutlined,\r\n  MenuFoldOutlined,\r\n  MenuUnfoldOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  Draggable,\r\n  Droppable,\r\n  DropResult,\r\n  DragDropContext,\r\n} from \"react-beautiful-dnd\";\r\nimport { PageWrapper, ReaderMethodCtx, ReaderStateCtx } from \"./Reader\";\r\nimport { Avatar, Button, Drawer, Menu, Popover, Tabs } from \"antd\";\r\nimport { AddPageButton } from \"./ReaderUtils\";\r\nimport { exchange } from \"../../lib/array\";\r\nimport { Setter } from \"../../lib/hooks\";\r\nimport IconFont from \"../ui/IconFont\";\r\nimport { TeamCtx } from \"./Team\";\r\nimport \"./preview.sass\";\r\nimport { UserAvatar } from \"../widgets/UserAvatar\";\r\nimport classNames from \"classnames\";\r\n\r\nconst PreviewCtx = React.createContext({\r\n  activeKey: \"ALL\",\r\n  setActiveKey: (() => {}) as Setter<string>,\r\n});\r\n\r\nconst PageNavContent = () => {\r\n  const { pageOrder, currPageID, forceLight } = useContext(ReaderStateCtx);\r\n  const { scrollPage, saveReorder } = useContext(ReaderMethodCtx);\r\n  const { activeKey } = useContext(PreviewCtx);\r\n  const refRec = useRef<Record<string, HTMLElement>>({});\r\n\r\n  const onDragEnd = ({ source, destination }: DropResult) => {\r\n    if (!destination || !pageOrder) return;\r\n    const { index: fromIndex } = source;\r\n    const { index: toIndex } = destination;\r\n    if (fromIndex === toIndex) return;\r\n    const pageID = pageOrder[fromIndex];\r\n    const newOrder = exchange(pageOrder, fromIndex, toIndex);\r\n    saveReorder(newOrder, true);\r\n    requestAnimationFrame(() => scrollPage(pageID));\r\n  };\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => refRec.current[currPageID]?.scrollIntoView(), []);\r\n\r\n  return (\r\n    <div className=\"preview-container\" data-force-light={forceLight}>\r\n      <PreviewTabs />\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"preview-list\">\r\n          {({ droppableProps, innerRef, placeholder }) => (\r\n            <div className=\"page-list\" ref={innerRef} {...droppableProps}>\r\n              {pageOrder?.map((uid, index) => (\r\n                <PagePreview\r\n                  key={uid}\r\n                  uid={uid}\r\n                  pageIndex={index}\r\n                  refRec={refRec.current}\r\n                />\r\n              ))}\r\n              {placeholder}\r\n              {activeKey === \"ALL\" && <AddPageButton />}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PagePreview: FC<{\r\n  uid: string;\r\n  pageIndex: number;\r\n  refRec: Record<string, HTMLElement>;\r\n}> = ({ uid, pageIndex, refRec }) => {\r\n  const { stateSet, teamState, pageRec, currPageID } =\r\n    useContext(ReaderStateCtx);\r\n  const { scrollPage } = useContext(ReaderMethodCtx);\r\n  const { activeKey } = useContext(PreviewCtx);\r\n  const [chosen, setChosen] = useState(\"\");\r\n\r\n  const page = pageRec?.get(uid);\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStateMap = teamState?.getOnePageStateMap(uid);\r\n\r\n  if (!page || !drawState) return null;\r\n  const { image, marked } = page;\r\n\r\n  if (\r\n    activeKey === \"WRITTEN\" &&\r\n    drawState.isEmpty() &&\r\n    (!teamStateMap || teamStateMap.every((ds) => ds.isEmpty()))\r\n  ) {\r\n    return null;\r\n  }\r\n  if (activeKey === \"MARKED\" && !marked) return null;\r\n  const curr = currPageID === uid;\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={uid}\r\n      index={pageIndex}\r\n      isDragDisabled={activeKey !== \"ALL\"}\r\n    >\r\n      {(\r\n        { innerRef, draggableProps, dragHandleProps },\r\n        { isDragging: dragged }\r\n      ) => (\r\n        <div\r\n          ref={(e) => {\r\n            innerRef(e);\r\n            if (e) refRec[uid] = e;\r\n          }}\r\n          className=\"page\"\r\n          data-curr={curr}\r\n          data-dragged={dragged}\r\n          onClick={() => scrollPage(uid)}\r\n          {...draggableProps}\r\n          {...dragHandleProps}\r\n        >\r\n          <PageWrapper\r\n            uid={uid}\r\n            drawState={teamStateMap?.get(chosen) || drawState}\r\n            teamStateMap={chosen ? undefined : teamStateMap}\r\n            thumbnail={image}\r\n            preview\r\n          />\r\n          <PreviewTools\r\n            uid={uid}\r\n            index={pageIndex}\r\n            chosen={chosen}\r\n            setChosen={setChosen}\r\n          />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nconst PreviewTools: FC<{\r\n  uid: string;\r\n  index: number;\r\n  chosen: string;\r\n  setChosen: Setter<string>;\r\n}> = ({ uid, index, chosen, setChosen }) => {\r\n  const { switchPageMarked } = useContext(ReaderMethodCtx);\r\n  const { teamState, pageRec } = useContext(ReaderStateCtx);\r\n  const { ignores } = useContext(TeamCtx);\r\n  const userIDs = useMemo(\r\n    () =>\r\n      teamState\r\n        ?.getPageValidUsers(uid)\r\n        .filter((userID) => !ignores.has(userID)) || [],\r\n    [teamState, ignores, uid]\r\n  );\r\n  const page = pageRec?.get(uid);\r\n  if (!page) return null;\r\n  const { marked } = page;\r\n\r\n  return (\r\n    <div className=\"tools\" onClick={(e) => e.stopPropagation()}>\r\n      <span\r\n        className=\"bookmark\"\r\n        data-marked={marked}\r\n        onClick={() => switchPageMarked(uid)}\r\n      />\r\n      <span className=\"index\">{index + 1}</span>\r\n      <PreviewOption uid={uid} />\r\n      <TeamAvatars userIDs={userIDs} chosen={chosen} setChosen={setChosen} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TeamAvatars: FC<{\r\n  userIDs: string[];\r\n  chosen: string;\r\n  setChosen: Setter<string>;\r\n}> = ({ userIDs, chosen, setChosen }) => {\r\n  return (\r\n    <Avatar.Group\r\n      maxCount={2}\r\n      size=\"default\"\r\n      className={classNames(\"team-group\", { chosen })}\r\n      maxPopoverPlacement=\"bottom\"\r\n    >\r\n      {userIDs.map((userID) => (\r\n        <UserAvatar\r\n          key={userID}\r\n          size=\"default\"\r\n          userID={userID}\r\n          className=\"preview-avatar\"\r\n          chosen={chosen === userID}\r\n          onClick={() => setChosen((prev) => (prev === userID ? \"\" : userID))}\r\n        />\r\n      ))}\r\n    </Avatar.Group>\r\n  );\r\n};\r\n\r\nconst PreviewOption = ({ uid }: { uid: string }) => {\r\n  const { addPage, deletePage } = useContext(ReaderMethodCtx);\r\n\r\n  const menu = (\r\n    <Menu\r\n      onClick={({ key }) => {\r\n        if (key === \"ADD\") {\r\n          addPage(uid);\r\n        } else if (key === \"COPY\") {\r\n          addPage(uid, true);\r\n        } else if (key === \"DELETE\") {\r\n          deletePage(uid);\r\n        }\r\n      }}\r\n      items={[\r\n        { key: \"ADD\", icon: <PlusOutlined />, label: \"Add page\" },\r\n        { key: \"COPY\", icon: <CopyOutlined />, label: \"Duplicate\" },\r\n        {\r\n          key: \"DELETE\",\r\n          icon: <DeleteOutlined />,\r\n          label: \"Delete\",\r\n          danger: true,\r\n        },\r\n      ]}\r\n    ></Menu>\r\n  );\r\n  return (\r\n    <Popover\r\n      content={menu}\r\n      trigger=\"click\"\r\n      placement=\"left\"\r\n      destroyTooltipOnHide\r\n    >\r\n      <span className=\"option\">\r\n        <MoreOutlined />\r\n      </span>\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst PreviewTabs = () => {\r\n  const { activeKey, setActiveKey } = useContext(PreviewCtx);\r\n  const { TabPane } = Tabs;\r\n  return (\r\n    <Tabs\r\n      className=\"tabs\"\r\n      activeKey={activeKey}\r\n      onChange={setActiveKey}\r\n      tabBarGutter={10}\r\n      size=\"small\"\r\n      centered\r\n    >\r\n      <TabPane tab={<IconFont type=\"icon-uf_paper\" />} key=\"ALL\" />\r\n      <TabPane tab={<IconFont type=\"icon-bookmark2\" />} key=\"MARKED\" />\r\n      <TabPane tab={<IconFont type=\"icon-write\" />} key=\"WRITTEN\" />\r\n    </Tabs>\r\n  );\r\n};\r\n\r\nexport default function PageNav() {\r\n  const [navOn, setNavOn] = useState(false);\r\n  const [activeKey, setActiveKey] = useState<string>(\"ALL\");\r\n  const title = {\r\n    ALL: \"All Pages\",\r\n    MARKED: \"Bookmarks\",\r\n    WRITTEN: \"Notes\",\r\n  }[activeKey];\r\n\r\n  return (\r\n    <PreviewCtx.Provider value={{ activeKey, setActiveKey }}>\r\n      <Button\r\n        type=\"text\"\r\n        icon={navOn ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\r\n        onClick={() => setNavOn((prev) => !prev)}\r\n      />\r\n      <Drawer\r\n        visible={navOn}\r\n        onClose={() => setNavOn(false)}\r\n        width={200}\r\n        title={title}\r\n        closable={false}\r\n        zIndex={800}\r\n        className=\"preview-drawer\"\r\n        bodyStyle={{ padding: 0, overflow: \"hidden\" }}\r\n        headerStyle={{ textAlign: \"center\" }}\r\n        destroyOnClose\r\n      >\r\n        <PageNavContent />\r\n      </Drawer>\r\n    </PreviewCtx.Provider>\r\n  );\r\n}\r\n","import { FC, useMemo, useState, useEffect, useContext } from \"react\";\r\nimport { Badge, Alert, Modal, Button, Divider, message, Popover } from \"antd\";\r\nimport Search from \"antd/lib/input/Search\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { PasscodeInput } from \"antd-mobile\";\r\nimport { ReaderMethodCtx, ReaderStateCtx } from \"../Reader\";\r\nimport { TeamCtx } from \"../Team\";\r\nimport { getUserID, saveUserName } from \"../../../lib/user\";\r\nimport PageNav from \"../PageNav\";\r\nimport {\r\n  EyeOutlined,\r\n  FormOutlined,\r\n  TeamOutlined,\r\n  CopyOutlined,\r\n  CheckOutlined,\r\n  ReloadOutlined,\r\n  ShareAltOutlined,\r\n  DisconnectOutlined,\r\n  EyeInvisibleOutlined,\r\n  UsergroupAddOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { editNoteData } from \"../../../lib/note/archive\";\r\nimport { UserAvatar } from \"../../widgets/UserAvatar\";\r\nimport { putNote } from \"../../../lib/network/http\";\r\nimport copy from \"clipboard-copy\";\r\n\r\nexport const HeaderRight = () => {\r\n  const { teamOn } = useContext(TeamCtx);\r\n  return (\r\n    <div className=\"right\">\r\n      {teamOn ? <RoomInfo /> : <JoinRoom />}\r\n      <PageNav />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst UserCard: FC<{ userID: string }> = ({ userID }) => {\r\n  const [renaming, setRenaming] = useState(false);\r\n  const { ignores, setIgnores, resetIO, userRec } = useContext(TeamCtx);\r\n  const userInfo = userRec[userID];\r\n  useEffect(() => setRenaming(false), [userInfo]);\r\n  if (!userInfo) return null;\r\n\r\n  const { userName, online } = userInfo;\r\n  const self = userID === getUserID();\r\n  const ignored = ignores.has(userID) && !self;\r\n\r\n  const switchIgnore = () => {\r\n    setIgnores((prev) => {\r\n      if (prev.has(userID)) return prev.delete(userID);\r\n      return prev.add(userID);\r\n    });\r\n  };\r\n\r\n  const submitRename = (value: string) => {\r\n    const name = value.trim();\r\n    if (!name || name === userName) return setRenaming(false);\r\n    saveUserName(name);\r\n    resetIO();\r\n  };\r\n\r\n  return (\r\n    <div className=\"user-item\" data-online={online}>\r\n      <UserAvatar userID={userID} size=\"small\" className=\"room-avatar\" />\r\n      {renaming || <span className=\"user-name\">{userName}</span>}\r\n      {renaming && (\r\n        <Search\r\n          autoFocus\r\n          className=\"rename-input\"\r\n          defaultValue={userName}\r\n          onSearch={submitRename}\r\n          enterButton={<Button icon={<CheckOutlined />} />}\r\n        />\r\n      )}\r\n      {self ? (\r\n        renaming || (\r\n          <Button\r\n            type=\"text\"\r\n            icon={<FormOutlined />}\r\n            onClick={() => setRenaming(true)}\r\n          />\r\n        )\r\n      ) : (\r\n        <Button\r\n          type=\"text\"\r\n          icon={ignored ? <EyeInvisibleOutlined /> : <EyeOutlined />}\r\n          onClick={switchIgnore}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst RoomInfo: FC = () => {\r\n  const { code, userRec, connected, loadInfo, loadState, resetIO } =\r\n    useContext(TeamCtx);\r\n  const { noteInfo } = useContext(ReaderStateCtx);\r\n  const link = window.location.href;\r\n  const share = async () => {\r\n    const selfName = userRec[getUserID()]?.userName;\r\n    try {\r\n      if (!noteInfo) return;\r\n      await copy(`${noteInfo.name} - ${selfName} - Multibility\\n${link}`);\r\n      message.destroy(\"copy\");\r\n      message.success({\r\n        content: \"Link copied!\",\r\n        icon: <CopyOutlined />,\r\n        key: \"copy\",\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const userList = useMemo(() => {\r\n    const selfID = getUserID();\r\n    const { [selfID]: selfInfo, ...otherUsers } = userRec;\r\n    const list = selfInfo ? [selfInfo] : [];\r\n    const values = Object.values(otherUsers);\r\n    list.push(\r\n      ...values.filter(({ online }) => online),\r\n      ...values.filter(({ online }) => !online)\r\n    );\r\n    return list;\r\n  }, [userRec]);\r\n\r\n  const onlineNum = useMemo(\r\n    () => userList.filter(({ online }) => online).length,\r\n    [userList]\r\n  );\r\n\r\n  const teamPop = (\r\n    <div className=\"team-popover\">\r\n      {connected || (\r\n        <Alert\r\n          className=\"disconn-alert\"\r\n          message=\"Network failed.\"\r\n          icon={<DisconnectOutlined />}\r\n          type=\"error\"\r\n          showIcon\r\n          banner\r\n        />\r\n      )}\r\n      <PasscodeInput\r\n        className=\"code-display\"\r\n        value={String(code)}\r\n        length={4}\r\n        plain\r\n      />\r\n      <Button\r\n        icon={<ShareAltOutlined />}\r\n        className=\"share-btn\"\r\n        onClick={share}\r\n        block\r\n      >\r\n        Share\r\n      </Button>\r\n      <Divider />\r\n      <div className=\"user-list\">\r\n        {userList.map((u) => (\r\n          <UserCard key={u.userID} userID={u.userID} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const [reloading, setReloading] = useState(false);\r\n  const title = (\r\n    <div className=\"team-title\">\r\n      <span>Team info</span>\r\n      <Button\r\n        shape=\"circle\"\r\n        type=\"text\"\r\n        size=\"small\"\r\n        loading={reloading}\r\n        icon={<ReloadOutlined />}\r\n        onClick={async () => {\r\n          setReloading(true);\r\n          await loadInfo();\r\n          await loadState();\r\n          setReloading(false);\r\n          resetIO();\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Popover\r\n      content={teamPop}\r\n      trigger=\"click\"\r\n      placement=\"bottomRight\"\r\n      title={title}\r\n      getPopupContainer={(e) => e.parentElement!}\r\n    >\r\n      <Button\r\n        type=\"text\"\r\n        icon={\r\n          <Badge\r\n            status={connected ? \"success\" : \"error\"}\r\n            count={connected ? onlineNum : \"!\"}\r\n            size=\"small\"\r\n          >\r\n            <TeamOutlined />\r\n          </Badge>\r\n        }\r\n      />\r\n    </Popover>\r\n  );\r\n};\r\n\r\nconst JoinRoom = () => {\r\n  const { noteID } = useContext(ReaderStateCtx);\r\n  const { instantSave } = useContext(ReaderMethodCtx);\r\n  const nav = useNavigate();\r\n\r\n  const createRoom = async () => {\r\n    await instantSave();\r\n    const res = await putNote(noteID);\r\n    if (!res) return message.error(\"Can't create room.\");\r\n    await editNoteData(noteID, { team: true });\r\n    nav(\"/team/\" + noteID);\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      type=\"text\"\r\n      icon={<UsergroupAddOutlined />}\r\n      onClick={() => {\r\n        Modal.confirm({\r\n          title: \"Enable team editing\",\r\n          content: \"This will make your note public.\",\r\n          icon: <TeamOutlined style={{ color: \"#555\" }} />,\r\n          onOk: createRoom,\r\n        });\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import { useContext } from \"react\";\r\nimport { Button } from \"antd\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { ReaderMethodCtx, ReaderStateCtx } from \"../Reader\";\r\nimport { HomeFilled, SaveOutlined } from \"@ant-design/icons\";\r\nimport { HeaderMiddle } from \"./Middle\";\r\nimport { HeaderRight } from \"./Right\";\r\nimport \"./header.sass\";\r\n\r\nexport default function ReaderHeader() {\r\n  return (\r\n    <header>\r\n      <HeaderLeft />\r\n      <HeaderMiddle />\r\n      <HeaderRight />\r\n    </header>\r\n  );\r\n}\r\n\r\nconst HeaderLeft = () => {\r\n  const { saved } = useContext(ReaderStateCtx);\r\n  const { instantSave } = useContext(ReaderMethodCtx);\r\n  const nav = useNavigate();\r\n\r\n  return (\r\n    <div className=\"left\">\r\n      <Button\r\n        type=\"text\"\r\n        onClick={async () => {\r\n          await instantSave();\r\n          nav(\"/\");\r\n        }}\r\n        icon={<HomeFilled style={{ opacity: 0.8 }} />}\r\n      />\r\n      <Button\r\n        type=\"text\"\r\n        className=\"save\"\r\n        onClick={instantSave}\r\n        disabled={saved}\r\n        icon={<SaveOutlined />}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { PointerEvent, TouchEvent, useEffect, useRef } from \"react\";\r\n\r\ntype iOSTouch = Touch & {\r\n  force?: number;\r\n  touchType?: \"stylus\" | \"direct\";\r\n};\r\n\r\nexport function isApplePencil(e: TouchEvent) {\r\n  const touch = e.touches[0] as iOSTouch;\r\n  return touch?.touchType === \"stylus\";\r\n}\r\n\r\nexport function usePreventTouch(\r\n  allowFinger: boolean\r\n): React.CanvasHTMLAttributes<HTMLCanvasElement> {\r\n  const isTouch = useRef(false);\r\n  const checkPoniter = (e: PointerEvent) =>\r\n    e.isPrimary && (isTouch.current = e.pointerType === \"touch\");\r\n\r\n  const isEventValid = (e: TouchEvent) =>\r\n    !isTouch.current ||\r\n    isApplePencil(e) ||\r\n    (allowFinger && e.touches.length === 1);\r\n\r\n  const preventTouch = (e: TouchEvent) =>\r\n    isEventValid(e) || e.stopPropagation();\r\n\r\n  return {\r\n    onPointerDownCapture: checkPoniter,\r\n    onPointerMoveCapture: checkPoniter,\r\n    onTouchStartCapture: preventTouch,\r\n    onTouchMoveCapture: preventTouch,\r\n  };\r\n}\r\n\r\nexport function usePreventGesture() {\r\n  useEffect(() => {\r\n    const handler = (e: Event) => e.preventDefault();\r\n    document.addEventListener(\"gesturestart\", handler);\r\n    document.addEventListener(\"gesturechange\", handler);\r\n    document.addEventListener(\"gestureend\", handler);\r\n    return () => {\r\n      document.removeEventListener(\"gesturestart\", handler);\r\n      document.removeEventListener(\"gesturechange\", handler);\r\n      document.removeEventListener(\"gestureend\", handler);\r\n    };\r\n  }, []);\r\n}\r\n","import React, {\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  Dispatch,\r\n  useEffect,\r\n  useCallback,\r\n  useDebugValue,\r\n  SetStateAction,\r\n  useImperativeHandle,\r\n} from \"react\";\r\nimport { usePreventTouch, usePreventGesture } from \"../../lib/touch/touch\";\r\nimport { DrawState, Mutation, Stroke } from \"../../lib/draw/DrawState\";\r\nimport { defaultDrawCtrl, DrawCtrl } from \"../../lib/draw/drawCtrl\";\r\nimport { releaseCanvas } from \"../../lib/draw/canvas\";\r\nimport { usePinch } from \"@use-gesture/react\";\r\nimport useSize from \"@react-hook/size\";\r\nimport { v4 as getUid } from \"uuid\";\r\nimport { Set } from \"immutable\";\r\nimport paper from \"paper\";\r\nimport \"./draw.sass\";\r\n\r\nconst {\r\n  Path,\r\n  Size,\r\n  Point,\r\n  Group,\r\n  Color,\r\n  Raster,\r\n  Shape: { Rectangle },\r\n} = paper;\r\n\r\nexport type ActiveToolKey = \"\" | \"select\" | \"text\";\r\nexport interface DrawRefType {\r\n  deleteSelected: () => void;\r\n  rotateSelected: (angle: number, last?: boolean) => void;\r\n  duplicateSelected: () => void;\r\n  mutateStyle: (updated: Partial<DrawCtrl>) => void;\r\n  rasterize: () => string;\r\n  submitText: (text: string, fontSize: number, color: string) => void;\r\n  cancelText: () => void;\r\n}\r\ninterface DrawPropType {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  onChange?: Dispatch<SetStateAction<DrawState>>;\r\n  setActiveTool?: Dispatch<SetStateAction<ActiveToolKey>>;\r\n  drawCtrl?: DrawCtrl;\r\n  readonly?: boolean;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}\r\ntype PaperHandler = ((e: paper.MouseEvent) => boolean | void) | null;\r\n\r\nconst Draw = React.forwardRef<DrawRefType, DrawPropType>(\r\n  (\r\n    {\r\n      drawState,\r\n      otherStates,\r\n      onChange = () => {},\r\n      drawCtrl = defaultDrawCtrl,\r\n      preview = false,\r\n      readonly = preview,\r\n      imgSrc,\r\n      setActiveTool,\r\n    },\r\n    ref\r\n  ) => {\r\n    const { width, height } = drawState;\r\n    const { mode, color, finger, lineWidth, highlight, eraserWidth, lasso } =\r\n      drawCtrl;\r\n\r\n    const canvasEl = useRef<HTMLCanvasElement>(null);\r\n    const scope = useRef(new paper.PaperScope());\r\n    const [group, setGroup] = useState<paper.Item[]>([]);\r\n    const [erased, setErased] = useState(Set<string>());\r\n    const [path, setPath] = usePaperItem<paper.Path>();\r\n    const [rect, setRect] = usePaperItem<paper.Path.Rectangle>();\r\n\r\n    useEffect(() => {\r\n      const cvs = canvasEl.current;\r\n      const scp = scope.current;\r\n      if (!cvs) return;\r\n\r\n      scp.setup(cvs);\r\n      scp.settings.handleSize = 10;\r\n      scp.project.addLayer(new paper.Layer());\r\n      scp.project.addLayer(new paper.Layer());\r\n      scp.project.layers[1].activate();\r\n      scp.project.layers.forEach((l) => (l.visible = false));\r\n      paintBackground(scp, width, height);\r\n\r\n      return () => {\r\n        scp.remove();\r\n        releaseCanvas(cvs);\r\n      };\r\n    }, [width, height]);\r\n\r\n    const [canvasWidth] = useSize(canvasEl);\r\n    useEffect(() => {\r\n      if (!canvasWidth) return;\r\n      const scp = scope.current;\r\n      const ratio = canvasWidth / width;\r\n      scp.view.viewSize = new Size(width, height).multiply(ratio);\r\n      scp.view.scale(ratio, new Point(0, 0));\r\n      scp.project.layers.forEach((l) => (l.visible = true));\r\n\r\n      return () => {\r\n        scp.project?.layers.forEach((l) => (l.visible = false));\r\n        scp.view?.scale(1 / ratio, new Point(0, 0));\r\n      };\r\n    }, [width, height, canvasWidth]);\r\n\r\n    useEffect(() => {\r\n      if (!imgSrc) return;\r\n      const img = new Image();\r\n      img.src = imgSrc;\r\n      let raster: paper.Raster;\r\n\r\n      img.onload = () => {\r\n        scope.current.activate();\r\n        raster = new Raster(img);\r\n        scope.current.project.layers[0].addChild(raster);\r\n        raster.position = new Point(width, height).divide(2);\r\n        const r = width / img.width;\r\n        raster.scale(r);\r\n      };\r\n\r\n      return () => void raster?.remove();\r\n    }, [imgSrc, width, height]);\r\n\r\n    const mergedStrokes = useMemo(\r\n      () =>\r\n        otherStates\r\n          ? DrawState.mergeStates(drawState, ...otherStates)\r\n          : drawState.getStrokeList(),\r\n      [drawState, otherStates]\r\n    );\r\n\r\n    useEffect(() => {\r\n      const tempGroup: paper.Item[] = [];\r\n      const othersGroup: paper.Item[] = [];\r\n\r\n      mergedStrokes.forEach((stroke) => {\r\n        const item = paintStroke(stroke, scope.current, erased.has(stroke.uid));\r\n        if (!item) return;\r\n        if (drawState.hasStroke(stroke.uid)) {\r\n          tempGroup.push(item);\r\n        } else {\r\n          othersGroup.push(item);\r\n        }\r\n      });\r\n      setGroup(tempGroup);\r\n\r\n      return () => {\r\n        tempGroup.forEach((item) => item.remove());\r\n        othersGroup.forEach((item) => item.remove());\r\n      };\r\n    }, [mergedStrokes, erased, drawState]);\r\n\r\n    const [selected, setSelected] = useState(false);\r\n    const hitRef = useRef<paper.HitResult>();\r\n    // const [hit, setHit] = useState<paper.HitResult>();\r\n    const paperMode = mode === \"select\" && selected ? \"selected\" : mode;\r\n    const [selectedIDs, setSelectedIDs] = useState<string[]>([]);\r\n    const selectedItems = useMemo(() => {\r\n      const IDSet = Set(selectedIDs);\r\n      return group.filter((item) => IDSet.has(item.name));\r\n    }, [group, selectedIDs]);\r\n\r\n    const resetSelect = useCallback(() => {\r\n      setSelected(false);\r\n      setPath(undefined);\r\n      setRect(undefined);\r\n    }, [setPath, setRect]);\r\n\r\n    useEffect(() => {\r\n      if (mode === \"select\") return resetSelect;\r\n    }, [mode, resetSelect]);\r\n\r\n    useEffect(() => {\r\n      if (selected) return () => setSelectedIDs([]);\r\n    }, [selected]);\r\n\r\n    useEffect(() => resetSelect, [lasso, resetSelect]);\r\n\r\n    const handleDown = {\r\n      draw() {\r\n        setPath(startStroke(color, lineWidth, highlight));\r\n      },\r\n      erase() {\r\n        setPath(startStroke(\"#ccc\", eraserWidth, true));\r\n      },\r\n      select(e: paper.MouseEvent) {\r\n        if (lasso) setPath(startStroke(\"#1890ff\", 5));\r\n        else setRect(startSelectRect(e.point));\r\n      },\r\n      selected(e: paper.MouseEvent) {\r\n        // check if the point hit the segment point.\r\n        const hitRes = rect?.hitTest(e.point, {\r\n          segments: true,\r\n          tolerance: 40,\r\n        });\r\n        hitRef.current = hitRes;\r\n        if (hitRes) return;\r\n        // if the point is outside of selection, reset selection\r\n        if (lasso) {\r\n          if (path?.contains(e.point)) return;\r\n          setPath(startStroke(\"#1890ff\", 5));\r\n        } else {\r\n          if (rect?.contains(e.point)) return;\r\n          setRect(startSelectRect(e.point));\r\n        }\r\n        setSelected(false);\r\n      },\r\n      text(e: paper.MouseEvent) {\r\n        const t = new paper.PointText(e.point);\r\n        setPointText(t);\r\n      },\r\n    }[paperMode];\r\n\r\n    const handleDrag = {\r\n      draw(e: paper.MouseEvent) {\r\n        if (!path) return;\r\n        path.add(e.point);\r\n        path.smooth();\r\n      },\r\n      erase(e: paper.MouseEvent) {\r\n        if (!path) return;\r\n        path.add(e.point);\r\n        path.smooth();\r\n\r\n        const newErased = group\r\n          .filter((p) => !erased.has(p.name))\r\n          .filter((p) => checkErase(p, path))\r\n          .map((p) => p.name);\r\n        setErased((prev) => prev.concat(newErased));\r\n      },\r\n      select(e: paper.MouseEvent) {\r\n        if (lasso) {\r\n          if (!path) return;\r\n          path.add(e.point);\r\n          path.smooth();\r\n        } else {\r\n          if (!rect) return;\r\n          const { x, y } = e.delta;\r\n          const [, s1, s2, s3] = rect.segments;\r\n          s1.point = s1.point.add(new Point(x, 0));\r\n          s2.point = s2.point.add(e.delta);\r\n          s3.point = s3.point.add(new Point(0, y));\r\n        }\r\n      },\r\n      selected(e: paper.MouseEvent) {\r\n        if (hitRef.current) {\r\n          const { x, y } = e.delta;\r\n          const moveP = hitRef.current.segment.point;\r\n          const baseP = hitRef.current.segment.next.next.point;\r\n          const dis = moveP.subtract(baseP);\r\n\r\n          const scale =\r\n            Math.abs(x) > Math.abs(y)\r\n              ? (dis.x + x) / dis.x\r\n              : (dis.y + y) / dis.y;\r\n\r\n          rect?.scale(scale, baseP);\r\n          selectedItems.forEach((item) => {\r\n            item.scale(scale, baseP);\r\n            item.strokeWidth *= scale;\r\n          });\r\n        } else {\r\n          selectedItems.forEach((item) => item.translate(e.delta));\r\n          path?.translate(e.delta);\r\n          rect?.translate(e.delta);\r\n        }\r\n      },\r\n      text: null,\r\n    }[paperMode];\r\n\r\n    const handleUp = {\r\n      draw() {\r\n        if (!path || path.segments.length === 0) return;\r\n        path.simplify();\r\n        const pathData = path.exportJSON();\r\n        setPath(undefined);\r\n        onChange((prev) => DrawState.addStroke(prev, pathData));\r\n      },\r\n      erase() {\r\n        if (!path) return;\r\n        setPath(undefined);\r\n        onChange((prev) => DrawState.eraseStrokes(prev, erased.toArray()));\r\n        setErased(Set());\r\n      },\r\n      select() {\r\n        let items: paper.Item[];\r\n        if (lasso) {\r\n          if (!path || path.length < 50) return setPath(undefined);\r\n          path.closePath();\r\n          path.simplify();\r\n          moveDash(path);\r\n          items = checkPathSelection(path, group);\r\n        } else {\r\n          if (!rect || rect.length < 50) return setRect(undefined);\r\n          rect.selected = true;\r\n          moveDash(rect);\r\n          items = checkRectSelection(rect, group);\r\n        }\r\n        setSelectedIDs(items.map((item) => item.name));\r\n        setSelected(true);\r\n      },\r\n      selected() {\r\n        updateMutation();\r\n      },\r\n      text: null,\r\n    }[paperMode];\r\n\r\n    const handlePaper = () => {\r\n      if (readonly) return;\r\n\r\n      const activate =\r\n        (handler: PaperHandler): PaperHandler =>\r\n        (e) => {\r\n          scope.current.activate();\r\n          if (handler) return handler(e);\r\n        };\r\n\r\n      scope.current.view.onMouseDown = activate(handleDown);\r\n      scope.current.view.onMouseDrag = activate(handleDrag);\r\n      scope.current.view.onMouseUp = activate(handleUp);\r\n    };\r\n    useEffect(handlePaper);\r\n\r\n    const updateMutation = () => {\r\n      if (!selectedItems?.length) return;\r\n      const mutations = selectedItems.map(\r\n        (p) => [p.name, p.exportJSON()] as Mutation\r\n      );\r\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\r\n    };\r\n\r\n    const deleteSelected = () => {\r\n      if (!selectedIDs.length) return;\r\n      onChange((prev) => DrawState.eraseStrokes(prev, selectedIDs));\r\n      setSelectedIDs([]);\r\n      resetSelect();\r\n    };\r\n\r\n    const rotateSelected = (angle: number, last = false) => {\r\n      let aniCount = last ? 10 : 1;\r\n      const dAngle = angle / aniCount;\r\n      const center = (rect || path)?.position;\r\n      const rotate = () => {\r\n        selectedItems.forEach((item) => item.rotate(dAngle, center));\r\n        rect?.rotate(dAngle, center);\r\n        path?.rotate(dAngle, center);\r\n        if (--aniCount > 0) requestAnimationFrame(rotate);\r\n        else last && updateMutation();\r\n      };\r\n      rotate();\r\n    };\r\n\r\n    const mutateStyle = (updated: Partial<DrawCtrl>) => {\r\n      scope.current.activate();\r\n      updateGroupStyle(selectedItems, updated);\r\n      updateMutation();\r\n    };\r\n\r\n    const duplicateSelected = () => {\r\n      scope.current.activate();\r\n      const size = (rect || path)?.bounds.size;\r\n      if (!size) return;\r\n      const { width, height } = size;\r\n      const transP = new Point(width, height).divide(10);\r\n      const newSG = new Group(selectedItems).clone({ insert: false });\r\n      newSG.translate(transP);\r\n      rect?.translate(transP);\r\n      path?.translate(transP);\r\n\r\n      const mutations = newSG.children.map(\r\n        (item) => [getUid(), item.exportJSON()] as Mutation\r\n      );\r\n      onChange((prev) => DrawState.mutateStrokes(prev, mutations));\r\n      setSelectedIDs(mutations.map((m) => m[0]));\r\n    };\r\n\r\n    const rasterize = () =>\r\n      new Group(selectedItems).rasterize({ insert: false }).toDataURL();\r\n\r\n    const [pointText, setPointText] = usePaperItem<paper.PointText>();\r\n    const cancelText = useCallback(\r\n      () => setPointText(undefined),\r\n      [setPointText]\r\n    );\r\n\r\n    useEffect(() => {\r\n      if (mode === \"text\") return cancelText;\r\n    }, [mode, cancelText]);\r\n\r\n    const submitText = (text: string, fontSize: number, color = \"#000\") => {\r\n      if (!pointText) return;\r\n      pointText.content = text;\r\n      pointText.fontSize = fontSize * 10;\r\n      pointText.fillColor = new Color(color);\r\n      const pathData = pointText.exportJSON();\r\n      onChange((prev) => DrawState.addStroke(prev, pathData));\r\n      cancelText();\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      deleteSelected,\r\n      duplicateSelected,\r\n      cancelText,\r\n      rotateSelected,\r\n      submitText,\r\n      mutateStyle,\r\n      rasterize,\r\n    }));\r\n\r\n    useEffect(() => {\r\n      if (!setActiveTool) return;\r\n      if (paperMode === \"selected\") {\r\n        setActiveTool(\"select\");\r\n      } else if (paperMode === \"text\") {\r\n        setActiveTool(pointText ? \"text\" : \"\");\r\n      } else {\r\n        setActiveTool(\"\");\r\n      }\r\n    }, [paperMode, pointText, setActiveTool]);\r\n\r\n    usePreventGesture();\r\n    usePinch(\r\n      ({ memo, offset: [scale], first, last, origin }) => {\r\n        const { view } = scope.current;\r\n        scope.current.activate();\r\n\r\n        let lastScale, lastOX, lastOY, elX, elY: number;\r\n        if (first || !memo) {\r\n          if (!canvasEl.current) return;\r\n          const { x, y } = canvasEl.current.getBoundingClientRect();\r\n          lastScale = 1;\r\n          [lastOX, lastOY] = [origin[0] - x, origin[1] - y];\r\n          [elX, elY] = [x, y];\r\n        } else {\r\n          [lastScale, [lastOX, lastOY], [elX, elY]] = memo;\r\n        }\r\n\r\n        const [oX, oY] = [origin[0] - elX, origin[1] - elY];\r\n        const originViewP = new Point(oX, oY);\r\n        const originProjP = view.viewToProject(originViewP);\r\n\r\n        if (Math.abs(1 - scale) < 0.05) scale = 1;\r\n        let dScale = first ? 1 : scale / lastScale;\r\n        let aniCount = last ? 10 : 1;\r\n        dScale = Math.pow(dScale, 1 / aniCount);\r\n        const scaleView = () => {\r\n          view.scale(dScale, originProjP);\r\n          if (--aniCount > 0) requestAnimationFrame(scaleView);\r\n          else if (last) putCenterBack(view, new Size(width, height));\r\n        };\r\n        scaleView();\r\n\r\n        const [dX, dY] = [oX - lastOX, oY - lastOY];\r\n        const pr = window.devicePixelRatio;\r\n        const transP = new Point(dX, dY).multiply(pr / scale);\r\n        view.translate(transP);\r\n\r\n        if (!last) return [scale, [oX, oY], [elX, elY]];\r\n      },\r\n      {\r\n        scaleBounds: { max: 10, min: 0.3 },\r\n        rubberband: 0.5,\r\n        target: canvasEl,\r\n      }\r\n    );\r\n\r\n    const touchHandler = usePreventTouch(finger);\r\n    return (\r\n      <div className=\"draw-wrapper\">\r\n        <canvas ref={canvasEl} className=\"draw-canvas\" {...touchHandler} />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nDraw.displayName = \"Draw\";\r\nexport default React.memo(Draw);\r\n\r\nfunction usePaperItem<T extends paper.Item>() {\r\n  const stateArray = useState<T | undefined>();\r\n  const [item] = stateArray;\r\n  useDebugValue(item);\r\n  useEffect(() => () => void item?.remove(), [item]);\r\n  return stateArray;\r\n}\r\n\r\nconst paintStroke = (\r\n  stroke: Stroke,\r\n  scope: paper.PaperScope,\r\n  erased = false\r\n) => {\r\n  let { pathData, uid } = stroke;\r\n  try {\r\n    scope.activate();\r\n    const item = scope.project.activeLayer.importJSON(pathData);\r\n    if (!item) return;\r\n    item.name = uid;\r\n    if (erased) item.opacity = 0.5;\r\n    return item;\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n\r\nconst getCheckPoints = (() => {\r\n  const cache = new WeakMap<paper.Segment, paper.Point[]>();\r\n  return (segment: paper.Segment, strokeWidth: number) => {\r\n    const cached = cache.get(segment);\r\n    if (cached) return cached;\r\n\r\n    const { point } = segment;\r\n    const prevPoint = segment.previous?.point;\r\n    if (!prevPoint) return [];\r\n    const delta = point.subtract(prevPoint);\r\n    const times = (delta.length / strokeWidth) * 2;\r\n    const checkPoints: paper.Point[] = [];\r\n    for (let i = 0; i < times; i += 1) {\r\n      checkPoints.push(point.subtract(delta.multiply(i / times)));\r\n    }\r\n    cache.set(segment, checkPoints);\r\n    return checkPoints;\r\n  };\r\n})();\r\n\r\nconst checkErase = (item: paper.Item, eraserPath: paper.Path) => {\r\n  const curveBound = eraserPath.lastSegment.curve?.strokeBounds;\r\n  if (!(item instanceof paper.Path)) return false;\r\n  if (!curveBound?.intersects(item.strokeBounds)) return false;\r\n\r\n  if (eraserPath.intersects(item)) return true;\r\n\r\n  const { strokeWidth, lastSegment } = eraserPath;\r\n  const checkPoints = getCheckPoints(lastSegment, strokeWidth);\r\n  return checkPoints.some((cPoint) => {\r\n    const d = item.getNearestPoint(cPoint)?.getDistance(cPoint);\r\n    return d && d * 2 < item.strokeWidth + strokeWidth;\r\n  });\r\n};\r\n\r\nconst paintBackground = (\r\n  scope: paper.PaperScope,\r\n  width: number,\r\n  height: number\r\n) => {\r\n  scope.activate();\r\n  const bgRect = new Rectangle(new Point(0, 0), new Point(width, height));\r\n  bgRect.fillColor = new Color(\"#fff\");\r\n  scope.project.layers[0].addChild(bgRect);\r\n};\r\n\r\nconst startSelectRect = (point: paper.Point) => {\r\n  const rect = new Path.Rectangle(point, new Size(0, 0));\r\n  rect.strokeColor = new Color(\"#1890ff\");\r\n  rect.strokeWidth = 5;\r\n  return rect;\r\n};\r\n\r\nconst startStroke = (color: string, lineWidth: number, highlight = false) => {\r\n  const path = new Path();\r\n  const strokeColor = new Color(color);\r\n  if (highlight) {\r\n    strokeColor.alpha = 0.5;\r\n    path.blendMode = \"multiply\";\r\n  }\r\n  path.strokeColor = strokeColor;\r\n  path.strokeWidth = lineWidth;\r\n  path.strokeJoin = \"round\";\r\n  path.strokeCap = \"round\";\r\n  return path;\r\n};\r\n\r\nconst moveDash = (item: paper.Item) => {\r\n  if (item.strokeColor) item.strokeColor.alpha = 0.5;\r\n  item.dashOffset = 0;\r\n  item.dashArray = [30, 20];\r\n  item.onFrame = () => (item.dashOffset += 3);\r\n};\r\n\r\nconst getCenterTranslate = (view: paper.View, projSize: paper.Size) => {\r\n  const { x, y } = view.center;\r\n  const { width: viewW, height: viewH } = view.size;\r\n  const { width: projW, height: projH } = projSize;\r\n\r\n  const [minX, minY] = [Math.min(viewW, projW) / 2, Math.min(viewH, projH) / 2];\r\n  const [maxX, maxY] = [projW - minX, projH - minY];\r\n\r\n  const deltaX = x < minX ? minX - x : x > maxX ? maxX - x : 0;\r\n  const deltaY = y < minY ? minY - y : y > maxY ? maxY - y : 0;\r\n\r\n  return [deltaX, deltaY];\r\n};\r\n\r\nconst putCenterBack = (view: paper.View, projSize: paper.Size) => {\r\n  const [deltaX, deltaY] = getCenterTranslate(view, projSize);\r\n  let aniCount = 10;\r\n  const dP = new Point(deltaX, deltaY).divide(-aniCount);\r\n  const move = () => {\r\n    view.translate(dP);\r\n    if (--aniCount > 0) requestAnimationFrame(move);\r\n  };\r\n  move();\r\n};\r\n\r\nconst checkRectSelection = (rect: paper.Path.Rectangle, items: paper.Item[]) =>\r\n  items.filter((item) =>\r\n    item instanceof paper.Path\r\n      ? item.intersects(rect) || item.isInside(rect.bounds)\r\n      : item.bounds.intersects(rect.bounds)\r\n  );\r\n\r\nconst checkPathSelection = (selection: paper.Path, items: paper.Item[]) => {\r\n  const isInside = (p: paper.Path) => {\r\n    const res = p.subtract(selection, { insert: false, trace: false });\r\n    res.remove();\r\n    return res.isEmpty();\r\n  };\r\n\r\n  return items.filter((item) => {\r\n    if (!item.bounds.intersects(selection.bounds)) return false;\r\n    let checkedP: paper.Path;\r\n    if (item instanceof paper.Path) {\r\n      checkedP = item;\r\n    } else {\r\n      checkedP = new Path.Rectangle(item.bounds);\r\n      checkedP.remove();\r\n    }\r\n    return checkedP.intersects(selection) || isInside(checkedP);\r\n  });\r\n};\r\n\r\nconst updateGroupStyle = (items: paper.Item[], updated: Partial<DrawCtrl>) => {\r\n  const { lineWidth, color, highlight } = updated;\r\n  items.forEach((item) => {\r\n    if (item instanceof paper.PointText) {\r\n      if (color) {\r\n        const newColor = new Color(color);\r\n        item.fillColor = newColor;\r\n      }\r\n    }\r\n\r\n    if (!(item instanceof paper.Path)) return;\r\n\r\n    if (color) {\r\n      const newColor = new Color(color);\r\n      if (item.blendMode === \"multiply\") newColor.alpha = 0.5;\r\n      item.strokeColor = newColor;\r\n    }\r\n\r\n    if (lineWidth) item.strokeWidth = lineWidth;\r\n\r\n    if (!item.strokeColor || highlight === undefined) return;\r\n    item.strokeColor.alpha = highlight ? 0.5 : 1;\r\n    item.blendMode = highlight ? \"multiply\" : \"normal\";\r\n  });\r\n};\r\n","import {\r\n  FC,\r\n  useRef,\r\n  useMemo,\r\n  useState,\r\n  useEffect,\r\n  useContext,\r\n  useCallback,\r\n  createContext,\r\n} from \"react\";\r\nimport {\r\n  DrawCtrl,\r\n  getDrawCtrl,\r\n  defaultDrawCtrl,\r\n} from \"../../lib/draw/drawCtrl\";\r\nimport {\r\n  NoteInfo,\r\n  NotePage,\r\n  createPage,\r\n  defaultNotePage,\r\n} from \"../../lib/note/note\";\r\nimport { useMemoizedFn as useEvent, useSafeState } from \"ahooks\";\r\nimport { NewPageInfo, ReorderInfo, SyncInfo } from \"../../lib/network/io\";\r\nimport { SetOperation, StateSet } from \"../../lib/draw/StateSet\";\r\nimport { loadNote, editNoteData } from \"../../lib/note/archive\";\r\nimport { AddPageButton, showPageDelMsg } from \"./ReaderUtils\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { DrawState } from \"../../lib/draw/DrawState\";\r\nimport { TeamState } from \"../../lib/draw/TeamState\";\r\nimport { SelectTool, TextTool } from \"./tools/DrawTools\";\r\nimport { getLargestKey, insertAfter } from \"../../lib/array\";\r\nimport { Setter } from \"../../lib/hooks\";\r\nimport { debounce, last, once, range } from \"lodash-es\";\r\nimport { Map } from \"immutable\";\r\nimport ReaderHeader from \"./header/Header\";\r\nimport { TeamCtx } from \"./Team\";\r\nimport Draw, { ActiveToolKey, DrawRefType } from \"../draw/Draw\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { message } from \"antd\";\r\nimport \"./reader.sass\";\r\n\r\nexport const ReaderStateCtx = createContext({\r\n  noteID: \"\",\r\n  noteInfo: undefined as NoteInfo | undefined,\r\n  stateSet: undefined as StateSet | undefined,\r\n  teamState: undefined as TeamState | undefined,\r\n  pageRec: undefined as Map<string, NotePage> | undefined,\r\n  pageOrder: undefined as string[] | undefined,\r\n  saved: true,\r\n  currPageID: \"\",\r\n  drawCtrl: defaultDrawCtrl,\r\n  forceLight: false,\r\n});\r\n\r\nexport const ReaderMethodCtx = createContext({\r\n  scrollPage: (pageID: string) => {},\r\n  switchPageMarked: (pageID: string) => {},\r\n  updateStateSet: (cb: (prevSS: StateSet) => StateSet) => {},\r\n  addPage: (prevPageID: string, copy?: boolean) => {},\r\n  addFinalPage: () => {},\r\n  deletePage: (pageID: string) => {},\r\n  saveReorder: async (order: string[], push: boolean) => {},\r\n  setInviewRatios: (() => {}) as Setter<Map<string, number>>,\r\n  setDrawCtrl: (() => {}) as Setter<DrawCtrl>,\r\n  instantSave: (() => {}) as () => Promise<void> | undefined,\r\n  handleUndo: () => {},\r\n  handleRedo: () => {},\r\n  setForceLight: (() => {}) as Setter<boolean>,\r\n});\r\n\r\nexport default function Reader() {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const nav = useNavigate();\r\n\r\n  const [pageRec, setPageRec] = useState<Map<string, NotePage>>();\r\n  const [noteInfo, setNoteInfo] = useState<NoteInfo>();\r\n  const [stateSet, setStateSet] = useState<StateSet>();\r\n  const [drawCtrl, setDrawCtrl] = useState(defaultDrawCtrl);\r\n  const [pageOrder, setPageOrder] = useState<string[]>();\r\n  const [saved, setSaved] = useSafeState(true);\r\n  const [forceLight, setForceLight] = useState(false);\r\n\r\n  const refRec = useRef<Record<string, HTMLElement>>({});\r\n\r\n  const { io, teamOn, teamState, addTeamStatePage } = useContext(TeamCtx);\r\n\r\n  useEffect(() => {\r\n    const loadNotePages = async () => {\r\n      const storedNote = await loadNote(noteID);\r\n      if (!storedNote) {\r\n        message.error(\"Note not found\");\r\n        return nav(\"/\");\r\n      }\r\n      const { pageRec, pdf, pageOrder, ...noteInfo } = storedNote;\r\n      setPageRec(Map(pageRec));\r\n      setPageOrder(pageOrder);\r\n      setNoteInfo(noteInfo);\r\n      setStateSet(StateSet.createFromPages(pageRec));\r\n      setDrawCtrl(await getDrawCtrl());\r\n    };\r\n    loadNotePages();\r\n  }, [nav, noteID, teamOn]);\r\n\r\n  useEffect(() => {\r\n    if (!noteInfo) return;\r\n    document.title = noteInfo.name + \" - Multibility\";\r\n  }, [noteInfo]);\r\n\r\n  const saver = useEvent(async () => {\r\n    const pr = pageRec?.toObject();\r\n    const canvas = document.querySelector(\"canvas\");\r\n    const thumbnail = canvas?.toDataURL(\"image/jpeg\", 0.1);\r\n    await editNoteData(noteID, { pageRec: pr, thumbnail });\r\n    setSaved(true);\r\n  });\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const debouncedSave = useCallback(debounce(saver, 2000), [saver]);\r\n  const instantSave = debouncedSave.flush;\r\n\r\n  const savePageRec = (pageID: string, cb: (prev: NotePage) => NotePage) => {\r\n    setPageRec((prev) => prev?.update(pageID, defaultNotePage, cb));\r\n    setSaved(false);\r\n    debouncedSave();\r\n  };\r\n\r\n  const saveReorder = async (pageOrder: string[], push = false) => {\r\n    setPageOrder(pageOrder);\r\n    await editNoteData(noteID, { pageOrder });\r\n    await instantSave();\r\n    push && pushReorder(pageOrder);\r\n  };\r\n\r\n  const pushReorder = (pageOrder: string[]) =>\r\n    io?.emit(\"reorder\", { pageOrder });\r\n\r\n  const handleReorder = useEvent(\r\n    ({ deleted, pageOrder, prevOrder }: ReorderInfo) => {\r\n      saveReorder(pageOrder);\r\n      if (!deleted) return;\r\n      showPageDelMsg(() => saveReorder(prevOrder, true));\r\n    }\r\n  );\r\n\r\n  const handleNewPage = useEvent(\r\n    ({ pageOrder, pageID, newPage }: NewPageInfo) => {\r\n      saveReorder(pageOrder);\r\n      savePageRec(pageID, () => newPage);\r\n      setStateSet((prev) => prev?.addState(pageID, newPage));\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    io?.on(\"reorder\", handleReorder);\r\n    io?.on(\"newPage\", handleNewPage);\r\n    return () => void io?.removeAllListeners();\r\n  }, [io, handleReorder, handleNewPage]);\r\n\r\n  const pushOperation = (operation: SetOperation) => {\r\n    const handleSync = ({ pageID, stroke }: SyncInfo) =>\r\n      setStateSet((prev) => prev?.syncStrokeTime(pageID, stroke));\r\n\r\n    io?.emit(\"push\", { operation }, handleSync);\r\n  };\r\n\r\n  const pushNewPage = (\r\n    pageOrder: string[],\r\n    pageID: string,\r\n    newPage: NotePage\r\n  ) => {\r\n    const { image, marked, ...newTeamPage } = newPage;\r\n    io?.emit(\"newPage\", { pageOrder, pageID, newPage: newTeamPage });\r\n    addTeamStatePage(pageID, newPage);\r\n  };\r\n\r\n  const updatePageRec = (pageID: string, ds: DrawState) => {\r\n    const state = DrawState.flaten(ds);\r\n    savePageRec(pageID, (prev) => ({ ...prev, state }));\r\n  };\r\n\r\n  const updateStateSet = (cb: (prevSS: StateSet) => StateSet) => {\r\n    if (!stateSet) return;\r\n    const newSS = cb(stateSet);\r\n    setStateSet(newSS);\r\n    const lastDS = newSS.getLastDS();\r\n    const lastOp = newSS.lastOp;\r\n    if (!lastDS || !lastOp) return;\r\n    updatePageRec(...lastDS);\r\n    pushOperation(lastOp);\r\n  };\r\n\r\n  const switchPageMarked = (pageID: string) =>\r\n    savePageRec(pageID, (prev) => ({ ...prev, marked: !prev.marked }));\r\n\r\n  const scrollPage = (pageID: string) =>\r\n    refRec.current[pageID]?.scrollIntoView();\r\n\r\n  const [inviewRatios, setInviewRatios] = useState(Map<string, number>());\r\n  const currPageID = useMemo(() => getLargestKey(inviewRatios), [inviewRatios]);\r\n\r\n  const addPage = (prevPageID: string, copy = false) => {\r\n    if (!pageOrder) return;\r\n    const prevPage = copy ? pageRec?.get(prevPageID) : undefined;\r\n    const [pageID, newPage] = createPage(prevPage);\r\n    const newOrder = insertAfter(pageOrder, prevPageID, pageID);\r\n    pushNewPage(newOrder, pageID, newPage);\r\n    saveReorder(newOrder);\r\n    savePageRec(pageID, () => newPage);\r\n    setStateSet((prev) => prev?.addState(pageID, newPage));\r\n  };\r\n\r\n  const addFinalPage = () => {\r\n    const lastPageID = last(pageOrder);\r\n    lastPageID && addPage(lastPageID);\r\n  };\r\n\r\n  const deletePage = (pageID: string) => {\r\n    const newOrder = pageOrder?.filter((id) => id !== pageID);\r\n    newOrder?.length && saveReorder(newOrder, true);\r\n  };\r\n\r\n  const handleUndo = () => updateStateSet((prev) => prev.undo());\r\n  const handleRedo = () => updateStateSet((prev) => prev.redo());\r\n  const renderResult = (\r\n    <div className=\"reader container\" data-force-light={forceLight}>\r\n      <ReaderHeader />\r\n      <main>\r\n        {pageOrder?.map((uid) => (\r\n          <section\r\n            key={uid}\r\n            className=\"note-page\"\r\n            ref={(e) => e && (refRec.current[uid] = e)}\r\n          >\r\n            <PageContainer uid={uid} />\r\n          </section>\r\n        ))}\r\n        <AddPageButton />\r\n      </main>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <ReaderStateCtx.Provider\r\n      value={{\r\n        saved,\r\n        noteID,\r\n        pageRec,\r\n        drawCtrl,\r\n        noteInfo,\r\n        stateSet,\r\n        teamState,\r\n        pageOrder,\r\n        currPageID,\r\n        forceLight,\r\n      }}\r\n    >\r\n      <ReaderMethodCtx.Provider\r\n        value={{\r\n          addPage,\r\n          scrollPage,\r\n          deletePage,\r\n          setDrawCtrl,\r\n          saveReorder,\r\n          instantSave,\r\n          addFinalPage,\r\n          handleRedo,\r\n          handleUndo,\r\n          updateStateSet,\r\n          setInviewRatios,\r\n          switchPageMarked,\r\n          setForceLight,\r\n        }}\r\n      >\r\n        {renderResult}\r\n      </ReaderMethodCtx.Provider>\r\n    </ReaderStateCtx.Provider>\r\n  );\r\n}\r\n\r\nconst PageContainer: FC<{ uid: string }> = ({ uid }) => {\r\n  const { pageRec, stateSet, teamState } = useContext(ReaderStateCtx);\r\n  const { updateStateSet } = useContext(ReaderMethodCtx);\r\n\r\n  const page = pageRec?.get(uid);\r\n  const drawState = stateSet?.getOneState(uid);\r\n  const teamStateMap = teamState?.getOnePageStateMap(uid);\r\n  const updateState = (ds: DrawState) => {\r\n    updateStateSet((prev) => prev.setState(uid, ds));\r\n  };\r\n\r\n  if (!page || !drawState) return null;\r\n  return (\r\n    <PageWrapper\r\n      drawState={drawState}\r\n      teamStateMap={teamStateMap}\r\n      updateState={updateState}\r\n      pdfIndex={page.pdfIndex}\r\n      uid={uid}\r\n    />\r\n  );\r\n};\r\n\r\nexport const PageWrapper = ({\r\n  thumbnail,\r\n  drawState,\r\n  teamStateMap,\r\n  updateState,\r\n  pdfIndex,\r\n  preview = false,\r\n  uid,\r\n}: {\r\n  uid: string;\r\n  drawState: DrawState;\r\n  teamStateMap?: Map<string, DrawState>;\r\n  thumbnail?: string;\r\n  pdfIndex?: number;\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n}) => {\r\n  const { setInviewRatios } = useContext(ReaderMethodCtx);\r\n  const { noteID } = useContext(ReaderStateCtx);\r\n  const [fullImg, setFullImg] = useState<string>();\r\n  const [ref, visible, entry] = useInView({ threshold: range(0, 1.1, 0.1) });\r\n\r\n  useEffect(() => {\r\n    if (preview) return;\r\n    if (!entry || !visible) {\r\n      setInviewRatios((prev) => prev.delete(uid));\r\n    } else {\r\n      setInviewRatios((prev) => prev.set(uid, entry.intersectionRatio));\r\n    }\r\n  }, [visible, entry, uid, preview, setInviewRatios]);\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const loadImage = useCallback(\r\n    once(async () => {\r\n      if (!pdfIndex) return;\r\n      const { getOnePageImage } = await import(\"../../lib/note/pdfImage\");\r\n      setFullImg(await getOnePageImage(noteID, pdfIndex));\r\n    }),\r\n    [pdfIndex, noteID]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!preview && visible) loadImage();\r\n  }, [visible, preview, loadImage]);\r\n\r\n  const { ignores } = useContext(TeamCtx);\r\n  const otherStates = useMemo(\r\n    () => teamStateMap?.deleteAll(ignores).toList().toArray(),\r\n    [teamStateMap, ignores]\r\n  );\r\n\r\n  const imageLoaded = fullImg || !pdfIndex;\r\n  const drawShow = visible && imageLoaded;\r\n  const maskShow = Boolean(preview || !drawShow);\r\n\r\n  const { height, width } = drawState;\r\n  const ratio = height / width;\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      className=\"page-wrapper\"\r\n      style={{ paddingTop: `${ratio * 100}%` }}\r\n    >\r\n      {drawShow && (\r\n        <DrawWrapper\r\n          drawState={drawState}\r\n          otherStates={otherStates}\r\n          updateState={updateState}\r\n          imgSrc={fullImg || thumbnail}\r\n          preview={preview}\r\n        />\r\n      )}\r\n      {maskShow && <div className=\"mask\" />}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst DrawWrapper = ({\r\n  drawState,\r\n  updateState,\r\n  otherStates,\r\n  preview = false,\r\n  imgSrc,\r\n}: {\r\n  drawState: DrawState;\r\n  otherStates?: DrawState[];\r\n  updateState?: (ds: DrawState) => void;\r\n  preview?: boolean;\r\n  imgSrc?: string;\r\n}) => {\r\n  const { drawCtrl } = useContext(ReaderStateCtx);\r\n  const [activeTool, setActiveTool] = useState<ActiveToolKey>(\"\");\r\n  const drawRef = useRef<DrawRefType>(null);\r\n\r\n  const handleChange = useEvent(\r\n    (arg: ((s: DrawState) => DrawState) | DrawState) => {\r\n      if (!updateState) return;\r\n      const newDS = arg instanceof DrawState ? arg : arg(drawState);\r\n      updateState(newDS);\r\n    }\r\n  );\r\n\r\n  return preview ? (\r\n    <Draw\r\n      drawState={drawState}\r\n      otherStates={otherStates}\r\n      imgSrc={imgSrc}\r\n      readonly\r\n      preview\r\n    />\r\n  ) : (\r\n    <>\r\n      <Draw\r\n        drawState={drawState}\r\n        otherStates={otherStates}\r\n        onChange={handleChange}\r\n        imgSrc={imgSrc}\r\n        drawCtrl={drawCtrl}\r\n        ref={drawRef}\r\n        setActiveTool={setActiveTool}\r\n      />\r\n      <SelectTool drawRef={drawRef} visible={activeTool === \"select\"} />\r\n      <TextTool drawRef={drawRef} visible={activeTool === \"text\"} />\r\n    </>\r\n  );\r\n};\r\nDrawWrapper.displayName = \"DrawWrapper\";\r\n","import { io } from \"socket.io-client\";\r\nimport { Stroke } from \"../draw/DrawState\";\r\nimport { NotePage } from \"../note/note\";\r\nimport { getUserID, getUserName } from \"../user\";\r\nimport { BASE_URL } from \"./http\";\r\n\r\nexport const IoFactory = (noteID: string) => () =>\r\n  io(BASE_URL, {\r\n    query: {\r\n      userID: getUserID(),\r\n      userName: getUserName(),\r\n      noteID,\r\n    },\r\n  });\r\n\r\nexport interface ReorderInfo {\r\n  pageOrder: string[];\r\n  prevOrder: string[];\r\n  deleted: boolean;\r\n}\r\n\r\nexport interface NewPageInfo {\r\n  pageOrder: string[];\r\n  pageID: string;\r\n  newPage: NotePage;\r\n}\r\n\r\nexport interface SyncInfo {\r\n  stroke: Stroke;\r\n  pageID: string;\r\n}\r\n","import { NotePage, TeamPage, TeamPageInfo } from \"../note/note\";\nimport { DrawState, WIDTH } from \"./DrawState\";\nimport { SetOperation } from \"./StateSet\";\nimport { Map, Record } from \"immutable\";\n\ninterface TeamStateRecordType {\n  pageStates: Map<string, Map<string, DrawState>>;\n  pageInfos: Map<string, TeamPageInfo>;\n}\n\nconst defaultRecord: Readonly<TeamStateRecordType> = {\n  pageStates: Map(),\n  pageInfos: Map(),\n};\n\ntype TeamStateRecord = Record<TeamStateRecordType>;\nconst defaultFactory = Record(defaultRecord);\n\nexport class TeamState {\n  constructor(private immutable: TeamStateRecord) {}\n\n  getImmutable() {\n    return this.immutable;\n  }\n\n  getPageStates() {\n    return this.getImmutable().get(\"pageStates\");\n  }\n\n  getPageInfos() {\n    return this.getImmutable().get(\"pageInfos\");\n  }\n\n  getOneState(pageID: string, userID: string) {\n    return this.getPageStates().get(pageID)?.get(userID);\n  }\n\n  getOnePageStateMap(pageID: string) {\n    return this.getPageStates().get(pageID);\n  }\n\n  getPageValidUsers(pageID: string) {\n    const map = this.getOnePageStateMap(pageID);\n    if (!map) return [];\n    return Array.from(map?.filter((ds) => !ds.isEmpty()).keys());\n  }\n\n  getPageRatio(pageID: string) {\n    return this.getPageInfos().get(pageID)?.ratio;\n  }\n\n  includesPage(pageID: string) {\n    return this.getPageStates().has(pageID);\n  }\n\n  setState(pageID: string, userID: string, drawState: DrawState) {\n    const pageMap = this.getPageStates().get(pageID);\n    if (!pageMap) return this;\n    return new TeamState(\n      this.getImmutable().update(\"pageStates\", (m) =>\n        m.set(pageID, pageMap.set(userID, drawState))\n      )\n    );\n  }\n\n  static createFromTeamPages(\n    teamPages: globalThis.Record<string, TeamPage>,\n    width = WIDTH\n  ) {\n    let record = defaultFactory();\n    Object.entries(teamPages).forEach(([pageID, teamPage]) => {\n      const { states, ratio } = teamPage;\n      const pageMap = Map(\n        Object.entries(states).map(([userID, flatState]) => [\n          userID,\n          DrawState.loadFromFlat(flatState, width, width * ratio),\n        ])\n      );\n      record = record\n        .update(\"pageStates\", (m) => m.set(pageID, pageMap))\n        .update(\"pageInfos\", (m) => m.set(pageID, { ratio }));\n    });\n    return new TeamState(record);\n  }\n\n  addPage(pageID: string, notePage: NotePage) {\n    const { ratio } = notePage;\n    return new TeamState(\n      this.getImmutable()\n        .update(\"pageStates\", (m) => m.set(pageID, Map()))\n        .update(\"pageInfos\", (m) => m.set(pageID, { ratio }))\n    );\n  }\n\n  pushOperation(setOp: SetOperation, userID: string, width = WIDTH) {\n    const { pageID, ...op } = setOp;\n    const ratio = this.getPageRatio(pageID);\n    if (!this.includesPage(pageID) || !ratio) return this;\n    const prevDs =\n      this.getOneState(pageID, userID) ||\n      DrawState.createEmpty(width, width * ratio);\n\n    const ds = DrawState.pushOperation(prevDs, op);\n    return this.setState(pageID, userID, ds);\n  }\n\n  resetUser(userID: string, pageRec: globalThis.Record<string, NotePage>) {\n    let newTS: TeamState = this;\n    for (let [pageID, { state, ratio }] of Object.entries(pageRec)) {\n      const prevDS = newTS.getOneState(pageID, userID);\n      if (!prevDS) continue;\n      const { width } = prevDS;\n      newTS = newTS.setState(\n        pageID,\n        userID,\n        DrawState.loadFromFlat(state, width, width * ratio)\n      );\n    }\n    return newTS;\n  }\n}\n","import { useState, useEffect, createContext, useCallback } from \"react\";\r\nimport {\r\n  getTeamNoteState,\r\n  loadTeamNoteInfo,\r\n  updatePages,\r\n} from \"../../lib/network/http\";\r\nimport { LoginOutlined, LogoutOutlined } from \"@ant-design/icons\";\r\nimport { IoFactory, NewPageInfo } from \"../../lib/network/io\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { TeamState } from \"../../lib/draw/TeamState\";\r\nimport { getUserID, UserInfo } from \"../../lib/user\";\r\nimport { NotePage } from \"../../lib/note/note\";\r\nimport { Socket } from \"socket.io-client\";\r\nimport { Setter } from \"../../lib/hooks\";\r\nimport { Loading } from \"../ui/Loading\";\r\nimport { message } from \"antd\";\r\nimport { Set } from \"immutable\";\r\nimport Reader from \"./Reader\";\r\n\r\nexport const TeamCtx = createContext({\r\n  io: undefined as Socket | undefined,\r\n  code: 0,\r\n  teamOn: false,\r\n  connected: false,\r\n  ignores: Set<string>(),\r\n  userRec: {} as Record<string, UserInfo>,\r\n  teamState: undefined as TeamState | undefined,\r\n  resetIO: () => {},\r\n  loadInfo: async () => false,\r\n  loadState: async () => false,\r\n  setIgnores: (() => {}) as Setter<Set<string>>,\r\n  addTeamStatePage: (pageID: string, newPage: NotePage) => {},\r\n});\r\n\r\nexport default function Team() {\r\n  const noteID = useParams().noteID ?? \"\";\r\n  const [teamState, setTeamState] = useState<TeamState>();\r\n  const [code, setCode] = useState(-2);\r\n  const [userRec, setUserRec] = useState<Record<string, UserInfo>>({});\r\n  const [ignores, setIgnores] = useState(Set<string>());\r\n  const [io, setIO] = useState(IoFactory(noteID));\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [connected, setConnected] = useState(false);\r\n  const nav = useNavigate();\r\n\r\n  const loadInfo = useCallback(async () => {\r\n    const info = await loadTeamNoteInfo(noteID);\r\n    if (!info) {\r\n      message.error(\"Failed loading the team note info\");\r\n      return false;\r\n    }\r\n    setCode(info.code);\r\n    return true;\r\n  }, [noteID]);\r\n\r\n  const loadState = useCallback(async () => {\r\n    const teamNote = await getTeamNoteState(noteID);\r\n    if (!teamNote) {\r\n      message.error(\"Failed loading the team note state\");\r\n      return false;\r\n    }\r\n    setTeamState(TeamState.createFromTeamPages(teamNote));\r\n    return true;\r\n  }, [noteID]);\r\n\r\n  const updateSelfState = useCallback(() => {\r\n    updatePages(noteID);\r\n  }, [noteID]);\r\n\r\n  useEffect(() => {\r\n    const roomInit = async () => {\r\n      const infoLoaded = await loadInfo();\r\n      const stateLoaded = await loadState();\r\n      if (!infoLoaded || !stateLoaded) return nav(\"/\");\r\n      setLoaded(true);\r\n      updateSelfState();\r\n    };\r\n    roomInit();\r\n    return updateSelfState;\r\n  }, [loadInfo, loadState, nav, updateSelfState]);\r\n\r\n  useEffect(() => {\r\n    io.on(\"push\", ({ operation, userID }) => {\r\n      setTeamState((prev) => prev?.pushOperation(operation, userID));\r\n    });\r\n\r\n    io.on(\"join\", ({ joined, members }) => {\r\n      const { userID, userName } = joined;\r\n      setUserRec(members);\r\n      if (userID === getUserID()) return;\r\n      showJoinMsg(userID, userName);\r\n    });\r\n\r\n    io.on(\"leave\", ({ leaved, members }) => {\r\n      const { userID, userName } = leaved;\r\n      setUserRec(members);\r\n      if (userID === getUserID()) return io.emit(\"join\");\r\n      showLeaveMsg(userID, userName);\r\n    });\r\n\r\n    io.on(\"newPage\", (info: NewPageInfo) => {\r\n      const { pageID, newPage } = info;\r\n      setTeamState((prev) => prev?.addPage(pageID, newPage));\r\n    });\r\n\r\n    io.on(\"reset\", ({ userID, pageRec }) => {\r\n      if (userID === getUserID()) return;\r\n      setTeamState((prev) => prev?.resetUser(userID, pageRec));\r\n    });\r\n\r\n    io.on(\"connect_error\", console.error);\r\n    io.on(\"connect\", () => setConnected(true));\r\n    io.on(\"disconnect\", () => setConnected(false));\r\n\r\n    return () => {\r\n      io.removeAllListeners();\r\n      io.close();\r\n    };\r\n  }, [io]);\r\n\r\n  const addTeamStatePage = (pageID: string, newPage: NotePage) => {\r\n    setTeamState((prev) => prev?.addPage(pageID, newPage));\r\n  };\r\n\r\n  const resetIO = () => setIO(IoFactory(noteID));\r\n\r\n  return (\r\n    <Loading loading={!loaded}>\r\n      <TeamCtx.Provider\r\n        value={{\r\n          io,\r\n          code,\r\n          teamOn: true,\r\n          ignores,\r\n          userRec,\r\n          connected,\r\n          teamState,\r\n          resetIO,\r\n          loadInfo,\r\n          loadState,\r\n          setIgnores,\r\n          addTeamStatePage,\r\n        }}\r\n      >\r\n        <Reader />\r\n      </TeamCtx.Provider>\r\n    </Loading>\r\n  );\r\n}\r\n\r\nconst showJoinMsg = (userID: string, userName: string) => {\r\n  message.destroy(userID);\r\n  message.success({\r\n    content: `${userName} joined room`,\r\n    icon: <LoginOutlined />,\r\n    key: userID,\r\n  });\r\n};\r\n\r\nconst showLeaveMsg = (userID: string, userName: string) => {\r\n  message.destroy(userID);\r\n  message.warning({\r\n    content: `${userName} leaved room`,\r\n    icon: <LogoutOutlined />,\r\n    key: userID,\r\n  });\r\n};\r\n"],"names":["defaultWidthList","defaultDrawCtrl","mode","finger","lineWidth","eraserWidth","color","highlight","lasso","widthList","getDrawCtrl","localforage","drawCtrl","defaultRecord","states","Map","editStack","List","undoStack","defaultFactory","Record","StateSet","immutable","lastOp","this","getImmutable","get","pageID","getStates","drawState","prevDS","getOneState","currRecord","update","s","set","l","push","delete","stroke","DrawState","notePage","width","WIDTH","state","ratio","newDS","getEditStack","size","getUndoStack","isUndoable","lastUid","last","lastSetOp","pop","isRedoable","ds","pageRec","map","AddPageButton","addFinalPage","useContext","ReaderMethodCtx","className","type","icon","PlusOutlined","block","onClick","createFromIconfontCN","scriptUrl","PenPanel","updateDrawCtrl","useState","panelBlur","setPanelBlur","WidthSelect","HighlightSwitch","checked","ColorSelect","setColor","c","field","currWidth","chosen","useMemo","Math","max","indexOf","popShow","setPopShow","useEffect","includes","getRealSizeStyle","options","index","value","label","visible","onVisibleChange","v","prev","trigger","placement","destroyTooltipOnHide","content","min","defaultValue","onAfterChange","w","newWL","slice","style","onChange","i","name","e","target","allColors","backgroundColor","borderColor","getOcrWorker","worker","createWorker","logger","console","log","load","loadLanguage","initialize","SelectTool","drawRef","btnProps","shape","currDrawCtrl","setCurrDrawCtrl","rotateEl","useRef","dragged","setDragged","transX","setTransX","gearStyle","transform","useDrag","first","offset","delta","current","rotateSelected","filterTaps","rubberband","bounds","left","right","recoginzing","setRecoginzing","recognizeText","imageData","rasterize","recognize","text","data","Modal","title","TextArea","okText","onOk","copy","error","CSSTransition","timeout","in","unmountOnExit","getPopupContainer","parentElement","updated","mutateStyle","BgColorsOutlined","ref","RotateRightOutlined","CaretLeftOutlined","CaretRightOutlined","CopyOutlined","duplicateSelected","loading","danger","DeleteOutlined","deleteSelected","TextTool","setText","fontSize","setFontSize","colors","forceLight","ReaderStateCtx","fontSizeInput","FontSizeOutlined","fontColorBtn","overlayStyle","FontColorsOutlined","onCancel","cancelText","trim","submitText","bodyStyle","paddingTop","destroyOnClose","autoFocus","insertAfter","list","prevItem","newItem","prevIndex","curr","splice","HeaderMiddle","stateSet","setDrawCtrl","handleUndo","handleRedo","setForceLight","newCtrl","saveDrawCtrl","UndoOutlined","disabled","RedoOutlined","message","key","BulbFilled","BulbOutlined","PenButton","EraserButton","SelectButton","HighlightOutlined","GatewayOutlined","UserAvatar","userID","userRec","TeamCtx","getHashedColor","userInfo","userName","PreviewCtx","React","activeKey","setActiveKey","PageNavContent","pageOrder","currPageID","scrollPage","saveReorder","refRec","scrollIntoView","PreviewTabs","onDragEnd","source","destination","fromIndex","toIndex","newOrder","result","removed","exchange","requestAnimationFrame","droppableId","droppableProps","innerRef","placeholder","uid","PagePreview","pageIndex","teamState","setChosen","page","teamStateMap","getOnePageStateMap","image","marked","isEmpty","every","draggableId","isDragDisabled","draggableProps","dragHandleProps","isDragging","PageWrapper","undefined","thumbnail","preview","PreviewTools","switchPageMarked","ignores","userIDs","getPageValidUsers","filter","has","stopPropagation","PreviewOption","TeamAvatars","maxCount","classNames","maxPopoverPlacement","addPage","deletePage","menu","items","MoreOutlined","TabPane","Tabs","tabBarGutter","centered","tab","PageNav","navOn","setNavOn","ALL","MARKED","WRITTEN","Provider","MenuUnfoldOutlined","MenuFoldOutlined","onClose","closable","zIndex","padding","overflow","headerStyle","textAlign","HeaderRight","teamOn","RoomInfo","JoinRoom","UserCard","renaming","setRenaming","setIgnores","resetIO","online","self","getUserID","ignored","Search","onSearch","saveUserName","enterButton","CheckOutlined","FormOutlined","EyeInvisibleOutlined","EyeOutlined","add","code","connected","loadInfo","loadState","noteInfo","link","window","location","href","share","selfName","userList","selfID","selfInfo","otherUsers","values","Object","onlineNum","length","teamPop","DisconnectOutlined","showIcon","banner","String","plain","ShareAltOutlined","u","reloading","setReloading","ReloadOutlined","status","count","TeamOutlined","noteID","instantSave","nav","useNavigate","createRoom","putNote","editNoteData","team","UsergroupAddOutlined","ReaderHeader","HeaderLeft","saved","HomeFilled","opacity","SaveOutlined","usePreventTouch","allowFinger","isTouch","checkPoniter","isPrimary","pointerType","preventTouch","touch","touches","touchType","isApplePencil","isEventValid","onPointerDownCapture","onPointerMoveCapture","onTouchStartCapture","onTouchMoveCapture","Path","paper","Size","Point","Group","Color","Raster","Rectangle","Draw","otherStates","readonly","imgSrc","setActiveTool","height","canvasEl","scope","group","setGroup","Set","erased","setErased","usePaperItem","path","setPath","rect","setRect","cvs","scp","setup","settings","handleSize","project","addLayer","layers","activate","forEach","paintBackground","remove","releaseCanvas","useSize","canvasWidth","view","viewSize","multiply","scale","raster","img","Image","src","onload","addChild","position","divide","r","mergedStrokes","getStrokeList","tempGroup","othersGroup","item","paintStroke","hasStroke","selected","setSelected","hitRef","paperMode","selectedIDs","setSelectedIDs","selectedItems","IDSet","resetSelect","useCallback","handleDown","draw","startStroke","erase","select","startSelectRect","point","hitRes","hitTest","segments","tolerance","contains","t","setPointText","handleDrag","smooth","newErased","p","checkErase","concat","x","y","s1","s2","s3","moveP","segment","baseP","next","dis","subtract","abs","strokeWidth","translate","handleUp","simplify","pathData","exportJSON","toArray","closePath","moveDash","checkPathSelection","checkRectSelection","updateMutation","handler","onMouseDown","onMouseDrag","onMouseUp","mutations","angle","aniCount","dAngle","center","rotate","updateGroupStyle","transP","newSG","clone","insert","children","getUid","m","toDataURL","pointText","fillColor","useImperativeHandle","preventDefault","document","addEventListener","removeEventListener","usePinch","lastScale","lastOX","lastOY","elX","elY","memo","origin","getBoundingClientRect","oX","oY","originViewP","originProjP","viewToProject","dScale","pow","scaleView","putCenterBack","dX","dY","pr","devicePixelRatio","scaleBounds","touchHandler","displayName","stateArray","useDebugValue","activeLayer","importJSON","getCheckPoints","cache","WeakMap","cached","prevPoint","previous","times","checkPoints","eraserPath","curveBound","lastSegment","curve","strokeBounds","intersects","some","cPoint","d","getNearestPoint","getDistance","bgRect","strokeColor","alpha","blendMode","strokeJoin","strokeCap","dashOffset","dashArray","onFrame","projSize","viewW","viewH","projW","projH","minX","minY","maxX","maxY","getCenterTranslate","deltaX","deltaY","dP","move","isInside","selection","checkedP","res","trace","newColor","createContext","updateStateSet","cb","prevPageID","order","setInviewRatios","Reader","useParams","setPageRec","setNoteInfo","setStateSet","setPageOrder","useSafeState","setSaved","io","addTeamStatePage","loadNotePages","loadNote","storedNote","pdf","createFromPages","saver","useEvent","toObject","canvas","querySelector","debouncedSave","debounce","flush","savePageRec","defaultNotePage","pushReorder","emit","handleReorder","onUndo","deleted","prevOrder","duration","handleNewPage","newPage","addState","on","removeAllListeners","pushNewPage","newTeamPage","updatePageRec","newSS","operation","lastDS","getLastDS","syncStrokeTime","inviewRatios","maxRatio","getLargestKey","prevPage","createPage","renderResult","PageContainer","id","lastPageID","redo","undo","updateState","setState","pdfIndex","fullImg","setFullImg","useInView","threshold","range","entry","intersectionRatio","loadImage","once","getOnePageImage","deleteAll","toList","drawShow","maskShow","Boolean","DrawWrapper","activeTool","handleChange","arg","IoFactory","BASE_URL","query","getUserName","pageStates","pageInfos","TeamState","getPageStates","Array","from","keys","getPageInfos","pageMap","setOp","op","getPageRatio","includesPage","prevDs","newTS","entries","teamPages","record","teamPage","flatState","Team","setTeamState","setCode","setUserRec","setIO","loaded","setLoaded","setConnected","loadTeamNoteInfo","info","getTeamNoteState","teamNote","createFromTeamPages","updateSelfState","updatePages","roomInit","infoLoaded","stateLoaded","pushOperation","joined","members","showJoinMsg","leaved","showLeaveMsg","resetUser","close","Loading","LoginOutlined","LogoutOutlined"],"sourceRoot":""}